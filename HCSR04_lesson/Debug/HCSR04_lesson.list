
HCSR04_lesson.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007afc  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003b8  08007c10  08007c10  00008c10  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007fc8  08007fc8  000091d4  2**0
                  CONTENTS
  4 .ARM          00000008  08007fc8  08007fc8  00008fc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007fd0  08007fd0  000091d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007fd0  08007fd0  00008fd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007fd4  08007fd4  00008fd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08007fd8  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002dc  200001d4  080081ac  000091d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004b0  080081ac  000094b0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000091d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000100e7  00000000  00000000  000091fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f22  00000000  00000000  000192e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001078  00000000  00000000  0001c208  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cb2  00000000  00000000  0001d280  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a546  00000000  00000000  0001df32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000138c3  00000000  00000000  00038478  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00093835  00000000  00000000  0004bd3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000df570  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005304  00000000  00000000  000df5b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  000e48b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d4 	.word	0x200001d4
 800012c:	00000000 	.word	0x00000000
 8000130:	08007bf4 	.word	0x08007bf4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001d8 	.word	0x200001d8
 800014c:	08007bf4 	.word	0x08007bf4

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_frsub>:
 8000a88:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000a8c:	e002      	b.n	8000a94 <__addsf3>
 8000a8e:	bf00      	nop

08000a90 <__aeabi_fsub>:
 8000a90:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000a94 <__addsf3>:
 8000a94:	0042      	lsls	r2, r0, #1
 8000a96:	bf1f      	itttt	ne
 8000a98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a9c:	ea92 0f03 	teqne	r2, r3
 8000aa0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aa4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa8:	d06a      	beq.n	8000b80 <__addsf3+0xec>
 8000aaa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ab2:	bfc1      	itttt	gt
 8000ab4:	18d2      	addgt	r2, r2, r3
 8000ab6:	4041      	eorgt	r1, r0
 8000ab8:	4048      	eorgt	r0, r1
 8000aba:	4041      	eorgt	r1, r0
 8000abc:	bfb8      	it	lt
 8000abe:	425b      	neglt	r3, r3
 8000ac0:	2b19      	cmp	r3, #25
 8000ac2:	bf88      	it	hi
 8000ac4:	4770      	bxhi	lr
 8000ac6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000aca:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ace:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000ada:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000ade:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000ae2:	bf18      	it	ne
 8000ae4:	4249      	negne	r1, r1
 8000ae6:	ea92 0f03 	teq	r2, r3
 8000aea:	d03f      	beq.n	8000b6c <__addsf3+0xd8>
 8000aec:	f1a2 0201 	sub.w	r2, r2, #1
 8000af0:	fa41 fc03 	asr.w	ip, r1, r3
 8000af4:	eb10 000c 	adds.w	r0, r0, ip
 8000af8:	f1c3 0320 	rsb	r3, r3, #32
 8000afc:	fa01 f103 	lsl.w	r1, r1, r3
 8000b00:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b04:	d502      	bpl.n	8000b0c <__addsf3+0x78>
 8000b06:	4249      	negs	r1, r1
 8000b08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b0c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000b10:	d313      	bcc.n	8000b3a <__addsf3+0xa6>
 8000b12:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000b16:	d306      	bcc.n	8000b26 <__addsf3+0x92>
 8000b18:	0840      	lsrs	r0, r0, #1
 8000b1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b1e:	f102 0201 	add.w	r2, r2, #1
 8000b22:	2afe      	cmp	r2, #254	@ 0xfe
 8000b24:	d251      	bcs.n	8000bca <__addsf3+0x136>
 8000b26:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000b2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b2e:	bf08      	it	eq
 8000b30:	f020 0001 	biceq.w	r0, r0, #1
 8000b34:	ea40 0003 	orr.w	r0, r0, r3
 8000b38:	4770      	bx	lr
 8000b3a:	0049      	lsls	r1, r1, #1
 8000b3c:	eb40 0000 	adc.w	r0, r0, r0
 8000b40:	3a01      	subs	r2, #1
 8000b42:	bf28      	it	cs
 8000b44:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000b48:	d2ed      	bcs.n	8000b26 <__addsf3+0x92>
 8000b4a:	fab0 fc80 	clz	ip, r0
 8000b4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b52:	ebb2 020c 	subs.w	r2, r2, ip
 8000b56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b5a:	bfaa      	itet	ge
 8000b5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b60:	4252      	neglt	r2, r2
 8000b62:	4318      	orrge	r0, r3
 8000b64:	bfbc      	itt	lt
 8000b66:	40d0      	lsrlt	r0, r2
 8000b68:	4318      	orrlt	r0, r3
 8000b6a:	4770      	bx	lr
 8000b6c:	f092 0f00 	teq	r2, #0
 8000b70:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000b74:	bf06      	itte	eq
 8000b76:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000b7a:	3201      	addeq	r2, #1
 8000b7c:	3b01      	subne	r3, #1
 8000b7e:	e7b5      	b.n	8000aec <__addsf3+0x58>
 8000b80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b88:	bf18      	it	ne
 8000b8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b8e:	d021      	beq.n	8000bd4 <__addsf3+0x140>
 8000b90:	ea92 0f03 	teq	r2, r3
 8000b94:	d004      	beq.n	8000ba0 <__addsf3+0x10c>
 8000b96:	f092 0f00 	teq	r2, #0
 8000b9a:	bf08      	it	eq
 8000b9c:	4608      	moveq	r0, r1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea90 0f01 	teq	r0, r1
 8000ba4:	bf1c      	itt	ne
 8000ba6:	2000      	movne	r0, #0
 8000ba8:	4770      	bxne	lr
 8000baa:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000bae:	d104      	bne.n	8000bba <__addsf3+0x126>
 8000bb0:	0040      	lsls	r0, r0, #1
 8000bb2:	bf28      	it	cs
 8000bb4:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000bb8:	4770      	bx	lr
 8000bba:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000bbe:	bf3c      	itt	cc
 8000bc0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000bc4:	4770      	bxcc	lr
 8000bc6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000bca:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000bce:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bd2:	4770      	bx	lr
 8000bd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bd8:	bf16      	itet	ne
 8000bda:	4608      	movne	r0, r1
 8000bdc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000be0:	4601      	movne	r1, r0
 8000be2:	0242      	lsls	r2, r0, #9
 8000be4:	bf06      	itte	eq
 8000be6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bea:	ea90 0f01 	teqeq	r0, r1
 8000bee:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000bf2:	4770      	bx	lr

08000bf4 <__aeabi_ui2f>:
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e004      	b.n	8000c04 <__aeabi_i2f+0x8>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_i2f>:
 8000bfc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000c00:	bf48      	it	mi
 8000c02:	4240      	negmi	r0, r0
 8000c04:	ea5f 0c00 	movs.w	ip, r0
 8000c08:	bf08      	it	eq
 8000c0a:	4770      	bxeq	lr
 8000c0c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000c10:	4601      	mov	r1, r0
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	e01c      	b.n	8000c52 <__aeabi_l2f+0x2a>

08000c18 <__aeabi_ul2f>:
 8000c18:	ea50 0201 	orrs.w	r2, r0, r1
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f04f 0300 	mov.w	r3, #0
 8000c24:	e00a      	b.n	8000c3c <__aeabi_l2f+0x14>
 8000c26:	bf00      	nop

08000c28 <__aeabi_l2f>:
 8000c28:	ea50 0201 	orrs.w	r2, r0, r1
 8000c2c:	bf08      	it	eq
 8000c2e:	4770      	bxeq	lr
 8000c30:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000c34:	d502      	bpl.n	8000c3c <__aeabi_l2f+0x14>
 8000c36:	4240      	negs	r0, r0
 8000c38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3c:	ea5f 0c01 	movs.w	ip, r1
 8000c40:	bf02      	ittt	eq
 8000c42:	4684      	moveq	ip, r0
 8000c44:	4601      	moveq	r1, r0
 8000c46:	2000      	moveq	r0, #0
 8000c48:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000c4c:	bf08      	it	eq
 8000c4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000c52:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000c56:	fabc f28c 	clz	r2, ip
 8000c5a:	3a08      	subs	r2, #8
 8000c5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c60:	db10      	blt.n	8000c84 <__aeabi_l2f+0x5c>
 8000c62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c66:	4463      	add	r3, ip
 8000c68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6c:	f1c2 0220 	rsb	r2, r2, #32
 8000c70:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000c74:	fa20 f202 	lsr.w	r2, r0, r2
 8000c78:	eb43 0002 	adc.w	r0, r3, r2
 8000c7c:	bf08      	it	eq
 8000c7e:	f020 0001 	biceq.w	r0, r0, #1
 8000c82:	4770      	bx	lr
 8000c84:	f102 0220 	add.w	r2, r2, #32
 8000c88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c8c:	f1c2 0220 	rsb	r2, r2, #32
 8000c90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c94:	fa21 f202 	lsr.w	r2, r1, r2
 8000c98:	eb43 0002 	adc.w	r0, r3, r2
 8000c9c:	bf08      	it	eq
 8000c9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ca2:	4770      	bx	lr

08000ca4 <__aeabi_fmul>:
 8000ca4:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ca8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cac:	bf1e      	ittt	ne
 8000cae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cb2:	ea92 0f0c 	teqne	r2, ip
 8000cb6:	ea93 0f0c 	teqne	r3, ip
 8000cba:	d06f      	beq.n	8000d9c <__aeabi_fmul+0xf8>
 8000cbc:	441a      	add	r2, r3
 8000cbe:	ea80 0c01 	eor.w	ip, r0, r1
 8000cc2:	0240      	lsls	r0, r0, #9
 8000cc4:	bf18      	it	ne
 8000cc6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cca:	d01e      	beq.n	8000d0a <__aeabi_fmul+0x66>
 8000ccc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000cd0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cd4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cd8:	fba0 3101 	umull	r3, r1, r0, r1
 8000cdc:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000ce0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000ce4:	bf3e      	ittt	cc
 8000ce6:	0049      	lslcc	r1, r1, #1
 8000ce8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cec:	005b      	lslcc	r3, r3, #1
 8000cee:	ea40 0001 	orr.w	r0, r0, r1
 8000cf2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000cf6:	2afd      	cmp	r2, #253	@ 0xfd
 8000cf8:	d81d      	bhi.n	8000d36 <__aeabi_fmul+0x92>
 8000cfa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000cfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d02:	bf08      	it	eq
 8000d04:	f020 0001 	biceq.w	r0, r0, #1
 8000d08:	4770      	bx	lr
 8000d0a:	f090 0f00 	teq	r0, #0
 8000d0e:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000d12:	bf08      	it	eq
 8000d14:	0249      	lsleq	r1, r1, #9
 8000d16:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d1a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d1e:	3a7f      	subs	r2, #127	@ 0x7f
 8000d20:	bfc2      	ittt	gt
 8000d22:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000d26:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d2a:	4770      	bxgt	lr
 8000d2c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	3a01      	subs	r2, #1
 8000d36:	dc5d      	bgt.n	8000df4 <__aeabi_fmul+0x150>
 8000d38:	f112 0f19 	cmn.w	r2, #25
 8000d3c:	bfdc      	itt	le
 8000d3e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000d42:	4770      	bxle	lr
 8000d44:	f1c2 0200 	rsb	r2, r2, #0
 8000d48:	0041      	lsls	r1, r0, #1
 8000d4a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d4e:	f1c2 0220 	rsb	r2, r2, #32
 8000d52:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d56:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d5a:	f140 0000 	adc.w	r0, r0, #0
 8000d5e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d62:	bf08      	it	eq
 8000d64:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d68:	4770      	bx	lr
 8000d6a:	f092 0f00 	teq	r2, #0
 8000d6e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000d72:	bf02      	ittt	eq
 8000d74:	0040      	lsleq	r0, r0, #1
 8000d76:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000d7a:	3a01      	subeq	r2, #1
 8000d7c:	d0f9      	beq.n	8000d72 <__aeabi_fmul+0xce>
 8000d7e:	ea40 000c 	orr.w	r0, r0, ip
 8000d82:	f093 0f00 	teq	r3, #0
 8000d86:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000d8a:	bf02      	ittt	eq
 8000d8c:	0049      	lsleq	r1, r1, #1
 8000d8e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000d92:	3b01      	subeq	r3, #1
 8000d94:	d0f9      	beq.n	8000d8a <__aeabi_fmul+0xe6>
 8000d96:	ea41 010c 	orr.w	r1, r1, ip
 8000d9a:	e78f      	b.n	8000cbc <__aeabi_fmul+0x18>
 8000d9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000da0:	ea92 0f0c 	teq	r2, ip
 8000da4:	bf18      	it	ne
 8000da6:	ea93 0f0c 	teqne	r3, ip
 8000daa:	d00a      	beq.n	8000dc2 <__aeabi_fmul+0x11e>
 8000dac:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000db0:	bf18      	it	ne
 8000db2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000db6:	d1d8      	bne.n	8000d6a <__aeabi_fmul+0xc6>
 8000db8:	ea80 0001 	eor.w	r0, r0, r1
 8000dbc:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000dc0:	4770      	bx	lr
 8000dc2:	f090 0f00 	teq	r0, #0
 8000dc6:	bf17      	itett	ne
 8000dc8:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000dcc:	4608      	moveq	r0, r1
 8000dce:	f091 0f00 	teqne	r1, #0
 8000dd2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000dd6:	d014      	beq.n	8000e02 <__aeabi_fmul+0x15e>
 8000dd8:	ea92 0f0c 	teq	r2, ip
 8000ddc:	d101      	bne.n	8000de2 <__aeabi_fmul+0x13e>
 8000dde:	0242      	lsls	r2, r0, #9
 8000de0:	d10f      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000de2:	ea93 0f0c 	teq	r3, ip
 8000de6:	d103      	bne.n	8000df0 <__aeabi_fmul+0x14c>
 8000de8:	024b      	lsls	r3, r1, #9
 8000dea:	bf18      	it	ne
 8000dec:	4608      	movne	r0, r1
 8000dee:	d108      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000df0:	ea80 0001 	eor.w	r0, r0, r1
 8000df4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000df8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e00:	4770      	bx	lr
 8000e02:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e06:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000e0a:	4770      	bx	lr

08000e0c <__aeabi_fdiv>:
 8000e0c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000e10:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e14:	bf1e      	ittt	ne
 8000e16:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e1a:	ea92 0f0c 	teqne	r2, ip
 8000e1e:	ea93 0f0c 	teqne	r3, ip
 8000e22:	d069      	beq.n	8000ef8 <__aeabi_fdiv+0xec>
 8000e24:	eba2 0203 	sub.w	r2, r2, r3
 8000e28:	ea80 0c01 	eor.w	ip, r0, r1
 8000e2c:	0249      	lsls	r1, r1, #9
 8000e2e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e32:	d037      	beq.n	8000ea4 <__aeabi_fdiv+0x98>
 8000e34:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000e38:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e3c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e40:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000e44:	428b      	cmp	r3, r1
 8000e46:	bf38      	it	cc
 8000e48:	005b      	lslcc	r3, r3, #1
 8000e4a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000e4e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000e52:	428b      	cmp	r3, r1
 8000e54:	bf24      	itt	cs
 8000e56:	1a5b      	subcs	r3, r3, r1
 8000e58:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e5c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e60:	bf24      	itt	cs
 8000e62:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e66:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e6a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e6e:	bf24      	itt	cs
 8000e70:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e78:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e7c:	bf24      	itt	cs
 8000e7e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e82:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e86:	011b      	lsls	r3, r3, #4
 8000e88:	bf18      	it	ne
 8000e8a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e8e:	d1e0      	bne.n	8000e52 <__aeabi_fdiv+0x46>
 8000e90:	2afd      	cmp	r2, #253	@ 0xfd
 8000e92:	f63f af50 	bhi.w	8000d36 <__aeabi_fmul+0x92>
 8000e96:	428b      	cmp	r3, r1
 8000e98:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e9c:	bf08      	it	eq
 8000e9e:	f020 0001 	biceq.w	r0, r0, #1
 8000ea2:	4770      	bx	lr
 8000ea4:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000ea8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eac:	327f      	adds	r2, #127	@ 0x7f
 8000eae:	bfc2      	ittt	gt
 8000eb0:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000eb4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000eb8:	4770      	bxgt	lr
 8000eba:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ebe:	f04f 0300 	mov.w	r3, #0
 8000ec2:	3a01      	subs	r2, #1
 8000ec4:	e737      	b.n	8000d36 <__aeabi_fmul+0x92>
 8000ec6:	f092 0f00 	teq	r2, #0
 8000eca:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000ece:	bf02      	ittt	eq
 8000ed0:	0040      	lsleq	r0, r0, #1
 8000ed2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000ed6:	3a01      	subeq	r2, #1
 8000ed8:	d0f9      	beq.n	8000ece <__aeabi_fdiv+0xc2>
 8000eda:	ea40 000c 	orr.w	r0, r0, ip
 8000ede:	f093 0f00 	teq	r3, #0
 8000ee2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ee6:	bf02      	ittt	eq
 8000ee8:	0049      	lsleq	r1, r1, #1
 8000eea:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000eee:	3b01      	subeq	r3, #1
 8000ef0:	d0f9      	beq.n	8000ee6 <__aeabi_fdiv+0xda>
 8000ef2:	ea41 010c 	orr.w	r1, r1, ip
 8000ef6:	e795      	b.n	8000e24 <__aeabi_fdiv+0x18>
 8000ef8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000efc:	ea92 0f0c 	teq	r2, ip
 8000f00:	d108      	bne.n	8000f14 <__aeabi_fdiv+0x108>
 8000f02:	0242      	lsls	r2, r0, #9
 8000f04:	f47f af7d 	bne.w	8000e02 <__aeabi_fmul+0x15e>
 8000f08:	ea93 0f0c 	teq	r3, ip
 8000f0c:	f47f af70 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f10:	4608      	mov	r0, r1
 8000f12:	e776      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f14:	ea93 0f0c 	teq	r3, ip
 8000f18:	d104      	bne.n	8000f24 <__aeabi_fdiv+0x118>
 8000f1a:	024b      	lsls	r3, r1, #9
 8000f1c:	f43f af4c 	beq.w	8000db8 <__aeabi_fmul+0x114>
 8000f20:	4608      	mov	r0, r1
 8000f22:	e76e      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f24:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000f28:	bf18      	it	ne
 8000f2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000f2e:	d1ca      	bne.n	8000ec6 <__aeabi_fdiv+0xba>
 8000f30:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000f34:	f47f af5c 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f38:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000f3c:	f47f af3c 	bne.w	8000db8 <__aeabi_fmul+0x114>
 8000f40:	e75f      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f42:	bf00      	nop

08000f44 <__aeabi_f2uiz>:
 8000f44:	0042      	lsls	r2, r0, #1
 8000f46:	d20e      	bcs.n	8000f66 <__aeabi_f2uiz+0x22>
 8000f48:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000f4c:	d30b      	bcc.n	8000f66 <__aeabi_f2uiz+0x22>
 8000f4e:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000f52:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f56:	d409      	bmi.n	8000f6c <__aeabi_f2uiz+0x28>
 8000f58:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f5c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000f60:	fa23 f002 	lsr.w	r0, r3, r2
 8000f64:	4770      	bx	lr
 8000f66:	f04f 0000 	mov.w	r0, #0
 8000f6a:	4770      	bx	lr
 8000f6c:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000f70:	d101      	bne.n	8000f76 <__aeabi_f2uiz+0x32>
 8000f72:	0242      	lsls	r2, r0, #9
 8000f74:	d102      	bne.n	8000f7c <__aeabi_f2uiz+0x38>
 8000f76:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000f7a:	4770      	bx	lr
 8000f7c:	f04f 0000 	mov.w	r0, #0
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop

08000f84 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b084      	sub	sp, #16
 8000f88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f8a:	1d3b      	adds	r3, r7, #4
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	601a      	str	r2, [r3, #0]
 8000f90:	605a      	str	r2, [r3, #4]
 8000f92:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000f94:	4b18      	ldr	r3, [pc, #96]	@ (8000ff8 <MX_ADC1_Init+0x74>)
 8000f96:	4a19      	ldr	r2, [pc, #100]	@ (8000ffc <MX_ADC1_Init+0x78>)
 8000f98:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000f9a:	4b17      	ldr	r3, [pc, #92]	@ (8000ff8 <MX_ADC1_Init+0x74>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000fa0:	4b15      	ldr	r3, [pc, #84]	@ (8000ff8 <MX_ADC1_Init+0x74>)
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000fa6:	4b14      	ldr	r3, [pc, #80]	@ (8000ff8 <MX_ADC1_Init+0x74>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000fac:	4b12      	ldr	r3, [pc, #72]	@ (8000ff8 <MX_ADC1_Init+0x74>)
 8000fae:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8000fb2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fb4:	4b10      	ldr	r3, [pc, #64]	@ (8000ff8 <MX_ADC1_Init+0x74>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000fba:	4b0f      	ldr	r3, [pc, #60]	@ (8000ff8 <MX_ADC1_Init+0x74>)
 8000fbc:	2201      	movs	r2, #1
 8000fbe:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000fc0:	480d      	ldr	r0, [pc, #52]	@ (8000ff8 <MX_ADC1_Init+0x74>)
 8000fc2:	f000 fff9 	bl	8001fb8 <HAL_ADC_Init>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d001      	beq.n	8000fd0 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000fcc:	f000 fa3c 	bl	8001448 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000fd0:	2307      	movs	r3, #7
 8000fd2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8000fd8:	2307      	movs	r3, #7
 8000fda:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fdc:	1d3b      	adds	r3, r7, #4
 8000fde:	4619      	mov	r1, r3
 8000fe0:	4805      	ldr	r0, [pc, #20]	@ (8000ff8 <MX_ADC1_Init+0x74>)
 8000fe2:	f001 f97b 	bl	80022dc <HAL_ADC_ConfigChannel>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d001      	beq.n	8000ff0 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000fec:	f000 fa2c 	bl	8001448 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ff0:	bf00      	nop
 8000ff2:	3710      	adds	r7, #16
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	200001f0 	.word	0x200001f0
 8000ffc:	40012400 	.word	0x40012400

08001000 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b088      	sub	sp, #32
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001008:	f107 0310 	add.w	r3, r7, #16
 800100c:	2200      	movs	r2, #0
 800100e:	601a      	str	r2, [r3, #0]
 8001010:	605a      	str	r2, [r3, #4]
 8001012:	609a      	str	r2, [r3, #8]
 8001014:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	4a14      	ldr	r2, [pc, #80]	@ (800106c <HAL_ADC_MspInit+0x6c>)
 800101c:	4293      	cmp	r3, r2
 800101e:	d121      	bne.n	8001064 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001020:	4b13      	ldr	r3, [pc, #76]	@ (8001070 <HAL_ADC_MspInit+0x70>)
 8001022:	699b      	ldr	r3, [r3, #24]
 8001024:	4a12      	ldr	r2, [pc, #72]	@ (8001070 <HAL_ADC_MspInit+0x70>)
 8001026:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800102a:	6193      	str	r3, [r2, #24]
 800102c:	4b10      	ldr	r3, [pc, #64]	@ (8001070 <HAL_ADC_MspInit+0x70>)
 800102e:	699b      	ldr	r3, [r3, #24]
 8001030:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001034:	60fb      	str	r3, [r7, #12]
 8001036:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001038:	4b0d      	ldr	r3, [pc, #52]	@ (8001070 <HAL_ADC_MspInit+0x70>)
 800103a:	699b      	ldr	r3, [r3, #24]
 800103c:	4a0c      	ldr	r2, [pc, #48]	@ (8001070 <HAL_ADC_MspInit+0x70>)
 800103e:	f043 0304 	orr.w	r3, r3, #4
 8001042:	6193      	str	r3, [r2, #24]
 8001044:	4b0a      	ldr	r3, [pc, #40]	@ (8001070 <HAL_ADC_MspInit+0x70>)
 8001046:	699b      	ldr	r3, [r3, #24]
 8001048:	f003 0304 	and.w	r3, r3, #4
 800104c:	60bb      	str	r3, [r7, #8]
 800104e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001050:	2380      	movs	r3, #128	@ 0x80
 8001052:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001054:	2303      	movs	r3, #3
 8001056:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001058:	f107 0310 	add.w	r3, r7, #16
 800105c:	4619      	mov	r1, r3
 800105e:	4805      	ldr	r0, [pc, #20]	@ (8001074 <HAL_ADC_MspInit+0x74>)
 8001060:	f001 fc8c 	bl	800297c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001064:	bf00      	nop
 8001066:	3720      	adds	r7, #32
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}
 800106c:	40012400 	.word	0x40012400
 8001070:	40021000 	.word	0x40021000
 8001074:	40010800 	.word	0x40010800

08001078 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b088      	sub	sp, #32
 800107c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800107e:	f107 0310 	add.w	r3, r7, #16
 8001082:	2200      	movs	r2, #0
 8001084:	601a      	str	r2, [r3, #0]
 8001086:	605a      	str	r2, [r3, #4]
 8001088:	609a      	str	r2, [r3, #8]
 800108a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800108c:	4b3a      	ldr	r3, [pc, #232]	@ (8001178 <MX_GPIO_Init+0x100>)
 800108e:	699b      	ldr	r3, [r3, #24]
 8001090:	4a39      	ldr	r2, [pc, #228]	@ (8001178 <MX_GPIO_Init+0x100>)
 8001092:	f043 0310 	orr.w	r3, r3, #16
 8001096:	6193      	str	r3, [r2, #24]
 8001098:	4b37      	ldr	r3, [pc, #220]	@ (8001178 <MX_GPIO_Init+0x100>)
 800109a:	699b      	ldr	r3, [r3, #24]
 800109c:	f003 0310 	and.w	r3, r3, #16
 80010a0:	60fb      	str	r3, [r7, #12]
 80010a2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010a4:	4b34      	ldr	r3, [pc, #208]	@ (8001178 <MX_GPIO_Init+0x100>)
 80010a6:	699b      	ldr	r3, [r3, #24]
 80010a8:	4a33      	ldr	r2, [pc, #204]	@ (8001178 <MX_GPIO_Init+0x100>)
 80010aa:	f043 0304 	orr.w	r3, r3, #4
 80010ae:	6193      	str	r3, [r2, #24]
 80010b0:	4b31      	ldr	r3, [pc, #196]	@ (8001178 <MX_GPIO_Init+0x100>)
 80010b2:	699b      	ldr	r3, [r3, #24]
 80010b4:	f003 0304 	and.w	r3, r3, #4
 80010b8:	60bb      	str	r3, [r7, #8]
 80010ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010bc:	4b2e      	ldr	r3, [pc, #184]	@ (8001178 <MX_GPIO_Init+0x100>)
 80010be:	699b      	ldr	r3, [r3, #24]
 80010c0:	4a2d      	ldr	r2, [pc, #180]	@ (8001178 <MX_GPIO_Init+0x100>)
 80010c2:	f043 0308 	orr.w	r3, r3, #8
 80010c6:	6193      	str	r3, [r2, #24]
 80010c8:	4b2b      	ldr	r3, [pc, #172]	@ (8001178 <MX_GPIO_Init+0x100>)
 80010ca:	699b      	ldr	r3, [r3, #24]
 80010cc:	f003 0308 	and.w	r3, r3, #8
 80010d0:	607b      	str	r3, [r7, #4]
 80010d2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SEG_C_Pin|SEG_E_Pin|SEG_D_Pin, GPIO_PIN_RESET);
 80010d4:	2200      	movs	r2, #0
 80010d6:	210b      	movs	r1, #11
 80010d8:	4828      	ldr	r0, [pc, #160]	@ (800117c <MX_GPIO_Init+0x104>)
 80010da:	f001 fdd3 	bl	8002c84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, GPIO_PIN_SET);
 80010de:	2201      	movs	r2, #1
 80010e0:	2104      	movs	r1, #4
 80010e2:	4826      	ldr	r0, [pc, #152]	@ (800117c <MX_GPIO_Init+0x104>)
 80010e4:	f001 fdce 	bl	8002c84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, GPIO_PIN_SET);
 80010e8:	2201      	movs	r2, #1
 80010ea:	2101      	movs	r1, #1
 80010ec:	4824      	ldr	r0, [pc, #144]	@ (8001180 <MX_GPIO_Init+0x108>)
 80010ee:	f001 fdc9 	bl	8002c84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG_B_Pin|SEG_G_Pin|SEG_F_Pin|SEG_A_Pin, GPIO_PIN_RESET);
 80010f2:	2200      	movs	r2, #0
 80010f4:	f24e 0102 	movw	r1, #57346	@ 0xe002
 80010f8:	4822      	ldr	r0, [pc, #136]	@ (8001184 <MX_GPIO_Init+0x10c>)
 80010fa:	f001 fdc3 	bl	8002c84 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = SEG_C_Pin|SEG_E_Pin|SEG_D_Pin;
 80010fe:	230b      	movs	r3, #11
 8001100:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001102:	2301      	movs	r3, #1
 8001104:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001106:	2300      	movs	r3, #0
 8001108:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800110a:	2302      	movs	r3, #2
 800110c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800110e:	f107 0310 	add.w	r3, r7, #16
 8001112:	4619      	mov	r1, r3
 8001114:	4819      	ldr	r0, [pc, #100]	@ (800117c <MX_GPIO_Init+0x104>)
 8001116:	f001 fc31 	bl	800297c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SEG_1_Pin;
 800111a:	2304      	movs	r3, #4
 800111c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800111e:	2311      	movs	r3, #17
 8001120:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001122:	2300      	movs	r3, #0
 8001124:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001126:	2302      	movs	r3, #2
 8001128:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SEG_1_GPIO_Port, &GPIO_InitStruct);
 800112a:	f107 0310 	add.w	r3, r7, #16
 800112e:	4619      	mov	r1, r3
 8001130:	4812      	ldr	r0, [pc, #72]	@ (800117c <MX_GPIO_Init+0x104>)
 8001132:	f001 fc23 	bl	800297c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SEG_2_Pin;
 8001136:	2301      	movs	r3, #1
 8001138:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800113a:	2311      	movs	r3, #17
 800113c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113e:	2300      	movs	r3, #0
 8001140:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001142:	2302      	movs	r3, #2
 8001144:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SEG_2_GPIO_Port, &GPIO_InitStruct);
 8001146:	f107 0310 	add.w	r3, r7, #16
 800114a:	4619      	mov	r1, r3
 800114c:	480c      	ldr	r0, [pc, #48]	@ (8001180 <MX_GPIO_Init+0x108>)
 800114e:	f001 fc15 	bl	800297c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = SEG_B_Pin|SEG_G_Pin|SEG_F_Pin|SEG_A_Pin;
 8001152:	f24e 0302 	movw	r3, #57346	@ 0xe002
 8001156:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001158:	2301      	movs	r3, #1
 800115a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115c:	2300      	movs	r3, #0
 800115e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001160:	2302      	movs	r3, #2
 8001162:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001164:	f107 0310 	add.w	r3, r7, #16
 8001168:	4619      	mov	r1, r3
 800116a:	4806      	ldr	r0, [pc, #24]	@ (8001184 <MX_GPIO_Init+0x10c>)
 800116c:	f001 fc06 	bl	800297c <HAL_GPIO_Init>

}
 8001170:	bf00      	nop
 8001172:	3720      	adds	r7, #32
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}
 8001178:	40021000 	.word	0x40021000
 800117c:	40011000 	.word	0x40011000
 8001180:	40010800 	.word	0x40010800
 8001184:	40010c00 	.word	0x40010c00

08001188 <calc_sound_speed>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
static float calc_sound_speed(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b084      	sub	sp, #16
 800118c:	af00      	add	r7, sp, #0
	uint32_t adc_value = HAL_ADC_GetValue(&hadc1);
 800118e:	4812      	ldr	r0, [pc, #72]	@ (80011d8 <calc_sound_speed+0x50>)
 8001190:	f001 f898 	bl	80022c4 <HAL_ADC_GetValue>
 8001194:	60f8      	str	r0, [r7, #12]
	float temp = adc_value * 330.0f / 4096.0f;
 8001196:	68f8      	ldr	r0, [r7, #12]
 8001198:	f7ff fd2c 	bl	8000bf4 <__aeabi_ui2f>
 800119c:	4603      	mov	r3, r0
 800119e:	490f      	ldr	r1, [pc, #60]	@ (80011dc <calc_sound_speed+0x54>)
 80011a0:	4618      	mov	r0, r3
 80011a2:	f7ff fd7f 	bl	8000ca4 <__aeabi_fmul>
 80011a6:	4603      	mov	r3, r0
 80011a8:	f04f 418b 	mov.w	r1, #1166016512	@ 0x45800000
 80011ac:	4618      	mov	r0, r3
 80011ae:	f7ff fe2d 	bl	8000e0c <__aeabi_fdiv>
 80011b2:	4603      	mov	r3, r0
 80011b4:	60bb      	str	r3, [r7, #8]
	float speed = 331.8f + 0.6f * temp;
 80011b6:	490a      	ldr	r1, [pc, #40]	@ (80011e0 <calc_sound_speed+0x58>)
 80011b8:	68b8      	ldr	r0, [r7, #8]
 80011ba:	f7ff fd73 	bl	8000ca4 <__aeabi_fmul>
 80011be:	4603      	mov	r3, r0
 80011c0:	4908      	ldr	r1, [pc, #32]	@ (80011e4 <calc_sound_speed+0x5c>)
 80011c2:	4618      	mov	r0, r3
 80011c4:	f7ff fc66 	bl	8000a94 <__addsf3>
 80011c8:	4603      	mov	r3, r0
 80011ca:	607b      	str	r3, [r7, #4]
	return speed;
 80011cc:	687b      	ldr	r3, [r7, #4]
}
 80011ce:	4618      	mov	r0, r3
 80011d0:	3710      	adds	r7, #16
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	200001f0 	.word	0x200001f0
 80011dc:	43a50000 	.word	0x43a50000
 80011e0:	3f19999a 	.word	0x3f19999a
 80011e4:	43a5e666 	.word	0x43a5e666

080011e8 <control_rgb_diode>:

static void control_rgb_diode(uint32_t distance)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b085      	sub	sp, #20
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
	uint32_t red_light = 600 - distance * 30;
 80011f0:	687a      	ldr	r2, [r7, #4]
 80011f2:	4613      	mov	r3, r2
 80011f4:	011b      	lsls	r3, r3, #4
 80011f6:	1a9b      	subs	r3, r3, r2
 80011f8:	005b      	lsls	r3, r3, #1
 80011fa:	f5c3 7316 	rsb	r3, r3, #600	@ 0x258
 80011fe:	60fb      	str	r3, [r7, #12]
	uint32_t green_light = distance * 30;
 8001200:	687a      	ldr	r2, [r7, #4]
 8001202:	4613      	mov	r3, r2
 8001204:	011b      	lsls	r3, r3, #4
 8001206:	1a9b      	subs	r3, r3, r2
 8001208:	005b      	lsls	r3, r3, #1
 800120a:	60bb      	str	r3, [r7, #8]

	if (red_light < 0)
		red_light = 0;

	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, red_light);
 800120c:	4b06      	ldr	r3, [pc, #24]	@ (8001228 <control_rgb_diode+0x40>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	68fa      	ldr	r2, [r7, #12]
 8001212:	635a      	str	r2, [r3, #52]	@ 0x34
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, green_light);
 8001214:	4b04      	ldr	r3, [pc, #16]	@ (8001228 <control_rgb_diode+0x40>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	68ba      	ldr	r2, [r7, #8]
 800121a:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800121c:	bf00      	nop
 800121e:	3714      	adds	r7, #20
 8001220:	46bd      	mov	sp, r7
 8001222:	bc80      	pop	{r7}
 8001224:	4770      	bx	lr
 8001226:	bf00      	nop
 8001228:	200002d0 	.word	0x200002d0

0800122c <__io_putchar>:

int __io_putchar(int ch)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b082      	sub	sp, #8
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
	if (ch == '\n')
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	2b0a      	cmp	r3, #10
 8001238:	d102      	bne.n	8001240 <__io_putchar+0x14>
		__io_putchar('\r');
 800123a:	200d      	movs	r0, #13
 800123c:	f7ff fff6 	bl	800122c <__io_putchar>

	HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8001240:	1d39      	adds	r1, r7, #4
 8001242:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001246:	2201      	movs	r2, #1
 8001248:	4803      	ldr	r0, [pc, #12]	@ (8001258 <__io_putchar+0x2c>)
 800124a:	f003 fe73 	bl	8004f34 <HAL_UART_Transmit>
	return 1;
 800124e:	2301      	movs	r3, #1
}
 8001250:	4618      	mov	r0, r3
 8001252:	3708      	adds	r7, #8
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}
 8001258:	20000318 	.word	0x20000318

0800125c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800125c:	b590      	push	{r4, r7, lr}
 800125e:	b087      	sub	sp, #28
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
	if (htim == &htim2) {
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	4a1e      	ldr	r2, [pc, #120]	@ (80012e0 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001268:	4293      	cmp	r3, r2
 800126a:	d102      	bne.n	8001272 <HAL_TIM_PeriodElapsedCallback+0x16>
		SEG7_Update();
 800126c:	f000 f9be 	bl	80015ec <SEG7_Update>

		control_rgb_diode(distance);

		SEG7_Show(distance / 10); // send in centimeters
	}
}
 8001270:	e031      	b.n	80012d6 <HAL_TIM_PeriodElapsedCallback+0x7a>
	} else if (htim == &htim3) {
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	4a1b      	ldr	r2, [pc, #108]	@ (80012e4 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8001276:	4293      	cmp	r3, r2
 8001278:	d12d      	bne.n	80012d6 <HAL_TIM_PeriodElapsedCallback+0x7a>
		uint32_t start = HAL_TIM_ReadCapturedValue(&htim3, TIM_CHANNEL_1);
 800127a:	2100      	movs	r1, #0
 800127c:	4819      	ldr	r0, [pc, #100]	@ (80012e4 <HAL_TIM_PeriodElapsedCallback+0x88>)
 800127e:	f003 f973 	bl	8004568 <HAL_TIM_ReadCapturedValue>
 8001282:	6178      	str	r0, [r7, #20]
		uint32_t stop = HAL_TIM_ReadCapturedValue(&htim3, TIM_CHANNEL_2);
 8001284:	2104      	movs	r1, #4
 8001286:	4817      	ldr	r0, [pc, #92]	@ (80012e4 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8001288:	f003 f96e 	bl	8004568 <HAL_TIM_ReadCapturedValue>
 800128c:	6138      	str	r0, [r7, #16]
		uint32_t distance = (stop - start) * calc_sound_speed() / 20000.0f;
 800128e:	693a      	ldr	r2, [r7, #16]
 8001290:	697b      	ldr	r3, [r7, #20]
 8001292:	1ad3      	subs	r3, r2, r3
 8001294:	4618      	mov	r0, r3
 8001296:	f7ff fcad 	bl	8000bf4 <__aeabi_ui2f>
 800129a:	4604      	mov	r4, r0
 800129c:	f7ff ff74 	bl	8001188 <calc_sound_speed>
 80012a0:	4603      	mov	r3, r0
 80012a2:	4619      	mov	r1, r3
 80012a4:	4620      	mov	r0, r4
 80012a6:	f7ff fcfd 	bl	8000ca4 <__aeabi_fmul>
 80012aa:	4603      	mov	r3, r0
 80012ac:	490e      	ldr	r1, [pc, #56]	@ (80012e8 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80012ae:	4618      	mov	r0, r3
 80012b0:	f7ff fdac 	bl	8000e0c <__aeabi_fdiv>
 80012b4:	4603      	mov	r3, r0
 80012b6:	4618      	mov	r0, r3
 80012b8:	f7ff fe44 	bl	8000f44 <__aeabi_f2uiz>
 80012bc:	4603      	mov	r3, r0
 80012be:	60fb      	str	r3, [r7, #12]
		control_rgb_diode(distance);
 80012c0:	68f8      	ldr	r0, [r7, #12]
 80012c2:	f7ff ff91 	bl	80011e8 <control_rgb_diode>
		SEG7_Show(distance / 10); // send in centimeters
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	4a08      	ldr	r2, [pc, #32]	@ (80012ec <HAL_TIM_PeriodElapsedCallback+0x90>)
 80012ca:	fba2 2303 	umull	r2, r3, r2, r3
 80012ce:	08db      	lsrs	r3, r3, #3
 80012d0:	4618      	mov	r0, r3
 80012d2:	f000 f97d 	bl	80015d0 <SEG7_Show>
}
 80012d6:	bf00      	nop
 80012d8:	371c      	adds	r7, #28
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd90      	pop	{r4, r7, pc}
 80012de:	bf00      	nop
 80012e0:	20000240 	.word	0x20000240
 80012e4:	20000288 	.word	0x20000288
 80012e8:	469c4000 	.word	0x469c4000
 80012ec:	cccccccd 	.word	0xcccccccd

080012f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012f4:	f000 fdfe 	bl	8001ef4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012f8:	f000 f84c 	bl	8001394 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012fc:	f7ff febc 	bl	8001078 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001300:	f000 fd5e 	bl	8001dc0 <MX_USART2_UART_Init>
  MX_RTC_Init();
 8001304:	f000 f8a6 	bl	8001454 <MX_RTC_Init>
  MX_TIM2_Init();
 8001308:	f000 fb08 	bl	800191c <MX_TIM2_Init>
  MX_TIM3_Init();
 800130c:	f000 fb52 	bl	80019b4 <MX_TIM3_Init>
  MX_ADC1_Init();
 8001310:	f7ff fe38 	bl	8000f84 <MX_ADC1_Init>
  MX_TIM4_Init();
 8001314:	f000 fbf8 	bl	8001b08 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8001318:	481a      	ldr	r0, [pc, #104]	@ (8001384 <main+0x94>)
 800131a:	f002 fbab 	bl	8003a74 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 800131e:	481a      	ldr	r0, [pc, #104]	@ (8001388 <main+0x98>)
 8001320:	f002 fba8 	bl	8003a74 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim4);
 8001324:	4819      	ldr	r0, [pc, #100]	@ (800138c <main+0x9c>)
 8001326:	f002 fba5 	bl	8003a74 <HAL_TIM_Base_Start_IT>
  HAL_TIM_IC_Start(&htim3, TIM_CHANNEL_1);
 800132a:	2100      	movs	r1, #0
 800132c:	4816      	ldr	r0, [pc, #88]	@ (8001388 <main+0x98>)
 800132e:	f002 fd45 	bl	8003dbc <HAL_TIM_IC_Start>
  HAL_TIM_IC_Start(&htim3, TIM_CHANNEL_2);
 8001332:	2104      	movs	r1, #4
 8001334:	4814      	ldr	r0, [pc, #80]	@ (8001388 <main+0x98>)
 8001336:	f002 fd41 	bl	8003dbc <HAL_TIM_IC_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 800133a:	2108      	movs	r1, #8
 800133c:	4812      	ldr	r0, [pc, #72]	@ (8001388 <main+0x98>)
 800133e:	f002 fc43 	bl	8003bc8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8001342:	2100      	movs	r1, #0
 8001344:	4811      	ldr	r0, [pc, #68]	@ (800138c <main+0x9c>)
 8001346:	f002 fc3f 	bl	8003bc8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 800134a:	2104      	movs	r1, #4
 800134c:	480f      	ldr	r0, [pc, #60]	@ (800138c <main+0x9c>)
 800134e:	f002 fc3b 	bl	8003bc8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8001352:	2108      	movs	r1, #8
 8001354:	480d      	ldr	r0, [pc, #52]	@ (800138c <main+0x9c>)
 8001356:	f002 fc37 	bl	8003bc8 <HAL_TIM_PWM_Start>

  HAL_ADCEx_Calibration_Start(&hadc1);
 800135a:	480d      	ldr	r0, [pc, #52]	@ (8001390 <main+0xa0>)
 800135c:	f001 f952 	bl	8002604 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start(&hadc1);
 8001360:	480b      	ldr	r0, [pc, #44]	@ (8001390 <main+0xa0>)
 8001362:	f000 ff01 	bl	8002168 <HAL_ADC_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 0);
 8001366:	4b09      	ldr	r3, [pc, #36]	@ (800138c <main+0x9c>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	2200      	movs	r2, #0
 800136c:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, 0);
 800136e:	4b07      	ldr	r3, [pc, #28]	@ (800138c <main+0x9c>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	2200      	movs	r2, #0
 8001374:	639a      	str	r2, [r3, #56]	@ 0x38
  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, 0);
 8001376:	4b05      	ldr	r3, [pc, #20]	@ (800138c <main+0x9c>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	2200      	movs	r2, #0
 800137c:	63da      	str	r2, [r3, #60]	@ 0x3c

  while (1)
 800137e:	bf00      	nop
 8001380:	e7fd      	b.n	800137e <main+0x8e>
 8001382:	bf00      	nop
 8001384:	20000240 	.word	0x20000240
 8001388:	20000288 	.word	0x20000288
 800138c:	200002d0 	.word	0x200002d0
 8001390:	200001f0 	.word	0x200001f0

08001394 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b094      	sub	sp, #80	@ 0x50
 8001398:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800139a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800139e:	2228      	movs	r2, #40	@ 0x28
 80013a0:	2100      	movs	r1, #0
 80013a2:	4618      	mov	r0, r3
 80013a4:	f004 fcfb 	bl	8005d9e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013a8:	f107 0314 	add.w	r3, r7, #20
 80013ac:	2200      	movs	r2, #0
 80013ae:	601a      	str	r2, [r3, #0]
 80013b0:	605a      	str	r2, [r3, #4]
 80013b2:	609a      	str	r2, [r3, #8]
 80013b4:	60da      	str	r2, [r3, #12]
 80013b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013b8:	1d3b      	adds	r3, r7, #4
 80013ba:	2200      	movs	r2, #0
 80013bc:	601a      	str	r2, [r3, #0]
 80013be:	605a      	str	r2, [r3, #4]
 80013c0:	609a      	str	r2, [r3, #8]
 80013c2:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80013c4:	230a      	movs	r3, #10
 80013c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013c8:	2301      	movs	r3, #1
 80013ca:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80013cc:	2310      	movs	r3, #16
 80013ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80013d0:	2301      	movs	r3, #1
 80013d2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013d4:	2302      	movs	r3, #2
 80013d6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80013d8:	2300      	movs	r3, #0
 80013da:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL5;
 80013dc:	f44f 2340 	mov.w	r3, #786432	@ 0xc0000
 80013e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013e2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80013e6:	4618      	mov	r0, r3
 80013e8:	f001 fc70 	bl	8002ccc <HAL_RCC_OscConfig>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d001      	beq.n	80013f6 <SystemClock_Config+0x62>
  {
    Error_Handler();
 80013f2:	f000 f829 	bl	8001448 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013f6:	230f      	movs	r3, #15
 80013f8:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013fa:	2302      	movs	r3, #2
 80013fc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 80013fe:	2380      	movs	r3, #128	@ 0x80
 8001400:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001402:	2300      	movs	r3, #0
 8001404:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001406:	2300      	movs	r3, #0
 8001408:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800140a:	f107 0314 	add.w	r3, r7, #20
 800140e:	2100      	movs	r1, #0
 8001410:	4618      	mov	r0, r3
 8001412:	f001 fedd 	bl	80031d0 <HAL_RCC_ClockConfig>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	d001      	beq.n	8001420 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 800141c:	f000 f814 	bl	8001448 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_ADC;
 8001420:	2303      	movs	r3, #3
 8001422:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001424:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001428:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 800142a:	2300      	movs	r3, #0
 800142c:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800142e:	1d3b      	adds	r3, r7, #4
 8001430:	4618      	mov	r0, r3
 8001432:	f002 f85b 	bl	80034ec <HAL_RCCEx_PeriphCLKConfig>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	d001      	beq.n	8001440 <SystemClock_Config+0xac>
  {
    Error_Handler();
 800143c:	f000 f804 	bl	8001448 <Error_Handler>
  }
}
 8001440:	bf00      	nop
 8001442:	3750      	adds	r7, #80	@ 0x50
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}

08001448 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800144c:	b672      	cpsid	i
}
 800144e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001450:	bf00      	nop
 8001452:	e7fd      	b.n	8001450 <Error_Handler+0x8>

08001454 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001458:	4b0a      	ldr	r3, [pc, #40]	@ (8001484 <MX_RTC_Init+0x30>)
 800145a:	4a0b      	ldr	r2, [pc, #44]	@ (8001488 <MX_RTC_Init+0x34>)
 800145c:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 800145e:	4b09      	ldr	r3, [pc, #36]	@ (8001484 <MX_RTC_Init+0x30>)
 8001460:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001464:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 8001466:	4b07      	ldr	r3, [pc, #28]	@ (8001484 <MX_RTC_Init+0x30>)
 8001468:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800146c:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800146e:	4805      	ldr	r0, [pc, #20]	@ (8001484 <MX_RTC_Init+0x30>)
 8001470:	f002 f9a8 	bl	80037c4 <HAL_RTC_Init>
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0
 8001478:	d001      	beq.n	800147e <MX_RTC_Init+0x2a>
  {
    Error_Handler();
 800147a:	f7ff ffe5 	bl	8001448 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800147e:	bf00      	nop
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	20000220 	.word	0x20000220
 8001488:	40002800 	.word	0x40002800

0800148c <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b084      	sub	sp, #16
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4a0b      	ldr	r2, [pc, #44]	@ (80014c8 <HAL_RTC_MspInit+0x3c>)
 800149a:	4293      	cmp	r3, r2
 800149c:	d110      	bne.n	80014c0 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 800149e:	f001 fc09 	bl	8002cb4 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 80014a2:	4b0a      	ldr	r3, [pc, #40]	@ (80014cc <HAL_RTC_MspInit+0x40>)
 80014a4:	69db      	ldr	r3, [r3, #28]
 80014a6:	4a09      	ldr	r2, [pc, #36]	@ (80014cc <HAL_RTC_MspInit+0x40>)
 80014a8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80014ac:	61d3      	str	r3, [r2, #28]
 80014ae:	4b07      	ldr	r3, [pc, #28]	@ (80014cc <HAL_RTC_MspInit+0x40>)
 80014b0:	69db      	ldr	r3, [r3, #28]
 80014b2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80014b6:	60fb      	str	r3, [r7, #12]
 80014b8:	68fb      	ldr	r3, [r7, #12]
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80014ba:	4b05      	ldr	r3, [pc, #20]	@ (80014d0 <HAL_RTC_MspInit+0x44>)
 80014bc:	2201      	movs	r2, #1
 80014be:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80014c0:	bf00      	nop
 80014c2:	3710      	adds	r7, #16
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	40002800 	.word	0x40002800
 80014cc:	40021000 	.word	0x40021000
 80014d0:	4242043c 	.word	0x4242043c

080014d4 <Set_Output>:

static uint32_t actual_value;
static uint32_t active_digit;

static void Set_Output(uint8_t mask)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b082      	sub	sp, #8
 80014d8:	af00      	add	r7, sp, #0
 80014da:	4603      	mov	r3, r0
 80014dc:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(SEG_A_GPIO_Port, SEG_A_Pin, mask & 0x01);
 80014de:	79fb      	ldrb	r3, [r7, #7]
 80014e0:	f003 0301 	and.w	r3, r3, #1
 80014e4:	b2db      	uxtb	r3, r3
 80014e6:	461a      	mov	r2, r3
 80014e8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80014ec:	481f      	ldr	r0, [pc, #124]	@ (800156c <Set_Output+0x98>)
 80014ee:	f001 fbc9 	bl	8002c84 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG_B_GPIO_Port, SEG_B_Pin, mask & 0x02);
 80014f2:	79fb      	ldrb	r3, [r7, #7]
 80014f4:	f003 0302 	and.w	r3, r3, #2
 80014f8:	b2db      	uxtb	r3, r3
 80014fa:	461a      	mov	r2, r3
 80014fc:	2102      	movs	r1, #2
 80014fe:	481b      	ldr	r0, [pc, #108]	@ (800156c <Set_Output+0x98>)
 8001500:	f001 fbc0 	bl	8002c84 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG_C_GPIO_Port, SEG_C_Pin, mask & 0x04);
 8001504:	79fb      	ldrb	r3, [r7, #7]
 8001506:	f003 0304 	and.w	r3, r3, #4
 800150a:	b2db      	uxtb	r3, r3
 800150c:	461a      	mov	r2, r3
 800150e:	2101      	movs	r1, #1
 8001510:	4817      	ldr	r0, [pc, #92]	@ (8001570 <Set_Output+0x9c>)
 8001512:	f001 fbb7 	bl	8002c84 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG_D_GPIO_Port, SEG_D_Pin, mask & 0x08);
 8001516:	79fb      	ldrb	r3, [r7, #7]
 8001518:	f003 0308 	and.w	r3, r3, #8
 800151c:	b2db      	uxtb	r3, r3
 800151e:	461a      	mov	r2, r3
 8001520:	2108      	movs	r1, #8
 8001522:	4813      	ldr	r0, [pc, #76]	@ (8001570 <Set_Output+0x9c>)
 8001524:	f001 fbae 	bl	8002c84 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG_E_GPIO_Port, SEG_E_Pin, mask & 0x10);
 8001528:	79fb      	ldrb	r3, [r7, #7]
 800152a:	f003 0310 	and.w	r3, r3, #16
 800152e:	b2db      	uxtb	r3, r3
 8001530:	461a      	mov	r2, r3
 8001532:	2102      	movs	r1, #2
 8001534:	480e      	ldr	r0, [pc, #56]	@ (8001570 <Set_Output+0x9c>)
 8001536:	f001 fba5 	bl	8002c84 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG_F_GPIO_Port, SEG_F_Pin, mask & 0x20);
 800153a:	79fb      	ldrb	r3, [r7, #7]
 800153c:	f003 0320 	and.w	r3, r3, #32
 8001540:	b2db      	uxtb	r3, r3
 8001542:	461a      	mov	r2, r3
 8001544:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001548:	4808      	ldr	r0, [pc, #32]	@ (800156c <Set_Output+0x98>)
 800154a:	f001 fb9b 	bl	8002c84 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG_G_GPIO_Port, SEG_G_Pin, mask & 0x40);
 800154e:	79fb      	ldrb	r3, [r7, #7]
 8001550:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001554:	b2db      	uxtb	r3, r3
 8001556:	461a      	mov	r2, r3
 8001558:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800155c:	4803      	ldr	r0, [pc, #12]	@ (800156c <Set_Output+0x98>)
 800155e:	f001 fb91 	bl	8002c84 <HAL_GPIO_WritePin>
}
 8001562:	bf00      	nop
 8001564:	3708      	adds	r7, #8
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	40010c00 	.word	0x40010c00
 8001570:	40011000 	.word	0x40011000

08001574 <SEG7_Show_Digit>:

void SEG7_Show_Digit(uint32_t value)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b086      	sub	sp, #24
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
	const uint8_t digit[] = {
 800157c:	4a12      	ldr	r2, [pc, #72]	@ (80015c8 <SEG7_Show_Digit+0x54>)
 800157e:	f107 030c 	add.w	r3, r7, #12
 8001582:	ca07      	ldmia	r2, {r0, r1, r2}
 8001584:	c303      	stmia	r3!, {r0, r1}
 8001586:	801a      	strh	r2, [r3, #0]
			0b1111101,
			0b0000111,
			0b1111111,
			0b1101111,
	};
	const uint8_t special_sign = 0b1000000;
 8001588:	2340      	movs	r3, #64	@ 0x40
 800158a:	75fb      	strb	r3, [r7, #23]

	if (0 <= value && value <= 99)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	2b63      	cmp	r3, #99	@ 0x63
 8001590:	d812      	bhi.n	80015b8 <SEG7_Show_Digit+0x44>
		Set_Output(digit[value % 10]);
 8001592:	6879      	ldr	r1, [r7, #4]
 8001594:	4b0d      	ldr	r3, [pc, #52]	@ (80015cc <SEG7_Show_Digit+0x58>)
 8001596:	fba3 2301 	umull	r2, r3, r3, r1
 800159a:	08da      	lsrs	r2, r3, #3
 800159c:	4613      	mov	r3, r2
 800159e:	009b      	lsls	r3, r3, #2
 80015a0:	4413      	add	r3, r2
 80015a2:	005b      	lsls	r3, r3, #1
 80015a4:	1aca      	subs	r2, r1, r3
 80015a6:	f102 0318 	add.w	r3, r2, #24
 80015aa:	443b      	add	r3, r7
 80015ac:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80015b0:	4618      	mov	r0, r3
 80015b2:	f7ff ff8f 	bl	80014d4 <Set_Output>
	else
		Set_Output(special_sign);
}
 80015b6:	e003      	b.n	80015c0 <SEG7_Show_Digit+0x4c>
		Set_Output(special_sign);
 80015b8:	7dfb      	ldrb	r3, [r7, #23]
 80015ba:	4618      	mov	r0, r3
 80015bc:	f7ff ff8a 	bl	80014d4 <Set_Output>
}
 80015c0:	bf00      	nop
 80015c2:	3718      	adds	r7, #24
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	08007c10 	.word	0x08007c10
 80015cc:	cccccccd 	.word	0xcccccccd

080015d0 <SEG7_Show>:

void SEG7_Show(uint32_t value)
{
 80015d0:	b480      	push	{r7}
 80015d2:	b083      	sub	sp, #12
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
	actual_value = value;
 80015d8:	4a03      	ldr	r2, [pc, #12]	@ (80015e8 <SEG7_Show+0x18>)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	6013      	str	r3, [r2, #0]
}
 80015de:	bf00      	nop
 80015e0:	370c      	adds	r7, #12
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bc80      	pop	{r7}
 80015e6:	4770      	bx	lr
 80015e8:	20000234 	.word	0x20000234

080015ec <SEG7_Update>:

void SEG7_Update(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, GPIO_PIN_SET);
 80015f0:	2201      	movs	r2, #1
 80015f2:	2104      	movs	r1, #4
 80015f4:	4822      	ldr	r0, [pc, #136]	@ (8001680 <SEG7_Update+0x94>)
 80015f6:	f001 fb45 	bl	8002c84 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, GPIO_PIN_SET);
 80015fa:	2201      	movs	r2, #1
 80015fc:	2101      	movs	r1, #1
 80015fe:	4821      	ldr	r0, [pc, #132]	@ (8001684 <SEG7_Update+0x98>)
 8001600:	f001 fb40 	bl	8002c84 <HAL_GPIO_WritePin>

	if (actual_value < 0 || 99 < actual_value) {
 8001604:	4b20      	ldr	r3, [pc, #128]	@ (8001688 <SEG7_Update+0x9c>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	2b63      	cmp	r3, #99	@ 0x63
 800160a:	d90f      	bls.n	800162c <SEG7_Update+0x40>
		SEG7_Show_Digit(actual_value);
 800160c:	4b1e      	ldr	r3, [pc, #120]	@ (8001688 <SEG7_Update+0x9c>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4618      	mov	r0, r3
 8001612:	f7ff ffaf 	bl	8001574 <SEG7_Show_Digit>
		HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, GPIO_PIN_RESET);
 8001616:	2200      	movs	r2, #0
 8001618:	2104      	movs	r1, #4
 800161a:	4819      	ldr	r0, [pc, #100]	@ (8001680 <SEG7_Update+0x94>)
 800161c:	f001 fb32 	bl	8002c84 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, GPIO_PIN_RESET);
 8001620:	2200      	movs	r2, #0
 8001622:	2101      	movs	r1, #1
 8001624:	4817      	ldr	r0, [pc, #92]	@ (8001684 <SEG7_Update+0x98>)
 8001626:	f001 fb2d 	bl	8002c84 <HAL_GPIO_WritePin>
			break;
		default:
			break;
		}
	}
}
 800162a:	e026      	b.n	800167a <SEG7_Update+0x8e>
		switch (active_digit) {
 800162c:	4b17      	ldr	r3, [pc, #92]	@ (800168c <SEG7_Update+0xa0>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d002      	beq.n	800163a <SEG7_Update+0x4e>
 8001634:	2b01      	cmp	r3, #1
 8001636:	d00e      	beq.n	8001656 <SEG7_Update+0x6a>
			break;
 8001638:	e01f      	b.n	800167a <SEG7_Update+0x8e>
			SEG7_Show_Digit(actual_value);
 800163a:	4b13      	ldr	r3, [pc, #76]	@ (8001688 <SEG7_Update+0x9c>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4618      	mov	r0, r3
 8001640:	f7ff ff98 	bl	8001574 <SEG7_Show_Digit>
			HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, GPIO_PIN_RESET);
 8001644:	2200      	movs	r2, #0
 8001646:	2104      	movs	r1, #4
 8001648:	480d      	ldr	r0, [pc, #52]	@ (8001680 <SEG7_Update+0x94>)
 800164a:	f001 fb1b 	bl	8002c84 <HAL_GPIO_WritePin>
			active_digit = 1;
 800164e:	4b0f      	ldr	r3, [pc, #60]	@ (800168c <SEG7_Update+0xa0>)
 8001650:	2201      	movs	r2, #1
 8001652:	601a      	str	r2, [r3, #0]
			break;
 8001654:	e011      	b.n	800167a <SEG7_Update+0x8e>
			SEG7_Show_Digit(actual_value / 10);
 8001656:	4b0c      	ldr	r3, [pc, #48]	@ (8001688 <SEG7_Update+0x9c>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	4a0d      	ldr	r2, [pc, #52]	@ (8001690 <SEG7_Update+0xa4>)
 800165c:	fba2 2303 	umull	r2, r3, r2, r3
 8001660:	08db      	lsrs	r3, r3, #3
 8001662:	4618      	mov	r0, r3
 8001664:	f7ff ff86 	bl	8001574 <SEG7_Show_Digit>
			HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, GPIO_PIN_RESET);
 8001668:	2200      	movs	r2, #0
 800166a:	2101      	movs	r1, #1
 800166c:	4805      	ldr	r0, [pc, #20]	@ (8001684 <SEG7_Update+0x98>)
 800166e:	f001 fb09 	bl	8002c84 <HAL_GPIO_WritePin>
			active_digit = 0;
 8001672:	4b06      	ldr	r3, [pc, #24]	@ (800168c <SEG7_Update+0xa0>)
 8001674:	2200      	movs	r2, #0
 8001676:	601a      	str	r2, [r3, #0]
			break;
 8001678:	bf00      	nop
}
 800167a:	bf00      	nop
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	40011000 	.word	0x40011000
 8001684:	40010800 	.word	0x40010800
 8001688:	20000234 	.word	0x20000234
 800168c:	20000238 	.word	0x20000238
 8001690:	cccccccd 	.word	0xcccccccd

08001694 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001694:	b480      	push	{r7}
 8001696:	b085      	sub	sp, #20
 8001698:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800169a:	4b15      	ldr	r3, [pc, #84]	@ (80016f0 <HAL_MspInit+0x5c>)
 800169c:	699b      	ldr	r3, [r3, #24]
 800169e:	4a14      	ldr	r2, [pc, #80]	@ (80016f0 <HAL_MspInit+0x5c>)
 80016a0:	f043 0301 	orr.w	r3, r3, #1
 80016a4:	6193      	str	r3, [r2, #24]
 80016a6:	4b12      	ldr	r3, [pc, #72]	@ (80016f0 <HAL_MspInit+0x5c>)
 80016a8:	699b      	ldr	r3, [r3, #24]
 80016aa:	f003 0301 	and.w	r3, r3, #1
 80016ae:	60bb      	str	r3, [r7, #8]
 80016b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016b2:	4b0f      	ldr	r3, [pc, #60]	@ (80016f0 <HAL_MspInit+0x5c>)
 80016b4:	69db      	ldr	r3, [r3, #28]
 80016b6:	4a0e      	ldr	r2, [pc, #56]	@ (80016f0 <HAL_MspInit+0x5c>)
 80016b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016bc:	61d3      	str	r3, [r2, #28]
 80016be:	4b0c      	ldr	r3, [pc, #48]	@ (80016f0 <HAL_MspInit+0x5c>)
 80016c0:	69db      	ldr	r3, [r3, #28]
 80016c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016c6:	607b      	str	r3, [r7, #4]
 80016c8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80016ca:	4b0a      	ldr	r3, [pc, #40]	@ (80016f4 <HAL_MspInit+0x60>)
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	60fb      	str	r3, [r7, #12]
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80016d6:	60fb      	str	r3, [r7, #12]
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80016de:	60fb      	str	r3, [r7, #12]
 80016e0:	4a04      	ldr	r2, [pc, #16]	@ (80016f4 <HAL_MspInit+0x60>)
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016e6:	bf00      	nop
 80016e8:	3714      	adds	r7, #20
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bc80      	pop	{r7}
 80016ee:	4770      	bx	lr
 80016f0:	40021000 	.word	0x40021000
 80016f4:	40010000 	.word	0x40010000

080016f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016f8:	b480      	push	{r7}
 80016fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80016fc:	bf00      	nop
 80016fe:	e7fd      	b.n	80016fc <NMI_Handler+0x4>

08001700 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001700:	b480      	push	{r7}
 8001702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001704:	bf00      	nop
 8001706:	e7fd      	b.n	8001704 <HardFault_Handler+0x4>

08001708 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001708:	b480      	push	{r7}
 800170a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800170c:	bf00      	nop
 800170e:	e7fd      	b.n	800170c <MemManage_Handler+0x4>

08001710 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001714:	bf00      	nop
 8001716:	e7fd      	b.n	8001714 <BusFault_Handler+0x4>

08001718 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800171c:	bf00      	nop
 800171e:	e7fd      	b.n	800171c <UsageFault_Handler+0x4>

08001720 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001720:	b480      	push	{r7}
 8001722:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001724:	bf00      	nop
 8001726:	46bd      	mov	sp, r7
 8001728:	bc80      	pop	{r7}
 800172a:	4770      	bx	lr

0800172c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001730:	bf00      	nop
 8001732:	46bd      	mov	sp, r7
 8001734:	bc80      	pop	{r7}
 8001736:	4770      	bx	lr

08001738 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800173c:	bf00      	nop
 800173e:	46bd      	mov	sp, r7
 8001740:	bc80      	pop	{r7}
 8001742:	4770      	bx	lr

08001744 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001748:	f000 fc1a 	bl	8001f80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800174c:	bf00      	nop
 800174e:	bd80      	pop	{r7, pc}

08001750 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001754:	4802      	ldr	r0, [pc, #8]	@ (8001760 <TIM2_IRQHandler+0x10>)
 8001756:	f002 fbf1 	bl	8003f3c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800175a:	bf00      	nop
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	20000240 	.word	0x20000240

08001764 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001768:	4802      	ldr	r0, [pc, #8]	@ (8001774 <TIM3_IRQHandler+0x10>)
 800176a:	f002 fbe7 	bl	8003f3c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800176e:	bf00      	nop
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	20000288 	.word	0x20000288

08001778 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800177c:	4802      	ldr	r0, [pc, #8]	@ (8001788 <TIM4_IRQHandler+0x10>)
 800177e:	f002 fbdd 	bl	8003f3c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001782:	bf00      	nop
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	200002d0 	.word	0x200002d0

0800178c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800178c:	b480      	push	{r7}
 800178e:	af00      	add	r7, sp, #0
  return 1;
 8001790:	2301      	movs	r3, #1
}
 8001792:	4618      	mov	r0, r3
 8001794:	46bd      	mov	sp, r7
 8001796:	bc80      	pop	{r7}
 8001798:	4770      	bx	lr

0800179a <_kill>:

int _kill(int pid, int sig)
{
 800179a:	b580      	push	{r7, lr}
 800179c:	b082      	sub	sp, #8
 800179e:	af00      	add	r7, sp, #0
 80017a0:	6078      	str	r0, [r7, #4]
 80017a2:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80017a4:	f004 fb4e 	bl	8005e44 <__errno>
 80017a8:	4603      	mov	r3, r0
 80017aa:	2216      	movs	r2, #22
 80017ac:	601a      	str	r2, [r3, #0]
  return -1;
 80017ae:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80017b2:	4618      	mov	r0, r3
 80017b4:	3708      	adds	r7, #8
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}

080017ba <_exit>:

void _exit (int status)
{
 80017ba:	b580      	push	{r7, lr}
 80017bc:	b082      	sub	sp, #8
 80017be:	af00      	add	r7, sp, #0
 80017c0:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80017c2:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80017c6:	6878      	ldr	r0, [r7, #4]
 80017c8:	f7ff ffe7 	bl	800179a <_kill>
  while (1) {}    /* Make sure we hang here */
 80017cc:	bf00      	nop
 80017ce:	e7fd      	b.n	80017cc <_exit+0x12>

080017d0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b086      	sub	sp, #24
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	60f8      	str	r0, [r7, #12]
 80017d8:	60b9      	str	r1, [r7, #8]
 80017da:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017dc:	2300      	movs	r3, #0
 80017de:	617b      	str	r3, [r7, #20]
 80017e0:	e00a      	b.n	80017f8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80017e2:	f3af 8000 	nop.w
 80017e6:	4601      	mov	r1, r0
 80017e8:	68bb      	ldr	r3, [r7, #8]
 80017ea:	1c5a      	adds	r2, r3, #1
 80017ec:	60ba      	str	r2, [r7, #8]
 80017ee:	b2ca      	uxtb	r2, r1
 80017f0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017f2:	697b      	ldr	r3, [r7, #20]
 80017f4:	3301      	adds	r3, #1
 80017f6:	617b      	str	r3, [r7, #20]
 80017f8:	697a      	ldr	r2, [r7, #20]
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	429a      	cmp	r2, r3
 80017fe:	dbf0      	blt.n	80017e2 <_read+0x12>
  }

  return len;
 8001800:	687b      	ldr	r3, [r7, #4]
}
 8001802:	4618      	mov	r0, r3
 8001804:	3718      	adds	r7, #24
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}

0800180a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800180a:	b580      	push	{r7, lr}
 800180c:	b086      	sub	sp, #24
 800180e:	af00      	add	r7, sp, #0
 8001810:	60f8      	str	r0, [r7, #12]
 8001812:	60b9      	str	r1, [r7, #8]
 8001814:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001816:	2300      	movs	r3, #0
 8001818:	617b      	str	r3, [r7, #20]
 800181a:	e009      	b.n	8001830 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800181c:	68bb      	ldr	r3, [r7, #8]
 800181e:	1c5a      	adds	r2, r3, #1
 8001820:	60ba      	str	r2, [r7, #8]
 8001822:	781b      	ldrb	r3, [r3, #0]
 8001824:	4618      	mov	r0, r3
 8001826:	f7ff fd01 	bl	800122c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800182a:	697b      	ldr	r3, [r7, #20]
 800182c:	3301      	adds	r3, #1
 800182e:	617b      	str	r3, [r7, #20]
 8001830:	697a      	ldr	r2, [r7, #20]
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	429a      	cmp	r2, r3
 8001836:	dbf1      	blt.n	800181c <_write+0x12>
  }
  return len;
 8001838:	687b      	ldr	r3, [r7, #4]
}
 800183a:	4618      	mov	r0, r3
 800183c:	3718      	adds	r7, #24
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}

08001842 <_close>:

int _close(int file)
{
 8001842:	b480      	push	{r7}
 8001844:	b083      	sub	sp, #12
 8001846:	af00      	add	r7, sp, #0
 8001848:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800184a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800184e:	4618      	mov	r0, r3
 8001850:	370c      	adds	r7, #12
 8001852:	46bd      	mov	sp, r7
 8001854:	bc80      	pop	{r7}
 8001856:	4770      	bx	lr

08001858 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001858:	b480      	push	{r7}
 800185a:	b083      	sub	sp, #12
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
 8001860:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001868:	605a      	str	r2, [r3, #4]
  return 0;
 800186a:	2300      	movs	r3, #0
}
 800186c:	4618      	mov	r0, r3
 800186e:	370c      	adds	r7, #12
 8001870:	46bd      	mov	sp, r7
 8001872:	bc80      	pop	{r7}
 8001874:	4770      	bx	lr

08001876 <_isatty>:

int _isatty(int file)
{
 8001876:	b480      	push	{r7}
 8001878:	b083      	sub	sp, #12
 800187a:	af00      	add	r7, sp, #0
 800187c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800187e:	2301      	movs	r3, #1
}
 8001880:	4618      	mov	r0, r3
 8001882:	370c      	adds	r7, #12
 8001884:	46bd      	mov	sp, r7
 8001886:	bc80      	pop	{r7}
 8001888:	4770      	bx	lr

0800188a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800188a:	b480      	push	{r7}
 800188c:	b085      	sub	sp, #20
 800188e:	af00      	add	r7, sp, #0
 8001890:	60f8      	str	r0, [r7, #12]
 8001892:	60b9      	str	r1, [r7, #8]
 8001894:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001896:	2300      	movs	r3, #0
}
 8001898:	4618      	mov	r0, r3
 800189a:	3714      	adds	r7, #20
 800189c:	46bd      	mov	sp, r7
 800189e:	bc80      	pop	{r7}
 80018a0:	4770      	bx	lr
	...

080018a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b086      	sub	sp, #24
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018ac:	4a14      	ldr	r2, [pc, #80]	@ (8001900 <_sbrk+0x5c>)
 80018ae:	4b15      	ldr	r3, [pc, #84]	@ (8001904 <_sbrk+0x60>)
 80018b0:	1ad3      	subs	r3, r2, r3
 80018b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018b4:	697b      	ldr	r3, [r7, #20]
 80018b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018b8:	4b13      	ldr	r3, [pc, #76]	@ (8001908 <_sbrk+0x64>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d102      	bne.n	80018c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018c0:	4b11      	ldr	r3, [pc, #68]	@ (8001908 <_sbrk+0x64>)
 80018c2:	4a12      	ldr	r2, [pc, #72]	@ (800190c <_sbrk+0x68>)
 80018c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018c6:	4b10      	ldr	r3, [pc, #64]	@ (8001908 <_sbrk+0x64>)
 80018c8:	681a      	ldr	r2, [r3, #0]
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	4413      	add	r3, r2
 80018ce:	693a      	ldr	r2, [r7, #16]
 80018d0:	429a      	cmp	r2, r3
 80018d2:	d207      	bcs.n	80018e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018d4:	f004 fab6 	bl	8005e44 <__errno>
 80018d8:	4603      	mov	r3, r0
 80018da:	220c      	movs	r2, #12
 80018dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018de:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80018e2:	e009      	b.n	80018f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018e4:	4b08      	ldr	r3, [pc, #32]	@ (8001908 <_sbrk+0x64>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018ea:	4b07      	ldr	r3, [pc, #28]	@ (8001908 <_sbrk+0x64>)
 80018ec:	681a      	ldr	r2, [r3, #0]
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	4413      	add	r3, r2
 80018f2:	4a05      	ldr	r2, [pc, #20]	@ (8001908 <_sbrk+0x64>)
 80018f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018f6:	68fb      	ldr	r3, [r7, #12]
}
 80018f8:	4618      	mov	r0, r3
 80018fa:	3718      	adds	r7, #24
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bd80      	pop	{r7, pc}
 8001900:	20005000 	.word	0x20005000
 8001904:	00000400 	.word	0x00000400
 8001908:	2000023c 	.word	0x2000023c
 800190c:	200004b0 	.word	0x200004b0

08001910 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001910:	b480      	push	{r7}
 8001912:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001914:	bf00      	nop
 8001916:	46bd      	mov	sp, r7
 8001918:	bc80      	pop	{r7}
 800191a:	4770      	bx	lr

0800191c <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b086      	sub	sp, #24
 8001920:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001922:	f107 0308 	add.w	r3, r7, #8
 8001926:	2200      	movs	r2, #0
 8001928:	601a      	str	r2, [r3, #0]
 800192a:	605a      	str	r2, [r3, #4]
 800192c:	609a      	str	r2, [r3, #8]
 800192e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001930:	463b      	mov	r3, r7
 8001932:	2200      	movs	r2, #0
 8001934:	601a      	str	r2, [r3, #0]
 8001936:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001938:	4b1d      	ldr	r3, [pc, #116]	@ (80019b0 <MX_TIM2_Init+0x94>)
 800193a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800193e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 999;
 8001940:	4b1b      	ldr	r3, [pc, #108]	@ (80019b0 <MX_TIM2_Init+0x94>)
 8001942:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001946:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001948:	4b19      	ldr	r3, [pc, #100]	@ (80019b0 <MX_TIM2_Init+0x94>)
 800194a:	2200      	movs	r2, #0
 800194c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 800194e:	4b18      	ldr	r3, [pc, #96]	@ (80019b0 <MX_TIM2_Init+0x94>)
 8001950:	2263      	movs	r2, #99	@ 0x63
 8001952:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001954:	4b16      	ldr	r3, [pc, #88]	@ (80019b0 <MX_TIM2_Init+0x94>)
 8001956:	2200      	movs	r2, #0
 8001958:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800195a:	4b15      	ldr	r3, [pc, #84]	@ (80019b0 <MX_TIM2_Init+0x94>)
 800195c:	2200      	movs	r2, #0
 800195e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001960:	4813      	ldr	r0, [pc, #76]	@ (80019b0 <MX_TIM2_Init+0x94>)
 8001962:	f002 f838 	bl	80039d6 <HAL_TIM_Base_Init>
 8001966:	4603      	mov	r3, r0
 8001968:	2b00      	cmp	r3, #0
 800196a:	d001      	beq.n	8001970 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800196c:	f7ff fd6c 	bl	8001448 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001970:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001974:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001976:	f107 0308 	add.w	r3, r7, #8
 800197a:	4619      	mov	r1, r3
 800197c:	480c      	ldr	r0, [pc, #48]	@ (80019b0 <MX_TIM2_Init+0x94>)
 800197e:	f002 fd2b 	bl	80043d8 <HAL_TIM_ConfigClockSource>
 8001982:	4603      	mov	r3, r0
 8001984:	2b00      	cmp	r3, #0
 8001986:	d001      	beq.n	800198c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001988:	f7ff fd5e 	bl	8001448 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800198c:	2300      	movs	r3, #0
 800198e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001990:	2300      	movs	r3, #0
 8001992:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001994:	463b      	mov	r3, r7
 8001996:	4619      	mov	r1, r3
 8001998:	4805      	ldr	r0, [pc, #20]	@ (80019b0 <MX_TIM2_Init+0x94>)
 800199a:	f003 fa0b 	bl	8004db4 <HAL_TIMEx_MasterConfigSynchronization>
 800199e:	4603      	mov	r3, r0
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d001      	beq.n	80019a8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80019a4:	f7ff fd50 	bl	8001448 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80019a8:	bf00      	nop
 80019aa:	3718      	adds	r7, #24
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	20000240 	.word	0x20000240

080019b4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b092      	sub	sp, #72	@ 0x48
 80019b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019ba:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80019be:	2200      	movs	r2, #0
 80019c0:	601a      	str	r2, [r3, #0]
 80019c2:	605a      	str	r2, [r3, #4]
 80019c4:	609a      	str	r2, [r3, #8]
 80019c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019c8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80019cc:	2200      	movs	r2, #0
 80019ce:	601a      	str	r2, [r3, #0]
 80019d0:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80019d2:	f107 0320 	add.w	r3, r7, #32
 80019d6:	2200      	movs	r2, #0
 80019d8:	601a      	str	r2, [r3, #0]
 80019da:	605a      	str	r2, [r3, #4]
 80019dc:	609a      	str	r2, [r3, #8]
 80019de:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80019e0:	1d3b      	adds	r3, r7, #4
 80019e2:	2200      	movs	r2, #0
 80019e4:	601a      	str	r2, [r3, #0]
 80019e6:	605a      	str	r2, [r3, #4]
 80019e8:	609a      	str	r2, [r3, #8]
 80019ea:	60da      	str	r2, [r3, #12]
 80019ec:	611a      	str	r2, [r3, #16]
 80019ee:	615a      	str	r2, [r3, #20]
 80019f0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80019f2:	4b43      	ldr	r3, [pc, #268]	@ (8001b00 <MX_TIM3_Init+0x14c>)
 80019f4:	4a43      	ldr	r2, [pc, #268]	@ (8001b04 <MX_TIM3_Init+0x150>)
 80019f6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80019f8:	4b41      	ldr	r3, [pc, #260]	@ (8001b00 <MX_TIM3_Init+0x14c>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019fe:	4b40      	ldr	r3, [pc, #256]	@ (8001b00 <MX_TIM3_Init+0x14c>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 8001a04:	4b3e      	ldr	r3, [pc, #248]	@ (8001b00 <MX_TIM3_Init+0x14c>)
 8001a06:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001a0a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a0c:	4b3c      	ldr	r3, [pc, #240]	@ (8001b00 <MX_TIM3_Init+0x14c>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a12:	4b3b      	ldr	r3, [pc, #236]	@ (8001b00 <MX_TIM3_Init+0x14c>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001a18:	4839      	ldr	r0, [pc, #228]	@ (8001b00 <MX_TIM3_Init+0x14c>)
 8001a1a:	f001 ffdc 	bl	80039d6 <HAL_TIM_Base_Init>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d001      	beq.n	8001a28 <MX_TIM3_Init+0x74>
  {
    Error_Handler();
 8001a24:	f7ff fd10 	bl	8001448 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a28:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001a2c:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001a2e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001a32:	4619      	mov	r1, r3
 8001a34:	4832      	ldr	r0, [pc, #200]	@ (8001b00 <MX_TIM3_Init+0x14c>)
 8001a36:	f002 fccf 	bl	80043d8 <HAL_TIM_ConfigClockSource>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d001      	beq.n	8001a44 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8001a40:	f7ff fd02 	bl	8001448 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8001a44:	482e      	ldr	r0, [pc, #184]	@ (8001b00 <MX_TIM3_Init+0x14c>)
 8001a46:	f002 f961 	bl	8003d0c <HAL_TIM_IC_Init>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d001      	beq.n	8001a54 <MX_TIM3_Init+0xa0>
  {
    Error_Handler();
 8001a50:	f7ff fcfa 	bl	8001448 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001a54:	482a      	ldr	r0, [pc, #168]	@ (8001b00 <MX_TIM3_Init+0x14c>)
 8001a56:	f002 f85f 	bl	8003b18 <HAL_TIM_PWM_Init>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d001      	beq.n	8001a64 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001a60:	f7ff fcf2 	bl	8001448 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a64:	2300      	movs	r3, #0
 8001a66:	633b      	str	r3, [r7, #48]	@ 0x30
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001a6c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001a70:	4619      	mov	r1, r3
 8001a72:	4823      	ldr	r0, [pc, #140]	@ (8001b00 <MX_TIM3_Init+0x14c>)
 8001a74:	f003 f99e 	bl	8004db4 <HAL_TIMEx_MasterConfigSynchronization>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d001      	beq.n	8001a82 <MX_TIM3_Init+0xce>
  {
    Error_Handler();
 8001a7e:	f7ff fce3 	bl	8001448 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001a82:	2300      	movs	r3, #0
 8001a84:	623b      	str	r3, [r7, #32]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001a86:	2301      	movs	r3, #1
 8001a88:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigIC.ICFilter = 0;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001a92:	f107 0320 	add.w	r3, r7, #32
 8001a96:	2200      	movs	r2, #0
 8001a98:	4619      	mov	r1, r3
 8001a9a:	4819      	ldr	r0, [pc, #100]	@ (8001b00 <MX_TIM3_Init+0x14c>)
 8001a9c:	f002 fb3e 	bl	800411c <HAL_TIM_IC_ConfigChannel>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d001      	beq.n	8001aaa <MX_TIM3_Init+0xf6>
  {
    Error_Handler();
 8001aa6:	f7ff fccf 	bl	8001448 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001aaa:	2302      	movs	r3, #2
 8001aac:	623b      	str	r3, [r7, #32]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8001aae:	2302      	movs	r3, #2
 8001ab0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001ab2:	f107 0320 	add.w	r3, r7, #32
 8001ab6:	2204      	movs	r2, #4
 8001ab8:	4619      	mov	r1, r3
 8001aba:	4811      	ldr	r0, [pc, #68]	@ (8001b00 <MX_TIM3_Init+0x14c>)
 8001abc:	f002 fb2e 	bl	800411c <HAL_TIM_IC_ConfigChannel>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d001      	beq.n	8001aca <MX_TIM3_Init+0x116>
  {
    Error_Handler();
 8001ac6:	f7ff fcbf 	bl	8001448 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001aca:	2360      	movs	r3, #96	@ 0x60
 8001acc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 100;
 8001ace:	2364      	movs	r3, #100	@ 0x64
 8001ad0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001ada:	1d3b      	adds	r3, r7, #4
 8001adc:	2208      	movs	r2, #8
 8001ade:	4619      	mov	r1, r3
 8001ae0:	4807      	ldr	r0, [pc, #28]	@ (8001b00 <MX_TIM3_Init+0x14c>)
 8001ae2:	f002 fbb7 	bl	8004254 <HAL_TIM_PWM_ConfigChannel>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d001      	beq.n	8001af0 <MX_TIM3_Init+0x13c>
  {
    Error_Handler();
 8001aec:	f7ff fcac 	bl	8001448 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001af0:	4803      	ldr	r0, [pc, #12]	@ (8001b00 <MX_TIM3_Init+0x14c>)
 8001af2:	f000 f911 	bl	8001d18 <HAL_TIM_MspPostInit>

}
 8001af6:	bf00      	nop
 8001af8:	3748      	adds	r7, #72	@ 0x48
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	20000288 	.word	0x20000288
 8001b04:	40000400 	.word	0x40000400

08001b08 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b08e      	sub	sp, #56	@ 0x38
 8001b0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b0e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001b12:	2200      	movs	r2, #0
 8001b14:	601a      	str	r2, [r3, #0]
 8001b16:	605a      	str	r2, [r3, #4]
 8001b18:	609a      	str	r2, [r3, #8]
 8001b1a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b1c:	f107 0320 	add.w	r3, r7, #32
 8001b20:	2200      	movs	r2, #0
 8001b22:	601a      	str	r2, [r3, #0]
 8001b24:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b26:	1d3b      	adds	r3, r7, #4
 8001b28:	2200      	movs	r2, #0
 8001b2a:	601a      	str	r2, [r3, #0]
 8001b2c:	605a      	str	r2, [r3, #4]
 8001b2e:	609a      	str	r2, [r3, #8]
 8001b30:	60da      	str	r2, [r3, #12]
 8001b32:	611a      	str	r2, [r3, #16]
 8001b34:	615a      	str	r2, [r3, #20]
 8001b36:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001b38:	4b37      	ldr	r3, [pc, #220]	@ (8001c18 <MX_TIM4_Init+0x110>)
 8001b3a:	4a38      	ldr	r2, [pc, #224]	@ (8001c1c <MX_TIM4_Init+0x114>)
 8001b3c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 7;
 8001b3e:	4b36      	ldr	r3, [pc, #216]	@ (8001c18 <MX_TIM4_Init+0x110>)
 8001b40:	2207      	movs	r2, #7
 8001b42:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b44:	4b34      	ldr	r3, [pc, #208]	@ (8001c18 <MX_TIM4_Init+0x110>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9999;
 8001b4a:	4b33      	ldr	r3, [pc, #204]	@ (8001c18 <MX_TIM4_Init+0x110>)
 8001b4c:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001b50:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b52:	4b31      	ldr	r3, [pc, #196]	@ (8001c18 <MX_TIM4_Init+0x110>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b58:	4b2f      	ldr	r3, [pc, #188]	@ (8001c18 <MX_TIM4_Init+0x110>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001b5e:	482e      	ldr	r0, [pc, #184]	@ (8001c18 <MX_TIM4_Init+0x110>)
 8001b60:	f001 ff39 	bl	80039d6 <HAL_TIM_Base_Init>
 8001b64:	4603      	mov	r3, r0
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d001      	beq.n	8001b6e <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8001b6a:	f7ff fc6d 	bl	8001448 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b6e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b72:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001b74:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001b78:	4619      	mov	r1, r3
 8001b7a:	4827      	ldr	r0, [pc, #156]	@ (8001c18 <MX_TIM4_Init+0x110>)
 8001b7c:	f002 fc2c 	bl	80043d8 <HAL_TIM_ConfigClockSource>
 8001b80:	4603      	mov	r3, r0
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d001      	beq.n	8001b8a <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8001b86:	f7ff fc5f 	bl	8001448 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001b8a:	4823      	ldr	r0, [pc, #140]	@ (8001c18 <MX_TIM4_Init+0x110>)
 8001b8c:	f001 ffc4 	bl	8003b18 <HAL_TIM_PWM_Init>
 8001b90:	4603      	mov	r3, r0
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d001      	beq.n	8001b9a <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8001b96:	f7ff fc57 	bl	8001448 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001ba2:	f107 0320 	add.w	r3, r7, #32
 8001ba6:	4619      	mov	r1, r3
 8001ba8:	481b      	ldr	r0, [pc, #108]	@ (8001c18 <MX_TIM4_Init+0x110>)
 8001baa:	f003 f903 	bl	8004db4 <HAL_TIMEx_MasterConfigSynchronization>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d001      	beq.n	8001bb8 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8001bb4:	f7ff fc48 	bl	8001448 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001bb8:	2360      	movs	r3, #96	@ 0x60
 8001bba:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8001bc0:	2302      	movs	r3, #2
 8001bc2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001bc8:	1d3b      	adds	r3, r7, #4
 8001bca:	2200      	movs	r2, #0
 8001bcc:	4619      	mov	r1, r3
 8001bce:	4812      	ldr	r0, [pc, #72]	@ (8001c18 <MX_TIM4_Init+0x110>)
 8001bd0:	f002 fb40 	bl	8004254 <HAL_TIM_PWM_ConfigChannel>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d001      	beq.n	8001bde <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8001bda:	f7ff fc35 	bl	8001448 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001bde:	1d3b      	adds	r3, r7, #4
 8001be0:	2204      	movs	r2, #4
 8001be2:	4619      	mov	r1, r3
 8001be4:	480c      	ldr	r0, [pc, #48]	@ (8001c18 <MX_TIM4_Init+0x110>)
 8001be6:	f002 fb35 	bl	8004254 <HAL_TIM_PWM_ConfigChannel>
 8001bea:	4603      	mov	r3, r0
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d001      	beq.n	8001bf4 <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 8001bf0:	f7ff fc2a 	bl	8001448 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001bf4:	1d3b      	adds	r3, r7, #4
 8001bf6:	2208      	movs	r2, #8
 8001bf8:	4619      	mov	r1, r3
 8001bfa:	4807      	ldr	r0, [pc, #28]	@ (8001c18 <MX_TIM4_Init+0x110>)
 8001bfc:	f002 fb2a 	bl	8004254 <HAL_TIM_PWM_ConfigChannel>
 8001c00:	4603      	mov	r3, r0
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d001      	beq.n	8001c0a <MX_TIM4_Init+0x102>
  {
    Error_Handler();
 8001c06:	f7ff fc1f 	bl	8001448 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001c0a:	4803      	ldr	r0, [pc, #12]	@ (8001c18 <MX_TIM4_Init+0x110>)
 8001c0c:	f000 f884 	bl	8001d18 <HAL_TIM_MspPostInit>

}
 8001c10:	bf00      	nop
 8001c12:	3738      	adds	r7, #56	@ 0x38
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bd80      	pop	{r7, pc}
 8001c18:	200002d0 	.word	0x200002d0
 8001c1c:	40000800 	.word	0x40000800

08001c20 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b08a      	sub	sp, #40	@ 0x28
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c28:	f107 0318 	add.w	r3, r7, #24
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	601a      	str	r2, [r3, #0]
 8001c30:	605a      	str	r2, [r3, #4]
 8001c32:	609a      	str	r2, [r3, #8]
 8001c34:	60da      	str	r2, [r3, #12]
  if(tim_baseHandle->Instance==TIM2)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001c3e:	d114      	bne.n	8001c6a <HAL_TIM_Base_MspInit+0x4a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001c40:	4b31      	ldr	r3, [pc, #196]	@ (8001d08 <HAL_TIM_Base_MspInit+0xe8>)
 8001c42:	69db      	ldr	r3, [r3, #28]
 8001c44:	4a30      	ldr	r2, [pc, #192]	@ (8001d08 <HAL_TIM_Base_MspInit+0xe8>)
 8001c46:	f043 0301 	orr.w	r3, r3, #1
 8001c4a:	61d3      	str	r3, [r2, #28]
 8001c4c:	4b2e      	ldr	r3, [pc, #184]	@ (8001d08 <HAL_TIM_Base_MspInit+0xe8>)
 8001c4e:	69db      	ldr	r3, [r3, #28]
 8001c50:	f003 0301 	and.w	r3, r3, #1
 8001c54:	617b      	str	r3, [r7, #20]
 8001c56:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 6, 0);
 8001c58:	2200      	movs	r2, #0
 8001c5a:	2106      	movs	r1, #6
 8001c5c:	201c      	movs	r0, #28
 8001c5e:	f000 fe56 	bl	800290e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001c62:	201c      	movs	r0, #28
 8001c64:	f000 fe6f 	bl	8002946 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001c68:	e04a      	b.n	8001d00 <HAL_TIM_Base_MspInit+0xe0>
  else if(tim_baseHandle->Instance==TIM3)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4a27      	ldr	r2, [pc, #156]	@ (8001d0c <HAL_TIM_Base_MspInit+0xec>)
 8001c70:	4293      	cmp	r3, r2
 8001c72:	d12c      	bne.n	8001cce <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001c74:	4b24      	ldr	r3, [pc, #144]	@ (8001d08 <HAL_TIM_Base_MspInit+0xe8>)
 8001c76:	69db      	ldr	r3, [r3, #28]
 8001c78:	4a23      	ldr	r2, [pc, #140]	@ (8001d08 <HAL_TIM_Base_MspInit+0xe8>)
 8001c7a:	f043 0302 	orr.w	r3, r3, #2
 8001c7e:	61d3      	str	r3, [r2, #28]
 8001c80:	4b21      	ldr	r3, [pc, #132]	@ (8001d08 <HAL_TIM_Base_MspInit+0xe8>)
 8001c82:	69db      	ldr	r3, [r3, #28]
 8001c84:	f003 0302 	and.w	r3, r3, #2
 8001c88:	613b      	str	r3, [r7, #16]
 8001c8a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c8c:	4b1e      	ldr	r3, [pc, #120]	@ (8001d08 <HAL_TIM_Base_MspInit+0xe8>)
 8001c8e:	699b      	ldr	r3, [r3, #24]
 8001c90:	4a1d      	ldr	r2, [pc, #116]	@ (8001d08 <HAL_TIM_Base_MspInit+0xe8>)
 8001c92:	f043 0304 	orr.w	r3, r3, #4
 8001c96:	6193      	str	r3, [r2, #24]
 8001c98:	4b1b      	ldr	r3, [pc, #108]	@ (8001d08 <HAL_TIM_Base_MspInit+0xe8>)
 8001c9a:	699b      	ldr	r3, [r3, #24]
 8001c9c:	f003 0304 	and.w	r3, r3, #4
 8001ca0:	60fb      	str	r3, [r7, #12]
 8001ca2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001ca4:	2340      	movs	r3, #64	@ 0x40
 8001ca6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cac:	2300      	movs	r3, #0
 8001cae:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cb0:	f107 0318 	add.w	r3, r7, #24
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	4816      	ldr	r0, [pc, #88]	@ (8001d10 <HAL_TIM_Base_MspInit+0xf0>)
 8001cb8:	f000 fe60 	bl	800297c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 6, 0);
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	2106      	movs	r1, #6
 8001cc0:	201d      	movs	r0, #29
 8001cc2:	f000 fe24 	bl	800290e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001cc6:	201d      	movs	r0, #29
 8001cc8:	f000 fe3d 	bl	8002946 <HAL_NVIC_EnableIRQ>
}
 8001ccc:	e018      	b.n	8001d00 <HAL_TIM_Base_MspInit+0xe0>
  else if(tim_baseHandle->Instance==TIM4)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4a10      	ldr	r2, [pc, #64]	@ (8001d14 <HAL_TIM_Base_MspInit+0xf4>)
 8001cd4:	4293      	cmp	r3, r2
 8001cd6:	d113      	bne.n	8001d00 <HAL_TIM_Base_MspInit+0xe0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001cd8:	4b0b      	ldr	r3, [pc, #44]	@ (8001d08 <HAL_TIM_Base_MspInit+0xe8>)
 8001cda:	69db      	ldr	r3, [r3, #28]
 8001cdc:	4a0a      	ldr	r2, [pc, #40]	@ (8001d08 <HAL_TIM_Base_MspInit+0xe8>)
 8001cde:	f043 0304 	orr.w	r3, r3, #4
 8001ce2:	61d3      	str	r3, [r2, #28]
 8001ce4:	4b08      	ldr	r3, [pc, #32]	@ (8001d08 <HAL_TIM_Base_MspInit+0xe8>)
 8001ce6:	69db      	ldr	r3, [r3, #28]
 8001ce8:	f003 0304 	and.w	r3, r3, #4
 8001cec:	60bb      	str	r3, [r7, #8]
 8001cee:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 6, 0);
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	2106      	movs	r1, #6
 8001cf4:	201e      	movs	r0, #30
 8001cf6:	f000 fe0a 	bl	800290e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001cfa:	201e      	movs	r0, #30
 8001cfc:	f000 fe23 	bl	8002946 <HAL_NVIC_EnableIRQ>
}
 8001d00:	bf00      	nop
 8001d02:	3728      	adds	r7, #40	@ 0x28
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}
 8001d08:	40021000 	.word	0x40021000
 8001d0c:	40000400 	.word	0x40000400
 8001d10:	40010800 	.word	0x40010800
 8001d14:	40000800 	.word	0x40000800

08001d18 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b088      	sub	sp, #32
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d20:	f107 0310 	add.w	r3, r7, #16
 8001d24:	2200      	movs	r2, #0
 8001d26:	601a      	str	r2, [r3, #0]
 8001d28:	605a      	str	r2, [r3, #4]
 8001d2a:	609a      	str	r2, [r3, #8]
 8001d2c:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM3)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4a1f      	ldr	r2, [pc, #124]	@ (8001db0 <HAL_TIM_MspPostInit+0x98>)
 8001d34:	4293      	cmp	r3, r2
 8001d36:	d118      	bne.n	8001d6a <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d38:	4b1e      	ldr	r3, [pc, #120]	@ (8001db4 <HAL_TIM_MspPostInit+0x9c>)
 8001d3a:	699b      	ldr	r3, [r3, #24]
 8001d3c:	4a1d      	ldr	r2, [pc, #116]	@ (8001db4 <HAL_TIM_MspPostInit+0x9c>)
 8001d3e:	f043 0308 	orr.w	r3, r3, #8
 8001d42:	6193      	str	r3, [r2, #24]
 8001d44:	4b1b      	ldr	r3, [pc, #108]	@ (8001db4 <HAL_TIM_MspPostInit+0x9c>)
 8001d46:	699b      	ldr	r3, [r3, #24]
 8001d48:	f003 0308 	and.w	r3, r3, #8
 8001d4c:	60fb      	str	r3, [r7, #12]
 8001d4e:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001d50:	2301      	movs	r3, #1
 8001d52:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d54:	2302      	movs	r3, #2
 8001d56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d58:	2302      	movs	r3, #2
 8001d5a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d5c:	f107 0310 	add.w	r3, r7, #16
 8001d60:	4619      	mov	r1, r3
 8001d62:	4815      	ldr	r0, [pc, #84]	@ (8001db8 <HAL_TIM_MspPostInit+0xa0>)
 8001d64:	f000 fe0a 	bl	800297c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001d68:	e01d      	b.n	8001da6 <HAL_TIM_MspPostInit+0x8e>
  else if(timHandle->Instance==TIM4)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4a13      	ldr	r2, [pc, #76]	@ (8001dbc <HAL_TIM_MspPostInit+0xa4>)
 8001d70:	4293      	cmp	r3, r2
 8001d72:	d118      	bne.n	8001da6 <HAL_TIM_MspPostInit+0x8e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d74:	4b0f      	ldr	r3, [pc, #60]	@ (8001db4 <HAL_TIM_MspPostInit+0x9c>)
 8001d76:	699b      	ldr	r3, [r3, #24]
 8001d78:	4a0e      	ldr	r2, [pc, #56]	@ (8001db4 <HAL_TIM_MspPostInit+0x9c>)
 8001d7a:	f043 0308 	orr.w	r3, r3, #8
 8001d7e:	6193      	str	r3, [r2, #24]
 8001d80:	4b0c      	ldr	r3, [pc, #48]	@ (8001db4 <HAL_TIM_MspPostInit+0x9c>)
 8001d82:	699b      	ldr	r3, [r3, #24]
 8001d84:	f003 0308 	and.w	r3, r3, #8
 8001d88:	60bb      	str	r3, [r7, #8]
 8001d8a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 8001d8c:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 8001d90:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d92:	2302      	movs	r3, #2
 8001d94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d96:	2302      	movs	r3, #2
 8001d98:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d9a:	f107 0310 	add.w	r3, r7, #16
 8001d9e:	4619      	mov	r1, r3
 8001da0:	4805      	ldr	r0, [pc, #20]	@ (8001db8 <HAL_TIM_MspPostInit+0xa0>)
 8001da2:	f000 fdeb 	bl	800297c <HAL_GPIO_Init>
}
 8001da6:	bf00      	nop
 8001da8:	3720      	adds	r7, #32
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	bf00      	nop
 8001db0:	40000400 	.word	0x40000400
 8001db4:	40021000 	.word	0x40021000
 8001db8:	40010c00 	.word	0x40010c00
 8001dbc:	40000800 	.word	0x40000800

08001dc0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001dc4:	4b11      	ldr	r3, [pc, #68]	@ (8001e0c <MX_USART2_UART_Init+0x4c>)
 8001dc6:	4a12      	ldr	r2, [pc, #72]	@ (8001e10 <MX_USART2_UART_Init+0x50>)
 8001dc8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001dca:	4b10      	ldr	r3, [pc, #64]	@ (8001e0c <MX_USART2_UART_Init+0x4c>)
 8001dcc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001dd0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001dd2:	4b0e      	ldr	r3, [pc, #56]	@ (8001e0c <MX_USART2_UART_Init+0x4c>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001dd8:	4b0c      	ldr	r3, [pc, #48]	@ (8001e0c <MX_USART2_UART_Init+0x4c>)
 8001dda:	2200      	movs	r2, #0
 8001ddc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001dde:	4b0b      	ldr	r3, [pc, #44]	@ (8001e0c <MX_USART2_UART_Init+0x4c>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001de4:	4b09      	ldr	r3, [pc, #36]	@ (8001e0c <MX_USART2_UART_Init+0x4c>)
 8001de6:	220c      	movs	r2, #12
 8001de8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001dea:	4b08      	ldr	r3, [pc, #32]	@ (8001e0c <MX_USART2_UART_Init+0x4c>)
 8001dec:	2200      	movs	r2, #0
 8001dee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001df0:	4b06      	ldr	r3, [pc, #24]	@ (8001e0c <MX_USART2_UART_Init+0x4c>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001df6:	4805      	ldr	r0, [pc, #20]	@ (8001e0c <MX_USART2_UART_Init+0x4c>)
 8001df8:	f003 f84c 	bl	8004e94 <HAL_UART_Init>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d001      	beq.n	8001e06 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001e02:	f7ff fb21 	bl	8001448 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001e06:	bf00      	nop
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	20000318 	.word	0x20000318
 8001e10:	40004400 	.word	0x40004400

08001e14 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b088      	sub	sp, #32
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e1c:	f107 0310 	add.w	r3, r7, #16
 8001e20:	2200      	movs	r2, #0
 8001e22:	601a      	str	r2, [r3, #0]
 8001e24:	605a      	str	r2, [r3, #4]
 8001e26:	609a      	str	r2, [r3, #8]
 8001e28:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4a1b      	ldr	r2, [pc, #108]	@ (8001e9c <HAL_UART_MspInit+0x88>)
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d12f      	bne.n	8001e94 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001e34:	4b1a      	ldr	r3, [pc, #104]	@ (8001ea0 <HAL_UART_MspInit+0x8c>)
 8001e36:	69db      	ldr	r3, [r3, #28]
 8001e38:	4a19      	ldr	r2, [pc, #100]	@ (8001ea0 <HAL_UART_MspInit+0x8c>)
 8001e3a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e3e:	61d3      	str	r3, [r2, #28]
 8001e40:	4b17      	ldr	r3, [pc, #92]	@ (8001ea0 <HAL_UART_MspInit+0x8c>)
 8001e42:	69db      	ldr	r3, [r3, #28]
 8001e44:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e48:	60fb      	str	r3, [r7, #12]
 8001e4a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e4c:	4b14      	ldr	r3, [pc, #80]	@ (8001ea0 <HAL_UART_MspInit+0x8c>)
 8001e4e:	699b      	ldr	r3, [r3, #24]
 8001e50:	4a13      	ldr	r2, [pc, #76]	@ (8001ea0 <HAL_UART_MspInit+0x8c>)
 8001e52:	f043 0304 	orr.w	r3, r3, #4
 8001e56:	6193      	str	r3, [r2, #24]
 8001e58:	4b11      	ldr	r3, [pc, #68]	@ (8001ea0 <HAL_UART_MspInit+0x8c>)
 8001e5a:	699b      	ldr	r3, [r3, #24]
 8001e5c:	f003 0304 	and.w	r3, r3, #4
 8001e60:	60bb      	str	r3, [r7, #8]
 8001e62:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001e64:	2304      	movs	r3, #4
 8001e66:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e68:	2302      	movs	r3, #2
 8001e6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e6c:	2303      	movs	r3, #3
 8001e6e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e70:	f107 0310 	add.w	r3, r7, #16
 8001e74:	4619      	mov	r1, r3
 8001e76:	480b      	ldr	r0, [pc, #44]	@ (8001ea4 <HAL_UART_MspInit+0x90>)
 8001e78:	f000 fd80 	bl	800297c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001e7c:	2308      	movs	r3, #8
 8001e7e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e80:	2300      	movs	r3, #0
 8001e82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e84:	2300      	movs	r3, #0
 8001e86:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e88:	f107 0310 	add.w	r3, r7, #16
 8001e8c:	4619      	mov	r1, r3
 8001e8e:	4805      	ldr	r0, [pc, #20]	@ (8001ea4 <HAL_UART_MspInit+0x90>)
 8001e90:	f000 fd74 	bl	800297c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001e94:	bf00      	nop
 8001e96:	3720      	adds	r7, #32
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bd80      	pop	{r7, pc}
 8001e9c:	40004400 	.word	0x40004400
 8001ea0:	40021000 	.word	0x40021000
 8001ea4:	40010800 	.word	0x40010800

08001ea8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001ea8:	f7ff fd32 	bl	8001910 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001eac:	480b      	ldr	r0, [pc, #44]	@ (8001edc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001eae:	490c      	ldr	r1, [pc, #48]	@ (8001ee0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001eb0:	4a0c      	ldr	r2, [pc, #48]	@ (8001ee4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001eb2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001eb4:	e002      	b.n	8001ebc <LoopCopyDataInit>

08001eb6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001eb6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001eb8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001eba:	3304      	adds	r3, #4

08001ebc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ebc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ebe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ec0:	d3f9      	bcc.n	8001eb6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ec2:	4a09      	ldr	r2, [pc, #36]	@ (8001ee8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001ec4:	4c09      	ldr	r4, [pc, #36]	@ (8001eec <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001ec6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ec8:	e001      	b.n	8001ece <LoopFillZerobss>

08001eca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001eca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ecc:	3204      	adds	r2, #4

08001ece <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ece:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ed0:	d3fb      	bcc.n	8001eca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ed2:	f003 ffbd 	bl	8005e50 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001ed6:	f7ff fa0b 	bl	80012f0 <main>
  bx lr
 8001eda:	4770      	bx	lr
  ldr r0, =_sdata
 8001edc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ee0:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001ee4:	08007fd8 	.word	0x08007fd8
  ldr r2, =_sbss
 8001ee8:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001eec:	200004b0 	.word	0x200004b0

08001ef0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001ef0:	e7fe      	b.n	8001ef0 <ADC1_2_IRQHandler>
	...

08001ef4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ef8:	4b08      	ldr	r3, [pc, #32]	@ (8001f1c <HAL_Init+0x28>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a07      	ldr	r2, [pc, #28]	@ (8001f1c <HAL_Init+0x28>)
 8001efe:	f043 0310 	orr.w	r3, r3, #16
 8001f02:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f04:	2003      	movs	r0, #3
 8001f06:	f000 fcf7 	bl	80028f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f0a:	200f      	movs	r0, #15
 8001f0c:	f000 f808 	bl	8001f20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f10:	f7ff fbc0 	bl	8001694 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f14:	2300      	movs	r3, #0
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	bf00      	nop
 8001f1c:	40022000 	.word	0x40022000

08001f20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b082      	sub	sp, #8
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f28:	4b12      	ldr	r3, [pc, #72]	@ (8001f74 <HAL_InitTick+0x54>)
 8001f2a:	681a      	ldr	r2, [r3, #0]
 8001f2c:	4b12      	ldr	r3, [pc, #72]	@ (8001f78 <HAL_InitTick+0x58>)
 8001f2e:	781b      	ldrb	r3, [r3, #0]
 8001f30:	4619      	mov	r1, r3
 8001f32:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001f36:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f000 fd0f 	bl	8002962 <HAL_SYSTICK_Config>
 8001f44:	4603      	mov	r3, r0
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d001      	beq.n	8001f4e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e00e      	b.n	8001f6c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2b0f      	cmp	r3, #15
 8001f52:	d80a      	bhi.n	8001f6a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f54:	2200      	movs	r2, #0
 8001f56:	6879      	ldr	r1, [r7, #4]
 8001f58:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001f5c:	f000 fcd7 	bl	800290e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f60:	4a06      	ldr	r2, [pc, #24]	@ (8001f7c <HAL_InitTick+0x5c>)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f66:	2300      	movs	r3, #0
 8001f68:	e000      	b.n	8001f6c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f6a:	2301      	movs	r3, #1
}
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	3708      	adds	r7, #8
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bd80      	pop	{r7, pc}
 8001f74:	20000000 	.word	0x20000000
 8001f78:	20000008 	.word	0x20000008
 8001f7c:	20000004 	.word	0x20000004

08001f80 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f80:	b480      	push	{r7}
 8001f82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f84:	4b05      	ldr	r3, [pc, #20]	@ (8001f9c <HAL_IncTick+0x1c>)
 8001f86:	781b      	ldrb	r3, [r3, #0]
 8001f88:	461a      	mov	r2, r3
 8001f8a:	4b05      	ldr	r3, [pc, #20]	@ (8001fa0 <HAL_IncTick+0x20>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4413      	add	r3, r2
 8001f90:	4a03      	ldr	r2, [pc, #12]	@ (8001fa0 <HAL_IncTick+0x20>)
 8001f92:	6013      	str	r3, [r2, #0]
}
 8001f94:	bf00      	nop
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bc80      	pop	{r7}
 8001f9a:	4770      	bx	lr
 8001f9c:	20000008 	.word	0x20000008
 8001fa0:	20000360 	.word	0x20000360

08001fa4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	af00      	add	r7, sp, #0
  return uwTick;
 8001fa8:	4b02      	ldr	r3, [pc, #8]	@ (8001fb4 <HAL_GetTick+0x10>)
 8001faa:	681b      	ldr	r3, [r3, #0]
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bc80      	pop	{r7}
 8001fb2:	4770      	bx	lr
 8001fb4:	20000360 	.word	0x20000360

08001fb8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b086      	sub	sp, #24
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d101      	bne.n	8001fda <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	e0be      	b.n	8002158 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	689b      	ldr	r3, [r3, #8]
 8001fde:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d109      	bne.n	8001ffc <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2200      	movs	r2, #0
 8001fec:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001ff6:	6878      	ldr	r0, [r7, #4]
 8001ff8:	f7ff f802 	bl	8001000 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001ffc:	6878      	ldr	r0, [r7, #4]
 8001ffe:	f000 fabf 	bl	8002580 <ADC_ConversionStop_Disable>
 8002002:	4603      	mov	r3, r0
 8002004:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800200a:	f003 0310 	and.w	r3, r3, #16
 800200e:	2b00      	cmp	r3, #0
 8002010:	f040 8099 	bne.w	8002146 <HAL_ADC_Init+0x18e>
 8002014:	7dfb      	ldrb	r3, [r7, #23]
 8002016:	2b00      	cmp	r3, #0
 8002018:	f040 8095 	bne.w	8002146 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002020:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002024:	f023 0302 	bic.w	r3, r3, #2
 8002028:	f043 0202 	orr.w	r2, r3, #2
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002038:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	7b1b      	ldrb	r3, [r3, #12]
 800203e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002040:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002042:	68ba      	ldr	r2, [r7, #8]
 8002044:	4313      	orrs	r3, r2
 8002046:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	689b      	ldr	r3, [r3, #8]
 800204c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002050:	d003      	beq.n	800205a <HAL_ADC_Init+0xa2>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	689b      	ldr	r3, [r3, #8]
 8002056:	2b01      	cmp	r3, #1
 8002058:	d102      	bne.n	8002060 <HAL_ADC_Init+0xa8>
 800205a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800205e:	e000      	b.n	8002062 <HAL_ADC_Init+0xaa>
 8002060:	2300      	movs	r3, #0
 8002062:	693a      	ldr	r2, [r7, #16]
 8002064:	4313      	orrs	r3, r2
 8002066:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	7d1b      	ldrb	r3, [r3, #20]
 800206c:	2b01      	cmp	r3, #1
 800206e:	d119      	bne.n	80020a4 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	7b1b      	ldrb	r3, [r3, #12]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d109      	bne.n	800208c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	699b      	ldr	r3, [r3, #24]
 800207c:	3b01      	subs	r3, #1
 800207e:	035a      	lsls	r2, r3, #13
 8002080:	693b      	ldr	r3, [r7, #16]
 8002082:	4313      	orrs	r3, r2
 8002084:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002088:	613b      	str	r3, [r7, #16]
 800208a:	e00b      	b.n	80020a4 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002090:	f043 0220 	orr.w	r2, r3, #32
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800209c:	f043 0201 	orr.w	r2, r3, #1
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	693a      	ldr	r2, [r7, #16]
 80020b4:	430a      	orrs	r2, r1
 80020b6:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	689a      	ldr	r2, [r3, #8]
 80020be:	4b28      	ldr	r3, [pc, #160]	@ (8002160 <HAL_ADC_Init+0x1a8>)
 80020c0:	4013      	ands	r3, r2
 80020c2:	687a      	ldr	r2, [r7, #4]
 80020c4:	6812      	ldr	r2, [r2, #0]
 80020c6:	68b9      	ldr	r1, [r7, #8]
 80020c8:	430b      	orrs	r3, r1
 80020ca:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	689b      	ldr	r3, [r3, #8]
 80020d0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80020d4:	d003      	beq.n	80020de <HAL_ADC_Init+0x126>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	689b      	ldr	r3, [r3, #8]
 80020da:	2b01      	cmp	r3, #1
 80020dc:	d104      	bne.n	80020e8 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	691b      	ldr	r3, [r3, #16]
 80020e2:	3b01      	subs	r3, #1
 80020e4:	051b      	lsls	r3, r3, #20
 80020e6:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020ee:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	68fa      	ldr	r2, [r7, #12]
 80020f8:	430a      	orrs	r2, r1
 80020fa:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	689a      	ldr	r2, [r3, #8]
 8002102:	4b18      	ldr	r3, [pc, #96]	@ (8002164 <HAL_ADC_Init+0x1ac>)
 8002104:	4013      	ands	r3, r2
 8002106:	68ba      	ldr	r2, [r7, #8]
 8002108:	429a      	cmp	r2, r3
 800210a:	d10b      	bne.n	8002124 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2200      	movs	r2, #0
 8002110:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002116:	f023 0303 	bic.w	r3, r3, #3
 800211a:	f043 0201 	orr.w	r2, r3, #1
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002122:	e018      	b.n	8002156 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002128:	f023 0312 	bic.w	r3, r3, #18
 800212c:	f043 0210 	orr.w	r2, r3, #16
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002138:	f043 0201 	orr.w	r2, r3, #1
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002140:	2301      	movs	r3, #1
 8002142:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002144:	e007      	b.n	8002156 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800214a:	f043 0210 	orr.w	r2, r3, #16
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002152:	2301      	movs	r3, #1
 8002154:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002156:	7dfb      	ldrb	r3, [r7, #23]
}
 8002158:	4618      	mov	r0, r3
 800215a:	3718      	adds	r7, #24
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}
 8002160:	ffe1f7fd 	.word	0xffe1f7fd
 8002164:	ff1f0efe 	.word	0xff1f0efe

08002168 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b084      	sub	sp, #16
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002170:	2300      	movs	r3, #0
 8002172:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800217a:	2b01      	cmp	r3, #1
 800217c:	d101      	bne.n	8002182 <HAL_ADC_Start+0x1a>
 800217e:	2302      	movs	r3, #2
 8002180:	e098      	b.n	80022b4 <HAL_ADC_Start+0x14c>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2201      	movs	r2, #1
 8002186:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800218a:	6878      	ldr	r0, [r7, #4]
 800218c:	f000 f99e 	bl	80024cc <ADC_Enable>
 8002190:	4603      	mov	r3, r0
 8002192:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8002194:	7bfb      	ldrb	r3, [r7, #15]
 8002196:	2b00      	cmp	r3, #0
 8002198:	f040 8087 	bne.w	80022aa <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021a0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80021a4:	f023 0301 	bic.w	r3, r3, #1
 80021a8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a41      	ldr	r2, [pc, #260]	@ (80022bc <HAL_ADC_Start+0x154>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d105      	bne.n	80021c6 <HAL_ADC_Start+0x5e>
 80021ba:	4b41      	ldr	r3, [pc, #260]	@ (80022c0 <HAL_ADC_Start+0x158>)
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d115      	bne.n	80021f2 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021ca:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d026      	beq.n	800222e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021e4:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80021e8:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80021f0:	e01d      	b.n	800222e <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021f6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4a2f      	ldr	r2, [pc, #188]	@ (80022c0 <HAL_ADC_Start+0x158>)
 8002204:	4293      	cmp	r3, r2
 8002206:	d004      	beq.n	8002212 <HAL_ADC_Start+0xaa>
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a2b      	ldr	r2, [pc, #172]	@ (80022bc <HAL_ADC_Start+0x154>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d10d      	bne.n	800222e <HAL_ADC_Start+0xc6>
 8002212:	4b2b      	ldr	r3, [pc, #172]	@ (80022c0 <HAL_ADC_Start+0x158>)
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800221a:	2b00      	cmp	r3, #0
 800221c:	d007      	beq.n	800222e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002222:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002226:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002232:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002236:	2b00      	cmp	r3, #0
 8002238:	d006      	beq.n	8002248 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800223e:	f023 0206 	bic.w	r2, r3, #6
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002246:	e002      	b.n	800224e <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2200      	movs	r2, #0
 800224c:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2200      	movs	r2, #0
 8002252:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f06f 0202 	mvn.w	r2, #2
 800225e:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	689b      	ldr	r3, [r3, #8]
 8002266:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800226a:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 800226e:	d113      	bne.n	8002298 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002274:	4a11      	ldr	r2, [pc, #68]	@ (80022bc <HAL_ADC_Start+0x154>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d105      	bne.n	8002286 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800227a:	4b11      	ldr	r3, [pc, #68]	@ (80022c0 <HAL_ADC_Start+0x158>)
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002282:	2b00      	cmp	r3, #0
 8002284:	d108      	bne.n	8002298 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	689a      	ldr	r2, [r3, #8]
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8002294:	609a      	str	r2, [r3, #8]
 8002296:	e00c      	b.n	80022b2 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	689a      	ldr	r2, [r3, #8]
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 80022a6:	609a      	str	r2, [r3, #8]
 80022a8:	e003      	b.n	80022b2 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2200      	movs	r2, #0
 80022ae:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 80022b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80022b4:	4618      	mov	r0, r3
 80022b6:	3710      	adds	r7, #16
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bd80      	pop	{r7, pc}
 80022bc:	40012800 	.word	0x40012800
 80022c0:	40012400 	.word	0x40012400

080022c4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b083      	sub	sp, #12
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80022d2:	4618      	mov	r0, r3
 80022d4:	370c      	adds	r7, #12
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bc80      	pop	{r7}
 80022da:	4770      	bx	lr

080022dc <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80022dc:	b480      	push	{r7}
 80022de:	b085      	sub	sp, #20
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
 80022e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022e6:	2300      	movs	r3, #0
 80022e8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80022ea:	2300      	movs	r3, #0
 80022ec:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80022f4:	2b01      	cmp	r3, #1
 80022f6:	d101      	bne.n	80022fc <HAL_ADC_ConfigChannel+0x20>
 80022f8:	2302      	movs	r3, #2
 80022fa:	e0dc      	b.n	80024b6 <HAL_ADC_ConfigChannel+0x1da>
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2201      	movs	r2, #1
 8002300:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	2b06      	cmp	r3, #6
 800230a:	d81c      	bhi.n	8002346 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	685a      	ldr	r2, [r3, #4]
 8002316:	4613      	mov	r3, r2
 8002318:	009b      	lsls	r3, r3, #2
 800231a:	4413      	add	r3, r2
 800231c:	3b05      	subs	r3, #5
 800231e:	221f      	movs	r2, #31
 8002320:	fa02 f303 	lsl.w	r3, r2, r3
 8002324:	43db      	mvns	r3, r3
 8002326:	4019      	ands	r1, r3
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	6818      	ldr	r0, [r3, #0]
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	685a      	ldr	r2, [r3, #4]
 8002330:	4613      	mov	r3, r2
 8002332:	009b      	lsls	r3, r3, #2
 8002334:	4413      	add	r3, r2
 8002336:	3b05      	subs	r3, #5
 8002338:	fa00 f203 	lsl.w	r2, r0, r3
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	430a      	orrs	r2, r1
 8002342:	635a      	str	r2, [r3, #52]	@ 0x34
 8002344:	e03c      	b.n	80023c0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	2b0c      	cmp	r3, #12
 800234c:	d81c      	bhi.n	8002388 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	685a      	ldr	r2, [r3, #4]
 8002358:	4613      	mov	r3, r2
 800235a:	009b      	lsls	r3, r3, #2
 800235c:	4413      	add	r3, r2
 800235e:	3b23      	subs	r3, #35	@ 0x23
 8002360:	221f      	movs	r2, #31
 8002362:	fa02 f303 	lsl.w	r3, r2, r3
 8002366:	43db      	mvns	r3, r3
 8002368:	4019      	ands	r1, r3
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	6818      	ldr	r0, [r3, #0]
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	685a      	ldr	r2, [r3, #4]
 8002372:	4613      	mov	r3, r2
 8002374:	009b      	lsls	r3, r3, #2
 8002376:	4413      	add	r3, r2
 8002378:	3b23      	subs	r3, #35	@ 0x23
 800237a:	fa00 f203 	lsl.w	r2, r0, r3
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	430a      	orrs	r2, r1
 8002384:	631a      	str	r2, [r3, #48]	@ 0x30
 8002386:	e01b      	b.n	80023c0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	685a      	ldr	r2, [r3, #4]
 8002392:	4613      	mov	r3, r2
 8002394:	009b      	lsls	r3, r3, #2
 8002396:	4413      	add	r3, r2
 8002398:	3b41      	subs	r3, #65	@ 0x41
 800239a:	221f      	movs	r2, #31
 800239c:	fa02 f303 	lsl.w	r3, r2, r3
 80023a0:	43db      	mvns	r3, r3
 80023a2:	4019      	ands	r1, r3
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	6818      	ldr	r0, [r3, #0]
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	685a      	ldr	r2, [r3, #4]
 80023ac:	4613      	mov	r3, r2
 80023ae:	009b      	lsls	r3, r3, #2
 80023b0:	4413      	add	r3, r2
 80023b2:	3b41      	subs	r3, #65	@ 0x41
 80023b4:	fa00 f203 	lsl.w	r2, r0, r3
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	430a      	orrs	r2, r1
 80023be:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	2b09      	cmp	r3, #9
 80023c6:	d91c      	bls.n	8002402 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	68d9      	ldr	r1, [r3, #12]
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	681a      	ldr	r2, [r3, #0]
 80023d2:	4613      	mov	r3, r2
 80023d4:	005b      	lsls	r3, r3, #1
 80023d6:	4413      	add	r3, r2
 80023d8:	3b1e      	subs	r3, #30
 80023da:	2207      	movs	r2, #7
 80023dc:	fa02 f303 	lsl.w	r3, r2, r3
 80023e0:	43db      	mvns	r3, r3
 80023e2:	4019      	ands	r1, r3
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	6898      	ldr	r0, [r3, #8]
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	681a      	ldr	r2, [r3, #0]
 80023ec:	4613      	mov	r3, r2
 80023ee:	005b      	lsls	r3, r3, #1
 80023f0:	4413      	add	r3, r2
 80023f2:	3b1e      	subs	r3, #30
 80023f4:	fa00 f203 	lsl.w	r2, r0, r3
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	430a      	orrs	r2, r1
 80023fe:	60da      	str	r2, [r3, #12]
 8002400:	e019      	b.n	8002436 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	6919      	ldr	r1, [r3, #16]
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	681a      	ldr	r2, [r3, #0]
 800240c:	4613      	mov	r3, r2
 800240e:	005b      	lsls	r3, r3, #1
 8002410:	4413      	add	r3, r2
 8002412:	2207      	movs	r2, #7
 8002414:	fa02 f303 	lsl.w	r3, r2, r3
 8002418:	43db      	mvns	r3, r3
 800241a:	4019      	ands	r1, r3
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	6898      	ldr	r0, [r3, #8]
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	681a      	ldr	r2, [r3, #0]
 8002424:	4613      	mov	r3, r2
 8002426:	005b      	lsls	r3, r3, #1
 8002428:	4413      	add	r3, r2
 800242a:	fa00 f203 	lsl.w	r2, r0, r3
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	430a      	orrs	r2, r1
 8002434:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	2b10      	cmp	r3, #16
 800243c:	d003      	beq.n	8002446 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002442:	2b11      	cmp	r3, #17
 8002444:	d132      	bne.n	80024ac <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4a1d      	ldr	r2, [pc, #116]	@ (80024c0 <HAL_ADC_ConfigChannel+0x1e4>)
 800244c:	4293      	cmp	r3, r2
 800244e:	d125      	bne.n	800249c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	689b      	ldr	r3, [r3, #8]
 8002456:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800245a:	2b00      	cmp	r3, #0
 800245c:	d126      	bne.n	80024ac <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	689a      	ldr	r2, [r3, #8]
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 800246c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	2b10      	cmp	r3, #16
 8002474:	d11a      	bne.n	80024ac <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002476:	4b13      	ldr	r3, [pc, #76]	@ (80024c4 <HAL_ADC_ConfigChannel+0x1e8>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4a13      	ldr	r2, [pc, #76]	@ (80024c8 <HAL_ADC_ConfigChannel+0x1ec>)
 800247c:	fba2 2303 	umull	r2, r3, r2, r3
 8002480:	0c9a      	lsrs	r2, r3, #18
 8002482:	4613      	mov	r3, r2
 8002484:	009b      	lsls	r3, r3, #2
 8002486:	4413      	add	r3, r2
 8002488:	005b      	lsls	r3, r3, #1
 800248a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800248c:	e002      	b.n	8002494 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800248e:	68bb      	ldr	r3, [r7, #8]
 8002490:	3b01      	subs	r3, #1
 8002492:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002494:	68bb      	ldr	r3, [r7, #8]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d1f9      	bne.n	800248e <HAL_ADC_ConfigChannel+0x1b2>
 800249a:	e007      	b.n	80024ac <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024a0:	f043 0220 	orr.w	r2, r3, #32
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 80024a8:	2301      	movs	r3, #1
 80024aa:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2200      	movs	r2, #0
 80024b0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80024b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80024b6:	4618      	mov	r0, r3
 80024b8:	3714      	adds	r7, #20
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bc80      	pop	{r7}
 80024be:	4770      	bx	lr
 80024c0:	40012400 	.word	0x40012400
 80024c4:	20000000 	.word	0x20000000
 80024c8:	431bde83 	.word	0x431bde83

080024cc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b084      	sub	sp, #16
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80024d4:	2300      	movs	r3, #0
 80024d6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80024d8:	2300      	movs	r3, #0
 80024da:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	689b      	ldr	r3, [r3, #8]
 80024e2:	f003 0301 	and.w	r3, r3, #1
 80024e6:	2b01      	cmp	r3, #1
 80024e8:	d040      	beq.n	800256c <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	689a      	ldr	r2, [r3, #8]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f042 0201 	orr.w	r2, r2, #1
 80024f8:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80024fa:	4b1f      	ldr	r3, [pc, #124]	@ (8002578 <ADC_Enable+0xac>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4a1f      	ldr	r2, [pc, #124]	@ (800257c <ADC_Enable+0xb0>)
 8002500:	fba2 2303 	umull	r2, r3, r2, r3
 8002504:	0c9b      	lsrs	r3, r3, #18
 8002506:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002508:	e002      	b.n	8002510 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800250a:	68bb      	ldr	r3, [r7, #8]
 800250c:	3b01      	subs	r3, #1
 800250e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002510:	68bb      	ldr	r3, [r7, #8]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d1f9      	bne.n	800250a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002516:	f7ff fd45 	bl	8001fa4 <HAL_GetTick>
 800251a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 800251c:	e01f      	b.n	800255e <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800251e:	f7ff fd41 	bl	8001fa4 <HAL_GetTick>
 8002522:	4602      	mov	r2, r0
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	1ad3      	subs	r3, r2, r3
 8002528:	2b02      	cmp	r3, #2
 800252a:	d918      	bls.n	800255e <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	689b      	ldr	r3, [r3, #8]
 8002532:	f003 0301 	and.w	r3, r3, #1
 8002536:	2b01      	cmp	r3, #1
 8002538:	d011      	beq.n	800255e <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800253e:	f043 0210 	orr.w	r2, r3, #16
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800254a:	f043 0201 	orr.w	r2, r3, #1
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2200      	movs	r2, #0
 8002556:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 800255a:	2301      	movs	r3, #1
 800255c:	e007      	b.n	800256e <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	689b      	ldr	r3, [r3, #8]
 8002564:	f003 0301 	and.w	r3, r3, #1
 8002568:	2b01      	cmp	r3, #1
 800256a:	d1d8      	bne.n	800251e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800256c:	2300      	movs	r3, #0
}
 800256e:	4618      	mov	r0, r3
 8002570:	3710      	adds	r7, #16
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}
 8002576:	bf00      	nop
 8002578:	20000000 	.word	0x20000000
 800257c:	431bde83 	.word	0x431bde83

08002580 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b084      	sub	sp, #16
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002588:	2300      	movs	r3, #0
 800258a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	689b      	ldr	r3, [r3, #8]
 8002592:	f003 0301 	and.w	r3, r3, #1
 8002596:	2b01      	cmp	r3, #1
 8002598:	d12e      	bne.n	80025f8 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	689a      	ldr	r2, [r3, #8]
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f022 0201 	bic.w	r2, r2, #1
 80025a8:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80025aa:	f7ff fcfb 	bl	8001fa4 <HAL_GetTick>
 80025ae:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80025b0:	e01b      	b.n	80025ea <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80025b2:	f7ff fcf7 	bl	8001fa4 <HAL_GetTick>
 80025b6:	4602      	mov	r2, r0
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	1ad3      	subs	r3, r2, r3
 80025bc:	2b02      	cmp	r3, #2
 80025be:	d914      	bls.n	80025ea <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	689b      	ldr	r3, [r3, #8]
 80025c6:	f003 0301 	and.w	r3, r3, #1
 80025ca:	2b01      	cmp	r3, #1
 80025cc:	d10d      	bne.n	80025ea <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025d2:	f043 0210 	orr.w	r2, r3, #16
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025de:	f043 0201 	orr.w	r2, r3, #1
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 80025e6:	2301      	movs	r3, #1
 80025e8:	e007      	b.n	80025fa <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	689b      	ldr	r3, [r3, #8]
 80025f0:	f003 0301 	and.w	r3, r3, #1
 80025f4:	2b01      	cmp	r3, #1
 80025f6:	d0dc      	beq.n	80025b2 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80025f8:	2300      	movs	r3, #0
}
 80025fa:	4618      	mov	r0, r3
 80025fc:	3710      	adds	r7, #16
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}
	...

08002604 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8002604:	b590      	push	{r4, r7, lr}
 8002606:	b087      	sub	sp, #28
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800260c:	2300      	movs	r3, #0
 800260e:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8002610:	2300      	movs	r3, #0
 8002612:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800261a:	2b01      	cmp	r3, #1
 800261c:	d101      	bne.n	8002622 <HAL_ADCEx_Calibration_Start+0x1e>
 800261e:	2302      	movs	r3, #2
 8002620:	e097      	b.n	8002752 <HAL_ADCEx_Calibration_Start+0x14e>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2201      	movs	r2, #1
 8002626:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800262a:	6878      	ldr	r0, [r7, #4]
 800262c:	f7ff ffa8 	bl	8002580 <ADC_ConversionStop_Disable>
 8002630:	4603      	mov	r3, r0
 8002632:	75fb      	strb	r3, [r7, #23]
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 8002634:	6878      	ldr	r0, [r7, #4]
 8002636:	f7ff ff49 	bl	80024cc <ADC_Enable>
 800263a:	4603      	mov	r3, r0
 800263c:	75fb      	strb	r3, [r7, #23]

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 800263e:	7dfb      	ldrb	r3, [r7, #23]
 8002640:	2b00      	cmp	r3, #0
 8002642:	f040 8081 	bne.w	8002748 <HAL_ADCEx_Calibration_Start+0x144>
   {
     /* Set ADC state */
     ADC_STATE_CLR_SET(hadc->State,
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800264a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800264e:	f023 0302 	bic.w	r3, r3, #2
 8002652:	f043 0202 	orr.w	r2, r3, #2
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 800265a:	4b40      	ldr	r3, [pc, #256]	@ (800275c <HAL_ADCEx_Calibration_Start+0x158>)
 800265c:	681c      	ldr	r4, [r3, #0]
 800265e:	2002      	movs	r0, #2
 8002660:	f000 fffa 	bl	8003658 <HAL_RCCEx_GetPeriphCLKFreq>
 8002664:	4603      	mov	r3, r0
 8002666:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 800266a:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 800266c:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 800266e:	e002      	b.n	8002676 <HAL_ADCEx_Calibration_Start+0x72>
    {
      wait_loop_index--;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	3b01      	subs	r3, #1
 8002674:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d1f9      	bne.n	8002670 <HAL_ADCEx_Calibration_Start+0x6c>
    }

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	689a      	ldr	r2, [r3, #8]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f042 0208 	orr.w	r2, r2, #8
 800268a:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 800268c:	f7ff fc8a 	bl	8001fa4 <HAL_GetTick>
 8002690:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002692:	e01b      	b.n	80026cc <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8002694:	f7ff fc86 	bl	8001fa4 <HAL_GetTick>
 8002698:	4602      	mov	r2, r0
 800269a:	693b      	ldr	r3, [r7, #16]
 800269c:	1ad3      	subs	r3, r2, r3
 800269e:	2b0a      	cmp	r3, #10
 80026a0:	d914      	bls.n	80026cc <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	689b      	ldr	r3, [r3, #8]
 80026a8:	f003 0308 	and.w	r3, r3, #8
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d00d      	beq.n	80026cc <HAL_ADCEx_Calibration_Start+0xc8>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026b4:	f023 0312 	bic.w	r3, r3, #18
 80026b8:	f043 0210 	orr.w	r2, r3, #16
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2200      	movs	r2, #0
 80026c4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 80026c8:	2301      	movs	r3, #1
 80026ca:	e042      	b.n	8002752 <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	689b      	ldr	r3, [r3, #8]
 80026d2:	f003 0308 	and.w	r3, r3, #8
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d1dc      	bne.n	8002694 <HAL_ADCEx_Calibration_Start+0x90>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	689a      	ldr	r2, [r3, #8]
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f042 0204 	orr.w	r2, r2, #4
 80026e8:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 80026ea:	f7ff fc5b 	bl	8001fa4 <HAL_GetTick>
 80026ee:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80026f0:	e01b      	b.n	800272a <HAL_ADCEx_Calibration_Start+0x126>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80026f2:	f7ff fc57 	bl	8001fa4 <HAL_GetTick>
 80026f6:	4602      	mov	r2, r0
 80026f8:	693b      	ldr	r3, [r7, #16]
 80026fa:	1ad3      	subs	r3, r2, r3
 80026fc:	2b0a      	cmp	r3, #10
 80026fe:	d914      	bls.n	800272a <HAL_ADCEx_Calibration_Start+0x126>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	689b      	ldr	r3, [r3, #8]
 8002706:	f003 0304 	and.w	r3, r3, #4
 800270a:	2b00      	cmp	r3, #0
 800270c:	d00d      	beq.n	800272a <HAL_ADCEx_Calibration_Start+0x126>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002712:	f023 0312 	bic.w	r3, r3, #18
 8002716:	f043 0210 	orr.w	r2, r3, #16
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2200      	movs	r2, #0
 8002722:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8002726:	2301      	movs	r3, #1
 8002728:	e013      	b.n	8002752 <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	689b      	ldr	r3, [r3, #8]
 8002730:	f003 0304 	and.w	r3, r3, #4
 8002734:	2b00      	cmp	r3, #0
 8002736:	d1dc      	bne.n	80026f2 <HAL_ADCEx_Calibration_Start+0xee>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800273c:	f023 0303 	bic.w	r3, r3, #3
 8002740:	f043 0201 	orr.w	r2, r3, #1
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2200      	movs	r2, #0
 800274c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002750:	7dfb      	ldrb	r3, [r7, #23]
}
 8002752:	4618      	mov	r0, r3
 8002754:	371c      	adds	r7, #28
 8002756:	46bd      	mov	sp, r7
 8002758:	bd90      	pop	{r4, r7, pc}
 800275a:	bf00      	nop
 800275c:	20000000 	.word	0x20000000

08002760 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002760:	b480      	push	{r7}
 8002762:	b085      	sub	sp, #20
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	f003 0307 	and.w	r3, r3, #7
 800276e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002770:	4b0c      	ldr	r3, [pc, #48]	@ (80027a4 <__NVIC_SetPriorityGrouping+0x44>)
 8002772:	68db      	ldr	r3, [r3, #12]
 8002774:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002776:	68ba      	ldr	r2, [r7, #8]
 8002778:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800277c:	4013      	ands	r3, r2
 800277e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002784:	68bb      	ldr	r3, [r7, #8]
 8002786:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002788:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800278c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002790:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002792:	4a04      	ldr	r2, [pc, #16]	@ (80027a4 <__NVIC_SetPriorityGrouping+0x44>)
 8002794:	68bb      	ldr	r3, [r7, #8]
 8002796:	60d3      	str	r3, [r2, #12]
}
 8002798:	bf00      	nop
 800279a:	3714      	adds	r7, #20
 800279c:	46bd      	mov	sp, r7
 800279e:	bc80      	pop	{r7}
 80027a0:	4770      	bx	lr
 80027a2:	bf00      	nop
 80027a4:	e000ed00 	.word	0xe000ed00

080027a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80027a8:	b480      	push	{r7}
 80027aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027ac:	4b04      	ldr	r3, [pc, #16]	@ (80027c0 <__NVIC_GetPriorityGrouping+0x18>)
 80027ae:	68db      	ldr	r3, [r3, #12]
 80027b0:	0a1b      	lsrs	r3, r3, #8
 80027b2:	f003 0307 	and.w	r3, r3, #7
}
 80027b6:	4618      	mov	r0, r3
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bc80      	pop	{r7}
 80027bc:	4770      	bx	lr
 80027be:	bf00      	nop
 80027c0:	e000ed00 	.word	0xe000ed00

080027c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b083      	sub	sp, #12
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	4603      	mov	r3, r0
 80027cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	db0b      	blt.n	80027ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027d6:	79fb      	ldrb	r3, [r7, #7]
 80027d8:	f003 021f 	and.w	r2, r3, #31
 80027dc:	4906      	ldr	r1, [pc, #24]	@ (80027f8 <__NVIC_EnableIRQ+0x34>)
 80027de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027e2:	095b      	lsrs	r3, r3, #5
 80027e4:	2001      	movs	r0, #1
 80027e6:	fa00 f202 	lsl.w	r2, r0, r2
 80027ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80027ee:	bf00      	nop
 80027f0:	370c      	adds	r7, #12
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bc80      	pop	{r7}
 80027f6:	4770      	bx	lr
 80027f8:	e000e100 	.word	0xe000e100

080027fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027fc:	b480      	push	{r7}
 80027fe:	b083      	sub	sp, #12
 8002800:	af00      	add	r7, sp, #0
 8002802:	4603      	mov	r3, r0
 8002804:	6039      	str	r1, [r7, #0]
 8002806:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002808:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800280c:	2b00      	cmp	r3, #0
 800280e:	db0a      	blt.n	8002826 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	b2da      	uxtb	r2, r3
 8002814:	490c      	ldr	r1, [pc, #48]	@ (8002848 <__NVIC_SetPriority+0x4c>)
 8002816:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800281a:	0112      	lsls	r2, r2, #4
 800281c:	b2d2      	uxtb	r2, r2
 800281e:	440b      	add	r3, r1
 8002820:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002824:	e00a      	b.n	800283c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	b2da      	uxtb	r2, r3
 800282a:	4908      	ldr	r1, [pc, #32]	@ (800284c <__NVIC_SetPriority+0x50>)
 800282c:	79fb      	ldrb	r3, [r7, #7]
 800282e:	f003 030f 	and.w	r3, r3, #15
 8002832:	3b04      	subs	r3, #4
 8002834:	0112      	lsls	r2, r2, #4
 8002836:	b2d2      	uxtb	r2, r2
 8002838:	440b      	add	r3, r1
 800283a:	761a      	strb	r2, [r3, #24]
}
 800283c:	bf00      	nop
 800283e:	370c      	adds	r7, #12
 8002840:	46bd      	mov	sp, r7
 8002842:	bc80      	pop	{r7}
 8002844:	4770      	bx	lr
 8002846:	bf00      	nop
 8002848:	e000e100 	.word	0xe000e100
 800284c:	e000ed00 	.word	0xe000ed00

08002850 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002850:	b480      	push	{r7}
 8002852:	b089      	sub	sp, #36	@ 0x24
 8002854:	af00      	add	r7, sp, #0
 8002856:	60f8      	str	r0, [r7, #12]
 8002858:	60b9      	str	r1, [r7, #8]
 800285a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	f003 0307 	and.w	r3, r3, #7
 8002862:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002864:	69fb      	ldr	r3, [r7, #28]
 8002866:	f1c3 0307 	rsb	r3, r3, #7
 800286a:	2b04      	cmp	r3, #4
 800286c:	bf28      	it	cs
 800286e:	2304      	movcs	r3, #4
 8002870:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002872:	69fb      	ldr	r3, [r7, #28]
 8002874:	3304      	adds	r3, #4
 8002876:	2b06      	cmp	r3, #6
 8002878:	d902      	bls.n	8002880 <NVIC_EncodePriority+0x30>
 800287a:	69fb      	ldr	r3, [r7, #28]
 800287c:	3b03      	subs	r3, #3
 800287e:	e000      	b.n	8002882 <NVIC_EncodePriority+0x32>
 8002880:	2300      	movs	r3, #0
 8002882:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002884:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002888:	69bb      	ldr	r3, [r7, #24]
 800288a:	fa02 f303 	lsl.w	r3, r2, r3
 800288e:	43da      	mvns	r2, r3
 8002890:	68bb      	ldr	r3, [r7, #8]
 8002892:	401a      	ands	r2, r3
 8002894:	697b      	ldr	r3, [r7, #20]
 8002896:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002898:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800289c:	697b      	ldr	r3, [r7, #20]
 800289e:	fa01 f303 	lsl.w	r3, r1, r3
 80028a2:	43d9      	mvns	r1, r3
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028a8:	4313      	orrs	r3, r2
         );
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	3724      	adds	r7, #36	@ 0x24
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bc80      	pop	{r7}
 80028b2:	4770      	bx	lr

080028b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b082      	sub	sp, #8
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	3b01      	subs	r3, #1
 80028c0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80028c4:	d301      	bcc.n	80028ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80028c6:	2301      	movs	r3, #1
 80028c8:	e00f      	b.n	80028ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80028ca:	4a0a      	ldr	r2, [pc, #40]	@ (80028f4 <SysTick_Config+0x40>)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	3b01      	subs	r3, #1
 80028d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80028d2:	210f      	movs	r1, #15
 80028d4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80028d8:	f7ff ff90 	bl	80027fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80028dc:	4b05      	ldr	r3, [pc, #20]	@ (80028f4 <SysTick_Config+0x40>)
 80028de:	2200      	movs	r2, #0
 80028e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80028e2:	4b04      	ldr	r3, [pc, #16]	@ (80028f4 <SysTick_Config+0x40>)
 80028e4:	2207      	movs	r2, #7
 80028e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80028e8:	2300      	movs	r3, #0
}
 80028ea:	4618      	mov	r0, r3
 80028ec:	3708      	adds	r7, #8
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}
 80028f2:	bf00      	nop
 80028f4:	e000e010 	.word	0xe000e010

080028f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b082      	sub	sp, #8
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002900:	6878      	ldr	r0, [r7, #4]
 8002902:	f7ff ff2d 	bl	8002760 <__NVIC_SetPriorityGrouping>
}
 8002906:	bf00      	nop
 8002908:	3708      	adds	r7, #8
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}

0800290e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800290e:	b580      	push	{r7, lr}
 8002910:	b086      	sub	sp, #24
 8002912:	af00      	add	r7, sp, #0
 8002914:	4603      	mov	r3, r0
 8002916:	60b9      	str	r1, [r7, #8]
 8002918:	607a      	str	r2, [r7, #4]
 800291a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800291c:	2300      	movs	r3, #0
 800291e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002920:	f7ff ff42 	bl	80027a8 <__NVIC_GetPriorityGrouping>
 8002924:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002926:	687a      	ldr	r2, [r7, #4]
 8002928:	68b9      	ldr	r1, [r7, #8]
 800292a:	6978      	ldr	r0, [r7, #20]
 800292c:	f7ff ff90 	bl	8002850 <NVIC_EncodePriority>
 8002930:	4602      	mov	r2, r0
 8002932:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002936:	4611      	mov	r1, r2
 8002938:	4618      	mov	r0, r3
 800293a:	f7ff ff5f 	bl	80027fc <__NVIC_SetPriority>
}
 800293e:	bf00      	nop
 8002940:	3718      	adds	r7, #24
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}

08002946 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002946:	b580      	push	{r7, lr}
 8002948:	b082      	sub	sp, #8
 800294a:	af00      	add	r7, sp, #0
 800294c:	4603      	mov	r3, r0
 800294e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002950:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002954:	4618      	mov	r0, r3
 8002956:	f7ff ff35 	bl	80027c4 <__NVIC_EnableIRQ>
}
 800295a:	bf00      	nop
 800295c:	3708      	adds	r7, #8
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}

08002962 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002962:	b580      	push	{r7, lr}
 8002964:	b082      	sub	sp, #8
 8002966:	af00      	add	r7, sp, #0
 8002968:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800296a:	6878      	ldr	r0, [r7, #4]
 800296c:	f7ff ffa2 	bl	80028b4 <SysTick_Config>
 8002970:	4603      	mov	r3, r0
}
 8002972:	4618      	mov	r0, r3
 8002974:	3708      	adds	r7, #8
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}
	...

0800297c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800297c:	b480      	push	{r7}
 800297e:	b08b      	sub	sp, #44	@ 0x2c
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
 8002984:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002986:	2300      	movs	r3, #0
 8002988:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800298a:	2300      	movs	r3, #0
 800298c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800298e:	e169      	b.n	8002c64 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002990:	2201      	movs	r2, #1
 8002992:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002994:	fa02 f303 	lsl.w	r3, r2, r3
 8002998:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	69fa      	ldr	r2, [r7, #28]
 80029a0:	4013      	ands	r3, r2
 80029a2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80029a4:	69ba      	ldr	r2, [r7, #24]
 80029a6:	69fb      	ldr	r3, [r7, #28]
 80029a8:	429a      	cmp	r2, r3
 80029aa:	f040 8158 	bne.w	8002c5e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	4a9a      	ldr	r2, [pc, #616]	@ (8002c1c <HAL_GPIO_Init+0x2a0>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d05e      	beq.n	8002a76 <HAL_GPIO_Init+0xfa>
 80029b8:	4a98      	ldr	r2, [pc, #608]	@ (8002c1c <HAL_GPIO_Init+0x2a0>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d875      	bhi.n	8002aaa <HAL_GPIO_Init+0x12e>
 80029be:	4a98      	ldr	r2, [pc, #608]	@ (8002c20 <HAL_GPIO_Init+0x2a4>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d058      	beq.n	8002a76 <HAL_GPIO_Init+0xfa>
 80029c4:	4a96      	ldr	r2, [pc, #600]	@ (8002c20 <HAL_GPIO_Init+0x2a4>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d86f      	bhi.n	8002aaa <HAL_GPIO_Init+0x12e>
 80029ca:	4a96      	ldr	r2, [pc, #600]	@ (8002c24 <HAL_GPIO_Init+0x2a8>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d052      	beq.n	8002a76 <HAL_GPIO_Init+0xfa>
 80029d0:	4a94      	ldr	r2, [pc, #592]	@ (8002c24 <HAL_GPIO_Init+0x2a8>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d869      	bhi.n	8002aaa <HAL_GPIO_Init+0x12e>
 80029d6:	4a94      	ldr	r2, [pc, #592]	@ (8002c28 <HAL_GPIO_Init+0x2ac>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d04c      	beq.n	8002a76 <HAL_GPIO_Init+0xfa>
 80029dc:	4a92      	ldr	r2, [pc, #584]	@ (8002c28 <HAL_GPIO_Init+0x2ac>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d863      	bhi.n	8002aaa <HAL_GPIO_Init+0x12e>
 80029e2:	4a92      	ldr	r2, [pc, #584]	@ (8002c2c <HAL_GPIO_Init+0x2b0>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d046      	beq.n	8002a76 <HAL_GPIO_Init+0xfa>
 80029e8:	4a90      	ldr	r2, [pc, #576]	@ (8002c2c <HAL_GPIO_Init+0x2b0>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d85d      	bhi.n	8002aaa <HAL_GPIO_Init+0x12e>
 80029ee:	2b12      	cmp	r3, #18
 80029f0:	d82a      	bhi.n	8002a48 <HAL_GPIO_Init+0xcc>
 80029f2:	2b12      	cmp	r3, #18
 80029f4:	d859      	bhi.n	8002aaa <HAL_GPIO_Init+0x12e>
 80029f6:	a201      	add	r2, pc, #4	@ (adr r2, 80029fc <HAL_GPIO_Init+0x80>)
 80029f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029fc:	08002a77 	.word	0x08002a77
 8002a00:	08002a51 	.word	0x08002a51
 8002a04:	08002a63 	.word	0x08002a63
 8002a08:	08002aa5 	.word	0x08002aa5
 8002a0c:	08002aab 	.word	0x08002aab
 8002a10:	08002aab 	.word	0x08002aab
 8002a14:	08002aab 	.word	0x08002aab
 8002a18:	08002aab 	.word	0x08002aab
 8002a1c:	08002aab 	.word	0x08002aab
 8002a20:	08002aab 	.word	0x08002aab
 8002a24:	08002aab 	.word	0x08002aab
 8002a28:	08002aab 	.word	0x08002aab
 8002a2c:	08002aab 	.word	0x08002aab
 8002a30:	08002aab 	.word	0x08002aab
 8002a34:	08002aab 	.word	0x08002aab
 8002a38:	08002aab 	.word	0x08002aab
 8002a3c:	08002aab 	.word	0x08002aab
 8002a40:	08002a59 	.word	0x08002a59
 8002a44:	08002a6d 	.word	0x08002a6d
 8002a48:	4a79      	ldr	r2, [pc, #484]	@ (8002c30 <HAL_GPIO_Init+0x2b4>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d013      	beq.n	8002a76 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002a4e:	e02c      	b.n	8002aaa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	68db      	ldr	r3, [r3, #12]
 8002a54:	623b      	str	r3, [r7, #32]
          break;
 8002a56:	e029      	b.n	8002aac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	68db      	ldr	r3, [r3, #12]
 8002a5c:	3304      	adds	r3, #4
 8002a5e:	623b      	str	r3, [r7, #32]
          break;
 8002a60:	e024      	b.n	8002aac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	68db      	ldr	r3, [r3, #12]
 8002a66:	3308      	adds	r3, #8
 8002a68:	623b      	str	r3, [r7, #32]
          break;
 8002a6a:	e01f      	b.n	8002aac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	68db      	ldr	r3, [r3, #12]
 8002a70:	330c      	adds	r3, #12
 8002a72:	623b      	str	r3, [r7, #32]
          break;
 8002a74:	e01a      	b.n	8002aac <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	689b      	ldr	r3, [r3, #8]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d102      	bne.n	8002a84 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002a7e:	2304      	movs	r3, #4
 8002a80:	623b      	str	r3, [r7, #32]
          break;
 8002a82:	e013      	b.n	8002aac <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	689b      	ldr	r3, [r3, #8]
 8002a88:	2b01      	cmp	r3, #1
 8002a8a:	d105      	bne.n	8002a98 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002a8c:	2308      	movs	r3, #8
 8002a8e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	69fa      	ldr	r2, [r7, #28]
 8002a94:	611a      	str	r2, [r3, #16]
          break;
 8002a96:	e009      	b.n	8002aac <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002a98:	2308      	movs	r3, #8
 8002a9a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	69fa      	ldr	r2, [r7, #28]
 8002aa0:	615a      	str	r2, [r3, #20]
          break;
 8002aa2:	e003      	b.n	8002aac <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	623b      	str	r3, [r7, #32]
          break;
 8002aa8:	e000      	b.n	8002aac <HAL_GPIO_Init+0x130>
          break;
 8002aaa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002aac:	69bb      	ldr	r3, [r7, #24]
 8002aae:	2bff      	cmp	r3, #255	@ 0xff
 8002ab0:	d801      	bhi.n	8002ab6 <HAL_GPIO_Init+0x13a>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	e001      	b.n	8002aba <HAL_GPIO_Init+0x13e>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	3304      	adds	r3, #4
 8002aba:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002abc:	69bb      	ldr	r3, [r7, #24]
 8002abe:	2bff      	cmp	r3, #255	@ 0xff
 8002ac0:	d802      	bhi.n	8002ac8 <HAL_GPIO_Init+0x14c>
 8002ac2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ac4:	009b      	lsls	r3, r3, #2
 8002ac6:	e002      	b.n	8002ace <HAL_GPIO_Init+0x152>
 8002ac8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aca:	3b08      	subs	r3, #8
 8002acc:	009b      	lsls	r3, r3, #2
 8002ace:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002ad0:	697b      	ldr	r3, [r7, #20]
 8002ad2:	681a      	ldr	r2, [r3, #0]
 8002ad4:	210f      	movs	r1, #15
 8002ad6:	693b      	ldr	r3, [r7, #16]
 8002ad8:	fa01 f303 	lsl.w	r3, r1, r3
 8002adc:	43db      	mvns	r3, r3
 8002ade:	401a      	ands	r2, r3
 8002ae0:	6a39      	ldr	r1, [r7, #32]
 8002ae2:	693b      	ldr	r3, [r7, #16]
 8002ae4:	fa01 f303 	lsl.w	r3, r1, r3
 8002ae8:	431a      	orrs	r2, r3
 8002aea:	697b      	ldr	r3, [r7, #20]
 8002aec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	f000 80b1 	beq.w	8002c5e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002afc:	4b4d      	ldr	r3, [pc, #308]	@ (8002c34 <HAL_GPIO_Init+0x2b8>)
 8002afe:	699b      	ldr	r3, [r3, #24]
 8002b00:	4a4c      	ldr	r2, [pc, #304]	@ (8002c34 <HAL_GPIO_Init+0x2b8>)
 8002b02:	f043 0301 	orr.w	r3, r3, #1
 8002b06:	6193      	str	r3, [r2, #24]
 8002b08:	4b4a      	ldr	r3, [pc, #296]	@ (8002c34 <HAL_GPIO_Init+0x2b8>)
 8002b0a:	699b      	ldr	r3, [r3, #24]
 8002b0c:	f003 0301 	and.w	r3, r3, #1
 8002b10:	60bb      	str	r3, [r7, #8]
 8002b12:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002b14:	4a48      	ldr	r2, [pc, #288]	@ (8002c38 <HAL_GPIO_Init+0x2bc>)
 8002b16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b18:	089b      	lsrs	r3, r3, #2
 8002b1a:	3302      	adds	r3, #2
 8002b1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b20:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002b22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b24:	f003 0303 	and.w	r3, r3, #3
 8002b28:	009b      	lsls	r3, r3, #2
 8002b2a:	220f      	movs	r2, #15
 8002b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b30:	43db      	mvns	r3, r3
 8002b32:	68fa      	ldr	r2, [r7, #12]
 8002b34:	4013      	ands	r3, r2
 8002b36:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	4a40      	ldr	r2, [pc, #256]	@ (8002c3c <HAL_GPIO_Init+0x2c0>)
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d013      	beq.n	8002b68 <HAL_GPIO_Init+0x1ec>
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	4a3f      	ldr	r2, [pc, #252]	@ (8002c40 <HAL_GPIO_Init+0x2c4>)
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d00d      	beq.n	8002b64 <HAL_GPIO_Init+0x1e8>
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	4a3e      	ldr	r2, [pc, #248]	@ (8002c44 <HAL_GPIO_Init+0x2c8>)
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d007      	beq.n	8002b60 <HAL_GPIO_Init+0x1e4>
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	4a3d      	ldr	r2, [pc, #244]	@ (8002c48 <HAL_GPIO_Init+0x2cc>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d101      	bne.n	8002b5c <HAL_GPIO_Init+0x1e0>
 8002b58:	2303      	movs	r3, #3
 8002b5a:	e006      	b.n	8002b6a <HAL_GPIO_Init+0x1ee>
 8002b5c:	2304      	movs	r3, #4
 8002b5e:	e004      	b.n	8002b6a <HAL_GPIO_Init+0x1ee>
 8002b60:	2302      	movs	r3, #2
 8002b62:	e002      	b.n	8002b6a <HAL_GPIO_Init+0x1ee>
 8002b64:	2301      	movs	r3, #1
 8002b66:	e000      	b.n	8002b6a <HAL_GPIO_Init+0x1ee>
 8002b68:	2300      	movs	r3, #0
 8002b6a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b6c:	f002 0203 	and.w	r2, r2, #3
 8002b70:	0092      	lsls	r2, r2, #2
 8002b72:	4093      	lsls	r3, r2
 8002b74:	68fa      	ldr	r2, [r7, #12]
 8002b76:	4313      	orrs	r3, r2
 8002b78:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002b7a:	492f      	ldr	r1, [pc, #188]	@ (8002c38 <HAL_GPIO_Init+0x2bc>)
 8002b7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b7e:	089b      	lsrs	r3, r3, #2
 8002b80:	3302      	adds	r3, #2
 8002b82:	68fa      	ldr	r2, [r7, #12]
 8002b84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d006      	beq.n	8002ba2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002b94:	4b2d      	ldr	r3, [pc, #180]	@ (8002c4c <HAL_GPIO_Init+0x2d0>)
 8002b96:	689a      	ldr	r2, [r3, #8]
 8002b98:	492c      	ldr	r1, [pc, #176]	@ (8002c4c <HAL_GPIO_Init+0x2d0>)
 8002b9a:	69bb      	ldr	r3, [r7, #24]
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	608b      	str	r3, [r1, #8]
 8002ba0:	e006      	b.n	8002bb0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002ba2:	4b2a      	ldr	r3, [pc, #168]	@ (8002c4c <HAL_GPIO_Init+0x2d0>)
 8002ba4:	689a      	ldr	r2, [r3, #8]
 8002ba6:	69bb      	ldr	r3, [r7, #24]
 8002ba8:	43db      	mvns	r3, r3
 8002baa:	4928      	ldr	r1, [pc, #160]	@ (8002c4c <HAL_GPIO_Init+0x2d0>)
 8002bac:	4013      	ands	r3, r2
 8002bae:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d006      	beq.n	8002bca <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002bbc:	4b23      	ldr	r3, [pc, #140]	@ (8002c4c <HAL_GPIO_Init+0x2d0>)
 8002bbe:	68da      	ldr	r2, [r3, #12]
 8002bc0:	4922      	ldr	r1, [pc, #136]	@ (8002c4c <HAL_GPIO_Init+0x2d0>)
 8002bc2:	69bb      	ldr	r3, [r7, #24]
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	60cb      	str	r3, [r1, #12]
 8002bc8:	e006      	b.n	8002bd8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002bca:	4b20      	ldr	r3, [pc, #128]	@ (8002c4c <HAL_GPIO_Init+0x2d0>)
 8002bcc:	68da      	ldr	r2, [r3, #12]
 8002bce:	69bb      	ldr	r3, [r7, #24]
 8002bd0:	43db      	mvns	r3, r3
 8002bd2:	491e      	ldr	r1, [pc, #120]	@ (8002c4c <HAL_GPIO_Init+0x2d0>)
 8002bd4:	4013      	ands	r3, r2
 8002bd6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d006      	beq.n	8002bf2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002be4:	4b19      	ldr	r3, [pc, #100]	@ (8002c4c <HAL_GPIO_Init+0x2d0>)
 8002be6:	685a      	ldr	r2, [r3, #4]
 8002be8:	4918      	ldr	r1, [pc, #96]	@ (8002c4c <HAL_GPIO_Init+0x2d0>)
 8002bea:	69bb      	ldr	r3, [r7, #24]
 8002bec:	4313      	orrs	r3, r2
 8002bee:	604b      	str	r3, [r1, #4]
 8002bf0:	e006      	b.n	8002c00 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002bf2:	4b16      	ldr	r3, [pc, #88]	@ (8002c4c <HAL_GPIO_Init+0x2d0>)
 8002bf4:	685a      	ldr	r2, [r3, #4]
 8002bf6:	69bb      	ldr	r3, [r7, #24]
 8002bf8:	43db      	mvns	r3, r3
 8002bfa:	4914      	ldr	r1, [pc, #80]	@ (8002c4c <HAL_GPIO_Init+0x2d0>)
 8002bfc:	4013      	ands	r3, r2
 8002bfe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d021      	beq.n	8002c50 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002c0c:	4b0f      	ldr	r3, [pc, #60]	@ (8002c4c <HAL_GPIO_Init+0x2d0>)
 8002c0e:	681a      	ldr	r2, [r3, #0]
 8002c10:	490e      	ldr	r1, [pc, #56]	@ (8002c4c <HAL_GPIO_Init+0x2d0>)
 8002c12:	69bb      	ldr	r3, [r7, #24]
 8002c14:	4313      	orrs	r3, r2
 8002c16:	600b      	str	r3, [r1, #0]
 8002c18:	e021      	b.n	8002c5e <HAL_GPIO_Init+0x2e2>
 8002c1a:	bf00      	nop
 8002c1c:	10320000 	.word	0x10320000
 8002c20:	10310000 	.word	0x10310000
 8002c24:	10220000 	.word	0x10220000
 8002c28:	10210000 	.word	0x10210000
 8002c2c:	10120000 	.word	0x10120000
 8002c30:	10110000 	.word	0x10110000
 8002c34:	40021000 	.word	0x40021000
 8002c38:	40010000 	.word	0x40010000
 8002c3c:	40010800 	.word	0x40010800
 8002c40:	40010c00 	.word	0x40010c00
 8002c44:	40011000 	.word	0x40011000
 8002c48:	40011400 	.word	0x40011400
 8002c4c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002c50:	4b0b      	ldr	r3, [pc, #44]	@ (8002c80 <HAL_GPIO_Init+0x304>)
 8002c52:	681a      	ldr	r2, [r3, #0]
 8002c54:	69bb      	ldr	r3, [r7, #24]
 8002c56:	43db      	mvns	r3, r3
 8002c58:	4909      	ldr	r1, [pc, #36]	@ (8002c80 <HAL_GPIO_Init+0x304>)
 8002c5a:	4013      	ands	r3, r2
 8002c5c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002c5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c60:	3301      	adds	r3, #1
 8002c62:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	681a      	ldr	r2, [r3, #0]
 8002c68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c6a:	fa22 f303 	lsr.w	r3, r2, r3
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	f47f ae8e 	bne.w	8002990 <HAL_GPIO_Init+0x14>
  }
}
 8002c74:	bf00      	nop
 8002c76:	bf00      	nop
 8002c78:	372c      	adds	r7, #44	@ 0x2c
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bc80      	pop	{r7}
 8002c7e:	4770      	bx	lr
 8002c80:	40010400 	.word	0x40010400

08002c84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c84:	b480      	push	{r7}
 8002c86:	b083      	sub	sp, #12
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
 8002c8c:	460b      	mov	r3, r1
 8002c8e:	807b      	strh	r3, [r7, #2]
 8002c90:	4613      	mov	r3, r2
 8002c92:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002c94:	787b      	ldrb	r3, [r7, #1]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d003      	beq.n	8002ca2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c9a:	887a      	ldrh	r2, [r7, #2]
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002ca0:	e003      	b.n	8002caa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002ca2:	887b      	ldrh	r3, [r7, #2]
 8002ca4:	041a      	lsls	r2, r3, #16
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	611a      	str	r2, [r3, #16]
}
 8002caa:	bf00      	nop
 8002cac:	370c      	adds	r7, #12
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bc80      	pop	{r7}
 8002cb2:	4770      	bx	lr

08002cb4 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8002cb8:	4b03      	ldr	r3, [pc, #12]	@ (8002cc8 <HAL_PWR_EnableBkUpAccess+0x14>)
 8002cba:	2201      	movs	r2, #1
 8002cbc:	601a      	str	r2, [r3, #0]
}
 8002cbe:	bf00      	nop
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bc80      	pop	{r7}
 8002cc4:	4770      	bx	lr
 8002cc6:	bf00      	nop
 8002cc8:	420e0020 	.word	0x420e0020

08002ccc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b086      	sub	sp, #24
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d101      	bne.n	8002cde <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	e272      	b.n	80031c4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f003 0301 	and.w	r3, r3, #1
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	f000 8087 	beq.w	8002dfa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002cec:	4b92      	ldr	r3, [pc, #584]	@ (8002f38 <HAL_RCC_OscConfig+0x26c>)
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	f003 030c 	and.w	r3, r3, #12
 8002cf4:	2b04      	cmp	r3, #4
 8002cf6:	d00c      	beq.n	8002d12 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002cf8:	4b8f      	ldr	r3, [pc, #572]	@ (8002f38 <HAL_RCC_OscConfig+0x26c>)
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	f003 030c 	and.w	r3, r3, #12
 8002d00:	2b08      	cmp	r3, #8
 8002d02:	d112      	bne.n	8002d2a <HAL_RCC_OscConfig+0x5e>
 8002d04:	4b8c      	ldr	r3, [pc, #560]	@ (8002f38 <HAL_RCC_OscConfig+0x26c>)
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d0c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d10:	d10b      	bne.n	8002d2a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d12:	4b89      	ldr	r3, [pc, #548]	@ (8002f38 <HAL_RCC_OscConfig+0x26c>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d06c      	beq.n	8002df8 <HAL_RCC_OscConfig+0x12c>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d168      	bne.n	8002df8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002d26:	2301      	movs	r3, #1
 8002d28:	e24c      	b.n	80031c4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d32:	d106      	bne.n	8002d42 <HAL_RCC_OscConfig+0x76>
 8002d34:	4b80      	ldr	r3, [pc, #512]	@ (8002f38 <HAL_RCC_OscConfig+0x26c>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4a7f      	ldr	r2, [pc, #508]	@ (8002f38 <HAL_RCC_OscConfig+0x26c>)
 8002d3a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d3e:	6013      	str	r3, [r2, #0]
 8002d40:	e02e      	b.n	8002da0 <HAL_RCC_OscConfig+0xd4>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d10c      	bne.n	8002d64 <HAL_RCC_OscConfig+0x98>
 8002d4a:	4b7b      	ldr	r3, [pc, #492]	@ (8002f38 <HAL_RCC_OscConfig+0x26c>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a7a      	ldr	r2, [pc, #488]	@ (8002f38 <HAL_RCC_OscConfig+0x26c>)
 8002d50:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d54:	6013      	str	r3, [r2, #0]
 8002d56:	4b78      	ldr	r3, [pc, #480]	@ (8002f38 <HAL_RCC_OscConfig+0x26c>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4a77      	ldr	r2, [pc, #476]	@ (8002f38 <HAL_RCC_OscConfig+0x26c>)
 8002d5c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002d60:	6013      	str	r3, [r2, #0]
 8002d62:	e01d      	b.n	8002da0 <HAL_RCC_OscConfig+0xd4>
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002d6c:	d10c      	bne.n	8002d88 <HAL_RCC_OscConfig+0xbc>
 8002d6e:	4b72      	ldr	r3, [pc, #456]	@ (8002f38 <HAL_RCC_OscConfig+0x26c>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a71      	ldr	r2, [pc, #452]	@ (8002f38 <HAL_RCC_OscConfig+0x26c>)
 8002d74:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002d78:	6013      	str	r3, [r2, #0]
 8002d7a:	4b6f      	ldr	r3, [pc, #444]	@ (8002f38 <HAL_RCC_OscConfig+0x26c>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4a6e      	ldr	r2, [pc, #440]	@ (8002f38 <HAL_RCC_OscConfig+0x26c>)
 8002d80:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d84:	6013      	str	r3, [r2, #0]
 8002d86:	e00b      	b.n	8002da0 <HAL_RCC_OscConfig+0xd4>
 8002d88:	4b6b      	ldr	r3, [pc, #428]	@ (8002f38 <HAL_RCC_OscConfig+0x26c>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a6a      	ldr	r2, [pc, #424]	@ (8002f38 <HAL_RCC_OscConfig+0x26c>)
 8002d8e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d92:	6013      	str	r3, [r2, #0]
 8002d94:	4b68      	ldr	r3, [pc, #416]	@ (8002f38 <HAL_RCC_OscConfig+0x26c>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4a67      	ldr	r2, [pc, #412]	@ (8002f38 <HAL_RCC_OscConfig+0x26c>)
 8002d9a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002d9e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d013      	beq.n	8002dd0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002da8:	f7ff f8fc 	bl	8001fa4 <HAL_GetTick>
 8002dac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dae:	e008      	b.n	8002dc2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002db0:	f7ff f8f8 	bl	8001fa4 <HAL_GetTick>
 8002db4:	4602      	mov	r2, r0
 8002db6:	693b      	ldr	r3, [r7, #16]
 8002db8:	1ad3      	subs	r3, r2, r3
 8002dba:	2b64      	cmp	r3, #100	@ 0x64
 8002dbc:	d901      	bls.n	8002dc2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002dbe:	2303      	movs	r3, #3
 8002dc0:	e200      	b.n	80031c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dc2:	4b5d      	ldr	r3, [pc, #372]	@ (8002f38 <HAL_RCC_OscConfig+0x26c>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d0f0      	beq.n	8002db0 <HAL_RCC_OscConfig+0xe4>
 8002dce:	e014      	b.n	8002dfa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dd0:	f7ff f8e8 	bl	8001fa4 <HAL_GetTick>
 8002dd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002dd6:	e008      	b.n	8002dea <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002dd8:	f7ff f8e4 	bl	8001fa4 <HAL_GetTick>
 8002ddc:	4602      	mov	r2, r0
 8002dde:	693b      	ldr	r3, [r7, #16]
 8002de0:	1ad3      	subs	r3, r2, r3
 8002de2:	2b64      	cmp	r3, #100	@ 0x64
 8002de4:	d901      	bls.n	8002dea <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002de6:	2303      	movs	r3, #3
 8002de8:	e1ec      	b.n	80031c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002dea:	4b53      	ldr	r3, [pc, #332]	@ (8002f38 <HAL_RCC_OscConfig+0x26c>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d1f0      	bne.n	8002dd8 <HAL_RCC_OscConfig+0x10c>
 8002df6:	e000      	b.n	8002dfa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002df8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f003 0302 	and.w	r3, r3, #2
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d063      	beq.n	8002ece <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002e06:	4b4c      	ldr	r3, [pc, #304]	@ (8002f38 <HAL_RCC_OscConfig+0x26c>)
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	f003 030c 	and.w	r3, r3, #12
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d00b      	beq.n	8002e2a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002e12:	4b49      	ldr	r3, [pc, #292]	@ (8002f38 <HAL_RCC_OscConfig+0x26c>)
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	f003 030c 	and.w	r3, r3, #12
 8002e1a:	2b08      	cmp	r3, #8
 8002e1c:	d11c      	bne.n	8002e58 <HAL_RCC_OscConfig+0x18c>
 8002e1e:	4b46      	ldr	r3, [pc, #280]	@ (8002f38 <HAL_RCC_OscConfig+0x26c>)
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d116      	bne.n	8002e58 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e2a:	4b43      	ldr	r3, [pc, #268]	@ (8002f38 <HAL_RCC_OscConfig+0x26c>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f003 0302 	and.w	r3, r3, #2
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d005      	beq.n	8002e42 <HAL_RCC_OscConfig+0x176>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	691b      	ldr	r3, [r3, #16]
 8002e3a:	2b01      	cmp	r3, #1
 8002e3c:	d001      	beq.n	8002e42 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	e1c0      	b.n	80031c4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e42:	4b3d      	ldr	r3, [pc, #244]	@ (8002f38 <HAL_RCC_OscConfig+0x26c>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	695b      	ldr	r3, [r3, #20]
 8002e4e:	00db      	lsls	r3, r3, #3
 8002e50:	4939      	ldr	r1, [pc, #228]	@ (8002f38 <HAL_RCC_OscConfig+0x26c>)
 8002e52:	4313      	orrs	r3, r2
 8002e54:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e56:	e03a      	b.n	8002ece <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	691b      	ldr	r3, [r3, #16]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d020      	beq.n	8002ea2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e60:	4b36      	ldr	r3, [pc, #216]	@ (8002f3c <HAL_RCC_OscConfig+0x270>)
 8002e62:	2201      	movs	r2, #1
 8002e64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e66:	f7ff f89d 	bl	8001fa4 <HAL_GetTick>
 8002e6a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e6c:	e008      	b.n	8002e80 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e6e:	f7ff f899 	bl	8001fa4 <HAL_GetTick>
 8002e72:	4602      	mov	r2, r0
 8002e74:	693b      	ldr	r3, [r7, #16]
 8002e76:	1ad3      	subs	r3, r2, r3
 8002e78:	2b02      	cmp	r3, #2
 8002e7a:	d901      	bls.n	8002e80 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002e7c:	2303      	movs	r3, #3
 8002e7e:	e1a1      	b.n	80031c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e80:	4b2d      	ldr	r3, [pc, #180]	@ (8002f38 <HAL_RCC_OscConfig+0x26c>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f003 0302 	and.w	r3, r3, #2
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d0f0      	beq.n	8002e6e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e8c:	4b2a      	ldr	r3, [pc, #168]	@ (8002f38 <HAL_RCC_OscConfig+0x26c>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	695b      	ldr	r3, [r3, #20]
 8002e98:	00db      	lsls	r3, r3, #3
 8002e9a:	4927      	ldr	r1, [pc, #156]	@ (8002f38 <HAL_RCC_OscConfig+0x26c>)
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	600b      	str	r3, [r1, #0]
 8002ea0:	e015      	b.n	8002ece <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ea2:	4b26      	ldr	r3, [pc, #152]	@ (8002f3c <HAL_RCC_OscConfig+0x270>)
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ea8:	f7ff f87c 	bl	8001fa4 <HAL_GetTick>
 8002eac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002eae:	e008      	b.n	8002ec2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002eb0:	f7ff f878 	bl	8001fa4 <HAL_GetTick>
 8002eb4:	4602      	mov	r2, r0
 8002eb6:	693b      	ldr	r3, [r7, #16]
 8002eb8:	1ad3      	subs	r3, r2, r3
 8002eba:	2b02      	cmp	r3, #2
 8002ebc:	d901      	bls.n	8002ec2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002ebe:	2303      	movs	r3, #3
 8002ec0:	e180      	b.n	80031c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ec2:	4b1d      	ldr	r3, [pc, #116]	@ (8002f38 <HAL_RCC_OscConfig+0x26c>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f003 0302 	and.w	r3, r3, #2
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d1f0      	bne.n	8002eb0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f003 0308 	and.w	r3, r3, #8
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d03a      	beq.n	8002f50 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	699b      	ldr	r3, [r3, #24]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d019      	beq.n	8002f16 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ee2:	4b17      	ldr	r3, [pc, #92]	@ (8002f40 <HAL_RCC_OscConfig+0x274>)
 8002ee4:	2201      	movs	r2, #1
 8002ee6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ee8:	f7ff f85c 	bl	8001fa4 <HAL_GetTick>
 8002eec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002eee:	e008      	b.n	8002f02 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ef0:	f7ff f858 	bl	8001fa4 <HAL_GetTick>
 8002ef4:	4602      	mov	r2, r0
 8002ef6:	693b      	ldr	r3, [r7, #16]
 8002ef8:	1ad3      	subs	r3, r2, r3
 8002efa:	2b02      	cmp	r3, #2
 8002efc:	d901      	bls.n	8002f02 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002efe:	2303      	movs	r3, #3
 8002f00:	e160      	b.n	80031c4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f02:	4b0d      	ldr	r3, [pc, #52]	@ (8002f38 <HAL_RCC_OscConfig+0x26c>)
 8002f04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f06:	f003 0302 	and.w	r3, r3, #2
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d0f0      	beq.n	8002ef0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002f0e:	2001      	movs	r0, #1
 8002f10:	f000 face 	bl	80034b0 <RCC_Delay>
 8002f14:	e01c      	b.n	8002f50 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f16:	4b0a      	ldr	r3, [pc, #40]	@ (8002f40 <HAL_RCC_OscConfig+0x274>)
 8002f18:	2200      	movs	r2, #0
 8002f1a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f1c:	f7ff f842 	bl	8001fa4 <HAL_GetTick>
 8002f20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f22:	e00f      	b.n	8002f44 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f24:	f7ff f83e 	bl	8001fa4 <HAL_GetTick>
 8002f28:	4602      	mov	r2, r0
 8002f2a:	693b      	ldr	r3, [r7, #16]
 8002f2c:	1ad3      	subs	r3, r2, r3
 8002f2e:	2b02      	cmp	r3, #2
 8002f30:	d908      	bls.n	8002f44 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002f32:	2303      	movs	r3, #3
 8002f34:	e146      	b.n	80031c4 <HAL_RCC_OscConfig+0x4f8>
 8002f36:	bf00      	nop
 8002f38:	40021000 	.word	0x40021000
 8002f3c:	42420000 	.word	0x42420000
 8002f40:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f44:	4b92      	ldr	r3, [pc, #584]	@ (8003190 <HAL_RCC_OscConfig+0x4c4>)
 8002f46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f48:	f003 0302 	and.w	r3, r3, #2
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d1e9      	bne.n	8002f24 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f003 0304 	and.w	r3, r3, #4
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	f000 80a6 	beq.w	80030aa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f5e:	2300      	movs	r3, #0
 8002f60:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f62:	4b8b      	ldr	r3, [pc, #556]	@ (8003190 <HAL_RCC_OscConfig+0x4c4>)
 8002f64:	69db      	ldr	r3, [r3, #28]
 8002f66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d10d      	bne.n	8002f8a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f6e:	4b88      	ldr	r3, [pc, #544]	@ (8003190 <HAL_RCC_OscConfig+0x4c4>)
 8002f70:	69db      	ldr	r3, [r3, #28]
 8002f72:	4a87      	ldr	r2, [pc, #540]	@ (8003190 <HAL_RCC_OscConfig+0x4c4>)
 8002f74:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f78:	61d3      	str	r3, [r2, #28]
 8002f7a:	4b85      	ldr	r3, [pc, #532]	@ (8003190 <HAL_RCC_OscConfig+0x4c4>)
 8002f7c:	69db      	ldr	r3, [r3, #28]
 8002f7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f82:	60bb      	str	r3, [r7, #8]
 8002f84:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f86:	2301      	movs	r3, #1
 8002f88:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f8a:	4b82      	ldr	r3, [pc, #520]	@ (8003194 <HAL_RCC_OscConfig+0x4c8>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d118      	bne.n	8002fc8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f96:	4b7f      	ldr	r3, [pc, #508]	@ (8003194 <HAL_RCC_OscConfig+0x4c8>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4a7e      	ldr	r2, [pc, #504]	@ (8003194 <HAL_RCC_OscConfig+0x4c8>)
 8002f9c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002fa0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002fa2:	f7fe ffff 	bl	8001fa4 <HAL_GetTick>
 8002fa6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fa8:	e008      	b.n	8002fbc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002faa:	f7fe fffb 	bl	8001fa4 <HAL_GetTick>
 8002fae:	4602      	mov	r2, r0
 8002fb0:	693b      	ldr	r3, [r7, #16]
 8002fb2:	1ad3      	subs	r3, r2, r3
 8002fb4:	2b64      	cmp	r3, #100	@ 0x64
 8002fb6:	d901      	bls.n	8002fbc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002fb8:	2303      	movs	r3, #3
 8002fba:	e103      	b.n	80031c4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fbc:	4b75      	ldr	r3, [pc, #468]	@ (8003194 <HAL_RCC_OscConfig+0x4c8>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d0f0      	beq.n	8002faa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	68db      	ldr	r3, [r3, #12]
 8002fcc:	2b01      	cmp	r3, #1
 8002fce:	d106      	bne.n	8002fde <HAL_RCC_OscConfig+0x312>
 8002fd0:	4b6f      	ldr	r3, [pc, #444]	@ (8003190 <HAL_RCC_OscConfig+0x4c4>)
 8002fd2:	6a1b      	ldr	r3, [r3, #32]
 8002fd4:	4a6e      	ldr	r2, [pc, #440]	@ (8003190 <HAL_RCC_OscConfig+0x4c4>)
 8002fd6:	f043 0301 	orr.w	r3, r3, #1
 8002fda:	6213      	str	r3, [r2, #32]
 8002fdc:	e02d      	b.n	800303a <HAL_RCC_OscConfig+0x36e>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	68db      	ldr	r3, [r3, #12]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d10c      	bne.n	8003000 <HAL_RCC_OscConfig+0x334>
 8002fe6:	4b6a      	ldr	r3, [pc, #424]	@ (8003190 <HAL_RCC_OscConfig+0x4c4>)
 8002fe8:	6a1b      	ldr	r3, [r3, #32]
 8002fea:	4a69      	ldr	r2, [pc, #420]	@ (8003190 <HAL_RCC_OscConfig+0x4c4>)
 8002fec:	f023 0301 	bic.w	r3, r3, #1
 8002ff0:	6213      	str	r3, [r2, #32]
 8002ff2:	4b67      	ldr	r3, [pc, #412]	@ (8003190 <HAL_RCC_OscConfig+0x4c4>)
 8002ff4:	6a1b      	ldr	r3, [r3, #32]
 8002ff6:	4a66      	ldr	r2, [pc, #408]	@ (8003190 <HAL_RCC_OscConfig+0x4c4>)
 8002ff8:	f023 0304 	bic.w	r3, r3, #4
 8002ffc:	6213      	str	r3, [r2, #32]
 8002ffe:	e01c      	b.n	800303a <HAL_RCC_OscConfig+0x36e>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	68db      	ldr	r3, [r3, #12]
 8003004:	2b05      	cmp	r3, #5
 8003006:	d10c      	bne.n	8003022 <HAL_RCC_OscConfig+0x356>
 8003008:	4b61      	ldr	r3, [pc, #388]	@ (8003190 <HAL_RCC_OscConfig+0x4c4>)
 800300a:	6a1b      	ldr	r3, [r3, #32]
 800300c:	4a60      	ldr	r2, [pc, #384]	@ (8003190 <HAL_RCC_OscConfig+0x4c4>)
 800300e:	f043 0304 	orr.w	r3, r3, #4
 8003012:	6213      	str	r3, [r2, #32]
 8003014:	4b5e      	ldr	r3, [pc, #376]	@ (8003190 <HAL_RCC_OscConfig+0x4c4>)
 8003016:	6a1b      	ldr	r3, [r3, #32]
 8003018:	4a5d      	ldr	r2, [pc, #372]	@ (8003190 <HAL_RCC_OscConfig+0x4c4>)
 800301a:	f043 0301 	orr.w	r3, r3, #1
 800301e:	6213      	str	r3, [r2, #32]
 8003020:	e00b      	b.n	800303a <HAL_RCC_OscConfig+0x36e>
 8003022:	4b5b      	ldr	r3, [pc, #364]	@ (8003190 <HAL_RCC_OscConfig+0x4c4>)
 8003024:	6a1b      	ldr	r3, [r3, #32]
 8003026:	4a5a      	ldr	r2, [pc, #360]	@ (8003190 <HAL_RCC_OscConfig+0x4c4>)
 8003028:	f023 0301 	bic.w	r3, r3, #1
 800302c:	6213      	str	r3, [r2, #32]
 800302e:	4b58      	ldr	r3, [pc, #352]	@ (8003190 <HAL_RCC_OscConfig+0x4c4>)
 8003030:	6a1b      	ldr	r3, [r3, #32]
 8003032:	4a57      	ldr	r2, [pc, #348]	@ (8003190 <HAL_RCC_OscConfig+0x4c4>)
 8003034:	f023 0304 	bic.w	r3, r3, #4
 8003038:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	68db      	ldr	r3, [r3, #12]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d015      	beq.n	800306e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003042:	f7fe ffaf 	bl	8001fa4 <HAL_GetTick>
 8003046:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003048:	e00a      	b.n	8003060 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800304a:	f7fe ffab 	bl	8001fa4 <HAL_GetTick>
 800304e:	4602      	mov	r2, r0
 8003050:	693b      	ldr	r3, [r7, #16]
 8003052:	1ad3      	subs	r3, r2, r3
 8003054:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003058:	4293      	cmp	r3, r2
 800305a:	d901      	bls.n	8003060 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800305c:	2303      	movs	r3, #3
 800305e:	e0b1      	b.n	80031c4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003060:	4b4b      	ldr	r3, [pc, #300]	@ (8003190 <HAL_RCC_OscConfig+0x4c4>)
 8003062:	6a1b      	ldr	r3, [r3, #32]
 8003064:	f003 0302 	and.w	r3, r3, #2
 8003068:	2b00      	cmp	r3, #0
 800306a:	d0ee      	beq.n	800304a <HAL_RCC_OscConfig+0x37e>
 800306c:	e014      	b.n	8003098 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800306e:	f7fe ff99 	bl	8001fa4 <HAL_GetTick>
 8003072:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003074:	e00a      	b.n	800308c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003076:	f7fe ff95 	bl	8001fa4 <HAL_GetTick>
 800307a:	4602      	mov	r2, r0
 800307c:	693b      	ldr	r3, [r7, #16]
 800307e:	1ad3      	subs	r3, r2, r3
 8003080:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003084:	4293      	cmp	r3, r2
 8003086:	d901      	bls.n	800308c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003088:	2303      	movs	r3, #3
 800308a:	e09b      	b.n	80031c4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800308c:	4b40      	ldr	r3, [pc, #256]	@ (8003190 <HAL_RCC_OscConfig+0x4c4>)
 800308e:	6a1b      	ldr	r3, [r3, #32]
 8003090:	f003 0302 	and.w	r3, r3, #2
 8003094:	2b00      	cmp	r3, #0
 8003096:	d1ee      	bne.n	8003076 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003098:	7dfb      	ldrb	r3, [r7, #23]
 800309a:	2b01      	cmp	r3, #1
 800309c:	d105      	bne.n	80030aa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800309e:	4b3c      	ldr	r3, [pc, #240]	@ (8003190 <HAL_RCC_OscConfig+0x4c4>)
 80030a0:	69db      	ldr	r3, [r3, #28]
 80030a2:	4a3b      	ldr	r2, [pc, #236]	@ (8003190 <HAL_RCC_OscConfig+0x4c4>)
 80030a4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80030a8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	69db      	ldr	r3, [r3, #28]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	f000 8087 	beq.w	80031c2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80030b4:	4b36      	ldr	r3, [pc, #216]	@ (8003190 <HAL_RCC_OscConfig+0x4c4>)
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	f003 030c 	and.w	r3, r3, #12
 80030bc:	2b08      	cmp	r3, #8
 80030be:	d061      	beq.n	8003184 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	69db      	ldr	r3, [r3, #28]
 80030c4:	2b02      	cmp	r3, #2
 80030c6:	d146      	bne.n	8003156 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030c8:	4b33      	ldr	r3, [pc, #204]	@ (8003198 <HAL_RCC_OscConfig+0x4cc>)
 80030ca:	2200      	movs	r2, #0
 80030cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030ce:	f7fe ff69 	bl	8001fa4 <HAL_GetTick>
 80030d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030d4:	e008      	b.n	80030e8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030d6:	f7fe ff65 	bl	8001fa4 <HAL_GetTick>
 80030da:	4602      	mov	r2, r0
 80030dc:	693b      	ldr	r3, [r7, #16]
 80030de:	1ad3      	subs	r3, r2, r3
 80030e0:	2b02      	cmp	r3, #2
 80030e2:	d901      	bls.n	80030e8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80030e4:	2303      	movs	r3, #3
 80030e6:	e06d      	b.n	80031c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030e8:	4b29      	ldr	r3, [pc, #164]	@ (8003190 <HAL_RCC_OscConfig+0x4c4>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d1f0      	bne.n	80030d6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6a1b      	ldr	r3, [r3, #32]
 80030f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80030fc:	d108      	bne.n	8003110 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80030fe:	4b24      	ldr	r3, [pc, #144]	@ (8003190 <HAL_RCC_OscConfig+0x4c4>)
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	689b      	ldr	r3, [r3, #8]
 800310a:	4921      	ldr	r1, [pc, #132]	@ (8003190 <HAL_RCC_OscConfig+0x4c4>)
 800310c:	4313      	orrs	r3, r2
 800310e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003110:	4b1f      	ldr	r3, [pc, #124]	@ (8003190 <HAL_RCC_OscConfig+0x4c4>)
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6a19      	ldr	r1, [r3, #32]
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003120:	430b      	orrs	r3, r1
 8003122:	491b      	ldr	r1, [pc, #108]	@ (8003190 <HAL_RCC_OscConfig+0x4c4>)
 8003124:	4313      	orrs	r3, r2
 8003126:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003128:	4b1b      	ldr	r3, [pc, #108]	@ (8003198 <HAL_RCC_OscConfig+0x4cc>)
 800312a:	2201      	movs	r2, #1
 800312c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800312e:	f7fe ff39 	bl	8001fa4 <HAL_GetTick>
 8003132:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003134:	e008      	b.n	8003148 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003136:	f7fe ff35 	bl	8001fa4 <HAL_GetTick>
 800313a:	4602      	mov	r2, r0
 800313c:	693b      	ldr	r3, [r7, #16]
 800313e:	1ad3      	subs	r3, r2, r3
 8003140:	2b02      	cmp	r3, #2
 8003142:	d901      	bls.n	8003148 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003144:	2303      	movs	r3, #3
 8003146:	e03d      	b.n	80031c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003148:	4b11      	ldr	r3, [pc, #68]	@ (8003190 <HAL_RCC_OscConfig+0x4c4>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003150:	2b00      	cmp	r3, #0
 8003152:	d0f0      	beq.n	8003136 <HAL_RCC_OscConfig+0x46a>
 8003154:	e035      	b.n	80031c2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003156:	4b10      	ldr	r3, [pc, #64]	@ (8003198 <HAL_RCC_OscConfig+0x4cc>)
 8003158:	2200      	movs	r2, #0
 800315a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800315c:	f7fe ff22 	bl	8001fa4 <HAL_GetTick>
 8003160:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003162:	e008      	b.n	8003176 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003164:	f7fe ff1e 	bl	8001fa4 <HAL_GetTick>
 8003168:	4602      	mov	r2, r0
 800316a:	693b      	ldr	r3, [r7, #16]
 800316c:	1ad3      	subs	r3, r2, r3
 800316e:	2b02      	cmp	r3, #2
 8003170:	d901      	bls.n	8003176 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003172:	2303      	movs	r3, #3
 8003174:	e026      	b.n	80031c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003176:	4b06      	ldr	r3, [pc, #24]	@ (8003190 <HAL_RCC_OscConfig+0x4c4>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800317e:	2b00      	cmp	r3, #0
 8003180:	d1f0      	bne.n	8003164 <HAL_RCC_OscConfig+0x498>
 8003182:	e01e      	b.n	80031c2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	69db      	ldr	r3, [r3, #28]
 8003188:	2b01      	cmp	r3, #1
 800318a:	d107      	bne.n	800319c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800318c:	2301      	movs	r3, #1
 800318e:	e019      	b.n	80031c4 <HAL_RCC_OscConfig+0x4f8>
 8003190:	40021000 	.word	0x40021000
 8003194:	40007000 	.word	0x40007000
 8003198:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800319c:	4b0b      	ldr	r3, [pc, #44]	@ (80031cc <HAL_RCC_OscConfig+0x500>)
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6a1b      	ldr	r3, [r3, #32]
 80031ac:	429a      	cmp	r2, r3
 80031ae:	d106      	bne.n	80031be <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031ba:	429a      	cmp	r2, r3
 80031bc:	d001      	beq.n	80031c2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80031be:	2301      	movs	r3, #1
 80031c0:	e000      	b.n	80031c4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80031c2:	2300      	movs	r3, #0
}
 80031c4:	4618      	mov	r0, r3
 80031c6:	3718      	adds	r7, #24
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bd80      	pop	{r7, pc}
 80031cc:	40021000 	.word	0x40021000

080031d0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b084      	sub	sp, #16
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
 80031d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d101      	bne.n	80031e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80031e0:	2301      	movs	r3, #1
 80031e2:	e0d0      	b.n	8003386 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80031e4:	4b6a      	ldr	r3, [pc, #424]	@ (8003390 <HAL_RCC_ClockConfig+0x1c0>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f003 0307 	and.w	r3, r3, #7
 80031ec:	683a      	ldr	r2, [r7, #0]
 80031ee:	429a      	cmp	r2, r3
 80031f0:	d910      	bls.n	8003214 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031f2:	4b67      	ldr	r3, [pc, #412]	@ (8003390 <HAL_RCC_ClockConfig+0x1c0>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f023 0207 	bic.w	r2, r3, #7
 80031fa:	4965      	ldr	r1, [pc, #404]	@ (8003390 <HAL_RCC_ClockConfig+0x1c0>)
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	4313      	orrs	r3, r2
 8003200:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003202:	4b63      	ldr	r3, [pc, #396]	@ (8003390 <HAL_RCC_ClockConfig+0x1c0>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f003 0307 	and.w	r3, r3, #7
 800320a:	683a      	ldr	r2, [r7, #0]
 800320c:	429a      	cmp	r2, r3
 800320e:	d001      	beq.n	8003214 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003210:	2301      	movs	r3, #1
 8003212:	e0b8      	b.n	8003386 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f003 0302 	and.w	r3, r3, #2
 800321c:	2b00      	cmp	r3, #0
 800321e:	d020      	beq.n	8003262 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f003 0304 	and.w	r3, r3, #4
 8003228:	2b00      	cmp	r3, #0
 800322a:	d005      	beq.n	8003238 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800322c:	4b59      	ldr	r3, [pc, #356]	@ (8003394 <HAL_RCC_ClockConfig+0x1c4>)
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	4a58      	ldr	r2, [pc, #352]	@ (8003394 <HAL_RCC_ClockConfig+0x1c4>)
 8003232:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003236:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f003 0308 	and.w	r3, r3, #8
 8003240:	2b00      	cmp	r3, #0
 8003242:	d005      	beq.n	8003250 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003244:	4b53      	ldr	r3, [pc, #332]	@ (8003394 <HAL_RCC_ClockConfig+0x1c4>)
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	4a52      	ldr	r2, [pc, #328]	@ (8003394 <HAL_RCC_ClockConfig+0x1c4>)
 800324a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800324e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003250:	4b50      	ldr	r3, [pc, #320]	@ (8003394 <HAL_RCC_ClockConfig+0x1c4>)
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	689b      	ldr	r3, [r3, #8]
 800325c:	494d      	ldr	r1, [pc, #308]	@ (8003394 <HAL_RCC_ClockConfig+0x1c4>)
 800325e:	4313      	orrs	r3, r2
 8003260:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f003 0301 	and.w	r3, r3, #1
 800326a:	2b00      	cmp	r3, #0
 800326c:	d040      	beq.n	80032f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	2b01      	cmp	r3, #1
 8003274:	d107      	bne.n	8003286 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003276:	4b47      	ldr	r3, [pc, #284]	@ (8003394 <HAL_RCC_ClockConfig+0x1c4>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800327e:	2b00      	cmp	r3, #0
 8003280:	d115      	bne.n	80032ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003282:	2301      	movs	r3, #1
 8003284:	e07f      	b.n	8003386 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	2b02      	cmp	r3, #2
 800328c:	d107      	bne.n	800329e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800328e:	4b41      	ldr	r3, [pc, #260]	@ (8003394 <HAL_RCC_ClockConfig+0x1c4>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003296:	2b00      	cmp	r3, #0
 8003298:	d109      	bne.n	80032ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800329a:	2301      	movs	r3, #1
 800329c:	e073      	b.n	8003386 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800329e:	4b3d      	ldr	r3, [pc, #244]	@ (8003394 <HAL_RCC_ClockConfig+0x1c4>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f003 0302 	and.w	r3, r3, #2
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d101      	bne.n	80032ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032aa:	2301      	movs	r3, #1
 80032ac:	e06b      	b.n	8003386 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80032ae:	4b39      	ldr	r3, [pc, #228]	@ (8003394 <HAL_RCC_ClockConfig+0x1c4>)
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	f023 0203 	bic.w	r2, r3, #3
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	4936      	ldr	r1, [pc, #216]	@ (8003394 <HAL_RCC_ClockConfig+0x1c4>)
 80032bc:	4313      	orrs	r3, r2
 80032be:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80032c0:	f7fe fe70 	bl	8001fa4 <HAL_GetTick>
 80032c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032c6:	e00a      	b.n	80032de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032c8:	f7fe fe6c 	bl	8001fa4 <HAL_GetTick>
 80032cc:	4602      	mov	r2, r0
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	1ad3      	subs	r3, r2, r3
 80032d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d901      	bls.n	80032de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80032da:	2303      	movs	r3, #3
 80032dc:	e053      	b.n	8003386 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032de:	4b2d      	ldr	r3, [pc, #180]	@ (8003394 <HAL_RCC_ClockConfig+0x1c4>)
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	f003 020c 	and.w	r2, r3, #12
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	009b      	lsls	r3, r3, #2
 80032ec:	429a      	cmp	r2, r3
 80032ee:	d1eb      	bne.n	80032c8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80032f0:	4b27      	ldr	r3, [pc, #156]	@ (8003390 <HAL_RCC_ClockConfig+0x1c0>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f003 0307 	and.w	r3, r3, #7
 80032f8:	683a      	ldr	r2, [r7, #0]
 80032fa:	429a      	cmp	r2, r3
 80032fc:	d210      	bcs.n	8003320 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032fe:	4b24      	ldr	r3, [pc, #144]	@ (8003390 <HAL_RCC_ClockConfig+0x1c0>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f023 0207 	bic.w	r2, r3, #7
 8003306:	4922      	ldr	r1, [pc, #136]	@ (8003390 <HAL_RCC_ClockConfig+0x1c0>)
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	4313      	orrs	r3, r2
 800330c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800330e:	4b20      	ldr	r3, [pc, #128]	@ (8003390 <HAL_RCC_ClockConfig+0x1c0>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f003 0307 	and.w	r3, r3, #7
 8003316:	683a      	ldr	r2, [r7, #0]
 8003318:	429a      	cmp	r2, r3
 800331a:	d001      	beq.n	8003320 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800331c:	2301      	movs	r3, #1
 800331e:	e032      	b.n	8003386 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f003 0304 	and.w	r3, r3, #4
 8003328:	2b00      	cmp	r3, #0
 800332a:	d008      	beq.n	800333e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800332c:	4b19      	ldr	r3, [pc, #100]	@ (8003394 <HAL_RCC_ClockConfig+0x1c4>)
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	68db      	ldr	r3, [r3, #12]
 8003338:	4916      	ldr	r1, [pc, #88]	@ (8003394 <HAL_RCC_ClockConfig+0x1c4>)
 800333a:	4313      	orrs	r3, r2
 800333c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f003 0308 	and.w	r3, r3, #8
 8003346:	2b00      	cmp	r3, #0
 8003348:	d009      	beq.n	800335e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800334a:	4b12      	ldr	r3, [pc, #72]	@ (8003394 <HAL_RCC_ClockConfig+0x1c4>)
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	691b      	ldr	r3, [r3, #16]
 8003356:	00db      	lsls	r3, r3, #3
 8003358:	490e      	ldr	r1, [pc, #56]	@ (8003394 <HAL_RCC_ClockConfig+0x1c4>)
 800335a:	4313      	orrs	r3, r2
 800335c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800335e:	f000 f821 	bl	80033a4 <HAL_RCC_GetSysClockFreq>
 8003362:	4602      	mov	r2, r0
 8003364:	4b0b      	ldr	r3, [pc, #44]	@ (8003394 <HAL_RCC_ClockConfig+0x1c4>)
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	091b      	lsrs	r3, r3, #4
 800336a:	f003 030f 	and.w	r3, r3, #15
 800336e:	490a      	ldr	r1, [pc, #40]	@ (8003398 <HAL_RCC_ClockConfig+0x1c8>)
 8003370:	5ccb      	ldrb	r3, [r1, r3]
 8003372:	fa22 f303 	lsr.w	r3, r2, r3
 8003376:	4a09      	ldr	r2, [pc, #36]	@ (800339c <HAL_RCC_ClockConfig+0x1cc>)
 8003378:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800337a:	4b09      	ldr	r3, [pc, #36]	@ (80033a0 <HAL_RCC_ClockConfig+0x1d0>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4618      	mov	r0, r3
 8003380:	f7fe fdce 	bl	8001f20 <HAL_InitTick>

  return HAL_OK;
 8003384:	2300      	movs	r3, #0
}
 8003386:	4618      	mov	r0, r3
 8003388:	3710      	adds	r7, #16
 800338a:	46bd      	mov	sp, r7
 800338c:	bd80      	pop	{r7, pc}
 800338e:	bf00      	nop
 8003390:	40022000 	.word	0x40022000
 8003394:	40021000 	.word	0x40021000
 8003398:	08007c1c 	.word	0x08007c1c
 800339c:	20000000 	.word	0x20000000
 80033a0:	20000004 	.word	0x20000004

080033a4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033a4:	b480      	push	{r7}
 80033a6:	b087      	sub	sp, #28
 80033a8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80033aa:	2300      	movs	r3, #0
 80033ac:	60fb      	str	r3, [r7, #12]
 80033ae:	2300      	movs	r3, #0
 80033b0:	60bb      	str	r3, [r7, #8]
 80033b2:	2300      	movs	r3, #0
 80033b4:	617b      	str	r3, [r7, #20]
 80033b6:	2300      	movs	r3, #0
 80033b8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80033ba:	2300      	movs	r3, #0
 80033bc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80033be:	4b1e      	ldr	r3, [pc, #120]	@ (8003438 <HAL_RCC_GetSysClockFreq+0x94>)
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	f003 030c 	and.w	r3, r3, #12
 80033ca:	2b04      	cmp	r3, #4
 80033cc:	d002      	beq.n	80033d4 <HAL_RCC_GetSysClockFreq+0x30>
 80033ce:	2b08      	cmp	r3, #8
 80033d0:	d003      	beq.n	80033da <HAL_RCC_GetSysClockFreq+0x36>
 80033d2:	e027      	b.n	8003424 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80033d4:	4b19      	ldr	r3, [pc, #100]	@ (800343c <HAL_RCC_GetSysClockFreq+0x98>)
 80033d6:	613b      	str	r3, [r7, #16]
      break;
 80033d8:	e027      	b.n	800342a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	0c9b      	lsrs	r3, r3, #18
 80033de:	f003 030f 	and.w	r3, r3, #15
 80033e2:	4a17      	ldr	r2, [pc, #92]	@ (8003440 <HAL_RCC_GetSysClockFreq+0x9c>)
 80033e4:	5cd3      	ldrb	r3, [r2, r3]
 80033e6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d010      	beq.n	8003414 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80033f2:	4b11      	ldr	r3, [pc, #68]	@ (8003438 <HAL_RCC_GetSysClockFreq+0x94>)
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	0c5b      	lsrs	r3, r3, #17
 80033f8:	f003 0301 	and.w	r3, r3, #1
 80033fc:	4a11      	ldr	r2, [pc, #68]	@ (8003444 <HAL_RCC_GetSysClockFreq+0xa0>)
 80033fe:	5cd3      	ldrb	r3, [r2, r3]
 8003400:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	4a0d      	ldr	r2, [pc, #52]	@ (800343c <HAL_RCC_GetSysClockFreq+0x98>)
 8003406:	fb03 f202 	mul.w	r2, r3, r2
 800340a:	68bb      	ldr	r3, [r7, #8]
 800340c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003410:	617b      	str	r3, [r7, #20]
 8003412:	e004      	b.n	800341e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	4a0c      	ldr	r2, [pc, #48]	@ (8003448 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003418:	fb02 f303 	mul.w	r3, r2, r3
 800341c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800341e:	697b      	ldr	r3, [r7, #20]
 8003420:	613b      	str	r3, [r7, #16]
      break;
 8003422:	e002      	b.n	800342a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003424:	4b05      	ldr	r3, [pc, #20]	@ (800343c <HAL_RCC_GetSysClockFreq+0x98>)
 8003426:	613b      	str	r3, [r7, #16]
      break;
 8003428:	bf00      	nop
    }
  }
  return sysclockfreq;
 800342a:	693b      	ldr	r3, [r7, #16]
}
 800342c:	4618      	mov	r0, r3
 800342e:	371c      	adds	r7, #28
 8003430:	46bd      	mov	sp, r7
 8003432:	bc80      	pop	{r7}
 8003434:	4770      	bx	lr
 8003436:	bf00      	nop
 8003438:	40021000 	.word	0x40021000
 800343c:	007a1200 	.word	0x007a1200
 8003440:	08007c34 	.word	0x08007c34
 8003444:	08007c44 	.word	0x08007c44
 8003448:	003d0900 	.word	0x003d0900

0800344c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800344c:	b480      	push	{r7}
 800344e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003450:	4b02      	ldr	r3, [pc, #8]	@ (800345c <HAL_RCC_GetHCLKFreq+0x10>)
 8003452:	681b      	ldr	r3, [r3, #0]
}
 8003454:	4618      	mov	r0, r3
 8003456:	46bd      	mov	sp, r7
 8003458:	bc80      	pop	{r7}
 800345a:	4770      	bx	lr
 800345c:	20000000 	.word	0x20000000

08003460 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003464:	f7ff fff2 	bl	800344c <HAL_RCC_GetHCLKFreq>
 8003468:	4602      	mov	r2, r0
 800346a:	4b05      	ldr	r3, [pc, #20]	@ (8003480 <HAL_RCC_GetPCLK1Freq+0x20>)
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	0a1b      	lsrs	r3, r3, #8
 8003470:	f003 0307 	and.w	r3, r3, #7
 8003474:	4903      	ldr	r1, [pc, #12]	@ (8003484 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003476:	5ccb      	ldrb	r3, [r1, r3]
 8003478:	fa22 f303 	lsr.w	r3, r2, r3
}
 800347c:	4618      	mov	r0, r3
 800347e:	bd80      	pop	{r7, pc}
 8003480:	40021000 	.word	0x40021000
 8003484:	08007c2c 	.word	0x08007c2c

08003488 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800348c:	f7ff ffde 	bl	800344c <HAL_RCC_GetHCLKFreq>
 8003490:	4602      	mov	r2, r0
 8003492:	4b05      	ldr	r3, [pc, #20]	@ (80034a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	0adb      	lsrs	r3, r3, #11
 8003498:	f003 0307 	and.w	r3, r3, #7
 800349c:	4903      	ldr	r1, [pc, #12]	@ (80034ac <HAL_RCC_GetPCLK2Freq+0x24>)
 800349e:	5ccb      	ldrb	r3, [r1, r3]
 80034a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034a4:	4618      	mov	r0, r3
 80034a6:	bd80      	pop	{r7, pc}
 80034a8:	40021000 	.word	0x40021000
 80034ac:	08007c2c 	.word	0x08007c2c

080034b0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80034b0:	b480      	push	{r7}
 80034b2:	b085      	sub	sp, #20
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80034b8:	4b0a      	ldr	r3, [pc, #40]	@ (80034e4 <RCC_Delay+0x34>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a0a      	ldr	r2, [pc, #40]	@ (80034e8 <RCC_Delay+0x38>)
 80034be:	fba2 2303 	umull	r2, r3, r2, r3
 80034c2:	0a5b      	lsrs	r3, r3, #9
 80034c4:	687a      	ldr	r2, [r7, #4]
 80034c6:	fb02 f303 	mul.w	r3, r2, r3
 80034ca:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80034cc:	bf00      	nop
  }
  while (Delay --);
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	1e5a      	subs	r2, r3, #1
 80034d2:	60fa      	str	r2, [r7, #12]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d1f9      	bne.n	80034cc <RCC_Delay+0x1c>
}
 80034d8:	bf00      	nop
 80034da:	bf00      	nop
 80034dc:	3714      	adds	r7, #20
 80034de:	46bd      	mov	sp, r7
 80034e0:	bc80      	pop	{r7}
 80034e2:	4770      	bx	lr
 80034e4:	20000000 	.word	0x20000000
 80034e8:	10624dd3 	.word	0x10624dd3

080034ec <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b086      	sub	sp, #24
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80034f4:	2300      	movs	r3, #0
 80034f6:	613b      	str	r3, [r7, #16]
 80034f8:	2300      	movs	r3, #0
 80034fa:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f003 0301 	and.w	r3, r3, #1
 8003504:	2b00      	cmp	r3, #0
 8003506:	d07d      	beq.n	8003604 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003508:	2300      	movs	r3, #0
 800350a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800350c:	4b4f      	ldr	r3, [pc, #316]	@ (800364c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800350e:	69db      	ldr	r3, [r3, #28]
 8003510:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003514:	2b00      	cmp	r3, #0
 8003516:	d10d      	bne.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003518:	4b4c      	ldr	r3, [pc, #304]	@ (800364c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800351a:	69db      	ldr	r3, [r3, #28]
 800351c:	4a4b      	ldr	r2, [pc, #300]	@ (800364c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800351e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003522:	61d3      	str	r3, [r2, #28]
 8003524:	4b49      	ldr	r3, [pc, #292]	@ (800364c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003526:	69db      	ldr	r3, [r3, #28]
 8003528:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800352c:	60bb      	str	r3, [r7, #8]
 800352e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003530:	2301      	movs	r3, #1
 8003532:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003534:	4b46      	ldr	r3, [pc, #280]	@ (8003650 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800353c:	2b00      	cmp	r3, #0
 800353e:	d118      	bne.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003540:	4b43      	ldr	r3, [pc, #268]	@ (8003650 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a42      	ldr	r2, [pc, #264]	@ (8003650 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003546:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800354a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800354c:	f7fe fd2a 	bl	8001fa4 <HAL_GetTick>
 8003550:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003552:	e008      	b.n	8003566 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003554:	f7fe fd26 	bl	8001fa4 <HAL_GetTick>
 8003558:	4602      	mov	r2, r0
 800355a:	693b      	ldr	r3, [r7, #16]
 800355c:	1ad3      	subs	r3, r2, r3
 800355e:	2b64      	cmp	r3, #100	@ 0x64
 8003560:	d901      	bls.n	8003566 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003562:	2303      	movs	r3, #3
 8003564:	e06d      	b.n	8003642 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003566:	4b3a      	ldr	r3, [pc, #232]	@ (8003650 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800356e:	2b00      	cmp	r3, #0
 8003570:	d0f0      	beq.n	8003554 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003572:	4b36      	ldr	r3, [pc, #216]	@ (800364c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003574:	6a1b      	ldr	r3, [r3, #32]
 8003576:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800357a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d02e      	beq.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800358a:	68fa      	ldr	r2, [r7, #12]
 800358c:	429a      	cmp	r2, r3
 800358e:	d027      	beq.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003590:	4b2e      	ldr	r3, [pc, #184]	@ (800364c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003592:	6a1b      	ldr	r3, [r3, #32]
 8003594:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003598:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800359a:	4b2e      	ldr	r3, [pc, #184]	@ (8003654 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800359c:	2201      	movs	r2, #1
 800359e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80035a0:	4b2c      	ldr	r3, [pc, #176]	@ (8003654 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80035a2:	2200      	movs	r2, #0
 80035a4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80035a6:	4a29      	ldr	r2, [pc, #164]	@ (800364c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	f003 0301 	and.w	r3, r3, #1
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d014      	beq.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035b6:	f7fe fcf5 	bl	8001fa4 <HAL_GetTick>
 80035ba:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035bc:	e00a      	b.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035be:	f7fe fcf1 	bl	8001fa4 <HAL_GetTick>
 80035c2:	4602      	mov	r2, r0
 80035c4:	693b      	ldr	r3, [r7, #16]
 80035c6:	1ad3      	subs	r3, r2, r3
 80035c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d901      	bls.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80035d0:	2303      	movs	r3, #3
 80035d2:	e036      	b.n	8003642 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035d4:	4b1d      	ldr	r3, [pc, #116]	@ (800364c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035d6:	6a1b      	ldr	r3, [r3, #32]
 80035d8:	f003 0302 	and.w	r3, r3, #2
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d0ee      	beq.n	80035be <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80035e0:	4b1a      	ldr	r3, [pc, #104]	@ (800364c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035e2:	6a1b      	ldr	r3, [r3, #32]
 80035e4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	4917      	ldr	r1, [pc, #92]	@ (800364c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035ee:	4313      	orrs	r3, r2
 80035f0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80035f2:	7dfb      	ldrb	r3, [r7, #23]
 80035f4:	2b01      	cmp	r3, #1
 80035f6:	d105      	bne.n	8003604 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035f8:	4b14      	ldr	r3, [pc, #80]	@ (800364c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035fa:	69db      	ldr	r3, [r3, #28]
 80035fc:	4a13      	ldr	r2, [pc, #76]	@ (800364c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035fe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003602:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f003 0302 	and.w	r3, r3, #2
 800360c:	2b00      	cmp	r3, #0
 800360e:	d008      	beq.n	8003622 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003610:	4b0e      	ldr	r3, [pc, #56]	@ (800364c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	689b      	ldr	r3, [r3, #8]
 800361c:	490b      	ldr	r1, [pc, #44]	@ (800364c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800361e:	4313      	orrs	r3, r2
 8003620:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f003 0310 	and.w	r3, r3, #16
 800362a:	2b00      	cmp	r3, #0
 800362c:	d008      	beq.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800362e:	4b07      	ldr	r3, [pc, #28]	@ (800364c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	68db      	ldr	r3, [r3, #12]
 800363a:	4904      	ldr	r1, [pc, #16]	@ (800364c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800363c:	4313      	orrs	r3, r2
 800363e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003640:	2300      	movs	r3, #0
}
 8003642:	4618      	mov	r0, r3
 8003644:	3718      	adds	r7, #24
 8003646:	46bd      	mov	sp, r7
 8003648:	bd80      	pop	{r7, pc}
 800364a:	bf00      	nop
 800364c:	40021000 	.word	0x40021000
 8003650:	40007000 	.word	0x40007000
 8003654:	42420440 	.word	0x42420440

08003658 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b088      	sub	sp, #32
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8003660:	2300      	movs	r3, #0
 8003662:	617b      	str	r3, [r7, #20]
 8003664:	2300      	movs	r3, #0
 8003666:	61fb      	str	r3, [r7, #28]
 8003668:	2300      	movs	r3, #0
 800366a:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 800366c:	2300      	movs	r3, #0
 800366e:	60fb      	str	r3, [r7, #12]
 8003670:	2300      	movs	r3, #0
 8003672:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2b10      	cmp	r3, #16
 8003678:	d00a      	beq.n	8003690 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2b10      	cmp	r3, #16
 800367e:	f200 808a 	bhi.w	8003796 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2b01      	cmp	r3, #1
 8003686:	d045      	beq.n	8003714 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2b02      	cmp	r3, #2
 800368c:	d075      	beq.n	800377a <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 800368e:	e082      	b.n	8003796 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8003690:	4b46      	ldr	r3, [pc, #280]	@ (80037ac <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8003696:	4b45      	ldr	r3, [pc, #276]	@ (80037ac <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d07b      	beq.n	800379a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	0c9b      	lsrs	r3, r3, #18
 80036a6:	f003 030f 	and.w	r3, r3, #15
 80036aa:	4a41      	ldr	r2, [pc, #260]	@ (80037b0 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 80036ac:	5cd3      	ldrb	r3, [r2, r3]
 80036ae:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d015      	beq.n	80036e6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80036ba:	4b3c      	ldr	r3, [pc, #240]	@ (80037ac <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	0c5b      	lsrs	r3, r3, #17
 80036c0:	f003 0301 	and.w	r3, r3, #1
 80036c4:	4a3b      	ldr	r2, [pc, #236]	@ (80037b4 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 80036c6:	5cd3      	ldrb	r3, [r2, r3]
 80036c8:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d00d      	beq.n	80036f0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80036d4:	4a38      	ldr	r2, [pc, #224]	@ (80037b8 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 80036d6:	697b      	ldr	r3, [r7, #20]
 80036d8:	fbb2 f2f3 	udiv	r2, r2, r3
 80036dc:	693b      	ldr	r3, [r7, #16]
 80036de:	fb02 f303 	mul.w	r3, r2, r3
 80036e2:	61fb      	str	r3, [r7, #28]
 80036e4:	e004      	b.n	80036f0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80036e6:	693b      	ldr	r3, [r7, #16]
 80036e8:	4a34      	ldr	r2, [pc, #208]	@ (80037bc <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 80036ea:	fb02 f303 	mul.w	r3, r2, r3
 80036ee:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80036f0:	4b2e      	ldr	r3, [pc, #184]	@ (80037ac <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80036f8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80036fc:	d102      	bne.n	8003704 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 80036fe:	69fb      	ldr	r3, [r7, #28]
 8003700:	61bb      	str	r3, [r7, #24]
      break;
 8003702:	e04a      	b.n	800379a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8003704:	69fb      	ldr	r3, [r7, #28]
 8003706:	005b      	lsls	r3, r3, #1
 8003708:	4a2d      	ldr	r2, [pc, #180]	@ (80037c0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800370a:	fba2 2303 	umull	r2, r3, r2, r3
 800370e:	085b      	lsrs	r3, r3, #1
 8003710:	61bb      	str	r3, [r7, #24]
      break;
 8003712:	e042      	b.n	800379a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8003714:	4b25      	ldr	r3, [pc, #148]	@ (80037ac <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003716:	6a1b      	ldr	r3, [r3, #32]
 8003718:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003720:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003724:	d108      	bne.n	8003738 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	f003 0302 	and.w	r3, r3, #2
 800372c:	2b00      	cmp	r3, #0
 800372e:	d003      	beq.n	8003738 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8003730:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003734:	61bb      	str	r3, [r7, #24]
 8003736:	e01f      	b.n	8003778 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800373e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003742:	d109      	bne.n	8003758 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8003744:	4b19      	ldr	r3, [pc, #100]	@ (80037ac <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003746:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003748:	f003 0302 	and.w	r3, r3, #2
 800374c:	2b00      	cmp	r3, #0
 800374e:	d003      	beq.n	8003758 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8003750:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8003754:	61bb      	str	r3, [r7, #24]
 8003756:	e00f      	b.n	8003778 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800375e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003762:	d11c      	bne.n	800379e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003764:	4b11      	ldr	r3, [pc, #68]	@ (80037ac <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800376c:	2b00      	cmp	r3, #0
 800376e:	d016      	beq.n	800379e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8003770:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8003774:	61bb      	str	r3, [r7, #24]
      break;
 8003776:	e012      	b.n	800379e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003778:	e011      	b.n	800379e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800377a:	f7ff fe85 	bl	8003488 <HAL_RCC_GetPCLK2Freq>
 800377e:	4602      	mov	r2, r0
 8003780:	4b0a      	ldr	r3, [pc, #40]	@ (80037ac <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	0b9b      	lsrs	r3, r3, #14
 8003786:	f003 0303 	and.w	r3, r3, #3
 800378a:	3301      	adds	r3, #1
 800378c:	005b      	lsls	r3, r3, #1
 800378e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003792:	61bb      	str	r3, [r7, #24]
      break;
 8003794:	e004      	b.n	80037a0 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003796:	bf00      	nop
 8003798:	e002      	b.n	80037a0 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800379a:	bf00      	nop
 800379c:	e000      	b.n	80037a0 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800379e:	bf00      	nop
    }
  }
  return (frequency);
 80037a0:	69bb      	ldr	r3, [r7, #24]
}
 80037a2:	4618      	mov	r0, r3
 80037a4:	3720      	adds	r7, #32
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bd80      	pop	{r7, pc}
 80037aa:	bf00      	nop
 80037ac:	40021000 	.word	0x40021000
 80037b0:	08007c48 	.word	0x08007c48
 80037b4:	08007c58 	.word	0x08007c58
 80037b8:	007a1200 	.word	0x007a1200
 80037bc:	003d0900 	.word	0x003d0900
 80037c0:	aaaaaaab 	.word	0xaaaaaaab

080037c4 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b084      	sub	sp, #16
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 80037cc:	2300      	movs	r3, #0
 80037ce:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d101      	bne.n	80037da <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80037d6:	2301      	movs	r3, #1
 80037d8:	e07a      	b.n	80038d0 <HAL_RTC_Init+0x10c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	7c5b      	ldrb	r3, [r3, #17]
 80037de:	b2db      	uxtb	r3, r3
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d105      	bne.n	80037f0 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2200      	movs	r2, #0
 80037e8:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80037ea:	6878      	ldr	r0, [r7, #4]
 80037ec:	f7fd fe4e 	bl	800148c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2202      	movs	r2, #2
 80037f4:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80037f6:	6878      	ldr	r0, [r7, #4]
 80037f8:	f000 f870 	bl	80038dc <HAL_RTC_WaitForSynchro>
 80037fc:	4603      	mov	r3, r0
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d004      	beq.n	800380c <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2204      	movs	r2, #4
 8003806:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8003808:	2301      	movs	r3, #1
 800380a:	e061      	b.n	80038d0 <HAL_RTC_Init+0x10c>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800380c:	6878      	ldr	r0, [r7, #4]
 800380e:	f000 f892 	bl	8003936 <RTC_EnterInitMode>
 8003812:	4603      	mov	r3, r0
 8003814:	2b00      	cmp	r3, #0
 8003816:	d004      	beq.n	8003822 <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2204      	movs	r2, #4
 800381c:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 800381e:	2301      	movs	r3, #1
 8003820:	e056      	b.n	80038d0 <HAL_RTC_Init+0x10c>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	685a      	ldr	r2, [r3, #4]
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f022 0207 	bic.w	r2, r2, #7
 8003830:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	689b      	ldr	r3, [r3, #8]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d005      	beq.n	8003846 <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 800383a:	4b27      	ldr	r3, [pc, #156]	@ (80038d8 <HAL_RTC_Init+0x114>)
 800383c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800383e:	4a26      	ldr	r2, [pc, #152]	@ (80038d8 <HAL_RTC_Init+0x114>)
 8003840:	f023 0301 	bic.w	r3, r3, #1
 8003844:	6313      	str	r3, [r2, #48]	@ 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8003846:	4b24      	ldr	r3, [pc, #144]	@ (80038d8 <HAL_RTC_Init+0x114>)
 8003848:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800384a:	f423 7260 	bic.w	r2, r3, #896	@ 0x380
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	689b      	ldr	r3, [r3, #8]
 8003852:	4921      	ldr	r1, [pc, #132]	@ (80038d8 <HAL_RTC_Init+0x114>)
 8003854:	4313      	orrs	r3, r2
 8003856:	62cb      	str	r3, [r1, #44]	@ 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003860:	d003      	beq.n	800386a <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	60fb      	str	r3, [r7, #12]
 8003868:	e00e      	b.n	8003888 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 800386a:	2001      	movs	r0, #1
 800386c:	f7ff fef4 	bl	8003658 <HAL_RCCEx_GetPeriphCLKFreq>
 8003870:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d104      	bne.n	8003882 <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2204      	movs	r2, #4
 800387c:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 800387e:	2301      	movs	r3, #1
 8003880:	e026      	b.n	80038d0 <HAL_RTC_Init+0x10c>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	3b01      	subs	r3, #1
 8003886:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    WRITE_REG(hrtc->Instance->PRLH, ((prescaler >> 16U) & RTC_PRLH_PRL));
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	0c1a      	lsrs	r2, r3, #16
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f002 020f 	and.w	r2, r2, #15
 8003894:	609a      	str	r2, [r3, #8]
    WRITE_REG(hrtc->Instance->PRLL, (prescaler & RTC_PRLL_PRL));
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	68fa      	ldr	r2, [r7, #12]
 800389c:	b292      	uxth	r2, r2
 800389e:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80038a0:	6878      	ldr	r0, [r7, #4]
 80038a2:	f000 f870 	bl	8003986 <RTC_ExitInitMode>
 80038a6:	4603      	mov	r3, r0
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d004      	beq.n	80038b6 <HAL_RTC_Init+0xf2>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2204      	movs	r2, #4
 80038b0:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 80038b2:	2301      	movs	r3, #1
 80038b4:	e00c      	b.n	80038d0 <HAL_RTC_Init+0x10c>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2200      	movs	r2, #0
 80038ba:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2201      	movs	r2, #1
 80038c0:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2201      	movs	r2, #1
 80038c6:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2201      	movs	r2, #1
 80038cc:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 80038ce:	2300      	movs	r3, #0
  }
}
 80038d0:	4618      	mov	r0, r3
 80038d2:	3710      	adds	r7, #16
 80038d4:	46bd      	mov	sp, r7
 80038d6:	bd80      	pop	{r7, pc}
 80038d8:	40006c00 	.word	0x40006c00

080038dc <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b084      	sub	sp, #16
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80038e4:	2300      	movs	r3, #0
 80038e6:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d101      	bne.n	80038f2 <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 80038ee:	2301      	movs	r3, #1
 80038f0:	e01d      	b.n	800392e <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	685a      	ldr	r2, [r3, #4]
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f022 0208 	bic.w	r2, r2, #8
 8003900:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8003902:	f7fe fb4f 	bl	8001fa4 <HAL_GetTick>
 8003906:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8003908:	e009      	b.n	800391e <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800390a:	f7fe fb4b 	bl	8001fa4 <HAL_GetTick>
 800390e:	4602      	mov	r2, r0
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	1ad3      	subs	r3, r2, r3
 8003914:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003918:	d901      	bls.n	800391e <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 800391a:	2303      	movs	r3, #3
 800391c:	e007      	b.n	800392e <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	f003 0308 	and.w	r3, r3, #8
 8003928:	2b00      	cmp	r3, #0
 800392a:	d0ee      	beq.n	800390a <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 800392c:	2300      	movs	r3, #0
}
 800392e:	4618      	mov	r0, r3
 8003930:	3710      	adds	r7, #16
 8003932:	46bd      	mov	sp, r7
 8003934:	bd80      	pop	{r7, pc}

08003936 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003936:	b580      	push	{r7, lr}
 8003938:	b084      	sub	sp, #16
 800393a:	af00      	add	r7, sp, #0
 800393c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800393e:	2300      	movs	r3, #0
 8003940:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8003942:	f7fe fb2f 	bl	8001fa4 <HAL_GetTick>
 8003946:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003948:	e009      	b.n	800395e <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800394a:	f7fe fb2b 	bl	8001fa4 <HAL_GetTick>
 800394e:	4602      	mov	r2, r0
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	1ad3      	subs	r3, r2, r3
 8003954:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003958:	d901      	bls.n	800395e <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 800395a:	2303      	movs	r3, #3
 800395c:	e00f      	b.n	800397e <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	f003 0320 	and.w	r3, r3, #32
 8003968:	2b00      	cmp	r3, #0
 800396a:	d0ee      	beq.n	800394a <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	685a      	ldr	r2, [r3, #4]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f042 0210 	orr.w	r2, r2, #16
 800397a:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 800397c:	2300      	movs	r3, #0
}
 800397e:	4618      	mov	r0, r3
 8003980:	3710      	adds	r7, #16
 8003982:	46bd      	mov	sp, r7
 8003984:	bd80      	pop	{r7, pc}

08003986 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003986:	b580      	push	{r7, lr}
 8003988:	b084      	sub	sp, #16
 800398a:	af00      	add	r7, sp, #0
 800398c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800398e:	2300      	movs	r3, #0
 8003990:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	685a      	ldr	r2, [r3, #4]
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f022 0210 	bic.w	r2, r2, #16
 80039a0:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 80039a2:	f7fe faff 	bl	8001fa4 <HAL_GetTick>
 80039a6:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80039a8:	e009      	b.n	80039be <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80039aa:	f7fe fafb 	bl	8001fa4 <HAL_GetTick>
 80039ae:	4602      	mov	r2, r0
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	1ad3      	subs	r3, r2, r3
 80039b4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80039b8:	d901      	bls.n	80039be <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 80039ba:	2303      	movs	r3, #3
 80039bc:	e007      	b.n	80039ce <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	f003 0320 	and.w	r3, r3, #32
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d0ee      	beq.n	80039aa <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 80039cc:	2300      	movs	r3, #0
}
 80039ce:	4618      	mov	r0, r3
 80039d0:	3710      	adds	r7, #16
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bd80      	pop	{r7, pc}

080039d6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80039d6:	b580      	push	{r7, lr}
 80039d8:	b082      	sub	sp, #8
 80039da:	af00      	add	r7, sp, #0
 80039dc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d101      	bne.n	80039e8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80039e4:	2301      	movs	r3, #1
 80039e6:	e041      	b.n	8003a6c <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80039ee:	b2db      	uxtb	r3, r3
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d106      	bne.n	8003a02 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2200      	movs	r2, #0
 80039f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80039fc:	6878      	ldr	r0, [r7, #4]
 80039fe:	f7fe f90f 	bl	8001c20 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2202      	movs	r2, #2
 8003a06:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681a      	ldr	r2, [r3, #0]
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	3304      	adds	r3, #4
 8003a12:	4619      	mov	r1, r3
 8003a14:	4610      	mov	r0, r2
 8003a16:	f000 fe0f 	bl	8004638 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2201      	movs	r2, #1
 8003a1e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2201      	movs	r2, #1
 8003a26:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2201      	movs	r2, #1
 8003a2e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2201      	movs	r2, #1
 8003a36:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2201      	movs	r2, #1
 8003a3e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2201      	movs	r2, #1
 8003a46:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2201      	movs	r2, #1
 8003a4e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2201      	movs	r2, #1
 8003a56:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2201      	movs	r2, #1
 8003a5e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2201      	movs	r2, #1
 8003a66:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003a6a:	2300      	movs	r3, #0
}
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	3708      	adds	r7, #8
 8003a70:	46bd      	mov	sp, r7
 8003a72:	bd80      	pop	{r7, pc}

08003a74 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003a74:	b480      	push	{r7}
 8003a76:	b085      	sub	sp, #20
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a82:	b2db      	uxtb	r3, r3
 8003a84:	2b01      	cmp	r3, #1
 8003a86:	d001      	beq.n	8003a8c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003a88:	2301      	movs	r3, #1
 8003a8a:	e03a      	b.n	8003b02 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2202      	movs	r2, #2
 8003a90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	68da      	ldr	r2, [r3, #12]
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f042 0201 	orr.w	r2, r2, #1
 8003aa2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4a18      	ldr	r2, [pc, #96]	@ (8003b0c <HAL_TIM_Base_Start_IT+0x98>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d00e      	beq.n	8003acc <HAL_TIM_Base_Start_IT+0x58>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ab6:	d009      	beq.n	8003acc <HAL_TIM_Base_Start_IT+0x58>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a14      	ldr	r2, [pc, #80]	@ (8003b10 <HAL_TIM_Base_Start_IT+0x9c>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d004      	beq.n	8003acc <HAL_TIM_Base_Start_IT+0x58>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4a13      	ldr	r2, [pc, #76]	@ (8003b14 <HAL_TIM_Base_Start_IT+0xa0>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d111      	bne.n	8003af0 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	689b      	ldr	r3, [r3, #8]
 8003ad2:	f003 0307 	and.w	r3, r3, #7
 8003ad6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	2b06      	cmp	r3, #6
 8003adc:	d010      	beq.n	8003b00 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	681a      	ldr	r2, [r3, #0]
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f042 0201 	orr.w	r2, r2, #1
 8003aec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003aee:	e007      	b.n	8003b00 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	681a      	ldr	r2, [r3, #0]
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f042 0201 	orr.w	r2, r2, #1
 8003afe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003b00:	2300      	movs	r3, #0
}
 8003b02:	4618      	mov	r0, r3
 8003b04:	3714      	adds	r7, #20
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bc80      	pop	{r7}
 8003b0a:	4770      	bx	lr
 8003b0c:	40012c00 	.word	0x40012c00
 8003b10:	40000400 	.word	0x40000400
 8003b14:	40000800 	.word	0x40000800

08003b18 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b082      	sub	sp, #8
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d101      	bne.n	8003b2a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003b26:	2301      	movs	r3, #1
 8003b28:	e041      	b.n	8003bae <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b30:	b2db      	uxtb	r3, r3
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d106      	bne.n	8003b44 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2200      	movs	r2, #0
 8003b3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003b3e:	6878      	ldr	r0, [r7, #4]
 8003b40:	f000 f839 	bl	8003bb6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2202      	movs	r2, #2
 8003b48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681a      	ldr	r2, [r3, #0]
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	3304      	adds	r3, #4
 8003b54:	4619      	mov	r1, r3
 8003b56:	4610      	mov	r0, r2
 8003b58:	f000 fd6e 	bl	8004638 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2201      	movs	r2, #1
 8003b60:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2201      	movs	r2, #1
 8003b68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2201      	movs	r2, #1
 8003b70:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2201      	movs	r2, #1
 8003b78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2201      	movs	r2, #1
 8003b80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2201      	movs	r2, #1
 8003b88:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2201      	movs	r2, #1
 8003b90:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2201      	movs	r2, #1
 8003b98:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2201      	movs	r2, #1
 8003ba0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2201      	movs	r2, #1
 8003ba8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003bac:	2300      	movs	r3, #0
}
 8003bae:	4618      	mov	r0, r3
 8003bb0:	3708      	adds	r7, #8
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bd80      	pop	{r7, pc}

08003bb6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003bb6:	b480      	push	{r7}
 8003bb8:	b083      	sub	sp, #12
 8003bba:	af00      	add	r7, sp, #0
 8003bbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003bbe:	bf00      	nop
 8003bc0:	370c      	adds	r7, #12
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	bc80      	pop	{r7}
 8003bc6:	4770      	bx	lr

08003bc8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b084      	sub	sp, #16
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
 8003bd0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d109      	bne.n	8003bec <HAL_TIM_PWM_Start+0x24>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003bde:	b2db      	uxtb	r3, r3
 8003be0:	2b01      	cmp	r3, #1
 8003be2:	bf14      	ite	ne
 8003be4:	2301      	movne	r3, #1
 8003be6:	2300      	moveq	r3, #0
 8003be8:	b2db      	uxtb	r3, r3
 8003bea:	e022      	b.n	8003c32 <HAL_TIM_PWM_Start+0x6a>
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	2b04      	cmp	r3, #4
 8003bf0:	d109      	bne.n	8003c06 <HAL_TIM_PWM_Start+0x3e>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003bf8:	b2db      	uxtb	r3, r3
 8003bfa:	2b01      	cmp	r3, #1
 8003bfc:	bf14      	ite	ne
 8003bfe:	2301      	movne	r3, #1
 8003c00:	2300      	moveq	r3, #0
 8003c02:	b2db      	uxtb	r3, r3
 8003c04:	e015      	b.n	8003c32 <HAL_TIM_PWM_Start+0x6a>
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	2b08      	cmp	r3, #8
 8003c0a:	d109      	bne.n	8003c20 <HAL_TIM_PWM_Start+0x58>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003c12:	b2db      	uxtb	r3, r3
 8003c14:	2b01      	cmp	r3, #1
 8003c16:	bf14      	ite	ne
 8003c18:	2301      	movne	r3, #1
 8003c1a:	2300      	moveq	r3, #0
 8003c1c:	b2db      	uxtb	r3, r3
 8003c1e:	e008      	b.n	8003c32 <HAL_TIM_PWM_Start+0x6a>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c26:	b2db      	uxtb	r3, r3
 8003c28:	2b01      	cmp	r3, #1
 8003c2a:	bf14      	ite	ne
 8003c2c:	2301      	movne	r3, #1
 8003c2e:	2300      	moveq	r3, #0
 8003c30:	b2db      	uxtb	r3, r3
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d001      	beq.n	8003c3a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003c36:	2301      	movs	r3, #1
 8003c38:	e05e      	b.n	8003cf8 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d104      	bne.n	8003c4a <HAL_TIM_PWM_Start+0x82>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2202      	movs	r2, #2
 8003c44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003c48:	e013      	b.n	8003c72 <HAL_TIM_PWM_Start+0xaa>
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	2b04      	cmp	r3, #4
 8003c4e:	d104      	bne.n	8003c5a <HAL_TIM_PWM_Start+0x92>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2202      	movs	r2, #2
 8003c54:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003c58:	e00b      	b.n	8003c72 <HAL_TIM_PWM_Start+0xaa>
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	2b08      	cmp	r3, #8
 8003c5e:	d104      	bne.n	8003c6a <HAL_TIM_PWM_Start+0xa2>
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2202      	movs	r2, #2
 8003c64:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003c68:	e003      	b.n	8003c72 <HAL_TIM_PWM_Start+0xaa>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2202      	movs	r2, #2
 8003c6e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	2201      	movs	r2, #1
 8003c78:	6839      	ldr	r1, [r7, #0]
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	f001 f875 	bl	8004d6a <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a1e      	ldr	r2, [pc, #120]	@ (8003d00 <HAL_TIM_PWM_Start+0x138>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d107      	bne.n	8003c9a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003c98:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4a18      	ldr	r2, [pc, #96]	@ (8003d00 <HAL_TIM_PWM_Start+0x138>)
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d00e      	beq.n	8003cc2 <HAL_TIM_PWM_Start+0xfa>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003cac:	d009      	beq.n	8003cc2 <HAL_TIM_PWM_Start+0xfa>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4a14      	ldr	r2, [pc, #80]	@ (8003d04 <HAL_TIM_PWM_Start+0x13c>)
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d004      	beq.n	8003cc2 <HAL_TIM_PWM_Start+0xfa>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4a12      	ldr	r2, [pc, #72]	@ (8003d08 <HAL_TIM_PWM_Start+0x140>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d111      	bne.n	8003ce6 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	689b      	ldr	r3, [r3, #8]
 8003cc8:	f003 0307 	and.w	r3, r3, #7
 8003ccc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	2b06      	cmp	r3, #6
 8003cd2:	d010      	beq.n	8003cf6 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	681a      	ldr	r2, [r3, #0]
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f042 0201 	orr.w	r2, r2, #1
 8003ce2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ce4:	e007      	b.n	8003cf6 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	681a      	ldr	r2, [r3, #0]
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f042 0201 	orr.w	r2, r2, #1
 8003cf4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003cf6:	2300      	movs	r3, #0
}
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	3710      	adds	r7, #16
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	bd80      	pop	{r7, pc}
 8003d00:	40012c00 	.word	0x40012c00
 8003d04:	40000400 	.word	0x40000400
 8003d08:	40000800 	.word	0x40000800

08003d0c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b082      	sub	sp, #8
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d101      	bne.n	8003d1e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	e041      	b.n	8003da2 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d24:	b2db      	uxtb	r3, r3
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d106      	bne.n	8003d38 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003d32:	6878      	ldr	r0, [r7, #4]
 8003d34:	f000 f839 	bl	8003daa <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2202      	movs	r2, #2
 8003d3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681a      	ldr	r2, [r3, #0]
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	3304      	adds	r3, #4
 8003d48:	4619      	mov	r1, r3
 8003d4a:	4610      	mov	r0, r2
 8003d4c:	f000 fc74 	bl	8004638 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2201      	movs	r2, #1
 8003d54:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2201      	movs	r2, #1
 8003d5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2201      	movs	r2, #1
 8003d64:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2201      	movs	r2, #1
 8003d6c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2201      	movs	r2, #1
 8003d74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2201      	movs	r2, #1
 8003d7c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2201      	movs	r2, #1
 8003d84:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2201      	movs	r2, #1
 8003d8c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2201      	movs	r2, #1
 8003d94:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2201      	movs	r2, #1
 8003d9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003da0:	2300      	movs	r3, #0
}
 8003da2:	4618      	mov	r0, r3
 8003da4:	3708      	adds	r7, #8
 8003da6:	46bd      	mov	sp, r7
 8003da8:	bd80      	pop	{r7, pc}

08003daa <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8003daa:	b480      	push	{r7}
 8003dac:	b083      	sub	sp, #12
 8003dae:	af00      	add	r7, sp, #0
 8003db0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8003db2:	bf00      	nop
 8003db4:	370c      	adds	r7, #12
 8003db6:	46bd      	mov	sp, r7
 8003db8:	bc80      	pop	{r7}
 8003dba:	4770      	bx	lr

08003dbc <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b084      	sub	sp, #16
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
 8003dc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d104      	bne.n	8003dd6 <HAL_TIM_IC_Start+0x1a>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003dd2:	b2db      	uxtb	r3, r3
 8003dd4:	e013      	b.n	8003dfe <HAL_TIM_IC_Start+0x42>
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	2b04      	cmp	r3, #4
 8003dda:	d104      	bne.n	8003de6 <HAL_TIM_IC_Start+0x2a>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003de2:	b2db      	uxtb	r3, r3
 8003de4:	e00b      	b.n	8003dfe <HAL_TIM_IC_Start+0x42>
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	2b08      	cmp	r3, #8
 8003dea:	d104      	bne.n	8003df6 <HAL_TIM_IC_Start+0x3a>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003df2:	b2db      	uxtb	r3, r3
 8003df4:	e003      	b.n	8003dfe <HAL_TIM_IC_Start+0x42>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003dfc:	b2db      	uxtb	r3, r3
 8003dfe:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d104      	bne.n	8003e10 <HAL_TIM_IC_Start+0x54>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003e0c:	b2db      	uxtb	r3, r3
 8003e0e:	e013      	b.n	8003e38 <HAL_TIM_IC_Start+0x7c>
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	2b04      	cmp	r3, #4
 8003e14:	d104      	bne.n	8003e20 <HAL_TIM_IC_Start+0x64>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003e1c:	b2db      	uxtb	r3, r3
 8003e1e:	e00b      	b.n	8003e38 <HAL_TIM_IC_Start+0x7c>
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	2b08      	cmp	r3, #8
 8003e24:	d104      	bne.n	8003e30 <HAL_TIM_IC_Start+0x74>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003e2c:	b2db      	uxtb	r3, r3
 8003e2e:	e003      	b.n	8003e38 <HAL_TIM_IC_Start+0x7c>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003e36:	b2db      	uxtb	r3, r3
 8003e38:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8003e3a:	7bfb      	ldrb	r3, [r7, #15]
 8003e3c:	2b01      	cmp	r3, #1
 8003e3e:	d102      	bne.n	8003e46 <HAL_TIM_IC_Start+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8003e40:	7bbb      	ldrb	r3, [r7, #14]
 8003e42:	2b01      	cmp	r3, #1
 8003e44:	d001      	beq.n	8003e4a <HAL_TIM_IC_Start+0x8e>
  {
    return HAL_ERROR;
 8003e46:	2301      	movs	r3, #1
 8003e48:	e06d      	b.n	8003f26 <HAL_TIM_IC_Start+0x16a>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d104      	bne.n	8003e5a <HAL_TIM_IC_Start+0x9e>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2202      	movs	r2, #2
 8003e54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003e58:	e013      	b.n	8003e82 <HAL_TIM_IC_Start+0xc6>
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	2b04      	cmp	r3, #4
 8003e5e:	d104      	bne.n	8003e6a <HAL_TIM_IC_Start+0xae>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2202      	movs	r2, #2
 8003e64:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003e68:	e00b      	b.n	8003e82 <HAL_TIM_IC_Start+0xc6>
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	2b08      	cmp	r3, #8
 8003e6e:	d104      	bne.n	8003e7a <HAL_TIM_IC_Start+0xbe>
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2202      	movs	r2, #2
 8003e74:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003e78:	e003      	b.n	8003e82 <HAL_TIM_IC_Start+0xc6>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2202      	movs	r2, #2
 8003e7e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d104      	bne.n	8003e92 <HAL_TIM_IC_Start+0xd6>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2202      	movs	r2, #2
 8003e8c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003e90:	e013      	b.n	8003eba <HAL_TIM_IC_Start+0xfe>
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	2b04      	cmp	r3, #4
 8003e96:	d104      	bne.n	8003ea2 <HAL_TIM_IC_Start+0xe6>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2202      	movs	r2, #2
 8003e9c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003ea0:	e00b      	b.n	8003eba <HAL_TIM_IC_Start+0xfe>
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	2b08      	cmp	r3, #8
 8003ea6:	d104      	bne.n	8003eb2 <HAL_TIM_IC_Start+0xf6>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2202      	movs	r2, #2
 8003eac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003eb0:	e003      	b.n	8003eba <HAL_TIM_IC_Start+0xfe>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2202      	movs	r2, #2
 8003eb6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	2201      	movs	r2, #1
 8003ec0:	6839      	ldr	r1, [r7, #0]
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	f000 ff51 	bl	8004d6a <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4a18      	ldr	r2, [pc, #96]	@ (8003f30 <HAL_TIM_IC_Start+0x174>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d00e      	beq.n	8003ef0 <HAL_TIM_IC_Start+0x134>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003eda:	d009      	beq.n	8003ef0 <HAL_TIM_IC_Start+0x134>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4a14      	ldr	r2, [pc, #80]	@ (8003f34 <HAL_TIM_IC_Start+0x178>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d004      	beq.n	8003ef0 <HAL_TIM_IC_Start+0x134>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	4a13      	ldr	r2, [pc, #76]	@ (8003f38 <HAL_TIM_IC_Start+0x17c>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d111      	bne.n	8003f14 <HAL_TIM_IC_Start+0x158>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	689b      	ldr	r3, [r3, #8]
 8003ef6:	f003 0307 	and.w	r3, r3, #7
 8003efa:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003efc:	68bb      	ldr	r3, [r7, #8]
 8003efe:	2b06      	cmp	r3, #6
 8003f00:	d010      	beq.n	8003f24 <HAL_TIM_IC_Start+0x168>
    {
      __HAL_TIM_ENABLE(htim);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	681a      	ldr	r2, [r3, #0]
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f042 0201 	orr.w	r2, r2, #1
 8003f10:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f12:	e007      	b.n	8003f24 <HAL_TIM_IC_Start+0x168>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	681a      	ldr	r2, [r3, #0]
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f042 0201 	orr.w	r2, r2, #1
 8003f22:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003f24:	2300      	movs	r3, #0
}
 8003f26:	4618      	mov	r0, r3
 8003f28:	3710      	adds	r7, #16
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bd80      	pop	{r7, pc}
 8003f2e:	bf00      	nop
 8003f30:	40012c00 	.word	0x40012c00
 8003f34:	40000400 	.word	0x40000400
 8003f38:	40000800 	.word	0x40000800

08003f3c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b084      	sub	sp, #16
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	68db      	ldr	r3, [r3, #12]
 8003f4a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	691b      	ldr	r3, [r3, #16]
 8003f52:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003f54:	68bb      	ldr	r3, [r7, #8]
 8003f56:	f003 0302 	and.w	r3, r3, #2
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d020      	beq.n	8003fa0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	f003 0302 	and.w	r3, r3, #2
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d01b      	beq.n	8003fa0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f06f 0202 	mvn.w	r2, #2
 8003f70:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2201      	movs	r2, #1
 8003f76:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	699b      	ldr	r3, [r3, #24]
 8003f7e:	f003 0303 	and.w	r3, r3, #3
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d003      	beq.n	8003f8e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003f86:	6878      	ldr	r0, [r7, #4]
 8003f88:	f000 fb3b 	bl	8004602 <HAL_TIM_IC_CaptureCallback>
 8003f8c:	e005      	b.n	8003f9a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f8e:	6878      	ldr	r0, [r7, #4]
 8003f90:	f000 fb2e 	bl	80045f0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f94:	6878      	ldr	r0, [r7, #4]
 8003f96:	f000 fb3d 	bl	8004614 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003fa0:	68bb      	ldr	r3, [r7, #8]
 8003fa2:	f003 0304 	and.w	r3, r3, #4
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d020      	beq.n	8003fec <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	f003 0304 	and.w	r3, r3, #4
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d01b      	beq.n	8003fec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f06f 0204 	mvn.w	r2, #4
 8003fbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2202      	movs	r2, #2
 8003fc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	699b      	ldr	r3, [r3, #24]
 8003fca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d003      	beq.n	8003fda <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003fd2:	6878      	ldr	r0, [r7, #4]
 8003fd4:	f000 fb15 	bl	8004602 <HAL_TIM_IC_CaptureCallback>
 8003fd8:	e005      	b.n	8003fe6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fda:	6878      	ldr	r0, [r7, #4]
 8003fdc:	f000 fb08 	bl	80045f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fe0:	6878      	ldr	r0, [r7, #4]
 8003fe2:	f000 fb17 	bl	8004614 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2200      	movs	r2, #0
 8003fea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003fec:	68bb      	ldr	r3, [r7, #8]
 8003fee:	f003 0308 	and.w	r3, r3, #8
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d020      	beq.n	8004038 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	f003 0308 	and.w	r3, r3, #8
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d01b      	beq.n	8004038 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f06f 0208 	mvn.w	r2, #8
 8004008:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2204      	movs	r2, #4
 800400e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	69db      	ldr	r3, [r3, #28]
 8004016:	f003 0303 	and.w	r3, r3, #3
 800401a:	2b00      	cmp	r3, #0
 800401c:	d003      	beq.n	8004026 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800401e:	6878      	ldr	r0, [r7, #4]
 8004020:	f000 faef 	bl	8004602 <HAL_TIM_IC_CaptureCallback>
 8004024:	e005      	b.n	8004032 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004026:	6878      	ldr	r0, [r7, #4]
 8004028:	f000 fae2 	bl	80045f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800402c:	6878      	ldr	r0, [r7, #4]
 800402e:	f000 faf1 	bl	8004614 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2200      	movs	r2, #0
 8004036:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004038:	68bb      	ldr	r3, [r7, #8]
 800403a:	f003 0310 	and.w	r3, r3, #16
 800403e:	2b00      	cmp	r3, #0
 8004040:	d020      	beq.n	8004084 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	f003 0310 	and.w	r3, r3, #16
 8004048:	2b00      	cmp	r3, #0
 800404a:	d01b      	beq.n	8004084 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f06f 0210 	mvn.w	r2, #16
 8004054:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2208      	movs	r2, #8
 800405a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	69db      	ldr	r3, [r3, #28]
 8004062:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004066:	2b00      	cmp	r3, #0
 8004068:	d003      	beq.n	8004072 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800406a:	6878      	ldr	r0, [r7, #4]
 800406c:	f000 fac9 	bl	8004602 <HAL_TIM_IC_CaptureCallback>
 8004070:	e005      	b.n	800407e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004072:	6878      	ldr	r0, [r7, #4]
 8004074:	f000 fabc 	bl	80045f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004078:	6878      	ldr	r0, [r7, #4]
 800407a:	f000 facb 	bl	8004614 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2200      	movs	r2, #0
 8004082:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004084:	68bb      	ldr	r3, [r7, #8]
 8004086:	f003 0301 	and.w	r3, r3, #1
 800408a:	2b00      	cmp	r3, #0
 800408c:	d00c      	beq.n	80040a8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	f003 0301 	and.w	r3, r3, #1
 8004094:	2b00      	cmp	r3, #0
 8004096:	d007      	beq.n	80040a8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f06f 0201 	mvn.w	r2, #1
 80040a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80040a2:	6878      	ldr	r0, [r7, #4]
 80040a4:	f7fd f8da 	bl	800125c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80040a8:	68bb      	ldr	r3, [r7, #8]
 80040aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d00c      	beq.n	80040cc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d007      	beq.n	80040cc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80040c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80040c6:	6878      	ldr	r0, [r7, #4]
 80040c8:	f000 fedb 	bl	8004e82 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80040cc:	68bb      	ldr	r3, [r7, #8]
 80040ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d00c      	beq.n	80040f0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d007      	beq.n	80040f0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80040e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80040ea:	6878      	ldr	r0, [r7, #4]
 80040ec:	f000 fa9b 	bl	8004626 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80040f0:	68bb      	ldr	r3, [r7, #8]
 80040f2:	f003 0320 	and.w	r3, r3, #32
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d00c      	beq.n	8004114 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	f003 0320 	and.w	r3, r3, #32
 8004100:	2b00      	cmp	r3, #0
 8004102:	d007      	beq.n	8004114 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f06f 0220 	mvn.w	r2, #32
 800410c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800410e:	6878      	ldr	r0, [r7, #4]
 8004110:	f000 feae 	bl	8004e70 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004114:	bf00      	nop
 8004116:	3710      	adds	r7, #16
 8004118:	46bd      	mov	sp, r7
 800411a:	bd80      	pop	{r7, pc}

0800411c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b086      	sub	sp, #24
 8004120:	af00      	add	r7, sp, #0
 8004122:	60f8      	str	r0, [r7, #12]
 8004124:	60b9      	str	r1, [r7, #8]
 8004126:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004128:	2300      	movs	r3, #0
 800412a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004132:	2b01      	cmp	r3, #1
 8004134:	d101      	bne.n	800413a <HAL_TIM_IC_ConfigChannel+0x1e>
 8004136:	2302      	movs	r3, #2
 8004138:	e088      	b.n	800424c <HAL_TIM_IC_ConfigChannel+0x130>
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	2201      	movs	r2, #1
 800413e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d11b      	bne.n	8004180 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800414c:	68bb      	ldr	r3, [r7, #8]
 800414e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004150:	68bb      	ldr	r3, [r7, #8]
 8004152:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004154:	68bb      	ldr	r3, [r7, #8]
 8004156:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8004158:	f000 fc64 	bl	8004a24 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	699a      	ldr	r2, [r3, #24]
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f022 020c 	bic.w	r2, r2, #12
 800416a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	6999      	ldr	r1, [r3, #24]
 8004172:	68bb      	ldr	r3, [r7, #8]
 8004174:	689a      	ldr	r2, [r3, #8]
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	430a      	orrs	r2, r1
 800417c:	619a      	str	r2, [r3, #24]
 800417e:	e060      	b.n	8004242 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2b04      	cmp	r3, #4
 8004184:	d11c      	bne.n	80041c0 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800418a:	68bb      	ldr	r3, [r7, #8]
 800418c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800418e:	68bb      	ldr	r3, [r7, #8]
 8004190:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004192:	68bb      	ldr	r3, [r7, #8]
 8004194:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8004196:	f000 fccd 	bl	8004b34 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	699a      	ldr	r2, [r3, #24]
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80041a8:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	6999      	ldr	r1, [r3, #24]
 80041b0:	68bb      	ldr	r3, [r7, #8]
 80041b2:	689b      	ldr	r3, [r3, #8]
 80041b4:	021a      	lsls	r2, r3, #8
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	430a      	orrs	r2, r1
 80041bc:	619a      	str	r2, [r3, #24]
 80041be:	e040      	b.n	8004242 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2b08      	cmp	r3, #8
 80041c4:	d11b      	bne.n	80041fe <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80041ca:	68bb      	ldr	r3, [r7, #8]
 80041cc:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80041ce:	68bb      	ldr	r3, [r7, #8]
 80041d0:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80041d2:	68bb      	ldr	r3, [r7, #8]
 80041d4:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 80041d6:	f000 fd18 	bl	8004c0a <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	69da      	ldr	r2, [r3, #28]
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f022 020c 	bic.w	r2, r2, #12
 80041e8:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	69d9      	ldr	r1, [r3, #28]
 80041f0:	68bb      	ldr	r3, [r7, #8]
 80041f2:	689a      	ldr	r2, [r3, #8]
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	430a      	orrs	r2, r1
 80041fa:	61da      	str	r2, [r3, #28]
 80041fc:	e021      	b.n	8004242 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2b0c      	cmp	r3, #12
 8004202:	d11c      	bne.n	800423e <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004208:	68bb      	ldr	r3, [r7, #8]
 800420a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800420c:	68bb      	ldr	r3, [r7, #8]
 800420e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004210:	68bb      	ldr	r3, [r7, #8]
 8004212:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8004214:	f000 fd34 	bl	8004c80 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	69da      	ldr	r2, [r3, #28]
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8004226:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	69d9      	ldr	r1, [r3, #28]
 800422e:	68bb      	ldr	r3, [r7, #8]
 8004230:	689b      	ldr	r3, [r3, #8]
 8004232:	021a      	lsls	r2, r3, #8
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	430a      	orrs	r2, r1
 800423a:	61da      	str	r2, [r3, #28]
 800423c:	e001      	b.n	8004242 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800423e:	2301      	movs	r3, #1
 8004240:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	2200      	movs	r2, #0
 8004246:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800424a:	7dfb      	ldrb	r3, [r7, #23]
}
 800424c:	4618      	mov	r0, r3
 800424e:	3718      	adds	r7, #24
 8004250:	46bd      	mov	sp, r7
 8004252:	bd80      	pop	{r7, pc}

08004254 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b086      	sub	sp, #24
 8004258:	af00      	add	r7, sp, #0
 800425a:	60f8      	str	r0, [r7, #12]
 800425c:	60b9      	str	r1, [r7, #8]
 800425e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004260:	2300      	movs	r3, #0
 8004262:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800426a:	2b01      	cmp	r3, #1
 800426c:	d101      	bne.n	8004272 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800426e:	2302      	movs	r3, #2
 8004270:	e0ae      	b.n	80043d0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	2201      	movs	r2, #1
 8004276:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2b0c      	cmp	r3, #12
 800427e:	f200 809f 	bhi.w	80043c0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004282:	a201      	add	r2, pc, #4	@ (adr r2, 8004288 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004284:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004288:	080042bd 	.word	0x080042bd
 800428c:	080043c1 	.word	0x080043c1
 8004290:	080043c1 	.word	0x080043c1
 8004294:	080043c1 	.word	0x080043c1
 8004298:	080042fd 	.word	0x080042fd
 800429c:	080043c1 	.word	0x080043c1
 80042a0:	080043c1 	.word	0x080043c1
 80042a4:	080043c1 	.word	0x080043c1
 80042a8:	0800433f 	.word	0x0800433f
 80042ac:	080043c1 	.word	0x080043c1
 80042b0:	080043c1 	.word	0x080043c1
 80042b4:	080043c1 	.word	0x080043c1
 80042b8:	0800437f 	.word	0x0800437f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	68b9      	ldr	r1, [r7, #8]
 80042c2:	4618      	mov	r0, r3
 80042c4:	f000 fa26 	bl	8004714 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	699a      	ldr	r2, [r3, #24]
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f042 0208 	orr.w	r2, r2, #8
 80042d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	699a      	ldr	r2, [r3, #24]
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f022 0204 	bic.w	r2, r2, #4
 80042e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	6999      	ldr	r1, [r3, #24]
 80042ee:	68bb      	ldr	r3, [r7, #8]
 80042f0:	691a      	ldr	r2, [r3, #16]
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	430a      	orrs	r2, r1
 80042f8:	619a      	str	r2, [r3, #24]
      break;
 80042fa:	e064      	b.n	80043c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	68b9      	ldr	r1, [r7, #8]
 8004302:	4618      	mov	r0, r3
 8004304:	f000 fa6c 	bl	80047e0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	699a      	ldr	r2, [r3, #24]
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004316:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	699a      	ldr	r2, [r3, #24]
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004326:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	6999      	ldr	r1, [r3, #24]
 800432e:	68bb      	ldr	r3, [r7, #8]
 8004330:	691b      	ldr	r3, [r3, #16]
 8004332:	021a      	lsls	r2, r3, #8
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	430a      	orrs	r2, r1
 800433a:	619a      	str	r2, [r3, #24]
      break;
 800433c:	e043      	b.n	80043c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	68b9      	ldr	r1, [r7, #8]
 8004344:	4618      	mov	r0, r3
 8004346:	f000 fab5 	bl	80048b4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	69da      	ldr	r2, [r3, #28]
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f042 0208 	orr.w	r2, r2, #8
 8004358:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	69da      	ldr	r2, [r3, #28]
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f022 0204 	bic.w	r2, r2, #4
 8004368:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	69d9      	ldr	r1, [r3, #28]
 8004370:	68bb      	ldr	r3, [r7, #8]
 8004372:	691a      	ldr	r2, [r3, #16]
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	430a      	orrs	r2, r1
 800437a:	61da      	str	r2, [r3, #28]
      break;
 800437c:	e023      	b.n	80043c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	68b9      	ldr	r1, [r7, #8]
 8004384:	4618      	mov	r0, r3
 8004386:	f000 faff 	bl	8004988 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	69da      	ldr	r2, [r3, #28]
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004398:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	69da      	ldr	r2, [r3, #28]
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80043a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	69d9      	ldr	r1, [r3, #28]
 80043b0:	68bb      	ldr	r3, [r7, #8]
 80043b2:	691b      	ldr	r3, [r3, #16]
 80043b4:	021a      	lsls	r2, r3, #8
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	430a      	orrs	r2, r1
 80043bc:	61da      	str	r2, [r3, #28]
      break;
 80043be:	e002      	b.n	80043c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80043c0:	2301      	movs	r3, #1
 80043c2:	75fb      	strb	r3, [r7, #23]
      break;
 80043c4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	2200      	movs	r2, #0
 80043ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80043ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80043d0:	4618      	mov	r0, r3
 80043d2:	3718      	adds	r7, #24
 80043d4:	46bd      	mov	sp, r7
 80043d6:	bd80      	pop	{r7, pc}

080043d8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b084      	sub	sp, #16
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
 80043e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80043e2:	2300      	movs	r3, #0
 80043e4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80043ec:	2b01      	cmp	r3, #1
 80043ee:	d101      	bne.n	80043f4 <HAL_TIM_ConfigClockSource+0x1c>
 80043f0:	2302      	movs	r3, #2
 80043f2:	e0b4      	b.n	800455e <HAL_TIM_ConfigClockSource+0x186>
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2201      	movs	r2, #1
 80043f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2202      	movs	r2, #2
 8004400:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	689b      	ldr	r3, [r3, #8]
 800440a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800440c:	68bb      	ldr	r3, [r7, #8]
 800440e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004412:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004414:	68bb      	ldr	r3, [r7, #8]
 8004416:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800441a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	68ba      	ldr	r2, [r7, #8]
 8004422:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800442c:	d03e      	beq.n	80044ac <HAL_TIM_ConfigClockSource+0xd4>
 800442e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004432:	f200 8087 	bhi.w	8004544 <HAL_TIM_ConfigClockSource+0x16c>
 8004436:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800443a:	f000 8086 	beq.w	800454a <HAL_TIM_ConfigClockSource+0x172>
 800443e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004442:	d87f      	bhi.n	8004544 <HAL_TIM_ConfigClockSource+0x16c>
 8004444:	2b70      	cmp	r3, #112	@ 0x70
 8004446:	d01a      	beq.n	800447e <HAL_TIM_ConfigClockSource+0xa6>
 8004448:	2b70      	cmp	r3, #112	@ 0x70
 800444a:	d87b      	bhi.n	8004544 <HAL_TIM_ConfigClockSource+0x16c>
 800444c:	2b60      	cmp	r3, #96	@ 0x60
 800444e:	d050      	beq.n	80044f2 <HAL_TIM_ConfigClockSource+0x11a>
 8004450:	2b60      	cmp	r3, #96	@ 0x60
 8004452:	d877      	bhi.n	8004544 <HAL_TIM_ConfigClockSource+0x16c>
 8004454:	2b50      	cmp	r3, #80	@ 0x50
 8004456:	d03c      	beq.n	80044d2 <HAL_TIM_ConfigClockSource+0xfa>
 8004458:	2b50      	cmp	r3, #80	@ 0x50
 800445a:	d873      	bhi.n	8004544 <HAL_TIM_ConfigClockSource+0x16c>
 800445c:	2b40      	cmp	r3, #64	@ 0x40
 800445e:	d058      	beq.n	8004512 <HAL_TIM_ConfigClockSource+0x13a>
 8004460:	2b40      	cmp	r3, #64	@ 0x40
 8004462:	d86f      	bhi.n	8004544 <HAL_TIM_ConfigClockSource+0x16c>
 8004464:	2b30      	cmp	r3, #48	@ 0x30
 8004466:	d064      	beq.n	8004532 <HAL_TIM_ConfigClockSource+0x15a>
 8004468:	2b30      	cmp	r3, #48	@ 0x30
 800446a:	d86b      	bhi.n	8004544 <HAL_TIM_ConfigClockSource+0x16c>
 800446c:	2b20      	cmp	r3, #32
 800446e:	d060      	beq.n	8004532 <HAL_TIM_ConfigClockSource+0x15a>
 8004470:	2b20      	cmp	r3, #32
 8004472:	d867      	bhi.n	8004544 <HAL_TIM_ConfigClockSource+0x16c>
 8004474:	2b00      	cmp	r3, #0
 8004476:	d05c      	beq.n	8004532 <HAL_TIM_ConfigClockSource+0x15a>
 8004478:	2b10      	cmp	r3, #16
 800447a:	d05a      	beq.n	8004532 <HAL_TIM_ConfigClockSource+0x15a>
 800447c:	e062      	b.n	8004544 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800448e:	f000 fc4d 	bl	8004d2c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	689b      	ldr	r3, [r3, #8]
 8004498:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800449a:	68bb      	ldr	r3, [r7, #8]
 800449c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80044a0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	68ba      	ldr	r2, [r7, #8]
 80044a8:	609a      	str	r2, [r3, #8]
      break;
 80044aa:	e04f      	b.n	800454c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80044bc:	f000 fc36 	bl	8004d2c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	689a      	ldr	r2, [r3, #8]
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80044ce:	609a      	str	r2, [r3, #8]
      break;
 80044d0:	e03c      	b.n	800454c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80044de:	461a      	mov	r2, r3
 80044e0:	f000 fafa 	bl	8004ad8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	2150      	movs	r1, #80	@ 0x50
 80044ea:	4618      	mov	r0, r3
 80044ec:	f000 fc04 	bl	8004cf8 <TIM_ITRx_SetConfig>
      break;
 80044f0:	e02c      	b.n	800454c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80044fe:	461a      	mov	r2, r3
 8004500:	f000 fb54 	bl	8004bac <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	2160      	movs	r1, #96	@ 0x60
 800450a:	4618      	mov	r0, r3
 800450c:	f000 fbf4 	bl	8004cf8 <TIM_ITRx_SetConfig>
      break;
 8004510:	e01c      	b.n	800454c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800451e:	461a      	mov	r2, r3
 8004520:	f000 fada 	bl	8004ad8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	2140      	movs	r1, #64	@ 0x40
 800452a:	4618      	mov	r0, r3
 800452c:	f000 fbe4 	bl	8004cf8 <TIM_ITRx_SetConfig>
      break;
 8004530:	e00c      	b.n	800454c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681a      	ldr	r2, [r3, #0]
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	4619      	mov	r1, r3
 800453c:	4610      	mov	r0, r2
 800453e:	f000 fbdb 	bl	8004cf8 <TIM_ITRx_SetConfig>
      break;
 8004542:	e003      	b.n	800454c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004544:	2301      	movs	r3, #1
 8004546:	73fb      	strb	r3, [r7, #15]
      break;
 8004548:	e000      	b.n	800454c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800454a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2201      	movs	r2, #1
 8004550:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2200      	movs	r2, #0
 8004558:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800455c:	7bfb      	ldrb	r3, [r7, #15]
}
 800455e:	4618      	mov	r0, r3
 8004560:	3710      	adds	r7, #16
 8004562:	46bd      	mov	sp, r7
 8004564:	bd80      	pop	{r7, pc}
	...

08004568 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004568:	b480      	push	{r7}
 800456a:	b085      	sub	sp, #20
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
 8004570:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8004572:	2300      	movs	r3, #0
 8004574:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	2b0c      	cmp	r3, #12
 800457a:	d831      	bhi.n	80045e0 <HAL_TIM_ReadCapturedValue+0x78>
 800457c:	a201      	add	r2, pc, #4	@ (adr r2, 8004584 <HAL_TIM_ReadCapturedValue+0x1c>)
 800457e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004582:	bf00      	nop
 8004584:	080045b9 	.word	0x080045b9
 8004588:	080045e1 	.word	0x080045e1
 800458c:	080045e1 	.word	0x080045e1
 8004590:	080045e1 	.word	0x080045e1
 8004594:	080045c3 	.word	0x080045c3
 8004598:	080045e1 	.word	0x080045e1
 800459c:	080045e1 	.word	0x080045e1
 80045a0:	080045e1 	.word	0x080045e1
 80045a4:	080045cd 	.word	0x080045cd
 80045a8:	080045e1 	.word	0x080045e1
 80045ac:	080045e1 	.word	0x080045e1
 80045b0:	080045e1 	.word	0x080045e1
 80045b4:	080045d7 	.word	0x080045d7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045be:	60fb      	str	r3, [r7, #12]

      break;
 80045c0:	e00f      	b.n	80045e2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045c8:	60fb      	str	r3, [r7, #12]

      break;
 80045ca:	e00a      	b.n	80045e2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045d2:	60fb      	str	r3, [r7, #12]

      break;
 80045d4:	e005      	b.n	80045e2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045dc:	60fb      	str	r3, [r7, #12]

      break;
 80045de:	e000      	b.n	80045e2 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80045e0:	bf00      	nop
  }

  return tmpreg;
 80045e2:	68fb      	ldr	r3, [r7, #12]
}
 80045e4:	4618      	mov	r0, r3
 80045e6:	3714      	adds	r7, #20
 80045e8:	46bd      	mov	sp, r7
 80045ea:	bc80      	pop	{r7}
 80045ec:	4770      	bx	lr
 80045ee:	bf00      	nop

080045f0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80045f0:	b480      	push	{r7}
 80045f2:	b083      	sub	sp, #12
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80045f8:	bf00      	nop
 80045fa:	370c      	adds	r7, #12
 80045fc:	46bd      	mov	sp, r7
 80045fe:	bc80      	pop	{r7}
 8004600:	4770      	bx	lr

08004602 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004602:	b480      	push	{r7}
 8004604:	b083      	sub	sp, #12
 8004606:	af00      	add	r7, sp, #0
 8004608:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800460a:	bf00      	nop
 800460c:	370c      	adds	r7, #12
 800460e:	46bd      	mov	sp, r7
 8004610:	bc80      	pop	{r7}
 8004612:	4770      	bx	lr

08004614 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004614:	b480      	push	{r7}
 8004616:	b083      	sub	sp, #12
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800461c:	bf00      	nop
 800461e:	370c      	adds	r7, #12
 8004620:	46bd      	mov	sp, r7
 8004622:	bc80      	pop	{r7}
 8004624:	4770      	bx	lr

08004626 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004626:	b480      	push	{r7}
 8004628:	b083      	sub	sp, #12
 800462a:	af00      	add	r7, sp, #0
 800462c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800462e:	bf00      	nop
 8004630:	370c      	adds	r7, #12
 8004632:	46bd      	mov	sp, r7
 8004634:	bc80      	pop	{r7}
 8004636:	4770      	bx	lr

08004638 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004638:	b480      	push	{r7}
 800463a:	b085      	sub	sp, #20
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
 8004640:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	4a2f      	ldr	r2, [pc, #188]	@ (8004708 <TIM_Base_SetConfig+0xd0>)
 800464c:	4293      	cmp	r3, r2
 800464e:	d00b      	beq.n	8004668 <TIM_Base_SetConfig+0x30>
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004656:	d007      	beq.n	8004668 <TIM_Base_SetConfig+0x30>
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	4a2c      	ldr	r2, [pc, #176]	@ (800470c <TIM_Base_SetConfig+0xd4>)
 800465c:	4293      	cmp	r3, r2
 800465e:	d003      	beq.n	8004668 <TIM_Base_SetConfig+0x30>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	4a2b      	ldr	r2, [pc, #172]	@ (8004710 <TIM_Base_SetConfig+0xd8>)
 8004664:	4293      	cmp	r3, r2
 8004666:	d108      	bne.n	800467a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800466e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	685b      	ldr	r3, [r3, #4]
 8004674:	68fa      	ldr	r2, [r7, #12]
 8004676:	4313      	orrs	r3, r2
 8004678:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	4a22      	ldr	r2, [pc, #136]	@ (8004708 <TIM_Base_SetConfig+0xd0>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d00b      	beq.n	800469a <TIM_Base_SetConfig+0x62>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004688:	d007      	beq.n	800469a <TIM_Base_SetConfig+0x62>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	4a1f      	ldr	r2, [pc, #124]	@ (800470c <TIM_Base_SetConfig+0xd4>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d003      	beq.n	800469a <TIM_Base_SetConfig+0x62>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	4a1e      	ldr	r2, [pc, #120]	@ (8004710 <TIM_Base_SetConfig+0xd8>)
 8004696:	4293      	cmp	r3, r2
 8004698:	d108      	bne.n	80046ac <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80046a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	68db      	ldr	r3, [r3, #12]
 80046a6:	68fa      	ldr	r2, [r7, #12]
 80046a8:	4313      	orrs	r3, r2
 80046aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	695b      	ldr	r3, [r3, #20]
 80046b6:	4313      	orrs	r3, r2
 80046b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	68fa      	ldr	r2, [r7, #12]
 80046be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	689a      	ldr	r2, [r3, #8]
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	681a      	ldr	r2, [r3, #0]
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	4a0d      	ldr	r2, [pc, #52]	@ (8004708 <TIM_Base_SetConfig+0xd0>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d103      	bne.n	80046e0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	691a      	ldr	r2, [r3, #16]
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2201      	movs	r2, #1
 80046e4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	691b      	ldr	r3, [r3, #16]
 80046ea:	f003 0301 	and.w	r3, r3, #1
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d005      	beq.n	80046fe <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	691b      	ldr	r3, [r3, #16]
 80046f6:	f023 0201 	bic.w	r2, r3, #1
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	611a      	str	r2, [r3, #16]
  }
}
 80046fe:	bf00      	nop
 8004700:	3714      	adds	r7, #20
 8004702:	46bd      	mov	sp, r7
 8004704:	bc80      	pop	{r7}
 8004706:	4770      	bx	lr
 8004708:	40012c00 	.word	0x40012c00
 800470c:	40000400 	.word	0x40000400
 8004710:	40000800 	.word	0x40000800

08004714 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004714:	b480      	push	{r7}
 8004716:	b087      	sub	sp, #28
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
 800471c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6a1b      	ldr	r3, [r3, #32]
 8004722:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6a1b      	ldr	r3, [r3, #32]
 8004728:	f023 0201 	bic.w	r2, r3, #1
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	685b      	ldr	r3, [r3, #4]
 8004734:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	699b      	ldr	r3, [r3, #24]
 800473a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004742:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	f023 0303 	bic.w	r3, r3, #3
 800474a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	68fa      	ldr	r2, [r7, #12]
 8004752:	4313      	orrs	r3, r2
 8004754:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004756:	697b      	ldr	r3, [r7, #20]
 8004758:	f023 0302 	bic.w	r3, r3, #2
 800475c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	689b      	ldr	r3, [r3, #8]
 8004762:	697a      	ldr	r2, [r7, #20]
 8004764:	4313      	orrs	r3, r2
 8004766:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	4a1c      	ldr	r2, [pc, #112]	@ (80047dc <TIM_OC1_SetConfig+0xc8>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d10c      	bne.n	800478a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004770:	697b      	ldr	r3, [r7, #20]
 8004772:	f023 0308 	bic.w	r3, r3, #8
 8004776:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	68db      	ldr	r3, [r3, #12]
 800477c:	697a      	ldr	r2, [r7, #20]
 800477e:	4313      	orrs	r3, r2
 8004780:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004782:	697b      	ldr	r3, [r7, #20]
 8004784:	f023 0304 	bic.w	r3, r3, #4
 8004788:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	4a13      	ldr	r2, [pc, #76]	@ (80047dc <TIM_OC1_SetConfig+0xc8>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d111      	bne.n	80047b6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004792:	693b      	ldr	r3, [r7, #16]
 8004794:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004798:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800479a:	693b      	ldr	r3, [r7, #16]
 800479c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80047a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	695b      	ldr	r3, [r3, #20]
 80047a6:	693a      	ldr	r2, [r7, #16]
 80047a8:	4313      	orrs	r3, r2
 80047aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	699b      	ldr	r3, [r3, #24]
 80047b0:	693a      	ldr	r2, [r7, #16]
 80047b2:	4313      	orrs	r3, r2
 80047b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	693a      	ldr	r2, [r7, #16]
 80047ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	68fa      	ldr	r2, [r7, #12]
 80047c0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	685a      	ldr	r2, [r3, #4]
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	697a      	ldr	r2, [r7, #20]
 80047ce:	621a      	str	r2, [r3, #32]
}
 80047d0:	bf00      	nop
 80047d2:	371c      	adds	r7, #28
 80047d4:	46bd      	mov	sp, r7
 80047d6:	bc80      	pop	{r7}
 80047d8:	4770      	bx	lr
 80047da:	bf00      	nop
 80047dc:	40012c00 	.word	0x40012c00

080047e0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80047e0:	b480      	push	{r7}
 80047e2:	b087      	sub	sp, #28
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
 80047e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6a1b      	ldr	r3, [r3, #32]
 80047ee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6a1b      	ldr	r3, [r3, #32]
 80047f4:	f023 0210 	bic.w	r2, r3, #16
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	685b      	ldr	r3, [r3, #4]
 8004800:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	699b      	ldr	r3, [r3, #24]
 8004806:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800480e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004816:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	021b      	lsls	r3, r3, #8
 800481e:	68fa      	ldr	r2, [r7, #12]
 8004820:	4313      	orrs	r3, r2
 8004822:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004824:	697b      	ldr	r3, [r7, #20]
 8004826:	f023 0320 	bic.w	r3, r3, #32
 800482a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	689b      	ldr	r3, [r3, #8]
 8004830:	011b      	lsls	r3, r3, #4
 8004832:	697a      	ldr	r2, [r7, #20]
 8004834:	4313      	orrs	r3, r2
 8004836:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	4a1d      	ldr	r2, [pc, #116]	@ (80048b0 <TIM_OC2_SetConfig+0xd0>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d10d      	bne.n	800485c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004840:	697b      	ldr	r3, [r7, #20]
 8004842:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004846:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	68db      	ldr	r3, [r3, #12]
 800484c:	011b      	lsls	r3, r3, #4
 800484e:	697a      	ldr	r2, [r7, #20]
 8004850:	4313      	orrs	r3, r2
 8004852:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004854:	697b      	ldr	r3, [r7, #20]
 8004856:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800485a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	4a14      	ldr	r2, [pc, #80]	@ (80048b0 <TIM_OC2_SetConfig+0xd0>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d113      	bne.n	800488c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004864:	693b      	ldr	r3, [r7, #16]
 8004866:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800486a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800486c:	693b      	ldr	r3, [r7, #16]
 800486e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004872:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	695b      	ldr	r3, [r3, #20]
 8004878:	009b      	lsls	r3, r3, #2
 800487a:	693a      	ldr	r2, [r7, #16]
 800487c:	4313      	orrs	r3, r2
 800487e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	699b      	ldr	r3, [r3, #24]
 8004884:	009b      	lsls	r3, r3, #2
 8004886:	693a      	ldr	r2, [r7, #16]
 8004888:	4313      	orrs	r3, r2
 800488a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	693a      	ldr	r2, [r7, #16]
 8004890:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	68fa      	ldr	r2, [r7, #12]
 8004896:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	685a      	ldr	r2, [r3, #4]
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	697a      	ldr	r2, [r7, #20]
 80048a4:	621a      	str	r2, [r3, #32]
}
 80048a6:	bf00      	nop
 80048a8:	371c      	adds	r7, #28
 80048aa:	46bd      	mov	sp, r7
 80048ac:	bc80      	pop	{r7}
 80048ae:	4770      	bx	lr
 80048b0:	40012c00 	.word	0x40012c00

080048b4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80048b4:	b480      	push	{r7}
 80048b6:	b087      	sub	sp, #28
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
 80048bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6a1b      	ldr	r3, [r3, #32]
 80048c2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6a1b      	ldr	r3, [r3, #32]
 80048c8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	685b      	ldr	r3, [r3, #4]
 80048d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	69db      	ldr	r3, [r3, #28]
 80048da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80048e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	f023 0303 	bic.w	r3, r3, #3
 80048ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	68fa      	ldr	r2, [r7, #12]
 80048f2:	4313      	orrs	r3, r2
 80048f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80048f6:	697b      	ldr	r3, [r7, #20]
 80048f8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80048fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	689b      	ldr	r3, [r3, #8]
 8004902:	021b      	lsls	r3, r3, #8
 8004904:	697a      	ldr	r2, [r7, #20]
 8004906:	4313      	orrs	r3, r2
 8004908:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	4a1d      	ldr	r2, [pc, #116]	@ (8004984 <TIM_OC3_SetConfig+0xd0>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d10d      	bne.n	800492e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004912:	697b      	ldr	r3, [r7, #20]
 8004914:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004918:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	68db      	ldr	r3, [r3, #12]
 800491e:	021b      	lsls	r3, r3, #8
 8004920:	697a      	ldr	r2, [r7, #20]
 8004922:	4313      	orrs	r3, r2
 8004924:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004926:	697b      	ldr	r3, [r7, #20]
 8004928:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800492c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	4a14      	ldr	r2, [pc, #80]	@ (8004984 <TIM_OC3_SetConfig+0xd0>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d113      	bne.n	800495e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004936:	693b      	ldr	r3, [r7, #16]
 8004938:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800493c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800493e:	693b      	ldr	r3, [r7, #16]
 8004940:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004944:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	695b      	ldr	r3, [r3, #20]
 800494a:	011b      	lsls	r3, r3, #4
 800494c:	693a      	ldr	r2, [r7, #16]
 800494e:	4313      	orrs	r3, r2
 8004950:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	699b      	ldr	r3, [r3, #24]
 8004956:	011b      	lsls	r3, r3, #4
 8004958:	693a      	ldr	r2, [r7, #16]
 800495a:	4313      	orrs	r3, r2
 800495c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	693a      	ldr	r2, [r7, #16]
 8004962:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	68fa      	ldr	r2, [r7, #12]
 8004968:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	685a      	ldr	r2, [r3, #4]
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	697a      	ldr	r2, [r7, #20]
 8004976:	621a      	str	r2, [r3, #32]
}
 8004978:	bf00      	nop
 800497a:	371c      	adds	r7, #28
 800497c:	46bd      	mov	sp, r7
 800497e:	bc80      	pop	{r7}
 8004980:	4770      	bx	lr
 8004982:	bf00      	nop
 8004984:	40012c00 	.word	0x40012c00

08004988 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004988:	b480      	push	{r7}
 800498a:	b087      	sub	sp, #28
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
 8004990:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6a1b      	ldr	r3, [r3, #32]
 8004996:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6a1b      	ldr	r3, [r3, #32]
 800499c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	685b      	ldr	r3, [r3, #4]
 80049a8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	69db      	ldr	r3, [r3, #28]
 80049ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80049b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80049be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	021b      	lsls	r3, r3, #8
 80049c6:	68fa      	ldr	r2, [r7, #12]
 80049c8:	4313      	orrs	r3, r2
 80049ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80049cc:	693b      	ldr	r3, [r7, #16]
 80049ce:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80049d2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	689b      	ldr	r3, [r3, #8]
 80049d8:	031b      	lsls	r3, r3, #12
 80049da:	693a      	ldr	r2, [r7, #16]
 80049dc:	4313      	orrs	r3, r2
 80049de:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	4a0f      	ldr	r2, [pc, #60]	@ (8004a20 <TIM_OC4_SetConfig+0x98>)
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d109      	bne.n	80049fc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80049e8:	697b      	ldr	r3, [r7, #20]
 80049ea:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80049ee:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	695b      	ldr	r3, [r3, #20]
 80049f4:	019b      	lsls	r3, r3, #6
 80049f6:	697a      	ldr	r2, [r7, #20]
 80049f8:	4313      	orrs	r3, r2
 80049fa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	697a      	ldr	r2, [r7, #20]
 8004a00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	68fa      	ldr	r2, [r7, #12]
 8004a06:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	685a      	ldr	r2, [r3, #4]
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	693a      	ldr	r2, [r7, #16]
 8004a14:	621a      	str	r2, [r3, #32]
}
 8004a16:	bf00      	nop
 8004a18:	371c      	adds	r7, #28
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	bc80      	pop	{r7}
 8004a1e:	4770      	bx	lr
 8004a20:	40012c00 	.word	0x40012c00

08004a24 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004a24:	b480      	push	{r7}
 8004a26:	b087      	sub	sp, #28
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	60f8      	str	r0, [r7, #12]
 8004a2c:	60b9      	str	r1, [r7, #8]
 8004a2e:	607a      	str	r2, [r7, #4]
 8004a30:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	6a1b      	ldr	r3, [r3, #32]
 8004a36:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	6a1b      	ldr	r3, [r3, #32]
 8004a3c:	f023 0201 	bic.w	r2, r3, #1
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	699b      	ldr	r3, [r3, #24]
 8004a48:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	4a1f      	ldr	r2, [pc, #124]	@ (8004acc <TIM_TI1_SetConfig+0xa8>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d00b      	beq.n	8004a6a <TIM_TI1_SetConfig+0x46>
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a58:	d007      	beq.n	8004a6a <TIM_TI1_SetConfig+0x46>
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	4a1c      	ldr	r2, [pc, #112]	@ (8004ad0 <TIM_TI1_SetConfig+0xac>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d003      	beq.n	8004a6a <TIM_TI1_SetConfig+0x46>
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	4a1b      	ldr	r2, [pc, #108]	@ (8004ad4 <TIM_TI1_SetConfig+0xb0>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d101      	bne.n	8004a6e <TIM_TI1_SetConfig+0x4a>
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	e000      	b.n	8004a70 <TIM_TI1_SetConfig+0x4c>
 8004a6e:	2300      	movs	r3, #0
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d008      	beq.n	8004a86 <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004a74:	697b      	ldr	r3, [r7, #20]
 8004a76:	f023 0303 	bic.w	r3, r3, #3
 8004a7a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004a7c:	697a      	ldr	r2, [r7, #20]
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	4313      	orrs	r3, r2
 8004a82:	617b      	str	r3, [r7, #20]
 8004a84:	e003      	b.n	8004a8e <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004a86:	697b      	ldr	r3, [r7, #20]
 8004a88:	f043 0301 	orr.w	r3, r3, #1
 8004a8c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004a8e:	697b      	ldr	r3, [r7, #20]
 8004a90:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004a94:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	011b      	lsls	r3, r3, #4
 8004a9a:	b2db      	uxtb	r3, r3
 8004a9c:	697a      	ldr	r2, [r7, #20]
 8004a9e:	4313      	orrs	r3, r2
 8004aa0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004aa2:	693b      	ldr	r3, [r7, #16]
 8004aa4:	f023 030a 	bic.w	r3, r3, #10
 8004aa8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004aaa:	68bb      	ldr	r3, [r7, #8]
 8004aac:	f003 030a 	and.w	r3, r3, #10
 8004ab0:	693a      	ldr	r2, [r7, #16]
 8004ab2:	4313      	orrs	r3, r2
 8004ab4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	697a      	ldr	r2, [r7, #20]
 8004aba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	693a      	ldr	r2, [r7, #16]
 8004ac0:	621a      	str	r2, [r3, #32]
}
 8004ac2:	bf00      	nop
 8004ac4:	371c      	adds	r7, #28
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	bc80      	pop	{r7}
 8004aca:	4770      	bx	lr
 8004acc:	40012c00 	.word	0x40012c00
 8004ad0:	40000400 	.word	0x40000400
 8004ad4:	40000800 	.word	0x40000800

08004ad8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ad8:	b480      	push	{r7}
 8004ada:	b087      	sub	sp, #28
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	60f8      	str	r0, [r7, #12]
 8004ae0:	60b9      	str	r1, [r7, #8]
 8004ae2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	6a1b      	ldr	r3, [r3, #32]
 8004ae8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	6a1b      	ldr	r3, [r3, #32]
 8004aee:	f023 0201 	bic.w	r2, r3, #1
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	699b      	ldr	r3, [r3, #24]
 8004afa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004afc:	693b      	ldr	r3, [r7, #16]
 8004afe:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004b02:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	011b      	lsls	r3, r3, #4
 8004b08:	693a      	ldr	r2, [r7, #16]
 8004b0a:	4313      	orrs	r3, r2
 8004b0c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004b0e:	697b      	ldr	r3, [r7, #20]
 8004b10:	f023 030a 	bic.w	r3, r3, #10
 8004b14:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004b16:	697a      	ldr	r2, [r7, #20]
 8004b18:	68bb      	ldr	r3, [r7, #8]
 8004b1a:	4313      	orrs	r3, r2
 8004b1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	693a      	ldr	r2, [r7, #16]
 8004b22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	697a      	ldr	r2, [r7, #20]
 8004b28:	621a      	str	r2, [r3, #32]
}
 8004b2a:	bf00      	nop
 8004b2c:	371c      	adds	r7, #28
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	bc80      	pop	{r7}
 8004b32:	4770      	bx	lr

08004b34 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004b34:	b480      	push	{r7}
 8004b36:	b087      	sub	sp, #28
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	60f8      	str	r0, [r7, #12]
 8004b3c:	60b9      	str	r1, [r7, #8]
 8004b3e:	607a      	str	r2, [r7, #4]
 8004b40:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	6a1b      	ldr	r3, [r3, #32]
 8004b46:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	6a1b      	ldr	r3, [r3, #32]
 8004b4c:	f023 0210 	bic.w	r2, r3, #16
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	699b      	ldr	r3, [r3, #24]
 8004b58:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004b5a:	693b      	ldr	r3, [r7, #16]
 8004b5c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004b60:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	021b      	lsls	r3, r3, #8
 8004b66:	693a      	ldr	r2, [r7, #16]
 8004b68:	4313      	orrs	r3, r2
 8004b6a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004b6c:	693b      	ldr	r3, [r7, #16]
 8004b6e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004b72:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	031b      	lsls	r3, r3, #12
 8004b78:	b29b      	uxth	r3, r3
 8004b7a:	693a      	ldr	r2, [r7, #16]
 8004b7c:	4313      	orrs	r3, r2
 8004b7e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004b80:	697b      	ldr	r3, [r7, #20]
 8004b82:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004b86:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004b88:	68bb      	ldr	r3, [r7, #8]
 8004b8a:	011b      	lsls	r3, r3, #4
 8004b8c:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8004b90:	697a      	ldr	r2, [r7, #20]
 8004b92:	4313      	orrs	r3, r2
 8004b94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	693a      	ldr	r2, [r7, #16]
 8004b9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	697a      	ldr	r2, [r7, #20]
 8004ba0:	621a      	str	r2, [r3, #32]
}
 8004ba2:	bf00      	nop
 8004ba4:	371c      	adds	r7, #28
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	bc80      	pop	{r7}
 8004baa:	4770      	bx	lr

08004bac <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004bac:	b480      	push	{r7}
 8004bae:	b087      	sub	sp, #28
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	60f8      	str	r0, [r7, #12]
 8004bb4:	60b9      	str	r1, [r7, #8]
 8004bb6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	6a1b      	ldr	r3, [r3, #32]
 8004bbc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	6a1b      	ldr	r3, [r3, #32]
 8004bc2:	f023 0210 	bic.w	r2, r3, #16
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	699b      	ldr	r3, [r3, #24]
 8004bce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004bd0:	693b      	ldr	r3, [r7, #16]
 8004bd2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004bd6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	031b      	lsls	r3, r3, #12
 8004bdc:	693a      	ldr	r2, [r7, #16]
 8004bde:	4313      	orrs	r3, r2
 8004be0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004be2:	697b      	ldr	r3, [r7, #20]
 8004be4:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004be8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004bea:	68bb      	ldr	r3, [r7, #8]
 8004bec:	011b      	lsls	r3, r3, #4
 8004bee:	697a      	ldr	r2, [r7, #20]
 8004bf0:	4313      	orrs	r3, r2
 8004bf2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	693a      	ldr	r2, [r7, #16]
 8004bf8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	697a      	ldr	r2, [r7, #20]
 8004bfe:	621a      	str	r2, [r3, #32]
}
 8004c00:	bf00      	nop
 8004c02:	371c      	adds	r7, #28
 8004c04:	46bd      	mov	sp, r7
 8004c06:	bc80      	pop	{r7}
 8004c08:	4770      	bx	lr

08004c0a <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004c0a:	b480      	push	{r7}
 8004c0c:	b087      	sub	sp, #28
 8004c0e:	af00      	add	r7, sp, #0
 8004c10:	60f8      	str	r0, [r7, #12]
 8004c12:	60b9      	str	r1, [r7, #8]
 8004c14:	607a      	str	r2, [r7, #4]
 8004c16:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	6a1b      	ldr	r3, [r3, #32]
 8004c1c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	6a1b      	ldr	r3, [r3, #32]
 8004c22:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	69db      	ldr	r3, [r3, #28]
 8004c2e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004c30:	693b      	ldr	r3, [r7, #16]
 8004c32:	f023 0303 	bic.w	r3, r3, #3
 8004c36:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8004c38:	693a      	ldr	r2, [r7, #16]
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	4313      	orrs	r3, r2
 8004c3e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004c40:	693b      	ldr	r3, [r7, #16]
 8004c42:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004c46:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	011b      	lsls	r3, r3, #4
 8004c4c:	b2db      	uxtb	r3, r3
 8004c4e:	693a      	ldr	r2, [r7, #16]
 8004c50:	4313      	orrs	r3, r2
 8004c52:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8004c54:	697b      	ldr	r3, [r7, #20]
 8004c56:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004c5a:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	021b      	lsls	r3, r3, #8
 8004c60:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004c64:	697a      	ldr	r2, [r7, #20]
 8004c66:	4313      	orrs	r3, r2
 8004c68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	693a      	ldr	r2, [r7, #16]
 8004c6e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	697a      	ldr	r2, [r7, #20]
 8004c74:	621a      	str	r2, [r3, #32]
}
 8004c76:	bf00      	nop
 8004c78:	371c      	adds	r7, #28
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	bc80      	pop	{r7}
 8004c7e:	4770      	bx	lr

08004c80 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004c80:	b480      	push	{r7}
 8004c82:	b087      	sub	sp, #28
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	60f8      	str	r0, [r7, #12]
 8004c88:	60b9      	str	r1, [r7, #8]
 8004c8a:	607a      	str	r2, [r7, #4]
 8004c8c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	6a1b      	ldr	r3, [r3, #32]
 8004c92:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	6a1b      	ldr	r3, [r3, #32]
 8004c98:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	69db      	ldr	r3, [r3, #28]
 8004ca4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004ca6:	693b      	ldr	r3, [r7, #16]
 8004ca8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004cac:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	021b      	lsls	r3, r3, #8
 8004cb2:	693a      	ldr	r2, [r7, #16]
 8004cb4:	4313      	orrs	r3, r2
 8004cb6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004cb8:	693b      	ldr	r3, [r7, #16]
 8004cba:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004cbe:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	031b      	lsls	r3, r3, #12
 8004cc4:	b29b      	uxth	r3, r3
 8004cc6:	693a      	ldr	r2, [r7, #16]
 8004cc8:	4313      	orrs	r3, r2
 8004cca:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8004ccc:	697b      	ldr	r3, [r7, #20]
 8004cce:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004cd2:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8004cd4:	68bb      	ldr	r3, [r7, #8]
 8004cd6:	031b      	lsls	r3, r3, #12
 8004cd8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004cdc:	697a      	ldr	r2, [r7, #20]
 8004cde:	4313      	orrs	r3, r2
 8004ce0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	693a      	ldr	r2, [r7, #16]
 8004ce6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	697a      	ldr	r2, [r7, #20]
 8004cec:	621a      	str	r2, [r3, #32]
}
 8004cee:	bf00      	nop
 8004cf0:	371c      	adds	r7, #28
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	bc80      	pop	{r7}
 8004cf6:	4770      	bx	lr

08004cf8 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004cf8:	b480      	push	{r7}
 8004cfa:	b085      	sub	sp, #20
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
 8004d00:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	689b      	ldr	r3, [r3, #8]
 8004d06:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d0e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004d10:	683a      	ldr	r2, [r7, #0]
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	4313      	orrs	r3, r2
 8004d16:	f043 0307 	orr.w	r3, r3, #7
 8004d1a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	68fa      	ldr	r2, [r7, #12]
 8004d20:	609a      	str	r2, [r3, #8]
}
 8004d22:	bf00      	nop
 8004d24:	3714      	adds	r7, #20
 8004d26:	46bd      	mov	sp, r7
 8004d28:	bc80      	pop	{r7}
 8004d2a:	4770      	bx	lr

08004d2c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004d2c:	b480      	push	{r7}
 8004d2e:	b087      	sub	sp, #28
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	60f8      	str	r0, [r7, #12]
 8004d34:	60b9      	str	r1, [r7, #8]
 8004d36:	607a      	str	r2, [r7, #4]
 8004d38:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	689b      	ldr	r3, [r3, #8]
 8004d3e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d40:	697b      	ldr	r3, [r7, #20]
 8004d42:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004d46:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	021a      	lsls	r2, r3, #8
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	431a      	orrs	r2, r3
 8004d50:	68bb      	ldr	r3, [r7, #8]
 8004d52:	4313      	orrs	r3, r2
 8004d54:	697a      	ldr	r2, [r7, #20]
 8004d56:	4313      	orrs	r3, r2
 8004d58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	697a      	ldr	r2, [r7, #20]
 8004d5e:	609a      	str	r2, [r3, #8]
}
 8004d60:	bf00      	nop
 8004d62:	371c      	adds	r7, #28
 8004d64:	46bd      	mov	sp, r7
 8004d66:	bc80      	pop	{r7}
 8004d68:	4770      	bx	lr

08004d6a <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004d6a:	b480      	push	{r7}
 8004d6c:	b087      	sub	sp, #28
 8004d6e:	af00      	add	r7, sp, #0
 8004d70:	60f8      	str	r0, [r7, #12]
 8004d72:	60b9      	str	r1, [r7, #8]
 8004d74:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004d76:	68bb      	ldr	r3, [r7, #8]
 8004d78:	f003 031f 	and.w	r3, r3, #31
 8004d7c:	2201      	movs	r2, #1
 8004d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8004d82:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	6a1a      	ldr	r2, [r3, #32]
 8004d88:	697b      	ldr	r3, [r7, #20]
 8004d8a:	43db      	mvns	r3, r3
 8004d8c:	401a      	ands	r2, r3
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	6a1a      	ldr	r2, [r3, #32]
 8004d96:	68bb      	ldr	r3, [r7, #8]
 8004d98:	f003 031f 	and.w	r3, r3, #31
 8004d9c:	6879      	ldr	r1, [r7, #4]
 8004d9e:	fa01 f303 	lsl.w	r3, r1, r3
 8004da2:	431a      	orrs	r2, r3
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	621a      	str	r2, [r3, #32]
}
 8004da8:	bf00      	nop
 8004daa:	371c      	adds	r7, #28
 8004dac:	46bd      	mov	sp, r7
 8004dae:	bc80      	pop	{r7}
 8004db0:	4770      	bx	lr
	...

08004db4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004db4:	b480      	push	{r7}
 8004db6:	b085      	sub	sp, #20
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
 8004dbc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004dc4:	2b01      	cmp	r3, #1
 8004dc6:	d101      	bne.n	8004dcc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004dc8:	2302      	movs	r3, #2
 8004dca:	e046      	b.n	8004e5a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2201      	movs	r2, #1
 8004dd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2202      	movs	r2, #2
 8004dd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	685b      	ldr	r3, [r3, #4]
 8004de2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	689b      	ldr	r3, [r3, #8]
 8004dea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004df2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	68fa      	ldr	r2, [r7, #12]
 8004dfa:	4313      	orrs	r3, r2
 8004dfc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	68fa      	ldr	r2, [r7, #12]
 8004e04:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	4a16      	ldr	r2, [pc, #88]	@ (8004e64 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d00e      	beq.n	8004e2e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e18:	d009      	beq.n	8004e2e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	4a12      	ldr	r2, [pc, #72]	@ (8004e68 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d004      	beq.n	8004e2e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	4a10      	ldr	r2, [pc, #64]	@ (8004e6c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d10c      	bne.n	8004e48 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004e2e:	68bb      	ldr	r3, [r7, #8]
 8004e30:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004e34:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	685b      	ldr	r3, [r3, #4]
 8004e3a:	68ba      	ldr	r2, [r7, #8]
 8004e3c:	4313      	orrs	r3, r2
 8004e3e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	68ba      	ldr	r2, [r7, #8]
 8004e46:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2201      	movs	r2, #1
 8004e4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2200      	movs	r2, #0
 8004e54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004e58:	2300      	movs	r3, #0
}
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	3714      	adds	r7, #20
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	bc80      	pop	{r7}
 8004e62:	4770      	bx	lr
 8004e64:	40012c00 	.word	0x40012c00
 8004e68:	40000400 	.word	0x40000400
 8004e6c:	40000800 	.word	0x40000800

08004e70 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004e70:	b480      	push	{r7}
 8004e72:	b083      	sub	sp, #12
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004e78:	bf00      	nop
 8004e7a:	370c      	adds	r7, #12
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	bc80      	pop	{r7}
 8004e80:	4770      	bx	lr

08004e82 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004e82:	b480      	push	{r7}
 8004e84:	b083      	sub	sp, #12
 8004e86:	af00      	add	r7, sp, #0
 8004e88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004e8a:	bf00      	nop
 8004e8c:	370c      	adds	r7, #12
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	bc80      	pop	{r7}
 8004e92:	4770      	bx	lr

08004e94 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b082      	sub	sp, #8
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d101      	bne.n	8004ea6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	e042      	b.n	8004f2c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004eac:	b2db      	uxtb	r3, r3
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d106      	bne.n	8004ec0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004eba:	6878      	ldr	r0, [r7, #4]
 8004ebc:	f7fc ffaa 	bl	8001e14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2224      	movs	r2, #36	@ 0x24
 8004ec4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	68da      	ldr	r2, [r3, #12]
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004ed6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004ed8:	6878      	ldr	r0, [r7, #4]
 8004eda:	f000 f971 	bl	80051c0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	691a      	ldr	r2, [r3, #16]
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004eec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	695a      	ldr	r2, [r3, #20]
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004efc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	68da      	ldr	r2, [r3, #12]
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004f0c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2200      	movs	r2, #0
 8004f12:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2220      	movs	r2, #32
 8004f18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2220      	movs	r2, #32
 8004f20:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2200      	movs	r2, #0
 8004f28:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004f2a:	2300      	movs	r3, #0
}
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	3708      	adds	r7, #8
 8004f30:	46bd      	mov	sp, r7
 8004f32:	bd80      	pop	{r7, pc}

08004f34 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b08a      	sub	sp, #40	@ 0x28
 8004f38:	af02      	add	r7, sp, #8
 8004f3a:	60f8      	str	r0, [r7, #12]
 8004f3c:	60b9      	str	r1, [r7, #8]
 8004f3e:	603b      	str	r3, [r7, #0]
 8004f40:	4613      	mov	r3, r2
 8004f42:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004f44:	2300      	movs	r3, #0
 8004f46:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004f4e:	b2db      	uxtb	r3, r3
 8004f50:	2b20      	cmp	r3, #32
 8004f52:	d175      	bne.n	8005040 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004f54:	68bb      	ldr	r3, [r7, #8]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d002      	beq.n	8004f60 <HAL_UART_Transmit+0x2c>
 8004f5a:	88fb      	ldrh	r3, [r7, #6]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d101      	bne.n	8004f64 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004f60:	2301      	movs	r3, #1
 8004f62:	e06e      	b.n	8005042 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	2200      	movs	r2, #0
 8004f68:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	2221      	movs	r2, #33	@ 0x21
 8004f6e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004f72:	f7fd f817 	bl	8001fa4 <HAL_GetTick>
 8004f76:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	88fa      	ldrh	r2, [r7, #6]
 8004f7c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	88fa      	ldrh	r2, [r7, #6]
 8004f82:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	689b      	ldr	r3, [r3, #8]
 8004f88:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004f8c:	d108      	bne.n	8004fa0 <HAL_UART_Transmit+0x6c>
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	691b      	ldr	r3, [r3, #16]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d104      	bne.n	8004fa0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004f96:	2300      	movs	r3, #0
 8004f98:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004f9a:	68bb      	ldr	r3, [r7, #8]
 8004f9c:	61bb      	str	r3, [r7, #24]
 8004f9e:	e003      	b.n	8004fa8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004fa0:	68bb      	ldr	r3, [r7, #8]
 8004fa2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004fa8:	e02e      	b.n	8005008 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	9300      	str	r3, [sp, #0]
 8004fae:	697b      	ldr	r3, [r7, #20]
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	2180      	movs	r1, #128	@ 0x80
 8004fb4:	68f8      	ldr	r0, [r7, #12]
 8004fb6:	f000 f848 	bl	800504a <UART_WaitOnFlagUntilTimeout>
 8004fba:	4603      	mov	r3, r0
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d005      	beq.n	8004fcc <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	2220      	movs	r2, #32
 8004fc4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004fc8:	2303      	movs	r3, #3
 8004fca:	e03a      	b.n	8005042 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004fcc:	69fb      	ldr	r3, [r7, #28]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d10b      	bne.n	8004fea <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004fd2:	69bb      	ldr	r3, [r7, #24]
 8004fd4:	881b      	ldrh	r3, [r3, #0]
 8004fd6:	461a      	mov	r2, r3
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004fe0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004fe2:	69bb      	ldr	r3, [r7, #24]
 8004fe4:	3302      	adds	r3, #2
 8004fe6:	61bb      	str	r3, [r7, #24]
 8004fe8:	e007      	b.n	8004ffa <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004fea:	69fb      	ldr	r3, [r7, #28]
 8004fec:	781a      	ldrb	r2, [r3, #0]
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004ff4:	69fb      	ldr	r3, [r7, #28]
 8004ff6:	3301      	adds	r3, #1
 8004ff8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004ffe:	b29b      	uxth	r3, r3
 8005000:	3b01      	subs	r3, #1
 8005002:	b29a      	uxth	r2, r3
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800500c:	b29b      	uxth	r3, r3
 800500e:	2b00      	cmp	r3, #0
 8005010:	d1cb      	bne.n	8004faa <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	9300      	str	r3, [sp, #0]
 8005016:	697b      	ldr	r3, [r7, #20]
 8005018:	2200      	movs	r2, #0
 800501a:	2140      	movs	r1, #64	@ 0x40
 800501c:	68f8      	ldr	r0, [r7, #12]
 800501e:	f000 f814 	bl	800504a <UART_WaitOnFlagUntilTimeout>
 8005022:	4603      	mov	r3, r0
 8005024:	2b00      	cmp	r3, #0
 8005026:	d005      	beq.n	8005034 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	2220      	movs	r2, #32
 800502c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005030:	2303      	movs	r3, #3
 8005032:	e006      	b.n	8005042 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	2220      	movs	r2, #32
 8005038:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800503c:	2300      	movs	r3, #0
 800503e:	e000      	b.n	8005042 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005040:	2302      	movs	r3, #2
  }
}
 8005042:	4618      	mov	r0, r3
 8005044:	3720      	adds	r7, #32
 8005046:	46bd      	mov	sp, r7
 8005048:	bd80      	pop	{r7, pc}

0800504a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800504a:	b580      	push	{r7, lr}
 800504c:	b086      	sub	sp, #24
 800504e:	af00      	add	r7, sp, #0
 8005050:	60f8      	str	r0, [r7, #12]
 8005052:	60b9      	str	r1, [r7, #8]
 8005054:	603b      	str	r3, [r7, #0]
 8005056:	4613      	mov	r3, r2
 8005058:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800505a:	e03b      	b.n	80050d4 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800505c:	6a3b      	ldr	r3, [r7, #32]
 800505e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005062:	d037      	beq.n	80050d4 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005064:	f7fc ff9e 	bl	8001fa4 <HAL_GetTick>
 8005068:	4602      	mov	r2, r0
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	1ad3      	subs	r3, r2, r3
 800506e:	6a3a      	ldr	r2, [r7, #32]
 8005070:	429a      	cmp	r2, r3
 8005072:	d302      	bcc.n	800507a <UART_WaitOnFlagUntilTimeout+0x30>
 8005074:	6a3b      	ldr	r3, [r7, #32]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d101      	bne.n	800507e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800507a:	2303      	movs	r3, #3
 800507c:	e03a      	b.n	80050f4 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	68db      	ldr	r3, [r3, #12]
 8005084:	f003 0304 	and.w	r3, r3, #4
 8005088:	2b00      	cmp	r3, #0
 800508a:	d023      	beq.n	80050d4 <UART_WaitOnFlagUntilTimeout+0x8a>
 800508c:	68bb      	ldr	r3, [r7, #8]
 800508e:	2b80      	cmp	r3, #128	@ 0x80
 8005090:	d020      	beq.n	80050d4 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005092:	68bb      	ldr	r3, [r7, #8]
 8005094:	2b40      	cmp	r3, #64	@ 0x40
 8005096:	d01d      	beq.n	80050d4 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f003 0308 	and.w	r3, r3, #8
 80050a2:	2b08      	cmp	r3, #8
 80050a4:	d116      	bne.n	80050d4 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80050a6:	2300      	movs	r3, #0
 80050a8:	617b      	str	r3, [r7, #20]
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	617b      	str	r3, [r7, #20]
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	685b      	ldr	r3, [r3, #4]
 80050b8:	617b      	str	r3, [r7, #20]
 80050ba:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80050bc:	68f8      	ldr	r0, [r7, #12]
 80050be:	f000 f81d 	bl	80050fc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	2208      	movs	r2, #8
 80050c6:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	2200      	movs	r2, #0
 80050cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80050d0:	2301      	movs	r3, #1
 80050d2:	e00f      	b.n	80050f4 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	681a      	ldr	r2, [r3, #0]
 80050da:	68bb      	ldr	r3, [r7, #8]
 80050dc:	4013      	ands	r3, r2
 80050de:	68ba      	ldr	r2, [r7, #8]
 80050e0:	429a      	cmp	r2, r3
 80050e2:	bf0c      	ite	eq
 80050e4:	2301      	moveq	r3, #1
 80050e6:	2300      	movne	r3, #0
 80050e8:	b2db      	uxtb	r3, r3
 80050ea:	461a      	mov	r2, r3
 80050ec:	79fb      	ldrb	r3, [r7, #7]
 80050ee:	429a      	cmp	r2, r3
 80050f0:	d0b4      	beq.n	800505c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80050f2:	2300      	movs	r3, #0
}
 80050f4:	4618      	mov	r0, r3
 80050f6:	3718      	adds	r7, #24
 80050f8:	46bd      	mov	sp, r7
 80050fa:	bd80      	pop	{r7, pc}

080050fc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80050fc:	b480      	push	{r7}
 80050fe:	b095      	sub	sp, #84	@ 0x54
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	330c      	adds	r3, #12
 800510a:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800510c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800510e:	e853 3f00 	ldrex	r3, [r3]
 8005112:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005114:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005116:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800511a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	330c      	adds	r3, #12
 8005122:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005124:	643a      	str	r2, [r7, #64]	@ 0x40
 8005126:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005128:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800512a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800512c:	e841 2300 	strex	r3, r2, [r1]
 8005130:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005132:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005134:	2b00      	cmp	r3, #0
 8005136:	d1e5      	bne.n	8005104 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	3314      	adds	r3, #20
 800513e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005140:	6a3b      	ldr	r3, [r7, #32]
 8005142:	e853 3f00 	ldrex	r3, [r3]
 8005146:	61fb      	str	r3, [r7, #28]
   return(result);
 8005148:	69fb      	ldr	r3, [r7, #28]
 800514a:	f023 0301 	bic.w	r3, r3, #1
 800514e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	3314      	adds	r3, #20
 8005156:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005158:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800515a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800515c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800515e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005160:	e841 2300 	strex	r3, r2, [r1]
 8005164:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005166:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005168:	2b00      	cmp	r3, #0
 800516a:	d1e5      	bne.n	8005138 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005170:	2b01      	cmp	r3, #1
 8005172:	d119      	bne.n	80051a8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	330c      	adds	r3, #12
 800517a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	e853 3f00 	ldrex	r3, [r3]
 8005182:	60bb      	str	r3, [r7, #8]
   return(result);
 8005184:	68bb      	ldr	r3, [r7, #8]
 8005186:	f023 0310 	bic.w	r3, r3, #16
 800518a:	647b      	str	r3, [r7, #68]	@ 0x44
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	330c      	adds	r3, #12
 8005192:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005194:	61ba      	str	r2, [r7, #24]
 8005196:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005198:	6979      	ldr	r1, [r7, #20]
 800519a:	69ba      	ldr	r2, [r7, #24]
 800519c:	e841 2300 	strex	r3, r2, [r1]
 80051a0:	613b      	str	r3, [r7, #16]
   return(result);
 80051a2:	693b      	ldr	r3, [r7, #16]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d1e5      	bne.n	8005174 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2220      	movs	r2, #32
 80051ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2200      	movs	r2, #0
 80051b4:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80051b6:	bf00      	nop
 80051b8:	3754      	adds	r7, #84	@ 0x54
 80051ba:	46bd      	mov	sp, r7
 80051bc:	bc80      	pop	{r7}
 80051be:	4770      	bx	lr

080051c0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b084      	sub	sp, #16
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	691b      	ldr	r3, [r3, #16]
 80051ce:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	68da      	ldr	r2, [r3, #12]
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	430a      	orrs	r2, r1
 80051dc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	689a      	ldr	r2, [r3, #8]
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	691b      	ldr	r3, [r3, #16]
 80051e6:	431a      	orrs	r2, r3
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	695b      	ldr	r3, [r3, #20]
 80051ec:	4313      	orrs	r3, r2
 80051ee:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	68db      	ldr	r3, [r3, #12]
 80051f6:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80051fa:	f023 030c 	bic.w	r3, r3, #12
 80051fe:	687a      	ldr	r2, [r7, #4]
 8005200:	6812      	ldr	r2, [r2, #0]
 8005202:	68b9      	ldr	r1, [r7, #8]
 8005204:	430b      	orrs	r3, r1
 8005206:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	695b      	ldr	r3, [r3, #20]
 800520e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	699a      	ldr	r2, [r3, #24]
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	430a      	orrs	r2, r1
 800521c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	4a2c      	ldr	r2, [pc, #176]	@ (80052d4 <UART_SetConfig+0x114>)
 8005224:	4293      	cmp	r3, r2
 8005226:	d103      	bne.n	8005230 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005228:	f7fe f92e 	bl	8003488 <HAL_RCC_GetPCLK2Freq>
 800522c:	60f8      	str	r0, [r7, #12]
 800522e:	e002      	b.n	8005236 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005230:	f7fe f916 	bl	8003460 <HAL_RCC_GetPCLK1Freq>
 8005234:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005236:	68fa      	ldr	r2, [r7, #12]
 8005238:	4613      	mov	r3, r2
 800523a:	009b      	lsls	r3, r3, #2
 800523c:	4413      	add	r3, r2
 800523e:	009a      	lsls	r2, r3, #2
 8005240:	441a      	add	r2, r3
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	685b      	ldr	r3, [r3, #4]
 8005246:	009b      	lsls	r3, r3, #2
 8005248:	fbb2 f3f3 	udiv	r3, r2, r3
 800524c:	4a22      	ldr	r2, [pc, #136]	@ (80052d8 <UART_SetConfig+0x118>)
 800524e:	fba2 2303 	umull	r2, r3, r2, r3
 8005252:	095b      	lsrs	r3, r3, #5
 8005254:	0119      	lsls	r1, r3, #4
 8005256:	68fa      	ldr	r2, [r7, #12]
 8005258:	4613      	mov	r3, r2
 800525a:	009b      	lsls	r3, r3, #2
 800525c:	4413      	add	r3, r2
 800525e:	009a      	lsls	r2, r3, #2
 8005260:	441a      	add	r2, r3
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	685b      	ldr	r3, [r3, #4]
 8005266:	009b      	lsls	r3, r3, #2
 8005268:	fbb2 f2f3 	udiv	r2, r2, r3
 800526c:	4b1a      	ldr	r3, [pc, #104]	@ (80052d8 <UART_SetConfig+0x118>)
 800526e:	fba3 0302 	umull	r0, r3, r3, r2
 8005272:	095b      	lsrs	r3, r3, #5
 8005274:	2064      	movs	r0, #100	@ 0x64
 8005276:	fb00 f303 	mul.w	r3, r0, r3
 800527a:	1ad3      	subs	r3, r2, r3
 800527c:	011b      	lsls	r3, r3, #4
 800527e:	3332      	adds	r3, #50	@ 0x32
 8005280:	4a15      	ldr	r2, [pc, #84]	@ (80052d8 <UART_SetConfig+0x118>)
 8005282:	fba2 2303 	umull	r2, r3, r2, r3
 8005286:	095b      	lsrs	r3, r3, #5
 8005288:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800528c:	4419      	add	r1, r3
 800528e:	68fa      	ldr	r2, [r7, #12]
 8005290:	4613      	mov	r3, r2
 8005292:	009b      	lsls	r3, r3, #2
 8005294:	4413      	add	r3, r2
 8005296:	009a      	lsls	r2, r3, #2
 8005298:	441a      	add	r2, r3
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	685b      	ldr	r3, [r3, #4]
 800529e:	009b      	lsls	r3, r3, #2
 80052a0:	fbb2 f2f3 	udiv	r2, r2, r3
 80052a4:	4b0c      	ldr	r3, [pc, #48]	@ (80052d8 <UART_SetConfig+0x118>)
 80052a6:	fba3 0302 	umull	r0, r3, r3, r2
 80052aa:	095b      	lsrs	r3, r3, #5
 80052ac:	2064      	movs	r0, #100	@ 0x64
 80052ae:	fb00 f303 	mul.w	r3, r0, r3
 80052b2:	1ad3      	subs	r3, r2, r3
 80052b4:	011b      	lsls	r3, r3, #4
 80052b6:	3332      	adds	r3, #50	@ 0x32
 80052b8:	4a07      	ldr	r2, [pc, #28]	@ (80052d8 <UART_SetConfig+0x118>)
 80052ba:	fba2 2303 	umull	r2, r3, r2, r3
 80052be:	095b      	lsrs	r3, r3, #5
 80052c0:	f003 020f 	and.w	r2, r3, #15
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	440a      	add	r2, r1
 80052ca:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80052cc:	bf00      	nop
 80052ce:	3710      	adds	r7, #16
 80052d0:	46bd      	mov	sp, r7
 80052d2:	bd80      	pop	{r7, pc}
 80052d4:	40013800 	.word	0x40013800
 80052d8:	51eb851f 	.word	0x51eb851f

080052dc <__cvt>:
 80052dc:	2b00      	cmp	r3, #0
 80052de:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80052e2:	461d      	mov	r5, r3
 80052e4:	bfbb      	ittet	lt
 80052e6:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 80052ea:	461d      	movlt	r5, r3
 80052ec:	2300      	movge	r3, #0
 80052ee:	232d      	movlt	r3, #45	@ 0x2d
 80052f0:	b088      	sub	sp, #32
 80052f2:	4614      	mov	r4, r2
 80052f4:	bfb8      	it	lt
 80052f6:	4614      	movlt	r4, r2
 80052f8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80052fa:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 80052fc:	7013      	strb	r3, [r2, #0]
 80052fe:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005300:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8005304:	f023 0820 	bic.w	r8, r3, #32
 8005308:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800530c:	d005      	beq.n	800531a <__cvt+0x3e>
 800530e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8005312:	d100      	bne.n	8005316 <__cvt+0x3a>
 8005314:	3601      	adds	r6, #1
 8005316:	2302      	movs	r3, #2
 8005318:	e000      	b.n	800531c <__cvt+0x40>
 800531a:	2303      	movs	r3, #3
 800531c:	aa07      	add	r2, sp, #28
 800531e:	9204      	str	r2, [sp, #16]
 8005320:	aa06      	add	r2, sp, #24
 8005322:	e9cd a202 	strd	sl, r2, [sp, #8]
 8005326:	e9cd 3600 	strd	r3, r6, [sp]
 800532a:	4622      	mov	r2, r4
 800532c:	462b      	mov	r3, r5
 800532e:	f000 fe4f 	bl	8005fd0 <_dtoa_r>
 8005332:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005336:	4607      	mov	r7, r0
 8005338:	d119      	bne.n	800536e <__cvt+0x92>
 800533a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800533c:	07db      	lsls	r3, r3, #31
 800533e:	d50e      	bpl.n	800535e <__cvt+0x82>
 8005340:	eb00 0906 	add.w	r9, r0, r6
 8005344:	2200      	movs	r2, #0
 8005346:	2300      	movs	r3, #0
 8005348:	4620      	mov	r0, r4
 800534a:	4629      	mov	r1, r5
 800534c:	f7fb fb2c 	bl	80009a8 <__aeabi_dcmpeq>
 8005350:	b108      	cbz	r0, 8005356 <__cvt+0x7a>
 8005352:	f8cd 901c 	str.w	r9, [sp, #28]
 8005356:	2230      	movs	r2, #48	@ 0x30
 8005358:	9b07      	ldr	r3, [sp, #28]
 800535a:	454b      	cmp	r3, r9
 800535c:	d31e      	bcc.n	800539c <__cvt+0xc0>
 800535e:	4638      	mov	r0, r7
 8005360:	9b07      	ldr	r3, [sp, #28]
 8005362:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8005364:	1bdb      	subs	r3, r3, r7
 8005366:	6013      	str	r3, [r2, #0]
 8005368:	b008      	add	sp, #32
 800536a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800536e:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005372:	eb00 0906 	add.w	r9, r0, r6
 8005376:	d1e5      	bne.n	8005344 <__cvt+0x68>
 8005378:	7803      	ldrb	r3, [r0, #0]
 800537a:	2b30      	cmp	r3, #48	@ 0x30
 800537c:	d10a      	bne.n	8005394 <__cvt+0xb8>
 800537e:	2200      	movs	r2, #0
 8005380:	2300      	movs	r3, #0
 8005382:	4620      	mov	r0, r4
 8005384:	4629      	mov	r1, r5
 8005386:	f7fb fb0f 	bl	80009a8 <__aeabi_dcmpeq>
 800538a:	b918      	cbnz	r0, 8005394 <__cvt+0xb8>
 800538c:	f1c6 0601 	rsb	r6, r6, #1
 8005390:	f8ca 6000 	str.w	r6, [sl]
 8005394:	f8da 3000 	ldr.w	r3, [sl]
 8005398:	4499      	add	r9, r3
 800539a:	e7d3      	b.n	8005344 <__cvt+0x68>
 800539c:	1c59      	adds	r1, r3, #1
 800539e:	9107      	str	r1, [sp, #28]
 80053a0:	701a      	strb	r2, [r3, #0]
 80053a2:	e7d9      	b.n	8005358 <__cvt+0x7c>

080053a4 <__exponent>:
 80053a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80053a6:	2900      	cmp	r1, #0
 80053a8:	bfb6      	itet	lt
 80053aa:	232d      	movlt	r3, #45	@ 0x2d
 80053ac:	232b      	movge	r3, #43	@ 0x2b
 80053ae:	4249      	neglt	r1, r1
 80053b0:	2909      	cmp	r1, #9
 80053b2:	7002      	strb	r2, [r0, #0]
 80053b4:	7043      	strb	r3, [r0, #1]
 80053b6:	dd29      	ble.n	800540c <__exponent+0x68>
 80053b8:	f10d 0307 	add.w	r3, sp, #7
 80053bc:	461d      	mov	r5, r3
 80053be:	270a      	movs	r7, #10
 80053c0:	fbb1 f6f7 	udiv	r6, r1, r7
 80053c4:	461a      	mov	r2, r3
 80053c6:	fb07 1416 	mls	r4, r7, r6, r1
 80053ca:	3430      	adds	r4, #48	@ 0x30
 80053cc:	f802 4c01 	strb.w	r4, [r2, #-1]
 80053d0:	460c      	mov	r4, r1
 80053d2:	2c63      	cmp	r4, #99	@ 0x63
 80053d4:	4631      	mov	r1, r6
 80053d6:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 80053da:	dcf1      	bgt.n	80053c0 <__exponent+0x1c>
 80053dc:	3130      	adds	r1, #48	@ 0x30
 80053de:	1e94      	subs	r4, r2, #2
 80053e0:	f803 1c01 	strb.w	r1, [r3, #-1]
 80053e4:	4623      	mov	r3, r4
 80053e6:	1c41      	adds	r1, r0, #1
 80053e8:	42ab      	cmp	r3, r5
 80053ea:	d30a      	bcc.n	8005402 <__exponent+0x5e>
 80053ec:	f10d 0309 	add.w	r3, sp, #9
 80053f0:	1a9b      	subs	r3, r3, r2
 80053f2:	42ac      	cmp	r4, r5
 80053f4:	bf88      	it	hi
 80053f6:	2300      	movhi	r3, #0
 80053f8:	3302      	adds	r3, #2
 80053fa:	4403      	add	r3, r0
 80053fc:	1a18      	subs	r0, r3, r0
 80053fe:	b003      	add	sp, #12
 8005400:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005402:	f813 6b01 	ldrb.w	r6, [r3], #1
 8005406:	f801 6f01 	strb.w	r6, [r1, #1]!
 800540a:	e7ed      	b.n	80053e8 <__exponent+0x44>
 800540c:	2330      	movs	r3, #48	@ 0x30
 800540e:	3130      	adds	r1, #48	@ 0x30
 8005410:	7083      	strb	r3, [r0, #2]
 8005412:	70c1      	strb	r1, [r0, #3]
 8005414:	1d03      	adds	r3, r0, #4
 8005416:	e7f1      	b.n	80053fc <__exponent+0x58>

08005418 <_printf_float>:
 8005418:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800541c:	b091      	sub	sp, #68	@ 0x44
 800541e:	460c      	mov	r4, r1
 8005420:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8005424:	4616      	mov	r6, r2
 8005426:	461f      	mov	r7, r3
 8005428:	4605      	mov	r5, r0
 800542a:	f000 fcc1 	bl	8005db0 <_localeconv_r>
 800542e:	6803      	ldr	r3, [r0, #0]
 8005430:	4618      	mov	r0, r3
 8005432:	9308      	str	r3, [sp, #32]
 8005434:	f7fa fe8c 	bl	8000150 <strlen>
 8005438:	2300      	movs	r3, #0
 800543a:	930e      	str	r3, [sp, #56]	@ 0x38
 800543c:	f8d8 3000 	ldr.w	r3, [r8]
 8005440:	9009      	str	r0, [sp, #36]	@ 0x24
 8005442:	3307      	adds	r3, #7
 8005444:	f023 0307 	bic.w	r3, r3, #7
 8005448:	f103 0208 	add.w	r2, r3, #8
 800544c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005450:	f8d4 b000 	ldr.w	fp, [r4]
 8005454:	f8c8 2000 	str.w	r2, [r8]
 8005458:	e9d3 8900 	ldrd	r8, r9, [r3]
 800545c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005460:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005462:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8005466:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800546a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800546e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8005472:	4b9c      	ldr	r3, [pc, #624]	@ (80056e4 <_printf_float+0x2cc>)
 8005474:	f7fb faca 	bl	8000a0c <__aeabi_dcmpun>
 8005478:	bb70      	cbnz	r0, 80054d8 <_printf_float+0xc0>
 800547a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800547e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005482:	4b98      	ldr	r3, [pc, #608]	@ (80056e4 <_printf_float+0x2cc>)
 8005484:	f7fb faa4 	bl	80009d0 <__aeabi_dcmple>
 8005488:	bb30      	cbnz	r0, 80054d8 <_printf_float+0xc0>
 800548a:	2200      	movs	r2, #0
 800548c:	2300      	movs	r3, #0
 800548e:	4640      	mov	r0, r8
 8005490:	4649      	mov	r1, r9
 8005492:	f7fb fa93 	bl	80009bc <__aeabi_dcmplt>
 8005496:	b110      	cbz	r0, 800549e <_printf_float+0x86>
 8005498:	232d      	movs	r3, #45	@ 0x2d
 800549a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800549e:	4a92      	ldr	r2, [pc, #584]	@ (80056e8 <_printf_float+0x2d0>)
 80054a0:	4b92      	ldr	r3, [pc, #584]	@ (80056ec <_printf_float+0x2d4>)
 80054a2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80054a6:	bf94      	ite	ls
 80054a8:	4690      	movls	r8, r2
 80054aa:	4698      	movhi	r8, r3
 80054ac:	2303      	movs	r3, #3
 80054ae:	f04f 0900 	mov.w	r9, #0
 80054b2:	6123      	str	r3, [r4, #16]
 80054b4:	f02b 0304 	bic.w	r3, fp, #4
 80054b8:	6023      	str	r3, [r4, #0]
 80054ba:	4633      	mov	r3, r6
 80054bc:	4621      	mov	r1, r4
 80054be:	4628      	mov	r0, r5
 80054c0:	9700      	str	r7, [sp, #0]
 80054c2:	aa0f      	add	r2, sp, #60	@ 0x3c
 80054c4:	f000 f9d4 	bl	8005870 <_printf_common>
 80054c8:	3001      	adds	r0, #1
 80054ca:	f040 8090 	bne.w	80055ee <_printf_float+0x1d6>
 80054ce:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80054d2:	b011      	add	sp, #68	@ 0x44
 80054d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054d8:	4642      	mov	r2, r8
 80054da:	464b      	mov	r3, r9
 80054dc:	4640      	mov	r0, r8
 80054de:	4649      	mov	r1, r9
 80054e0:	f7fb fa94 	bl	8000a0c <__aeabi_dcmpun>
 80054e4:	b148      	cbz	r0, 80054fa <_printf_float+0xe2>
 80054e6:	464b      	mov	r3, r9
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	bfb8      	it	lt
 80054ec:	232d      	movlt	r3, #45	@ 0x2d
 80054ee:	4a80      	ldr	r2, [pc, #512]	@ (80056f0 <_printf_float+0x2d8>)
 80054f0:	bfb8      	it	lt
 80054f2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80054f6:	4b7f      	ldr	r3, [pc, #508]	@ (80056f4 <_printf_float+0x2dc>)
 80054f8:	e7d3      	b.n	80054a2 <_printf_float+0x8a>
 80054fa:	6863      	ldr	r3, [r4, #4]
 80054fc:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8005500:	1c5a      	adds	r2, r3, #1
 8005502:	d13f      	bne.n	8005584 <_printf_float+0x16c>
 8005504:	2306      	movs	r3, #6
 8005506:	6063      	str	r3, [r4, #4]
 8005508:	2200      	movs	r2, #0
 800550a:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 800550e:	6023      	str	r3, [r4, #0]
 8005510:	9206      	str	r2, [sp, #24]
 8005512:	aa0e      	add	r2, sp, #56	@ 0x38
 8005514:	e9cd a204 	strd	sl, r2, [sp, #16]
 8005518:	aa0d      	add	r2, sp, #52	@ 0x34
 800551a:	9203      	str	r2, [sp, #12]
 800551c:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8005520:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8005524:	6863      	ldr	r3, [r4, #4]
 8005526:	4642      	mov	r2, r8
 8005528:	9300      	str	r3, [sp, #0]
 800552a:	4628      	mov	r0, r5
 800552c:	464b      	mov	r3, r9
 800552e:	910a      	str	r1, [sp, #40]	@ 0x28
 8005530:	f7ff fed4 	bl	80052dc <__cvt>
 8005534:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005536:	4680      	mov	r8, r0
 8005538:	2947      	cmp	r1, #71	@ 0x47
 800553a:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800553c:	d128      	bne.n	8005590 <_printf_float+0x178>
 800553e:	1cc8      	adds	r0, r1, #3
 8005540:	db02      	blt.n	8005548 <_printf_float+0x130>
 8005542:	6863      	ldr	r3, [r4, #4]
 8005544:	4299      	cmp	r1, r3
 8005546:	dd40      	ble.n	80055ca <_printf_float+0x1b2>
 8005548:	f1aa 0a02 	sub.w	sl, sl, #2
 800554c:	fa5f fa8a 	uxtb.w	sl, sl
 8005550:	4652      	mov	r2, sl
 8005552:	3901      	subs	r1, #1
 8005554:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005558:	910d      	str	r1, [sp, #52]	@ 0x34
 800555a:	f7ff ff23 	bl	80053a4 <__exponent>
 800555e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005560:	4681      	mov	r9, r0
 8005562:	1813      	adds	r3, r2, r0
 8005564:	2a01      	cmp	r2, #1
 8005566:	6123      	str	r3, [r4, #16]
 8005568:	dc02      	bgt.n	8005570 <_printf_float+0x158>
 800556a:	6822      	ldr	r2, [r4, #0]
 800556c:	07d2      	lsls	r2, r2, #31
 800556e:	d501      	bpl.n	8005574 <_printf_float+0x15c>
 8005570:	3301      	adds	r3, #1
 8005572:	6123      	str	r3, [r4, #16]
 8005574:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8005578:	2b00      	cmp	r3, #0
 800557a:	d09e      	beq.n	80054ba <_printf_float+0xa2>
 800557c:	232d      	movs	r3, #45	@ 0x2d
 800557e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005582:	e79a      	b.n	80054ba <_printf_float+0xa2>
 8005584:	2947      	cmp	r1, #71	@ 0x47
 8005586:	d1bf      	bne.n	8005508 <_printf_float+0xf0>
 8005588:	2b00      	cmp	r3, #0
 800558a:	d1bd      	bne.n	8005508 <_printf_float+0xf0>
 800558c:	2301      	movs	r3, #1
 800558e:	e7ba      	b.n	8005506 <_printf_float+0xee>
 8005590:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005594:	d9dc      	bls.n	8005550 <_printf_float+0x138>
 8005596:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800559a:	d118      	bne.n	80055ce <_printf_float+0x1b6>
 800559c:	2900      	cmp	r1, #0
 800559e:	6863      	ldr	r3, [r4, #4]
 80055a0:	dd0b      	ble.n	80055ba <_printf_float+0x1a2>
 80055a2:	6121      	str	r1, [r4, #16]
 80055a4:	b913      	cbnz	r3, 80055ac <_printf_float+0x194>
 80055a6:	6822      	ldr	r2, [r4, #0]
 80055a8:	07d0      	lsls	r0, r2, #31
 80055aa:	d502      	bpl.n	80055b2 <_printf_float+0x19a>
 80055ac:	3301      	adds	r3, #1
 80055ae:	440b      	add	r3, r1
 80055b0:	6123      	str	r3, [r4, #16]
 80055b2:	f04f 0900 	mov.w	r9, #0
 80055b6:	65a1      	str	r1, [r4, #88]	@ 0x58
 80055b8:	e7dc      	b.n	8005574 <_printf_float+0x15c>
 80055ba:	b913      	cbnz	r3, 80055c2 <_printf_float+0x1aa>
 80055bc:	6822      	ldr	r2, [r4, #0]
 80055be:	07d2      	lsls	r2, r2, #31
 80055c0:	d501      	bpl.n	80055c6 <_printf_float+0x1ae>
 80055c2:	3302      	adds	r3, #2
 80055c4:	e7f4      	b.n	80055b0 <_printf_float+0x198>
 80055c6:	2301      	movs	r3, #1
 80055c8:	e7f2      	b.n	80055b0 <_printf_float+0x198>
 80055ca:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80055ce:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80055d0:	4299      	cmp	r1, r3
 80055d2:	db05      	blt.n	80055e0 <_printf_float+0x1c8>
 80055d4:	6823      	ldr	r3, [r4, #0]
 80055d6:	6121      	str	r1, [r4, #16]
 80055d8:	07d8      	lsls	r0, r3, #31
 80055da:	d5ea      	bpl.n	80055b2 <_printf_float+0x19a>
 80055dc:	1c4b      	adds	r3, r1, #1
 80055de:	e7e7      	b.n	80055b0 <_printf_float+0x198>
 80055e0:	2900      	cmp	r1, #0
 80055e2:	bfcc      	ite	gt
 80055e4:	2201      	movgt	r2, #1
 80055e6:	f1c1 0202 	rsble	r2, r1, #2
 80055ea:	4413      	add	r3, r2
 80055ec:	e7e0      	b.n	80055b0 <_printf_float+0x198>
 80055ee:	6823      	ldr	r3, [r4, #0]
 80055f0:	055a      	lsls	r2, r3, #21
 80055f2:	d407      	bmi.n	8005604 <_printf_float+0x1ec>
 80055f4:	6923      	ldr	r3, [r4, #16]
 80055f6:	4642      	mov	r2, r8
 80055f8:	4631      	mov	r1, r6
 80055fa:	4628      	mov	r0, r5
 80055fc:	47b8      	blx	r7
 80055fe:	3001      	adds	r0, #1
 8005600:	d12b      	bne.n	800565a <_printf_float+0x242>
 8005602:	e764      	b.n	80054ce <_printf_float+0xb6>
 8005604:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005608:	f240 80dc 	bls.w	80057c4 <_printf_float+0x3ac>
 800560c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005610:	2200      	movs	r2, #0
 8005612:	2300      	movs	r3, #0
 8005614:	f7fb f9c8 	bl	80009a8 <__aeabi_dcmpeq>
 8005618:	2800      	cmp	r0, #0
 800561a:	d033      	beq.n	8005684 <_printf_float+0x26c>
 800561c:	2301      	movs	r3, #1
 800561e:	4631      	mov	r1, r6
 8005620:	4628      	mov	r0, r5
 8005622:	4a35      	ldr	r2, [pc, #212]	@ (80056f8 <_printf_float+0x2e0>)
 8005624:	47b8      	blx	r7
 8005626:	3001      	adds	r0, #1
 8005628:	f43f af51 	beq.w	80054ce <_printf_float+0xb6>
 800562c:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8005630:	4543      	cmp	r3, r8
 8005632:	db02      	blt.n	800563a <_printf_float+0x222>
 8005634:	6823      	ldr	r3, [r4, #0]
 8005636:	07d8      	lsls	r0, r3, #31
 8005638:	d50f      	bpl.n	800565a <_printf_float+0x242>
 800563a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800563e:	4631      	mov	r1, r6
 8005640:	4628      	mov	r0, r5
 8005642:	47b8      	blx	r7
 8005644:	3001      	adds	r0, #1
 8005646:	f43f af42 	beq.w	80054ce <_printf_float+0xb6>
 800564a:	f04f 0900 	mov.w	r9, #0
 800564e:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8005652:	f104 0a1a 	add.w	sl, r4, #26
 8005656:	45c8      	cmp	r8, r9
 8005658:	dc09      	bgt.n	800566e <_printf_float+0x256>
 800565a:	6823      	ldr	r3, [r4, #0]
 800565c:	079b      	lsls	r3, r3, #30
 800565e:	f100 8102 	bmi.w	8005866 <_printf_float+0x44e>
 8005662:	68e0      	ldr	r0, [r4, #12]
 8005664:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005666:	4298      	cmp	r0, r3
 8005668:	bfb8      	it	lt
 800566a:	4618      	movlt	r0, r3
 800566c:	e731      	b.n	80054d2 <_printf_float+0xba>
 800566e:	2301      	movs	r3, #1
 8005670:	4652      	mov	r2, sl
 8005672:	4631      	mov	r1, r6
 8005674:	4628      	mov	r0, r5
 8005676:	47b8      	blx	r7
 8005678:	3001      	adds	r0, #1
 800567a:	f43f af28 	beq.w	80054ce <_printf_float+0xb6>
 800567e:	f109 0901 	add.w	r9, r9, #1
 8005682:	e7e8      	b.n	8005656 <_printf_float+0x23e>
 8005684:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005686:	2b00      	cmp	r3, #0
 8005688:	dc38      	bgt.n	80056fc <_printf_float+0x2e4>
 800568a:	2301      	movs	r3, #1
 800568c:	4631      	mov	r1, r6
 800568e:	4628      	mov	r0, r5
 8005690:	4a19      	ldr	r2, [pc, #100]	@ (80056f8 <_printf_float+0x2e0>)
 8005692:	47b8      	blx	r7
 8005694:	3001      	adds	r0, #1
 8005696:	f43f af1a 	beq.w	80054ce <_printf_float+0xb6>
 800569a:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 800569e:	ea59 0303 	orrs.w	r3, r9, r3
 80056a2:	d102      	bne.n	80056aa <_printf_float+0x292>
 80056a4:	6823      	ldr	r3, [r4, #0]
 80056a6:	07d9      	lsls	r1, r3, #31
 80056a8:	d5d7      	bpl.n	800565a <_printf_float+0x242>
 80056aa:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80056ae:	4631      	mov	r1, r6
 80056b0:	4628      	mov	r0, r5
 80056b2:	47b8      	blx	r7
 80056b4:	3001      	adds	r0, #1
 80056b6:	f43f af0a 	beq.w	80054ce <_printf_float+0xb6>
 80056ba:	f04f 0a00 	mov.w	sl, #0
 80056be:	f104 0b1a 	add.w	fp, r4, #26
 80056c2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80056c4:	425b      	negs	r3, r3
 80056c6:	4553      	cmp	r3, sl
 80056c8:	dc01      	bgt.n	80056ce <_printf_float+0x2b6>
 80056ca:	464b      	mov	r3, r9
 80056cc:	e793      	b.n	80055f6 <_printf_float+0x1de>
 80056ce:	2301      	movs	r3, #1
 80056d0:	465a      	mov	r2, fp
 80056d2:	4631      	mov	r1, r6
 80056d4:	4628      	mov	r0, r5
 80056d6:	47b8      	blx	r7
 80056d8:	3001      	adds	r0, #1
 80056da:	f43f aef8 	beq.w	80054ce <_printf_float+0xb6>
 80056de:	f10a 0a01 	add.w	sl, sl, #1
 80056e2:	e7ee      	b.n	80056c2 <_printf_float+0x2aa>
 80056e4:	7fefffff 	.word	0x7fefffff
 80056e8:	08007c5a 	.word	0x08007c5a
 80056ec:	08007c5e 	.word	0x08007c5e
 80056f0:	08007c62 	.word	0x08007c62
 80056f4:	08007c66 	.word	0x08007c66
 80056f8:	08007c6a 	.word	0x08007c6a
 80056fc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80056fe:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8005702:	4553      	cmp	r3, sl
 8005704:	bfa8      	it	ge
 8005706:	4653      	movge	r3, sl
 8005708:	2b00      	cmp	r3, #0
 800570a:	4699      	mov	r9, r3
 800570c:	dc36      	bgt.n	800577c <_printf_float+0x364>
 800570e:	f04f 0b00 	mov.w	fp, #0
 8005712:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005716:	f104 021a 	add.w	r2, r4, #26
 800571a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800571c:	930a      	str	r3, [sp, #40]	@ 0x28
 800571e:	eba3 0309 	sub.w	r3, r3, r9
 8005722:	455b      	cmp	r3, fp
 8005724:	dc31      	bgt.n	800578a <_printf_float+0x372>
 8005726:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005728:	459a      	cmp	sl, r3
 800572a:	dc3a      	bgt.n	80057a2 <_printf_float+0x38a>
 800572c:	6823      	ldr	r3, [r4, #0]
 800572e:	07da      	lsls	r2, r3, #31
 8005730:	d437      	bmi.n	80057a2 <_printf_float+0x38a>
 8005732:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005734:	ebaa 0903 	sub.w	r9, sl, r3
 8005738:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800573a:	ebaa 0303 	sub.w	r3, sl, r3
 800573e:	4599      	cmp	r9, r3
 8005740:	bfa8      	it	ge
 8005742:	4699      	movge	r9, r3
 8005744:	f1b9 0f00 	cmp.w	r9, #0
 8005748:	dc33      	bgt.n	80057b2 <_printf_float+0x39a>
 800574a:	f04f 0800 	mov.w	r8, #0
 800574e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005752:	f104 0b1a 	add.w	fp, r4, #26
 8005756:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005758:	ebaa 0303 	sub.w	r3, sl, r3
 800575c:	eba3 0309 	sub.w	r3, r3, r9
 8005760:	4543      	cmp	r3, r8
 8005762:	f77f af7a 	ble.w	800565a <_printf_float+0x242>
 8005766:	2301      	movs	r3, #1
 8005768:	465a      	mov	r2, fp
 800576a:	4631      	mov	r1, r6
 800576c:	4628      	mov	r0, r5
 800576e:	47b8      	blx	r7
 8005770:	3001      	adds	r0, #1
 8005772:	f43f aeac 	beq.w	80054ce <_printf_float+0xb6>
 8005776:	f108 0801 	add.w	r8, r8, #1
 800577a:	e7ec      	b.n	8005756 <_printf_float+0x33e>
 800577c:	4642      	mov	r2, r8
 800577e:	4631      	mov	r1, r6
 8005780:	4628      	mov	r0, r5
 8005782:	47b8      	blx	r7
 8005784:	3001      	adds	r0, #1
 8005786:	d1c2      	bne.n	800570e <_printf_float+0x2f6>
 8005788:	e6a1      	b.n	80054ce <_printf_float+0xb6>
 800578a:	2301      	movs	r3, #1
 800578c:	4631      	mov	r1, r6
 800578e:	4628      	mov	r0, r5
 8005790:	920a      	str	r2, [sp, #40]	@ 0x28
 8005792:	47b8      	blx	r7
 8005794:	3001      	adds	r0, #1
 8005796:	f43f ae9a 	beq.w	80054ce <_printf_float+0xb6>
 800579a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800579c:	f10b 0b01 	add.w	fp, fp, #1
 80057a0:	e7bb      	b.n	800571a <_printf_float+0x302>
 80057a2:	4631      	mov	r1, r6
 80057a4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80057a8:	4628      	mov	r0, r5
 80057aa:	47b8      	blx	r7
 80057ac:	3001      	adds	r0, #1
 80057ae:	d1c0      	bne.n	8005732 <_printf_float+0x31a>
 80057b0:	e68d      	b.n	80054ce <_printf_float+0xb6>
 80057b2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80057b4:	464b      	mov	r3, r9
 80057b6:	4631      	mov	r1, r6
 80057b8:	4628      	mov	r0, r5
 80057ba:	4442      	add	r2, r8
 80057bc:	47b8      	blx	r7
 80057be:	3001      	adds	r0, #1
 80057c0:	d1c3      	bne.n	800574a <_printf_float+0x332>
 80057c2:	e684      	b.n	80054ce <_printf_float+0xb6>
 80057c4:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80057c8:	f1ba 0f01 	cmp.w	sl, #1
 80057cc:	dc01      	bgt.n	80057d2 <_printf_float+0x3ba>
 80057ce:	07db      	lsls	r3, r3, #31
 80057d0:	d536      	bpl.n	8005840 <_printf_float+0x428>
 80057d2:	2301      	movs	r3, #1
 80057d4:	4642      	mov	r2, r8
 80057d6:	4631      	mov	r1, r6
 80057d8:	4628      	mov	r0, r5
 80057da:	47b8      	blx	r7
 80057dc:	3001      	adds	r0, #1
 80057de:	f43f ae76 	beq.w	80054ce <_printf_float+0xb6>
 80057e2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80057e6:	4631      	mov	r1, r6
 80057e8:	4628      	mov	r0, r5
 80057ea:	47b8      	blx	r7
 80057ec:	3001      	adds	r0, #1
 80057ee:	f43f ae6e 	beq.w	80054ce <_printf_float+0xb6>
 80057f2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80057f6:	2200      	movs	r2, #0
 80057f8:	2300      	movs	r3, #0
 80057fa:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 80057fe:	f7fb f8d3 	bl	80009a8 <__aeabi_dcmpeq>
 8005802:	b9c0      	cbnz	r0, 8005836 <_printf_float+0x41e>
 8005804:	4653      	mov	r3, sl
 8005806:	f108 0201 	add.w	r2, r8, #1
 800580a:	4631      	mov	r1, r6
 800580c:	4628      	mov	r0, r5
 800580e:	47b8      	blx	r7
 8005810:	3001      	adds	r0, #1
 8005812:	d10c      	bne.n	800582e <_printf_float+0x416>
 8005814:	e65b      	b.n	80054ce <_printf_float+0xb6>
 8005816:	2301      	movs	r3, #1
 8005818:	465a      	mov	r2, fp
 800581a:	4631      	mov	r1, r6
 800581c:	4628      	mov	r0, r5
 800581e:	47b8      	blx	r7
 8005820:	3001      	adds	r0, #1
 8005822:	f43f ae54 	beq.w	80054ce <_printf_float+0xb6>
 8005826:	f108 0801 	add.w	r8, r8, #1
 800582a:	45d0      	cmp	r8, sl
 800582c:	dbf3      	blt.n	8005816 <_printf_float+0x3fe>
 800582e:	464b      	mov	r3, r9
 8005830:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005834:	e6e0      	b.n	80055f8 <_printf_float+0x1e0>
 8005836:	f04f 0800 	mov.w	r8, #0
 800583a:	f104 0b1a 	add.w	fp, r4, #26
 800583e:	e7f4      	b.n	800582a <_printf_float+0x412>
 8005840:	2301      	movs	r3, #1
 8005842:	4642      	mov	r2, r8
 8005844:	e7e1      	b.n	800580a <_printf_float+0x3f2>
 8005846:	2301      	movs	r3, #1
 8005848:	464a      	mov	r2, r9
 800584a:	4631      	mov	r1, r6
 800584c:	4628      	mov	r0, r5
 800584e:	47b8      	blx	r7
 8005850:	3001      	adds	r0, #1
 8005852:	f43f ae3c 	beq.w	80054ce <_printf_float+0xb6>
 8005856:	f108 0801 	add.w	r8, r8, #1
 800585a:	68e3      	ldr	r3, [r4, #12]
 800585c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800585e:	1a5b      	subs	r3, r3, r1
 8005860:	4543      	cmp	r3, r8
 8005862:	dcf0      	bgt.n	8005846 <_printf_float+0x42e>
 8005864:	e6fd      	b.n	8005662 <_printf_float+0x24a>
 8005866:	f04f 0800 	mov.w	r8, #0
 800586a:	f104 0919 	add.w	r9, r4, #25
 800586e:	e7f4      	b.n	800585a <_printf_float+0x442>

08005870 <_printf_common>:
 8005870:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005874:	4616      	mov	r6, r2
 8005876:	4698      	mov	r8, r3
 8005878:	688a      	ldr	r2, [r1, #8]
 800587a:	690b      	ldr	r3, [r1, #16]
 800587c:	4607      	mov	r7, r0
 800587e:	4293      	cmp	r3, r2
 8005880:	bfb8      	it	lt
 8005882:	4613      	movlt	r3, r2
 8005884:	6033      	str	r3, [r6, #0]
 8005886:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800588a:	460c      	mov	r4, r1
 800588c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005890:	b10a      	cbz	r2, 8005896 <_printf_common+0x26>
 8005892:	3301      	adds	r3, #1
 8005894:	6033      	str	r3, [r6, #0]
 8005896:	6823      	ldr	r3, [r4, #0]
 8005898:	0699      	lsls	r1, r3, #26
 800589a:	bf42      	ittt	mi
 800589c:	6833      	ldrmi	r3, [r6, #0]
 800589e:	3302      	addmi	r3, #2
 80058a0:	6033      	strmi	r3, [r6, #0]
 80058a2:	6825      	ldr	r5, [r4, #0]
 80058a4:	f015 0506 	ands.w	r5, r5, #6
 80058a8:	d106      	bne.n	80058b8 <_printf_common+0x48>
 80058aa:	f104 0a19 	add.w	sl, r4, #25
 80058ae:	68e3      	ldr	r3, [r4, #12]
 80058b0:	6832      	ldr	r2, [r6, #0]
 80058b2:	1a9b      	subs	r3, r3, r2
 80058b4:	42ab      	cmp	r3, r5
 80058b6:	dc2b      	bgt.n	8005910 <_printf_common+0xa0>
 80058b8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80058bc:	6822      	ldr	r2, [r4, #0]
 80058be:	3b00      	subs	r3, #0
 80058c0:	bf18      	it	ne
 80058c2:	2301      	movne	r3, #1
 80058c4:	0692      	lsls	r2, r2, #26
 80058c6:	d430      	bmi.n	800592a <_printf_common+0xba>
 80058c8:	4641      	mov	r1, r8
 80058ca:	4638      	mov	r0, r7
 80058cc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80058d0:	47c8      	blx	r9
 80058d2:	3001      	adds	r0, #1
 80058d4:	d023      	beq.n	800591e <_printf_common+0xae>
 80058d6:	6823      	ldr	r3, [r4, #0]
 80058d8:	6922      	ldr	r2, [r4, #16]
 80058da:	f003 0306 	and.w	r3, r3, #6
 80058de:	2b04      	cmp	r3, #4
 80058e0:	bf14      	ite	ne
 80058e2:	2500      	movne	r5, #0
 80058e4:	6833      	ldreq	r3, [r6, #0]
 80058e6:	f04f 0600 	mov.w	r6, #0
 80058ea:	bf08      	it	eq
 80058ec:	68e5      	ldreq	r5, [r4, #12]
 80058ee:	f104 041a 	add.w	r4, r4, #26
 80058f2:	bf08      	it	eq
 80058f4:	1aed      	subeq	r5, r5, r3
 80058f6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80058fa:	bf08      	it	eq
 80058fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005900:	4293      	cmp	r3, r2
 8005902:	bfc4      	itt	gt
 8005904:	1a9b      	subgt	r3, r3, r2
 8005906:	18ed      	addgt	r5, r5, r3
 8005908:	42b5      	cmp	r5, r6
 800590a:	d11a      	bne.n	8005942 <_printf_common+0xd2>
 800590c:	2000      	movs	r0, #0
 800590e:	e008      	b.n	8005922 <_printf_common+0xb2>
 8005910:	2301      	movs	r3, #1
 8005912:	4652      	mov	r2, sl
 8005914:	4641      	mov	r1, r8
 8005916:	4638      	mov	r0, r7
 8005918:	47c8      	blx	r9
 800591a:	3001      	adds	r0, #1
 800591c:	d103      	bne.n	8005926 <_printf_common+0xb6>
 800591e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005922:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005926:	3501      	adds	r5, #1
 8005928:	e7c1      	b.n	80058ae <_printf_common+0x3e>
 800592a:	2030      	movs	r0, #48	@ 0x30
 800592c:	18e1      	adds	r1, r4, r3
 800592e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005932:	1c5a      	adds	r2, r3, #1
 8005934:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005938:	4422      	add	r2, r4
 800593a:	3302      	adds	r3, #2
 800593c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005940:	e7c2      	b.n	80058c8 <_printf_common+0x58>
 8005942:	2301      	movs	r3, #1
 8005944:	4622      	mov	r2, r4
 8005946:	4641      	mov	r1, r8
 8005948:	4638      	mov	r0, r7
 800594a:	47c8      	blx	r9
 800594c:	3001      	adds	r0, #1
 800594e:	d0e6      	beq.n	800591e <_printf_common+0xae>
 8005950:	3601      	adds	r6, #1
 8005952:	e7d9      	b.n	8005908 <_printf_common+0x98>

08005954 <_printf_i>:
 8005954:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005958:	7e0f      	ldrb	r7, [r1, #24]
 800595a:	4691      	mov	r9, r2
 800595c:	2f78      	cmp	r7, #120	@ 0x78
 800595e:	4680      	mov	r8, r0
 8005960:	460c      	mov	r4, r1
 8005962:	469a      	mov	sl, r3
 8005964:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005966:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800596a:	d807      	bhi.n	800597c <_printf_i+0x28>
 800596c:	2f62      	cmp	r7, #98	@ 0x62
 800596e:	d80a      	bhi.n	8005986 <_printf_i+0x32>
 8005970:	2f00      	cmp	r7, #0
 8005972:	f000 80d3 	beq.w	8005b1c <_printf_i+0x1c8>
 8005976:	2f58      	cmp	r7, #88	@ 0x58
 8005978:	f000 80ba 	beq.w	8005af0 <_printf_i+0x19c>
 800597c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005980:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005984:	e03a      	b.n	80059fc <_printf_i+0xa8>
 8005986:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800598a:	2b15      	cmp	r3, #21
 800598c:	d8f6      	bhi.n	800597c <_printf_i+0x28>
 800598e:	a101      	add	r1, pc, #4	@ (adr r1, 8005994 <_printf_i+0x40>)
 8005990:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005994:	080059ed 	.word	0x080059ed
 8005998:	08005a01 	.word	0x08005a01
 800599c:	0800597d 	.word	0x0800597d
 80059a0:	0800597d 	.word	0x0800597d
 80059a4:	0800597d 	.word	0x0800597d
 80059a8:	0800597d 	.word	0x0800597d
 80059ac:	08005a01 	.word	0x08005a01
 80059b0:	0800597d 	.word	0x0800597d
 80059b4:	0800597d 	.word	0x0800597d
 80059b8:	0800597d 	.word	0x0800597d
 80059bc:	0800597d 	.word	0x0800597d
 80059c0:	08005b03 	.word	0x08005b03
 80059c4:	08005a2b 	.word	0x08005a2b
 80059c8:	08005abd 	.word	0x08005abd
 80059cc:	0800597d 	.word	0x0800597d
 80059d0:	0800597d 	.word	0x0800597d
 80059d4:	08005b25 	.word	0x08005b25
 80059d8:	0800597d 	.word	0x0800597d
 80059dc:	08005a2b 	.word	0x08005a2b
 80059e0:	0800597d 	.word	0x0800597d
 80059e4:	0800597d 	.word	0x0800597d
 80059e8:	08005ac5 	.word	0x08005ac5
 80059ec:	6833      	ldr	r3, [r6, #0]
 80059ee:	1d1a      	adds	r2, r3, #4
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	6032      	str	r2, [r6, #0]
 80059f4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80059f8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80059fc:	2301      	movs	r3, #1
 80059fe:	e09e      	b.n	8005b3e <_printf_i+0x1ea>
 8005a00:	6833      	ldr	r3, [r6, #0]
 8005a02:	6820      	ldr	r0, [r4, #0]
 8005a04:	1d19      	adds	r1, r3, #4
 8005a06:	6031      	str	r1, [r6, #0]
 8005a08:	0606      	lsls	r6, r0, #24
 8005a0a:	d501      	bpl.n	8005a10 <_printf_i+0xbc>
 8005a0c:	681d      	ldr	r5, [r3, #0]
 8005a0e:	e003      	b.n	8005a18 <_printf_i+0xc4>
 8005a10:	0645      	lsls	r5, r0, #25
 8005a12:	d5fb      	bpl.n	8005a0c <_printf_i+0xb8>
 8005a14:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005a18:	2d00      	cmp	r5, #0
 8005a1a:	da03      	bge.n	8005a24 <_printf_i+0xd0>
 8005a1c:	232d      	movs	r3, #45	@ 0x2d
 8005a1e:	426d      	negs	r5, r5
 8005a20:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005a24:	230a      	movs	r3, #10
 8005a26:	4859      	ldr	r0, [pc, #356]	@ (8005b8c <_printf_i+0x238>)
 8005a28:	e011      	b.n	8005a4e <_printf_i+0xfa>
 8005a2a:	6821      	ldr	r1, [r4, #0]
 8005a2c:	6833      	ldr	r3, [r6, #0]
 8005a2e:	0608      	lsls	r0, r1, #24
 8005a30:	f853 5b04 	ldr.w	r5, [r3], #4
 8005a34:	d402      	bmi.n	8005a3c <_printf_i+0xe8>
 8005a36:	0649      	lsls	r1, r1, #25
 8005a38:	bf48      	it	mi
 8005a3a:	b2ad      	uxthmi	r5, r5
 8005a3c:	2f6f      	cmp	r7, #111	@ 0x6f
 8005a3e:	6033      	str	r3, [r6, #0]
 8005a40:	bf14      	ite	ne
 8005a42:	230a      	movne	r3, #10
 8005a44:	2308      	moveq	r3, #8
 8005a46:	4851      	ldr	r0, [pc, #324]	@ (8005b8c <_printf_i+0x238>)
 8005a48:	2100      	movs	r1, #0
 8005a4a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005a4e:	6866      	ldr	r6, [r4, #4]
 8005a50:	2e00      	cmp	r6, #0
 8005a52:	bfa8      	it	ge
 8005a54:	6821      	ldrge	r1, [r4, #0]
 8005a56:	60a6      	str	r6, [r4, #8]
 8005a58:	bfa4      	itt	ge
 8005a5a:	f021 0104 	bicge.w	r1, r1, #4
 8005a5e:	6021      	strge	r1, [r4, #0]
 8005a60:	b90d      	cbnz	r5, 8005a66 <_printf_i+0x112>
 8005a62:	2e00      	cmp	r6, #0
 8005a64:	d04b      	beq.n	8005afe <_printf_i+0x1aa>
 8005a66:	4616      	mov	r6, r2
 8005a68:	fbb5 f1f3 	udiv	r1, r5, r3
 8005a6c:	fb03 5711 	mls	r7, r3, r1, r5
 8005a70:	5dc7      	ldrb	r7, [r0, r7]
 8005a72:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005a76:	462f      	mov	r7, r5
 8005a78:	42bb      	cmp	r3, r7
 8005a7a:	460d      	mov	r5, r1
 8005a7c:	d9f4      	bls.n	8005a68 <_printf_i+0x114>
 8005a7e:	2b08      	cmp	r3, #8
 8005a80:	d10b      	bne.n	8005a9a <_printf_i+0x146>
 8005a82:	6823      	ldr	r3, [r4, #0]
 8005a84:	07df      	lsls	r7, r3, #31
 8005a86:	d508      	bpl.n	8005a9a <_printf_i+0x146>
 8005a88:	6923      	ldr	r3, [r4, #16]
 8005a8a:	6861      	ldr	r1, [r4, #4]
 8005a8c:	4299      	cmp	r1, r3
 8005a8e:	bfde      	ittt	le
 8005a90:	2330      	movle	r3, #48	@ 0x30
 8005a92:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005a96:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8005a9a:	1b92      	subs	r2, r2, r6
 8005a9c:	6122      	str	r2, [r4, #16]
 8005a9e:	464b      	mov	r3, r9
 8005aa0:	4621      	mov	r1, r4
 8005aa2:	4640      	mov	r0, r8
 8005aa4:	f8cd a000 	str.w	sl, [sp]
 8005aa8:	aa03      	add	r2, sp, #12
 8005aaa:	f7ff fee1 	bl	8005870 <_printf_common>
 8005aae:	3001      	adds	r0, #1
 8005ab0:	d14a      	bne.n	8005b48 <_printf_i+0x1f4>
 8005ab2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005ab6:	b004      	add	sp, #16
 8005ab8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005abc:	6823      	ldr	r3, [r4, #0]
 8005abe:	f043 0320 	orr.w	r3, r3, #32
 8005ac2:	6023      	str	r3, [r4, #0]
 8005ac4:	2778      	movs	r7, #120	@ 0x78
 8005ac6:	4832      	ldr	r0, [pc, #200]	@ (8005b90 <_printf_i+0x23c>)
 8005ac8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005acc:	6823      	ldr	r3, [r4, #0]
 8005ace:	6831      	ldr	r1, [r6, #0]
 8005ad0:	061f      	lsls	r7, r3, #24
 8005ad2:	f851 5b04 	ldr.w	r5, [r1], #4
 8005ad6:	d402      	bmi.n	8005ade <_printf_i+0x18a>
 8005ad8:	065f      	lsls	r7, r3, #25
 8005ada:	bf48      	it	mi
 8005adc:	b2ad      	uxthmi	r5, r5
 8005ade:	6031      	str	r1, [r6, #0]
 8005ae0:	07d9      	lsls	r1, r3, #31
 8005ae2:	bf44      	itt	mi
 8005ae4:	f043 0320 	orrmi.w	r3, r3, #32
 8005ae8:	6023      	strmi	r3, [r4, #0]
 8005aea:	b11d      	cbz	r5, 8005af4 <_printf_i+0x1a0>
 8005aec:	2310      	movs	r3, #16
 8005aee:	e7ab      	b.n	8005a48 <_printf_i+0xf4>
 8005af0:	4826      	ldr	r0, [pc, #152]	@ (8005b8c <_printf_i+0x238>)
 8005af2:	e7e9      	b.n	8005ac8 <_printf_i+0x174>
 8005af4:	6823      	ldr	r3, [r4, #0]
 8005af6:	f023 0320 	bic.w	r3, r3, #32
 8005afa:	6023      	str	r3, [r4, #0]
 8005afc:	e7f6      	b.n	8005aec <_printf_i+0x198>
 8005afe:	4616      	mov	r6, r2
 8005b00:	e7bd      	b.n	8005a7e <_printf_i+0x12a>
 8005b02:	6833      	ldr	r3, [r6, #0]
 8005b04:	6825      	ldr	r5, [r4, #0]
 8005b06:	1d18      	adds	r0, r3, #4
 8005b08:	6961      	ldr	r1, [r4, #20]
 8005b0a:	6030      	str	r0, [r6, #0]
 8005b0c:	062e      	lsls	r6, r5, #24
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	d501      	bpl.n	8005b16 <_printf_i+0x1c2>
 8005b12:	6019      	str	r1, [r3, #0]
 8005b14:	e002      	b.n	8005b1c <_printf_i+0x1c8>
 8005b16:	0668      	lsls	r0, r5, #25
 8005b18:	d5fb      	bpl.n	8005b12 <_printf_i+0x1be>
 8005b1a:	8019      	strh	r1, [r3, #0]
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	4616      	mov	r6, r2
 8005b20:	6123      	str	r3, [r4, #16]
 8005b22:	e7bc      	b.n	8005a9e <_printf_i+0x14a>
 8005b24:	6833      	ldr	r3, [r6, #0]
 8005b26:	2100      	movs	r1, #0
 8005b28:	1d1a      	adds	r2, r3, #4
 8005b2a:	6032      	str	r2, [r6, #0]
 8005b2c:	681e      	ldr	r6, [r3, #0]
 8005b2e:	6862      	ldr	r2, [r4, #4]
 8005b30:	4630      	mov	r0, r6
 8005b32:	f000 f9b4 	bl	8005e9e <memchr>
 8005b36:	b108      	cbz	r0, 8005b3c <_printf_i+0x1e8>
 8005b38:	1b80      	subs	r0, r0, r6
 8005b3a:	6060      	str	r0, [r4, #4]
 8005b3c:	6863      	ldr	r3, [r4, #4]
 8005b3e:	6123      	str	r3, [r4, #16]
 8005b40:	2300      	movs	r3, #0
 8005b42:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005b46:	e7aa      	b.n	8005a9e <_printf_i+0x14a>
 8005b48:	4632      	mov	r2, r6
 8005b4a:	4649      	mov	r1, r9
 8005b4c:	4640      	mov	r0, r8
 8005b4e:	6923      	ldr	r3, [r4, #16]
 8005b50:	47d0      	blx	sl
 8005b52:	3001      	adds	r0, #1
 8005b54:	d0ad      	beq.n	8005ab2 <_printf_i+0x15e>
 8005b56:	6823      	ldr	r3, [r4, #0]
 8005b58:	079b      	lsls	r3, r3, #30
 8005b5a:	d413      	bmi.n	8005b84 <_printf_i+0x230>
 8005b5c:	68e0      	ldr	r0, [r4, #12]
 8005b5e:	9b03      	ldr	r3, [sp, #12]
 8005b60:	4298      	cmp	r0, r3
 8005b62:	bfb8      	it	lt
 8005b64:	4618      	movlt	r0, r3
 8005b66:	e7a6      	b.n	8005ab6 <_printf_i+0x162>
 8005b68:	2301      	movs	r3, #1
 8005b6a:	4632      	mov	r2, r6
 8005b6c:	4649      	mov	r1, r9
 8005b6e:	4640      	mov	r0, r8
 8005b70:	47d0      	blx	sl
 8005b72:	3001      	adds	r0, #1
 8005b74:	d09d      	beq.n	8005ab2 <_printf_i+0x15e>
 8005b76:	3501      	adds	r5, #1
 8005b78:	68e3      	ldr	r3, [r4, #12]
 8005b7a:	9903      	ldr	r1, [sp, #12]
 8005b7c:	1a5b      	subs	r3, r3, r1
 8005b7e:	42ab      	cmp	r3, r5
 8005b80:	dcf2      	bgt.n	8005b68 <_printf_i+0x214>
 8005b82:	e7eb      	b.n	8005b5c <_printf_i+0x208>
 8005b84:	2500      	movs	r5, #0
 8005b86:	f104 0619 	add.w	r6, r4, #25
 8005b8a:	e7f5      	b.n	8005b78 <_printf_i+0x224>
 8005b8c:	08007c6c 	.word	0x08007c6c
 8005b90:	08007c7d 	.word	0x08007c7d

08005b94 <std>:
 8005b94:	2300      	movs	r3, #0
 8005b96:	b510      	push	{r4, lr}
 8005b98:	4604      	mov	r4, r0
 8005b9a:	e9c0 3300 	strd	r3, r3, [r0]
 8005b9e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005ba2:	6083      	str	r3, [r0, #8]
 8005ba4:	8181      	strh	r1, [r0, #12]
 8005ba6:	6643      	str	r3, [r0, #100]	@ 0x64
 8005ba8:	81c2      	strh	r2, [r0, #14]
 8005baa:	6183      	str	r3, [r0, #24]
 8005bac:	4619      	mov	r1, r3
 8005bae:	2208      	movs	r2, #8
 8005bb0:	305c      	adds	r0, #92	@ 0x5c
 8005bb2:	f000 f8f4 	bl	8005d9e <memset>
 8005bb6:	4b0d      	ldr	r3, [pc, #52]	@ (8005bec <std+0x58>)
 8005bb8:	6224      	str	r4, [r4, #32]
 8005bba:	6263      	str	r3, [r4, #36]	@ 0x24
 8005bbc:	4b0c      	ldr	r3, [pc, #48]	@ (8005bf0 <std+0x5c>)
 8005bbe:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005bc0:	4b0c      	ldr	r3, [pc, #48]	@ (8005bf4 <std+0x60>)
 8005bc2:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005bc4:	4b0c      	ldr	r3, [pc, #48]	@ (8005bf8 <std+0x64>)
 8005bc6:	6323      	str	r3, [r4, #48]	@ 0x30
 8005bc8:	4b0c      	ldr	r3, [pc, #48]	@ (8005bfc <std+0x68>)
 8005bca:	429c      	cmp	r4, r3
 8005bcc:	d006      	beq.n	8005bdc <std+0x48>
 8005bce:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005bd2:	4294      	cmp	r4, r2
 8005bd4:	d002      	beq.n	8005bdc <std+0x48>
 8005bd6:	33d0      	adds	r3, #208	@ 0xd0
 8005bd8:	429c      	cmp	r4, r3
 8005bda:	d105      	bne.n	8005be8 <std+0x54>
 8005bdc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005be0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005be4:	f000 b958 	b.w	8005e98 <__retarget_lock_init_recursive>
 8005be8:	bd10      	pop	{r4, pc}
 8005bea:	bf00      	nop
 8005bec:	08005d19 	.word	0x08005d19
 8005bf0:	08005d3b 	.word	0x08005d3b
 8005bf4:	08005d73 	.word	0x08005d73
 8005bf8:	08005d97 	.word	0x08005d97
 8005bfc:	20000364 	.word	0x20000364

08005c00 <stdio_exit_handler>:
 8005c00:	4a02      	ldr	r2, [pc, #8]	@ (8005c0c <stdio_exit_handler+0xc>)
 8005c02:	4903      	ldr	r1, [pc, #12]	@ (8005c10 <stdio_exit_handler+0x10>)
 8005c04:	4803      	ldr	r0, [pc, #12]	@ (8005c14 <stdio_exit_handler+0x14>)
 8005c06:	f000 b869 	b.w	8005cdc <_fwalk_sglue>
 8005c0a:	bf00      	nop
 8005c0c:	2000000c 	.word	0x2000000c
 8005c10:	0800755d 	.word	0x0800755d
 8005c14:	2000001c 	.word	0x2000001c

08005c18 <cleanup_stdio>:
 8005c18:	6841      	ldr	r1, [r0, #4]
 8005c1a:	4b0c      	ldr	r3, [pc, #48]	@ (8005c4c <cleanup_stdio+0x34>)
 8005c1c:	b510      	push	{r4, lr}
 8005c1e:	4299      	cmp	r1, r3
 8005c20:	4604      	mov	r4, r0
 8005c22:	d001      	beq.n	8005c28 <cleanup_stdio+0x10>
 8005c24:	f001 fc9a 	bl	800755c <_fflush_r>
 8005c28:	68a1      	ldr	r1, [r4, #8]
 8005c2a:	4b09      	ldr	r3, [pc, #36]	@ (8005c50 <cleanup_stdio+0x38>)
 8005c2c:	4299      	cmp	r1, r3
 8005c2e:	d002      	beq.n	8005c36 <cleanup_stdio+0x1e>
 8005c30:	4620      	mov	r0, r4
 8005c32:	f001 fc93 	bl	800755c <_fflush_r>
 8005c36:	68e1      	ldr	r1, [r4, #12]
 8005c38:	4b06      	ldr	r3, [pc, #24]	@ (8005c54 <cleanup_stdio+0x3c>)
 8005c3a:	4299      	cmp	r1, r3
 8005c3c:	d004      	beq.n	8005c48 <cleanup_stdio+0x30>
 8005c3e:	4620      	mov	r0, r4
 8005c40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c44:	f001 bc8a 	b.w	800755c <_fflush_r>
 8005c48:	bd10      	pop	{r4, pc}
 8005c4a:	bf00      	nop
 8005c4c:	20000364 	.word	0x20000364
 8005c50:	200003cc 	.word	0x200003cc
 8005c54:	20000434 	.word	0x20000434

08005c58 <global_stdio_init.part.0>:
 8005c58:	b510      	push	{r4, lr}
 8005c5a:	4b0b      	ldr	r3, [pc, #44]	@ (8005c88 <global_stdio_init.part.0+0x30>)
 8005c5c:	4c0b      	ldr	r4, [pc, #44]	@ (8005c8c <global_stdio_init.part.0+0x34>)
 8005c5e:	4a0c      	ldr	r2, [pc, #48]	@ (8005c90 <global_stdio_init.part.0+0x38>)
 8005c60:	4620      	mov	r0, r4
 8005c62:	601a      	str	r2, [r3, #0]
 8005c64:	2104      	movs	r1, #4
 8005c66:	2200      	movs	r2, #0
 8005c68:	f7ff ff94 	bl	8005b94 <std>
 8005c6c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005c70:	2201      	movs	r2, #1
 8005c72:	2109      	movs	r1, #9
 8005c74:	f7ff ff8e 	bl	8005b94 <std>
 8005c78:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005c7c:	2202      	movs	r2, #2
 8005c7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c82:	2112      	movs	r1, #18
 8005c84:	f7ff bf86 	b.w	8005b94 <std>
 8005c88:	2000049c 	.word	0x2000049c
 8005c8c:	20000364 	.word	0x20000364
 8005c90:	08005c01 	.word	0x08005c01

08005c94 <__sfp_lock_acquire>:
 8005c94:	4801      	ldr	r0, [pc, #4]	@ (8005c9c <__sfp_lock_acquire+0x8>)
 8005c96:	f000 b900 	b.w	8005e9a <__retarget_lock_acquire_recursive>
 8005c9a:	bf00      	nop
 8005c9c:	200004a5 	.word	0x200004a5

08005ca0 <__sfp_lock_release>:
 8005ca0:	4801      	ldr	r0, [pc, #4]	@ (8005ca8 <__sfp_lock_release+0x8>)
 8005ca2:	f000 b8fb 	b.w	8005e9c <__retarget_lock_release_recursive>
 8005ca6:	bf00      	nop
 8005ca8:	200004a5 	.word	0x200004a5

08005cac <__sinit>:
 8005cac:	b510      	push	{r4, lr}
 8005cae:	4604      	mov	r4, r0
 8005cb0:	f7ff fff0 	bl	8005c94 <__sfp_lock_acquire>
 8005cb4:	6a23      	ldr	r3, [r4, #32]
 8005cb6:	b11b      	cbz	r3, 8005cc0 <__sinit+0x14>
 8005cb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005cbc:	f7ff bff0 	b.w	8005ca0 <__sfp_lock_release>
 8005cc0:	4b04      	ldr	r3, [pc, #16]	@ (8005cd4 <__sinit+0x28>)
 8005cc2:	6223      	str	r3, [r4, #32]
 8005cc4:	4b04      	ldr	r3, [pc, #16]	@ (8005cd8 <__sinit+0x2c>)
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d1f5      	bne.n	8005cb8 <__sinit+0xc>
 8005ccc:	f7ff ffc4 	bl	8005c58 <global_stdio_init.part.0>
 8005cd0:	e7f2      	b.n	8005cb8 <__sinit+0xc>
 8005cd2:	bf00      	nop
 8005cd4:	08005c19 	.word	0x08005c19
 8005cd8:	2000049c 	.word	0x2000049c

08005cdc <_fwalk_sglue>:
 8005cdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005ce0:	4607      	mov	r7, r0
 8005ce2:	4688      	mov	r8, r1
 8005ce4:	4614      	mov	r4, r2
 8005ce6:	2600      	movs	r6, #0
 8005ce8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005cec:	f1b9 0901 	subs.w	r9, r9, #1
 8005cf0:	d505      	bpl.n	8005cfe <_fwalk_sglue+0x22>
 8005cf2:	6824      	ldr	r4, [r4, #0]
 8005cf4:	2c00      	cmp	r4, #0
 8005cf6:	d1f7      	bne.n	8005ce8 <_fwalk_sglue+0xc>
 8005cf8:	4630      	mov	r0, r6
 8005cfa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005cfe:	89ab      	ldrh	r3, [r5, #12]
 8005d00:	2b01      	cmp	r3, #1
 8005d02:	d907      	bls.n	8005d14 <_fwalk_sglue+0x38>
 8005d04:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005d08:	3301      	adds	r3, #1
 8005d0a:	d003      	beq.n	8005d14 <_fwalk_sglue+0x38>
 8005d0c:	4629      	mov	r1, r5
 8005d0e:	4638      	mov	r0, r7
 8005d10:	47c0      	blx	r8
 8005d12:	4306      	orrs	r6, r0
 8005d14:	3568      	adds	r5, #104	@ 0x68
 8005d16:	e7e9      	b.n	8005cec <_fwalk_sglue+0x10>

08005d18 <__sread>:
 8005d18:	b510      	push	{r4, lr}
 8005d1a:	460c      	mov	r4, r1
 8005d1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d20:	f000 f86c 	bl	8005dfc <_read_r>
 8005d24:	2800      	cmp	r0, #0
 8005d26:	bfab      	itete	ge
 8005d28:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005d2a:	89a3      	ldrhlt	r3, [r4, #12]
 8005d2c:	181b      	addge	r3, r3, r0
 8005d2e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005d32:	bfac      	ite	ge
 8005d34:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005d36:	81a3      	strhlt	r3, [r4, #12]
 8005d38:	bd10      	pop	{r4, pc}

08005d3a <__swrite>:
 8005d3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d3e:	461f      	mov	r7, r3
 8005d40:	898b      	ldrh	r3, [r1, #12]
 8005d42:	4605      	mov	r5, r0
 8005d44:	05db      	lsls	r3, r3, #23
 8005d46:	460c      	mov	r4, r1
 8005d48:	4616      	mov	r6, r2
 8005d4a:	d505      	bpl.n	8005d58 <__swrite+0x1e>
 8005d4c:	2302      	movs	r3, #2
 8005d4e:	2200      	movs	r2, #0
 8005d50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d54:	f000 f840 	bl	8005dd8 <_lseek_r>
 8005d58:	89a3      	ldrh	r3, [r4, #12]
 8005d5a:	4632      	mov	r2, r6
 8005d5c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005d60:	81a3      	strh	r3, [r4, #12]
 8005d62:	4628      	mov	r0, r5
 8005d64:	463b      	mov	r3, r7
 8005d66:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005d6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005d6e:	f000 b857 	b.w	8005e20 <_write_r>

08005d72 <__sseek>:
 8005d72:	b510      	push	{r4, lr}
 8005d74:	460c      	mov	r4, r1
 8005d76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d7a:	f000 f82d 	bl	8005dd8 <_lseek_r>
 8005d7e:	1c43      	adds	r3, r0, #1
 8005d80:	89a3      	ldrh	r3, [r4, #12]
 8005d82:	bf15      	itete	ne
 8005d84:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005d86:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005d8a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005d8e:	81a3      	strheq	r3, [r4, #12]
 8005d90:	bf18      	it	ne
 8005d92:	81a3      	strhne	r3, [r4, #12]
 8005d94:	bd10      	pop	{r4, pc}

08005d96 <__sclose>:
 8005d96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d9a:	f000 b80d 	b.w	8005db8 <_close_r>

08005d9e <memset>:
 8005d9e:	4603      	mov	r3, r0
 8005da0:	4402      	add	r2, r0
 8005da2:	4293      	cmp	r3, r2
 8005da4:	d100      	bne.n	8005da8 <memset+0xa>
 8005da6:	4770      	bx	lr
 8005da8:	f803 1b01 	strb.w	r1, [r3], #1
 8005dac:	e7f9      	b.n	8005da2 <memset+0x4>
	...

08005db0 <_localeconv_r>:
 8005db0:	4800      	ldr	r0, [pc, #0]	@ (8005db4 <_localeconv_r+0x4>)
 8005db2:	4770      	bx	lr
 8005db4:	20000158 	.word	0x20000158

08005db8 <_close_r>:
 8005db8:	b538      	push	{r3, r4, r5, lr}
 8005dba:	2300      	movs	r3, #0
 8005dbc:	4d05      	ldr	r5, [pc, #20]	@ (8005dd4 <_close_r+0x1c>)
 8005dbe:	4604      	mov	r4, r0
 8005dc0:	4608      	mov	r0, r1
 8005dc2:	602b      	str	r3, [r5, #0]
 8005dc4:	f7fb fd3d 	bl	8001842 <_close>
 8005dc8:	1c43      	adds	r3, r0, #1
 8005dca:	d102      	bne.n	8005dd2 <_close_r+0x1a>
 8005dcc:	682b      	ldr	r3, [r5, #0]
 8005dce:	b103      	cbz	r3, 8005dd2 <_close_r+0x1a>
 8005dd0:	6023      	str	r3, [r4, #0]
 8005dd2:	bd38      	pop	{r3, r4, r5, pc}
 8005dd4:	200004a0 	.word	0x200004a0

08005dd8 <_lseek_r>:
 8005dd8:	b538      	push	{r3, r4, r5, lr}
 8005dda:	4604      	mov	r4, r0
 8005ddc:	4608      	mov	r0, r1
 8005dde:	4611      	mov	r1, r2
 8005de0:	2200      	movs	r2, #0
 8005de2:	4d05      	ldr	r5, [pc, #20]	@ (8005df8 <_lseek_r+0x20>)
 8005de4:	602a      	str	r2, [r5, #0]
 8005de6:	461a      	mov	r2, r3
 8005de8:	f7fb fd4f 	bl	800188a <_lseek>
 8005dec:	1c43      	adds	r3, r0, #1
 8005dee:	d102      	bne.n	8005df6 <_lseek_r+0x1e>
 8005df0:	682b      	ldr	r3, [r5, #0]
 8005df2:	b103      	cbz	r3, 8005df6 <_lseek_r+0x1e>
 8005df4:	6023      	str	r3, [r4, #0]
 8005df6:	bd38      	pop	{r3, r4, r5, pc}
 8005df8:	200004a0 	.word	0x200004a0

08005dfc <_read_r>:
 8005dfc:	b538      	push	{r3, r4, r5, lr}
 8005dfe:	4604      	mov	r4, r0
 8005e00:	4608      	mov	r0, r1
 8005e02:	4611      	mov	r1, r2
 8005e04:	2200      	movs	r2, #0
 8005e06:	4d05      	ldr	r5, [pc, #20]	@ (8005e1c <_read_r+0x20>)
 8005e08:	602a      	str	r2, [r5, #0]
 8005e0a:	461a      	mov	r2, r3
 8005e0c:	f7fb fce0 	bl	80017d0 <_read>
 8005e10:	1c43      	adds	r3, r0, #1
 8005e12:	d102      	bne.n	8005e1a <_read_r+0x1e>
 8005e14:	682b      	ldr	r3, [r5, #0]
 8005e16:	b103      	cbz	r3, 8005e1a <_read_r+0x1e>
 8005e18:	6023      	str	r3, [r4, #0]
 8005e1a:	bd38      	pop	{r3, r4, r5, pc}
 8005e1c:	200004a0 	.word	0x200004a0

08005e20 <_write_r>:
 8005e20:	b538      	push	{r3, r4, r5, lr}
 8005e22:	4604      	mov	r4, r0
 8005e24:	4608      	mov	r0, r1
 8005e26:	4611      	mov	r1, r2
 8005e28:	2200      	movs	r2, #0
 8005e2a:	4d05      	ldr	r5, [pc, #20]	@ (8005e40 <_write_r+0x20>)
 8005e2c:	602a      	str	r2, [r5, #0]
 8005e2e:	461a      	mov	r2, r3
 8005e30:	f7fb fceb 	bl	800180a <_write>
 8005e34:	1c43      	adds	r3, r0, #1
 8005e36:	d102      	bne.n	8005e3e <_write_r+0x1e>
 8005e38:	682b      	ldr	r3, [r5, #0]
 8005e3a:	b103      	cbz	r3, 8005e3e <_write_r+0x1e>
 8005e3c:	6023      	str	r3, [r4, #0]
 8005e3e:	bd38      	pop	{r3, r4, r5, pc}
 8005e40:	200004a0 	.word	0x200004a0

08005e44 <__errno>:
 8005e44:	4b01      	ldr	r3, [pc, #4]	@ (8005e4c <__errno+0x8>)
 8005e46:	6818      	ldr	r0, [r3, #0]
 8005e48:	4770      	bx	lr
 8005e4a:	bf00      	nop
 8005e4c:	20000018 	.word	0x20000018

08005e50 <__libc_init_array>:
 8005e50:	b570      	push	{r4, r5, r6, lr}
 8005e52:	2600      	movs	r6, #0
 8005e54:	4d0c      	ldr	r5, [pc, #48]	@ (8005e88 <__libc_init_array+0x38>)
 8005e56:	4c0d      	ldr	r4, [pc, #52]	@ (8005e8c <__libc_init_array+0x3c>)
 8005e58:	1b64      	subs	r4, r4, r5
 8005e5a:	10a4      	asrs	r4, r4, #2
 8005e5c:	42a6      	cmp	r6, r4
 8005e5e:	d109      	bne.n	8005e74 <__libc_init_array+0x24>
 8005e60:	f001 fec8 	bl	8007bf4 <_init>
 8005e64:	2600      	movs	r6, #0
 8005e66:	4d0a      	ldr	r5, [pc, #40]	@ (8005e90 <__libc_init_array+0x40>)
 8005e68:	4c0a      	ldr	r4, [pc, #40]	@ (8005e94 <__libc_init_array+0x44>)
 8005e6a:	1b64      	subs	r4, r4, r5
 8005e6c:	10a4      	asrs	r4, r4, #2
 8005e6e:	42a6      	cmp	r6, r4
 8005e70:	d105      	bne.n	8005e7e <__libc_init_array+0x2e>
 8005e72:	bd70      	pop	{r4, r5, r6, pc}
 8005e74:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e78:	4798      	blx	r3
 8005e7a:	3601      	adds	r6, #1
 8005e7c:	e7ee      	b.n	8005e5c <__libc_init_array+0xc>
 8005e7e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e82:	4798      	blx	r3
 8005e84:	3601      	adds	r6, #1
 8005e86:	e7f2      	b.n	8005e6e <__libc_init_array+0x1e>
 8005e88:	08007fd0 	.word	0x08007fd0
 8005e8c:	08007fd0 	.word	0x08007fd0
 8005e90:	08007fd0 	.word	0x08007fd0
 8005e94:	08007fd4 	.word	0x08007fd4

08005e98 <__retarget_lock_init_recursive>:
 8005e98:	4770      	bx	lr

08005e9a <__retarget_lock_acquire_recursive>:
 8005e9a:	4770      	bx	lr

08005e9c <__retarget_lock_release_recursive>:
 8005e9c:	4770      	bx	lr

08005e9e <memchr>:
 8005e9e:	4603      	mov	r3, r0
 8005ea0:	b510      	push	{r4, lr}
 8005ea2:	b2c9      	uxtb	r1, r1
 8005ea4:	4402      	add	r2, r0
 8005ea6:	4293      	cmp	r3, r2
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	d101      	bne.n	8005eb0 <memchr+0x12>
 8005eac:	2000      	movs	r0, #0
 8005eae:	e003      	b.n	8005eb8 <memchr+0x1a>
 8005eb0:	7804      	ldrb	r4, [r0, #0]
 8005eb2:	3301      	adds	r3, #1
 8005eb4:	428c      	cmp	r4, r1
 8005eb6:	d1f6      	bne.n	8005ea6 <memchr+0x8>
 8005eb8:	bd10      	pop	{r4, pc}

08005eba <quorem>:
 8005eba:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ebe:	6903      	ldr	r3, [r0, #16]
 8005ec0:	690c      	ldr	r4, [r1, #16]
 8005ec2:	4607      	mov	r7, r0
 8005ec4:	42a3      	cmp	r3, r4
 8005ec6:	db7e      	blt.n	8005fc6 <quorem+0x10c>
 8005ec8:	3c01      	subs	r4, #1
 8005eca:	00a3      	lsls	r3, r4, #2
 8005ecc:	f100 0514 	add.w	r5, r0, #20
 8005ed0:	f101 0814 	add.w	r8, r1, #20
 8005ed4:	9300      	str	r3, [sp, #0]
 8005ed6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005eda:	9301      	str	r3, [sp, #4]
 8005edc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005ee0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005ee4:	3301      	adds	r3, #1
 8005ee6:	429a      	cmp	r2, r3
 8005ee8:	fbb2 f6f3 	udiv	r6, r2, r3
 8005eec:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005ef0:	d32e      	bcc.n	8005f50 <quorem+0x96>
 8005ef2:	f04f 0a00 	mov.w	sl, #0
 8005ef6:	46c4      	mov	ip, r8
 8005ef8:	46ae      	mov	lr, r5
 8005efa:	46d3      	mov	fp, sl
 8005efc:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005f00:	b298      	uxth	r0, r3
 8005f02:	fb06 a000 	mla	r0, r6, r0, sl
 8005f06:	0c1b      	lsrs	r3, r3, #16
 8005f08:	0c02      	lsrs	r2, r0, #16
 8005f0a:	fb06 2303 	mla	r3, r6, r3, r2
 8005f0e:	f8de 2000 	ldr.w	r2, [lr]
 8005f12:	b280      	uxth	r0, r0
 8005f14:	b292      	uxth	r2, r2
 8005f16:	1a12      	subs	r2, r2, r0
 8005f18:	445a      	add	r2, fp
 8005f1a:	f8de 0000 	ldr.w	r0, [lr]
 8005f1e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005f22:	b29b      	uxth	r3, r3
 8005f24:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8005f28:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8005f2c:	b292      	uxth	r2, r2
 8005f2e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005f32:	45e1      	cmp	r9, ip
 8005f34:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8005f38:	f84e 2b04 	str.w	r2, [lr], #4
 8005f3c:	d2de      	bcs.n	8005efc <quorem+0x42>
 8005f3e:	9b00      	ldr	r3, [sp, #0]
 8005f40:	58eb      	ldr	r3, [r5, r3]
 8005f42:	b92b      	cbnz	r3, 8005f50 <quorem+0x96>
 8005f44:	9b01      	ldr	r3, [sp, #4]
 8005f46:	3b04      	subs	r3, #4
 8005f48:	429d      	cmp	r5, r3
 8005f4a:	461a      	mov	r2, r3
 8005f4c:	d32f      	bcc.n	8005fae <quorem+0xf4>
 8005f4e:	613c      	str	r4, [r7, #16]
 8005f50:	4638      	mov	r0, r7
 8005f52:	f001 f97b 	bl	800724c <__mcmp>
 8005f56:	2800      	cmp	r0, #0
 8005f58:	db25      	blt.n	8005fa6 <quorem+0xec>
 8005f5a:	4629      	mov	r1, r5
 8005f5c:	2000      	movs	r0, #0
 8005f5e:	f858 2b04 	ldr.w	r2, [r8], #4
 8005f62:	f8d1 c000 	ldr.w	ip, [r1]
 8005f66:	fa1f fe82 	uxth.w	lr, r2
 8005f6a:	fa1f f38c 	uxth.w	r3, ip
 8005f6e:	eba3 030e 	sub.w	r3, r3, lr
 8005f72:	4403      	add	r3, r0
 8005f74:	0c12      	lsrs	r2, r2, #16
 8005f76:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8005f7a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8005f7e:	b29b      	uxth	r3, r3
 8005f80:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005f84:	45c1      	cmp	r9, r8
 8005f86:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005f8a:	f841 3b04 	str.w	r3, [r1], #4
 8005f8e:	d2e6      	bcs.n	8005f5e <quorem+0xa4>
 8005f90:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005f94:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005f98:	b922      	cbnz	r2, 8005fa4 <quorem+0xea>
 8005f9a:	3b04      	subs	r3, #4
 8005f9c:	429d      	cmp	r5, r3
 8005f9e:	461a      	mov	r2, r3
 8005fa0:	d30b      	bcc.n	8005fba <quorem+0x100>
 8005fa2:	613c      	str	r4, [r7, #16]
 8005fa4:	3601      	adds	r6, #1
 8005fa6:	4630      	mov	r0, r6
 8005fa8:	b003      	add	sp, #12
 8005faa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005fae:	6812      	ldr	r2, [r2, #0]
 8005fb0:	3b04      	subs	r3, #4
 8005fb2:	2a00      	cmp	r2, #0
 8005fb4:	d1cb      	bne.n	8005f4e <quorem+0x94>
 8005fb6:	3c01      	subs	r4, #1
 8005fb8:	e7c6      	b.n	8005f48 <quorem+0x8e>
 8005fba:	6812      	ldr	r2, [r2, #0]
 8005fbc:	3b04      	subs	r3, #4
 8005fbe:	2a00      	cmp	r2, #0
 8005fc0:	d1ef      	bne.n	8005fa2 <quorem+0xe8>
 8005fc2:	3c01      	subs	r4, #1
 8005fc4:	e7ea      	b.n	8005f9c <quorem+0xe2>
 8005fc6:	2000      	movs	r0, #0
 8005fc8:	e7ee      	b.n	8005fa8 <quorem+0xee>
 8005fca:	0000      	movs	r0, r0
 8005fcc:	0000      	movs	r0, r0
	...

08005fd0 <_dtoa_r>:
 8005fd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fd4:	4614      	mov	r4, r2
 8005fd6:	461d      	mov	r5, r3
 8005fd8:	69c7      	ldr	r7, [r0, #28]
 8005fda:	b097      	sub	sp, #92	@ 0x5c
 8005fdc:	4683      	mov	fp, r0
 8005fde:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8005fe2:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8005fe4:	b97f      	cbnz	r7, 8006006 <_dtoa_r+0x36>
 8005fe6:	2010      	movs	r0, #16
 8005fe8:	f000 fe02 	bl	8006bf0 <malloc>
 8005fec:	4602      	mov	r2, r0
 8005fee:	f8cb 001c 	str.w	r0, [fp, #28]
 8005ff2:	b920      	cbnz	r0, 8005ffe <_dtoa_r+0x2e>
 8005ff4:	21ef      	movs	r1, #239	@ 0xef
 8005ff6:	4ba8      	ldr	r3, [pc, #672]	@ (8006298 <_dtoa_r+0x2c8>)
 8005ff8:	48a8      	ldr	r0, [pc, #672]	@ (800629c <_dtoa_r+0x2cc>)
 8005ffa:	f001 faf5 	bl	80075e8 <__assert_func>
 8005ffe:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006002:	6007      	str	r7, [r0, #0]
 8006004:	60c7      	str	r7, [r0, #12]
 8006006:	f8db 301c 	ldr.w	r3, [fp, #28]
 800600a:	6819      	ldr	r1, [r3, #0]
 800600c:	b159      	cbz	r1, 8006026 <_dtoa_r+0x56>
 800600e:	685a      	ldr	r2, [r3, #4]
 8006010:	2301      	movs	r3, #1
 8006012:	4093      	lsls	r3, r2
 8006014:	604a      	str	r2, [r1, #4]
 8006016:	608b      	str	r3, [r1, #8]
 8006018:	4658      	mov	r0, fp
 800601a:	f000 fedf 	bl	8006ddc <_Bfree>
 800601e:	2200      	movs	r2, #0
 8006020:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006024:	601a      	str	r2, [r3, #0]
 8006026:	1e2b      	subs	r3, r5, #0
 8006028:	bfaf      	iteee	ge
 800602a:	2300      	movge	r3, #0
 800602c:	2201      	movlt	r2, #1
 800602e:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8006032:	9303      	strlt	r3, [sp, #12]
 8006034:	bfa8      	it	ge
 8006036:	6033      	strge	r3, [r6, #0]
 8006038:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800603c:	4b98      	ldr	r3, [pc, #608]	@ (80062a0 <_dtoa_r+0x2d0>)
 800603e:	bfb8      	it	lt
 8006040:	6032      	strlt	r2, [r6, #0]
 8006042:	ea33 0308 	bics.w	r3, r3, r8
 8006046:	d112      	bne.n	800606e <_dtoa_r+0x9e>
 8006048:	f242 730f 	movw	r3, #9999	@ 0x270f
 800604c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800604e:	6013      	str	r3, [r2, #0]
 8006050:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8006054:	4323      	orrs	r3, r4
 8006056:	f000 8550 	beq.w	8006afa <_dtoa_r+0xb2a>
 800605a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800605c:	f8df a244 	ldr.w	sl, [pc, #580]	@ 80062a4 <_dtoa_r+0x2d4>
 8006060:	2b00      	cmp	r3, #0
 8006062:	f000 8552 	beq.w	8006b0a <_dtoa_r+0xb3a>
 8006066:	f10a 0303 	add.w	r3, sl, #3
 800606a:	f000 bd4c 	b.w	8006b06 <_dtoa_r+0xb36>
 800606e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006072:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8006076:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800607a:	2200      	movs	r2, #0
 800607c:	2300      	movs	r3, #0
 800607e:	f7fa fc93 	bl	80009a8 <__aeabi_dcmpeq>
 8006082:	4607      	mov	r7, r0
 8006084:	b158      	cbz	r0, 800609e <_dtoa_r+0xce>
 8006086:	2301      	movs	r3, #1
 8006088:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800608a:	6013      	str	r3, [r2, #0]
 800608c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800608e:	b113      	cbz	r3, 8006096 <_dtoa_r+0xc6>
 8006090:	4b85      	ldr	r3, [pc, #532]	@ (80062a8 <_dtoa_r+0x2d8>)
 8006092:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8006094:	6013      	str	r3, [r2, #0]
 8006096:	f8df a214 	ldr.w	sl, [pc, #532]	@ 80062ac <_dtoa_r+0x2dc>
 800609a:	f000 bd36 	b.w	8006b0a <_dtoa_r+0xb3a>
 800609e:	ab14      	add	r3, sp, #80	@ 0x50
 80060a0:	9301      	str	r3, [sp, #4]
 80060a2:	ab15      	add	r3, sp, #84	@ 0x54
 80060a4:	9300      	str	r3, [sp, #0]
 80060a6:	4658      	mov	r0, fp
 80060a8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80060ac:	f001 f97e 	bl	80073ac <__d2b>
 80060b0:	f3c8 560a 	ubfx	r6, r8, #20, #11
 80060b4:	4681      	mov	r9, r0
 80060b6:	2e00      	cmp	r6, #0
 80060b8:	d077      	beq.n	80061aa <_dtoa_r+0x1da>
 80060ba:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80060be:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80060c0:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80060c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80060c8:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80060cc:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80060d0:	9712      	str	r7, [sp, #72]	@ 0x48
 80060d2:	4619      	mov	r1, r3
 80060d4:	2200      	movs	r2, #0
 80060d6:	4b76      	ldr	r3, [pc, #472]	@ (80062b0 <_dtoa_r+0x2e0>)
 80060d8:	f7fa f846 	bl	8000168 <__aeabi_dsub>
 80060dc:	a368      	add	r3, pc, #416	@ (adr r3, 8006280 <_dtoa_r+0x2b0>)
 80060de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060e2:	f7fa f9f9 	bl	80004d8 <__aeabi_dmul>
 80060e6:	a368      	add	r3, pc, #416	@ (adr r3, 8006288 <_dtoa_r+0x2b8>)
 80060e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060ec:	f7fa f83e 	bl	800016c <__adddf3>
 80060f0:	4604      	mov	r4, r0
 80060f2:	4630      	mov	r0, r6
 80060f4:	460d      	mov	r5, r1
 80060f6:	f7fa f985 	bl	8000404 <__aeabi_i2d>
 80060fa:	a365      	add	r3, pc, #404	@ (adr r3, 8006290 <_dtoa_r+0x2c0>)
 80060fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006100:	f7fa f9ea 	bl	80004d8 <__aeabi_dmul>
 8006104:	4602      	mov	r2, r0
 8006106:	460b      	mov	r3, r1
 8006108:	4620      	mov	r0, r4
 800610a:	4629      	mov	r1, r5
 800610c:	f7fa f82e 	bl	800016c <__adddf3>
 8006110:	4604      	mov	r4, r0
 8006112:	460d      	mov	r5, r1
 8006114:	f7fa fc90 	bl	8000a38 <__aeabi_d2iz>
 8006118:	2200      	movs	r2, #0
 800611a:	4607      	mov	r7, r0
 800611c:	2300      	movs	r3, #0
 800611e:	4620      	mov	r0, r4
 8006120:	4629      	mov	r1, r5
 8006122:	f7fa fc4b 	bl	80009bc <__aeabi_dcmplt>
 8006126:	b140      	cbz	r0, 800613a <_dtoa_r+0x16a>
 8006128:	4638      	mov	r0, r7
 800612a:	f7fa f96b 	bl	8000404 <__aeabi_i2d>
 800612e:	4622      	mov	r2, r4
 8006130:	462b      	mov	r3, r5
 8006132:	f7fa fc39 	bl	80009a8 <__aeabi_dcmpeq>
 8006136:	b900      	cbnz	r0, 800613a <_dtoa_r+0x16a>
 8006138:	3f01      	subs	r7, #1
 800613a:	2f16      	cmp	r7, #22
 800613c:	d853      	bhi.n	80061e6 <_dtoa_r+0x216>
 800613e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006142:	4b5c      	ldr	r3, [pc, #368]	@ (80062b4 <_dtoa_r+0x2e4>)
 8006144:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800614c:	f7fa fc36 	bl	80009bc <__aeabi_dcmplt>
 8006150:	2800      	cmp	r0, #0
 8006152:	d04a      	beq.n	80061ea <_dtoa_r+0x21a>
 8006154:	2300      	movs	r3, #0
 8006156:	3f01      	subs	r7, #1
 8006158:	930f      	str	r3, [sp, #60]	@ 0x3c
 800615a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800615c:	1b9b      	subs	r3, r3, r6
 800615e:	1e5a      	subs	r2, r3, #1
 8006160:	bf46      	itte	mi
 8006162:	f1c3 0801 	rsbmi	r8, r3, #1
 8006166:	2300      	movmi	r3, #0
 8006168:	f04f 0800 	movpl.w	r8, #0
 800616c:	9209      	str	r2, [sp, #36]	@ 0x24
 800616e:	bf48      	it	mi
 8006170:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8006172:	2f00      	cmp	r7, #0
 8006174:	db3b      	blt.n	80061ee <_dtoa_r+0x21e>
 8006176:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006178:	970e      	str	r7, [sp, #56]	@ 0x38
 800617a:	443b      	add	r3, r7
 800617c:	9309      	str	r3, [sp, #36]	@ 0x24
 800617e:	2300      	movs	r3, #0
 8006180:	930a      	str	r3, [sp, #40]	@ 0x28
 8006182:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006184:	2b09      	cmp	r3, #9
 8006186:	d866      	bhi.n	8006256 <_dtoa_r+0x286>
 8006188:	2b05      	cmp	r3, #5
 800618a:	bfc4      	itt	gt
 800618c:	3b04      	subgt	r3, #4
 800618e:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8006190:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006192:	bfc8      	it	gt
 8006194:	2400      	movgt	r4, #0
 8006196:	f1a3 0302 	sub.w	r3, r3, #2
 800619a:	bfd8      	it	le
 800619c:	2401      	movle	r4, #1
 800619e:	2b03      	cmp	r3, #3
 80061a0:	d864      	bhi.n	800626c <_dtoa_r+0x29c>
 80061a2:	e8df f003 	tbb	[pc, r3]
 80061a6:	382b      	.short	0x382b
 80061a8:	5636      	.short	0x5636
 80061aa:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80061ae:	441e      	add	r6, r3
 80061b0:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80061b4:	2b20      	cmp	r3, #32
 80061b6:	bfc1      	itttt	gt
 80061b8:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80061bc:	fa08 f803 	lslgt.w	r8, r8, r3
 80061c0:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80061c4:	fa24 f303 	lsrgt.w	r3, r4, r3
 80061c8:	bfd6      	itet	le
 80061ca:	f1c3 0320 	rsble	r3, r3, #32
 80061ce:	ea48 0003 	orrgt.w	r0, r8, r3
 80061d2:	fa04 f003 	lslle.w	r0, r4, r3
 80061d6:	f7fa f905 	bl	80003e4 <__aeabi_ui2d>
 80061da:	2201      	movs	r2, #1
 80061dc:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80061e0:	3e01      	subs	r6, #1
 80061e2:	9212      	str	r2, [sp, #72]	@ 0x48
 80061e4:	e775      	b.n	80060d2 <_dtoa_r+0x102>
 80061e6:	2301      	movs	r3, #1
 80061e8:	e7b6      	b.n	8006158 <_dtoa_r+0x188>
 80061ea:	900f      	str	r0, [sp, #60]	@ 0x3c
 80061ec:	e7b5      	b.n	800615a <_dtoa_r+0x18a>
 80061ee:	427b      	negs	r3, r7
 80061f0:	930a      	str	r3, [sp, #40]	@ 0x28
 80061f2:	2300      	movs	r3, #0
 80061f4:	eba8 0807 	sub.w	r8, r8, r7
 80061f8:	930e      	str	r3, [sp, #56]	@ 0x38
 80061fa:	e7c2      	b.n	8006182 <_dtoa_r+0x1b2>
 80061fc:	2300      	movs	r3, #0
 80061fe:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006200:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006202:	2b00      	cmp	r3, #0
 8006204:	dc35      	bgt.n	8006272 <_dtoa_r+0x2a2>
 8006206:	2301      	movs	r3, #1
 8006208:	461a      	mov	r2, r3
 800620a:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800620e:	9221      	str	r2, [sp, #132]	@ 0x84
 8006210:	e00b      	b.n	800622a <_dtoa_r+0x25a>
 8006212:	2301      	movs	r3, #1
 8006214:	e7f3      	b.n	80061fe <_dtoa_r+0x22e>
 8006216:	2300      	movs	r3, #0
 8006218:	930b      	str	r3, [sp, #44]	@ 0x2c
 800621a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800621c:	18fb      	adds	r3, r7, r3
 800621e:	9308      	str	r3, [sp, #32]
 8006220:	3301      	adds	r3, #1
 8006222:	2b01      	cmp	r3, #1
 8006224:	9307      	str	r3, [sp, #28]
 8006226:	bfb8      	it	lt
 8006228:	2301      	movlt	r3, #1
 800622a:	2100      	movs	r1, #0
 800622c:	2204      	movs	r2, #4
 800622e:	f8db 001c 	ldr.w	r0, [fp, #28]
 8006232:	f102 0514 	add.w	r5, r2, #20
 8006236:	429d      	cmp	r5, r3
 8006238:	d91f      	bls.n	800627a <_dtoa_r+0x2aa>
 800623a:	6041      	str	r1, [r0, #4]
 800623c:	4658      	mov	r0, fp
 800623e:	f000 fd8d 	bl	8006d5c <_Balloc>
 8006242:	4682      	mov	sl, r0
 8006244:	2800      	cmp	r0, #0
 8006246:	d139      	bne.n	80062bc <_dtoa_r+0x2ec>
 8006248:	4602      	mov	r2, r0
 800624a:	f240 11af 	movw	r1, #431	@ 0x1af
 800624e:	4b1a      	ldr	r3, [pc, #104]	@ (80062b8 <_dtoa_r+0x2e8>)
 8006250:	e6d2      	b.n	8005ff8 <_dtoa_r+0x28>
 8006252:	2301      	movs	r3, #1
 8006254:	e7e0      	b.n	8006218 <_dtoa_r+0x248>
 8006256:	2401      	movs	r4, #1
 8006258:	2300      	movs	r3, #0
 800625a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800625c:	9320      	str	r3, [sp, #128]	@ 0x80
 800625e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006262:	2200      	movs	r2, #0
 8006264:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8006268:	2312      	movs	r3, #18
 800626a:	e7d0      	b.n	800620e <_dtoa_r+0x23e>
 800626c:	2301      	movs	r3, #1
 800626e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006270:	e7f5      	b.n	800625e <_dtoa_r+0x28e>
 8006272:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006274:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8006278:	e7d7      	b.n	800622a <_dtoa_r+0x25a>
 800627a:	3101      	adds	r1, #1
 800627c:	0052      	lsls	r2, r2, #1
 800627e:	e7d8      	b.n	8006232 <_dtoa_r+0x262>
 8006280:	636f4361 	.word	0x636f4361
 8006284:	3fd287a7 	.word	0x3fd287a7
 8006288:	8b60c8b3 	.word	0x8b60c8b3
 800628c:	3fc68a28 	.word	0x3fc68a28
 8006290:	509f79fb 	.word	0x509f79fb
 8006294:	3fd34413 	.word	0x3fd34413
 8006298:	08007c9b 	.word	0x08007c9b
 800629c:	08007cb2 	.word	0x08007cb2
 80062a0:	7ff00000 	.word	0x7ff00000
 80062a4:	08007c97 	.word	0x08007c97
 80062a8:	08007c6b 	.word	0x08007c6b
 80062ac:	08007c6a 	.word	0x08007c6a
 80062b0:	3ff80000 	.word	0x3ff80000
 80062b4:	08007da8 	.word	0x08007da8
 80062b8:	08007d0a 	.word	0x08007d0a
 80062bc:	f8db 301c 	ldr.w	r3, [fp, #28]
 80062c0:	6018      	str	r0, [r3, #0]
 80062c2:	9b07      	ldr	r3, [sp, #28]
 80062c4:	2b0e      	cmp	r3, #14
 80062c6:	f200 80a4 	bhi.w	8006412 <_dtoa_r+0x442>
 80062ca:	2c00      	cmp	r4, #0
 80062cc:	f000 80a1 	beq.w	8006412 <_dtoa_r+0x442>
 80062d0:	2f00      	cmp	r7, #0
 80062d2:	dd33      	ble.n	800633c <_dtoa_r+0x36c>
 80062d4:	4b86      	ldr	r3, [pc, #536]	@ (80064f0 <_dtoa_r+0x520>)
 80062d6:	f007 020f 	and.w	r2, r7, #15
 80062da:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80062de:	05f8      	lsls	r0, r7, #23
 80062e0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80062e4:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80062e8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80062ec:	d516      	bpl.n	800631c <_dtoa_r+0x34c>
 80062ee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80062f2:	4b80      	ldr	r3, [pc, #512]	@ (80064f4 <_dtoa_r+0x524>)
 80062f4:	2603      	movs	r6, #3
 80062f6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80062fa:	f7fa fa17 	bl	800072c <__aeabi_ddiv>
 80062fe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006302:	f004 040f 	and.w	r4, r4, #15
 8006306:	4d7b      	ldr	r5, [pc, #492]	@ (80064f4 <_dtoa_r+0x524>)
 8006308:	b954      	cbnz	r4, 8006320 <_dtoa_r+0x350>
 800630a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800630e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006312:	f7fa fa0b 	bl	800072c <__aeabi_ddiv>
 8006316:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800631a:	e028      	b.n	800636e <_dtoa_r+0x39e>
 800631c:	2602      	movs	r6, #2
 800631e:	e7f2      	b.n	8006306 <_dtoa_r+0x336>
 8006320:	07e1      	lsls	r1, r4, #31
 8006322:	d508      	bpl.n	8006336 <_dtoa_r+0x366>
 8006324:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006328:	e9d5 2300 	ldrd	r2, r3, [r5]
 800632c:	f7fa f8d4 	bl	80004d8 <__aeabi_dmul>
 8006330:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006334:	3601      	adds	r6, #1
 8006336:	1064      	asrs	r4, r4, #1
 8006338:	3508      	adds	r5, #8
 800633a:	e7e5      	b.n	8006308 <_dtoa_r+0x338>
 800633c:	f000 80d2 	beq.w	80064e4 <_dtoa_r+0x514>
 8006340:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006344:	427c      	negs	r4, r7
 8006346:	4b6a      	ldr	r3, [pc, #424]	@ (80064f0 <_dtoa_r+0x520>)
 8006348:	f004 020f 	and.w	r2, r4, #15
 800634c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006350:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006354:	f7fa f8c0 	bl	80004d8 <__aeabi_dmul>
 8006358:	2602      	movs	r6, #2
 800635a:	2300      	movs	r3, #0
 800635c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006360:	4d64      	ldr	r5, [pc, #400]	@ (80064f4 <_dtoa_r+0x524>)
 8006362:	1124      	asrs	r4, r4, #4
 8006364:	2c00      	cmp	r4, #0
 8006366:	f040 80b2 	bne.w	80064ce <_dtoa_r+0x4fe>
 800636a:	2b00      	cmp	r3, #0
 800636c:	d1d3      	bne.n	8006316 <_dtoa_r+0x346>
 800636e:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006372:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006374:	2b00      	cmp	r3, #0
 8006376:	f000 80b7 	beq.w	80064e8 <_dtoa_r+0x518>
 800637a:	2200      	movs	r2, #0
 800637c:	4620      	mov	r0, r4
 800637e:	4629      	mov	r1, r5
 8006380:	4b5d      	ldr	r3, [pc, #372]	@ (80064f8 <_dtoa_r+0x528>)
 8006382:	f7fa fb1b 	bl	80009bc <__aeabi_dcmplt>
 8006386:	2800      	cmp	r0, #0
 8006388:	f000 80ae 	beq.w	80064e8 <_dtoa_r+0x518>
 800638c:	9b07      	ldr	r3, [sp, #28]
 800638e:	2b00      	cmp	r3, #0
 8006390:	f000 80aa 	beq.w	80064e8 <_dtoa_r+0x518>
 8006394:	9b08      	ldr	r3, [sp, #32]
 8006396:	2b00      	cmp	r3, #0
 8006398:	dd37      	ble.n	800640a <_dtoa_r+0x43a>
 800639a:	1e7b      	subs	r3, r7, #1
 800639c:	4620      	mov	r0, r4
 800639e:	9304      	str	r3, [sp, #16]
 80063a0:	2200      	movs	r2, #0
 80063a2:	4629      	mov	r1, r5
 80063a4:	4b55      	ldr	r3, [pc, #340]	@ (80064fc <_dtoa_r+0x52c>)
 80063a6:	f7fa f897 	bl	80004d8 <__aeabi_dmul>
 80063aa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80063ae:	9c08      	ldr	r4, [sp, #32]
 80063b0:	3601      	adds	r6, #1
 80063b2:	4630      	mov	r0, r6
 80063b4:	f7fa f826 	bl	8000404 <__aeabi_i2d>
 80063b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80063bc:	f7fa f88c 	bl	80004d8 <__aeabi_dmul>
 80063c0:	2200      	movs	r2, #0
 80063c2:	4b4f      	ldr	r3, [pc, #316]	@ (8006500 <_dtoa_r+0x530>)
 80063c4:	f7f9 fed2 	bl	800016c <__adddf3>
 80063c8:	4605      	mov	r5, r0
 80063ca:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80063ce:	2c00      	cmp	r4, #0
 80063d0:	f040 809a 	bne.w	8006508 <_dtoa_r+0x538>
 80063d4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80063d8:	2200      	movs	r2, #0
 80063da:	4b4a      	ldr	r3, [pc, #296]	@ (8006504 <_dtoa_r+0x534>)
 80063dc:	f7f9 fec4 	bl	8000168 <__aeabi_dsub>
 80063e0:	4602      	mov	r2, r0
 80063e2:	460b      	mov	r3, r1
 80063e4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80063e8:	462a      	mov	r2, r5
 80063ea:	4633      	mov	r3, r6
 80063ec:	f7fa fb04 	bl	80009f8 <__aeabi_dcmpgt>
 80063f0:	2800      	cmp	r0, #0
 80063f2:	f040 828e 	bne.w	8006912 <_dtoa_r+0x942>
 80063f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80063fa:	462a      	mov	r2, r5
 80063fc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006400:	f7fa fadc 	bl	80009bc <__aeabi_dcmplt>
 8006404:	2800      	cmp	r0, #0
 8006406:	f040 8127 	bne.w	8006658 <_dtoa_r+0x688>
 800640a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800640e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8006412:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8006414:	2b00      	cmp	r3, #0
 8006416:	f2c0 8163 	blt.w	80066e0 <_dtoa_r+0x710>
 800641a:	2f0e      	cmp	r7, #14
 800641c:	f300 8160 	bgt.w	80066e0 <_dtoa_r+0x710>
 8006420:	4b33      	ldr	r3, [pc, #204]	@ (80064f0 <_dtoa_r+0x520>)
 8006422:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006426:	e9d3 3400 	ldrd	r3, r4, [r3]
 800642a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800642e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006430:	2b00      	cmp	r3, #0
 8006432:	da03      	bge.n	800643c <_dtoa_r+0x46c>
 8006434:	9b07      	ldr	r3, [sp, #28]
 8006436:	2b00      	cmp	r3, #0
 8006438:	f340 8100 	ble.w	800663c <_dtoa_r+0x66c>
 800643c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006440:	4656      	mov	r6, sl
 8006442:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006446:	4620      	mov	r0, r4
 8006448:	4629      	mov	r1, r5
 800644a:	f7fa f96f 	bl	800072c <__aeabi_ddiv>
 800644e:	f7fa faf3 	bl	8000a38 <__aeabi_d2iz>
 8006452:	4680      	mov	r8, r0
 8006454:	f7f9 ffd6 	bl	8000404 <__aeabi_i2d>
 8006458:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800645c:	f7fa f83c 	bl	80004d8 <__aeabi_dmul>
 8006460:	4602      	mov	r2, r0
 8006462:	460b      	mov	r3, r1
 8006464:	4620      	mov	r0, r4
 8006466:	4629      	mov	r1, r5
 8006468:	f7f9 fe7e 	bl	8000168 <__aeabi_dsub>
 800646c:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8006470:	9d07      	ldr	r5, [sp, #28]
 8006472:	f806 4b01 	strb.w	r4, [r6], #1
 8006476:	eba6 040a 	sub.w	r4, r6, sl
 800647a:	42a5      	cmp	r5, r4
 800647c:	4602      	mov	r2, r0
 800647e:	460b      	mov	r3, r1
 8006480:	f040 8116 	bne.w	80066b0 <_dtoa_r+0x6e0>
 8006484:	f7f9 fe72 	bl	800016c <__adddf3>
 8006488:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800648c:	4604      	mov	r4, r0
 800648e:	460d      	mov	r5, r1
 8006490:	f7fa fab2 	bl	80009f8 <__aeabi_dcmpgt>
 8006494:	2800      	cmp	r0, #0
 8006496:	f040 80f8 	bne.w	800668a <_dtoa_r+0x6ba>
 800649a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800649e:	4620      	mov	r0, r4
 80064a0:	4629      	mov	r1, r5
 80064a2:	f7fa fa81 	bl	80009a8 <__aeabi_dcmpeq>
 80064a6:	b118      	cbz	r0, 80064b0 <_dtoa_r+0x4e0>
 80064a8:	f018 0f01 	tst.w	r8, #1
 80064ac:	f040 80ed 	bne.w	800668a <_dtoa_r+0x6ba>
 80064b0:	4649      	mov	r1, r9
 80064b2:	4658      	mov	r0, fp
 80064b4:	f000 fc92 	bl	8006ddc <_Bfree>
 80064b8:	2300      	movs	r3, #0
 80064ba:	7033      	strb	r3, [r6, #0]
 80064bc:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80064be:	3701      	adds	r7, #1
 80064c0:	601f      	str	r7, [r3, #0]
 80064c2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	f000 8320 	beq.w	8006b0a <_dtoa_r+0xb3a>
 80064ca:	601e      	str	r6, [r3, #0]
 80064cc:	e31d      	b.n	8006b0a <_dtoa_r+0xb3a>
 80064ce:	07e2      	lsls	r2, r4, #31
 80064d0:	d505      	bpl.n	80064de <_dtoa_r+0x50e>
 80064d2:	e9d5 2300 	ldrd	r2, r3, [r5]
 80064d6:	f7f9 ffff 	bl	80004d8 <__aeabi_dmul>
 80064da:	2301      	movs	r3, #1
 80064dc:	3601      	adds	r6, #1
 80064de:	1064      	asrs	r4, r4, #1
 80064e0:	3508      	adds	r5, #8
 80064e2:	e73f      	b.n	8006364 <_dtoa_r+0x394>
 80064e4:	2602      	movs	r6, #2
 80064e6:	e742      	b.n	800636e <_dtoa_r+0x39e>
 80064e8:	9c07      	ldr	r4, [sp, #28]
 80064ea:	9704      	str	r7, [sp, #16]
 80064ec:	e761      	b.n	80063b2 <_dtoa_r+0x3e2>
 80064ee:	bf00      	nop
 80064f0:	08007da8 	.word	0x08007da8
 80064f4:	08007d80 	.word	0x08007d80
 80064f8:	3ff00000 	.word	0x3ff00000
 80064fc:	40240000 	.word	0x40240000
 8006500:	401c0000 	.word	0x401c0000
 8006504:	40140000 	.word	0x40140000
 8006508:	4b70      	ldr	r3, [pc, #448]	@ (80066cc <_dtoa_r+0x6fc>)
 800650a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800650c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006510:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006514:	4454      	add	r4, sl
 8006516:	2900      	cmp	r1, #0
 8006518:	d045      	beq.n	80065a6 <_dtoa_r+0x5d6>
 800651a:	2000      	movs	r0, #0
 800651c:	496c      	ldr	r1, [pc, #432]	@ (80066d0 <_dtoa_r+0x700>)
 800651e:	f7fa f905 	bl	800072c <__aeabi_ddiv>
 8006522:	4633      	mov	r3, r6
 8006524:	462a      	mov	r2, r5
 8006526:	f7f9 fe1f 	bl	8000168 <__aeabi_dsub>
 800652a:	4656      	mov	r6, sl
 800652c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006530:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006534:	f7fa fa80 	bl	8000a38 <__aeabi_d2iz>
 8006538:	4605      	mov	r5, r0
 800653a:	f7f9 ff63 	bl	8000404 <__aeabi_i2d>
 800653e:	4602      	mov	r2, r0
 8006540:	460b      	mov	r3, r1
 8006542:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006546:	f7f9 fe0f 	bl	8000168 <__aeabi_dsub>
 800654a:	4602      	mov	r2, r0
 800654c:	460b      	mov	r3, r1
 800654e:	3530      	adds	r5, #48	@ 0x30
 8006550:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006554:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006558:	f806 5b01 	strb.w	r5, [r6], #1
 800655c:	f7fa fa2e 	bl	80009bc <__aeabi_dcmplt>
 8006560:	2800      	cmp	r0, #0
 8006562:	d163      	bne.n	800662c <_dtoa_r+0x65c>
 8006564:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006568:	2000      	movs	r0, #0
 800656a:	495a      	ldr	r1, [pc, #360]	@ (80066d4 <_dtoa_r+0x704>)
 800656c:	f7f9 fdfc 	bl	8000168 <__aeabi_dsub>
 8006570:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006574:	f7fa fa22 	bl	80009bc <__aeabi_dcmplt>
 8006578:	2800      	cmp	r0, #0
 800657a:	f040 8087 	bne.w	800668c <_dtoa_r+0x6bc>
 800657e:	42a6      	cmp	r6, r4
 8006580:	f43f af43 	beq.w	800640a <_dtoa_r+0x43a>
 8006584:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006588:	2200      	movs	r2, #0
 800658a:	4b53      	ldr	r3, [pc, #332]	@ (80066d8 <_dtoa_r+0x708>)
 800658c:	f7f9 ffa4 	bl	80004d8 <__aeabi_dmul>
 8006590:	2200      	movs	r2, #0
 8006592:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006596:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800659a:	4b4f      	ldr	r3, [pc, #316]	@ (80066d8 <_dtoa_r+0x708>)
 800659c:	f7f9 ff9c 	bl	80004d8 <__aeabi_dmul>
 80065a0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80065a4:	e7c4      	b.n	8006530 <_dtoa_r+0x560>
 80065a6:	4631      	mov	r1, r6
 80065a8:	4628      	mov	r0, r5
 80065aa:	f7f9 ff95 	bl	80004d8 <__aeabi_dmul>
 80065ae:	4656      	mov	r6, sl
 80065b0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80065b4:	9413      	str	r4, [sp, #76]	@ 0x4c
 80065b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80065ba:	f7fa fa3d 	bl	8000a38 <__aeabi_d2iz>
 80065be:	4605      	mov	r5, r0
 80065c0:	f7f9 ff20 	bl	8000404 <__aeabi_i2d>
 80065c4:	4602      	mov	r2, r0
 80065c6:	460b      	mov	r3, r1
 80065c8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80065cc:	f7f9 fdcc 	bl	8000168 <__aeabi_dsub>
 80065d0:	4602      	mov	r2, r0
 80065d2:	460b      	mov	r3, r1
 80065d4:	3530      	adds	r5, #48	@ 0x30
 80065d6:	f806 5b01 	strb.w	r5, [r6], #1
 80065da:	42a6      	cmp	r6, r4
 80065dc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80065e0:	f04f 0200 	mov.w	r2, #0
 80065e4:	d124      	bne.n	8006630 <_dtoa_r+0x660>
 80065e6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80065ea:	4b39      	ldr	r3, [pc, #228]	@ (80066d0 <_dtoa_r+0x700>)
 80065ec:	f7f9 fdbe 	bl	800016c <__adddf3>
 80065f0:	4602      	mov	r2, r0
 80065f2:	460b      	mov	r3, r1
 80065f4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80065f8:	f7fa f9fe 	bl	80009f8 <__aeabi_dcmpgt>
 80065fc:	2800      	cmp	r0, #0
 80065fe:	d145      	bne.n	800668c <_dtoa_r+0x6bc>
 8006600:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006604:	2000      	movs	r0, #0
 8006606:	4932      	ldr	r1, [pc, #200]	@ (80066d0 <_dtoa_r+0x700>)
 8006608:	f7f9 fdae 	bl	8000168 <__aeabi_dsub>
 800660c:	4602      	mov	r2, r0
 800660e:	460b      	mov	r3, r1
 8006610:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006614:	f7fa f9d2 	bl	80009bc <__aeabi_dcmplt>
 8006618:	2800      	cmp	r0, #0
 800661a:	f43f aef6 	beq.w	800640a <_dtoa_r+0x43a>
 800661e:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8006620:	1e73      	subs	r3, r6, #1
 8006622:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006624:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006628:	2b30      	cmp	r3, #48	@ 0x30
 800662a:	d0f8      	beq.n	800661e <_dtoa_r+0x64e>
 800662c:	9f04      	ldr	r7, [sp, #16]
 800662e:	e73f      	b.n	80064b0 <_dtoa_r+0x4e0>
 8006630:	4b29      	ldr	r3, [pc, #164]	@ (80066d8 <_dtoa_r+0x708>)
 8006632:	f7f9 ff51 	bl	80004d8 <__aeabi_dmul>
 8006636:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800663a:	e7bc      	b.n	80065b6 <_dtoa_r+0x5e6>
 800663c:	d10c      	bne.n	8006658 <_dtoa_r+0x688>
 800663e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006642:	2200      	movs	r2, #0
 8006644:	4b25      	ldr	r3, [pc, #148]	@ (80066dc <_dtoa_r+0x70c>)
 8006646:	f7f9 ff47 	bl	80004d8 <__aeabi_dmul>
 800664a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800664e:	f7fa f9c9 	bl	80009e4 <__aeabi_dcmpge>
 8006652:	2800      	cmp	r0, #0
 8006654:	f000 815b 	beq.w	800690e <_dtoa_r+0x93e>
 8006658:	2400      	movs	r4, #0
 800665a:	4625      	mov	r5, r4
 800665c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800665e:	4656      	mov	r6, sl
 8006660:	43db      	mvns	r3, r3
 8006662:	9304      	str	r3, [sp, #16]
 8006664:	2700      	movs	r7, #0
 8006666:	4621      	mov	r1, r4
 8006668:	4658      	mov	r0, fp
 800666a:	f000 fbb7 	bl	8006ddc <_Bfree>
 800666e:	2d00      	cmp	r5, #0
 8006670:	d0dc      	beq.n	800662c <_dtoa_r+0x65c>
 8006672:	b12f      	cbz	r7, 8006680 <_dtoa_r+0x6b0>
 8006674:	42af      	cmp	r7, r5
 8006676:	d003      	beq.n	8006680 <_dtoa_r+0x6b0>
 8006678:	4639      	mov	r1, r7
 800667a:	4658      	mov	r0, fp
 800667c:	f000 fbae 	bl	8006ddc <_Bfree>
 8006680:	4629      	mov	r1, r5
 8006682:	4658      	mov	r0, fp
 8006684:	f000 fbaa 	bl	8006ddc <_Bfree>
 8006688:	e7d0      	b.n	800662c <_dtoa_r+0x65c>
 800668a:	9704      	str	r7, [sp, #16]
 800668c:	4633      	mov	r3, r6
 800668e:	461e      	mov	r6, r3
 8006690:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006694:	2a39      	cmp	r2, #57	@ 0x39
 8006696:	d107      	bne.n	80066a8 <_dtoa_r+0x6d8>
 8006698:	459a      	cmp	sl, r3
 800669a:	d1f8      	bne.n	800668e <_dtoa_r+0x6be>
 800669c:	9a04      	ldr	r2, [sp, #16]
 800669e:	3201      	adds	r2, #1
 80066a0:	9204      	str	r2, [sp, #16]
 80066a2:	2230      	movs	r2, #48	@ 0x30
 80066a4:	f88a 2000 	strb.w	r2, [sl]
 80066a8:	781a      	ldrb	r2, [r3, #0]
 80066aa:	3201      	adds	r2, #1
 80066ac:	701a      	strb	r2, [r3, #0]
 80066ae:	e7bd      	b.n	800662c <_dtoa_r+0x65c>
 80066b0:	2200      	movs	r2, #0
 80066b2:	4b09      	ldr	r3, [pc, #36]	@ (80066d8 <_dtoa_r+0x708>)
 80066b4:	f7f9 ff10 	bl	80004d8 <__aeabi_dmul>
 80066b8:	2200      	movs	r2, #0
 80066ba:	2300      	movs	r3, #0
 80066bc:	4604      	mov	r4, r0
 80066be:	460d      	mov	r5, r1
 80066c0:	f7fa f972 	bl	80009a8 <__aeabi_dcmpeq>
 80066c4:	2800      	cmp	r0, #0
 80066c6:	f43f aebc 	beq.w	8006442 <_dtoa_r+0x472>
 80066ca:	e6f1      	b.n	80064b0 <_dtoa_r+0x4e0>
 80066cc:	08007da8 	.word	0x08007da8
 80066d0:	3fe00000 	.word	0x3fe00000
 80066d4:	3ff00000 	.word	0x3ff00000
 80066d8:	40240000 	.word	0x40240000
 80066dc:	40140000 	.word	0x40140000
 80066e0:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80066e2:	2a00      	cmp	r2, #0
 80066e4:	f000 80db 	beq.w	800689e <_dtoa_r+0x8ce>
 80066e8:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80066ea:	2a01      	cmp	r2, #1
 80066ec:	f300 80bf 	bgt.w	800686e <_dtoa_r+0x89e>
 80066f0:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80066f2:	2a00      	cmp	r2, #0
 80066f4:	f000 80b7 	beq.w	8006866 <_dtoa_r+0x896>
 80066f8:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80066fc:	4646      	mov	r6, r8
 80066fe:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006700:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006702:	2101      	movs	r1, #1
 8006704:	441a      	add	r2, r3
 8006706:	4658      	mov	r0, fp
 8006708:	4498      	add	r8, r3
 800670a:	9209      	str	r2, [sp, #36]	@ 0x24
 800670c:	f000 fc1a 	bl	8006f44 <__i2b>
 8006710:	4605      	mov	r5, r0
 8006712:	b15e      	cbz	r6, 800672c <_dtoa_r+0x75c>
 8006714:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006716:	2b00      	cmp	r3, #0
 8006718:	dd08      	ble.n	800672c <_dtoa_r+0x75c>
 800671a:	42b3      	cmp	r3, r6
 800671c:	bfa8      	it	ge
 800671e:	4633      	movge	r3, r6
 8006720:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006722:	eba8 0803 	sub.w	r8, r8, r3
 8006726:	1af6      	subs	r6, r6, r3
 8006728:	1ad3      	subs	r3, r2, r3
 800672a:	9309      	str	r3, [sp, #36]	@ 0x24
 800672c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800672e:	b1f3      	cbz	r3, 800676e <_dtoa_r+0x79e>
 8006730:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006732:	2b00      	cmp	r3, #0
 8006734:	f000 80b7 	beq.w	80068a6 <_dtoa_r+0x8d6>
 8006738:	b18c      	cbz	r4, 800675e <_dtoa_r+0x78e>
 800673a:	4629      	mov	r1, r5
 800673c:	4622      	mov	r2, r4
 800673e:	4658      	mov	r0, fp
 8006740:	f000 fcbe 	bl	80070c0 <__pow5mult>
 8006744:	464a      	mov	r2, r9
 8006746:	4601      	mov	r1, r0
 8006748:	4605      	mov	r5, r0
 800674a:	4658      	mov	r0, fp
 800674c:	f000 fc10 	bl	8006f70 <__multiply>
 8006750:	4649      	mov	r1, r9
 8006752:	9004      	str	r0, [sp, #16]
 8006754:	4658      	mov	r0, fp
 8006756:	f000 fb41 	bl	8006ddc <_Bfree>
 800675a:	9b04      	ldr	r3, [sp, #16]
 800675c:	4699      	mov	r9, r3
 800675e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006760:	1b1a      	subs	r2, r3, r4
 8006762:	d004      	beq.n	800676e <_dtoa_r+0x79e>
 8006764:	4649      	mov	r1, r9
 8006766:	4658      	mov	r0, fp
 8006768:	f000 fcaa 	bl	80070c0 <__pow5mult>
 800676c:	4681      	mov	r9, r0
 800676e:	2101      	movs	r1, #1
 8006770:	4658      	mov	r0, fp
 8006772:	f000 fbe7 	bl	8006f44 <__i2b>
 8006776:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006778:	4604      	mov	r4, r0
 800677a:	2b00      	cmp	r3, #0
 800677c:	f000 81c9 	beq.w	8006b12 <_dtoa_r+0xb42>
 8006780:	461a      	mov	r2, r3
 8006782:	4601      	mov	r1, r0
 8006784:	4658      	mov	r0, fp
 8006786:	f000 fc9b 	bl	80070c0 <__pow5mult>
 800678a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800678c:	4604      	mov	r4, r0
 800678e:	2b01      	cmp	r3, #1
 8006790:	f300 808f 	bgt.w	80068b2 <_dtoa_r+0x8e2>
 8006794:	9b02      	ldr	r3, [sp, #8]
 8006796:	2b00      	cmp	r3, #0
 8006798:	f040 8087 	bne.w	80068aa <_dtoa_r+0x8da>
 800679c:	9b03      	ldr	r3, [sp, #12]
 800679e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	f040 8083 	bne.w	80068ae <_dtoa_r+0x8de>
 80067a8:	9b03      	ldr	r3, [sp, #12]
 80067aa:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80067ae:	0d1b      	lsrs	r3, r3, #20
 80067b0:	051b      	lsls	r3, r3, #20
 80067b2:	b12b      	cbz	r3, 80067c0 <_dtoa_r+0x7f0>
 80067b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80067b6:	f108 0801 	add.w	r8, r8, #1
 80067ba:	3301      	adds	r3, #1
 80067bc:	9309      	str	r3, [sp, #36]	@ 0x24
 80067be:	2301      	movs	r3, #1
 80067c0:	930a      	str	r3, [sp, #40]	@ 0x28
 80067c2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	f000 81aa 	beq.w	8006b1e <_dtoa_r+0xb4e>
 80067ca:	6923      	ldr	r3, [r4, #16]
 80067cc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80067d0:	6918      	ldr	r0, [r3, #16]
 80067d2:	f000 fb6b 	bl	8006eac <__hi0bits>
 80067d6:	f1c0 0020 	rsb	r0, r0, #32
 80067da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80067dc:	4418      	add	r0, r3
 80067de:	f010 001f 	ands.w	r0, r0, #31
 80067e2:	d071      	beq.n	80068c8 <_dtoa_r+0x8f8>
 80067e4:	f1c0 0320 	rsb	r3, r0, #32
 80067e8:	2b04      	cmp	r3, #4
 80067ea:	dd65      	ble.n	80068b8 <_dtoa_r+0x8e8>
 80067ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80067ee:	f1c0 001c 	rsb	r0, r0, #28
 80067f2:	4403      	add	r3, r0
 80067f4:	4480      	add	r8, r0
 80067f6:	4406      	add	r6, r0
 80067f8:	9309      	str	r3, [sp, #36]	@ 0x24
 80067fa:	f1b8 0f00 	cmp.w	r8, #0
 80067fe:	dd05      	ble.n	800680c <_dtoa_r+0x83c>
 8006800:	4649      	mov	r1, r9
 8006802:	4642      	mov	r2, r8
 8006804:	4658      	mov	r0, fp
 8006806:	f000 fcb5 	bl	8007174 <__lshift>
 800680a:	4681      	mov	r9, r0
 800680c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800680e:	2b00      	cmp	r3, #0
 8006810:	dd05      	ble.n	800681e <_dtoa_r+0x84e>
 8006812:	4621      	mov	r1, r4
 8006814:	461a      	mov	r2, r3
 8006816:	4658      	mov	r0, fp
 8006818:	f000 fcac 	bl	8007174 <__lshift>
 800681c:	4604      	mov	r4, r0
 800681e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006820:	2b00      	cmp	r3, #0
 8006822:	d053      	beq.n	80068cc <_dtoa_r+0x8fc>
 8006824:	4621      	mov	r1, r4
 8006826:	4648      	mov	r0, r9
 8006828:	f000 fd10 	bl	800724c <__mcmp>
 800682c:	2800      	cmp	r0, #0
 800682e:	da4d      	bge.n	80068cc <_dtoa_r+0x8fc>
 8006830:	1e7b      	subs	r3, r7, #1
 8006832:	4649      	mov	r1, r9
 8006834:	9304      	str	r3, [sp, #16]
 8006836:	220a      	movs	r2, #10
 8006838:	2300      	movs	r3, #0
 800683a:	4658      	mov	r0, fp
 800683c:	f000 faf0 	bl	8006e20 <__multadd>
 8006840:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006842:	4681      	mov	r9, r0
 8006844:	2b00      	cmp	r3, #0
 8006846:	f000 816c 	beq.w	8006b22 <_dtoa_r+0xb52>
 800684a:	2300      	movs	r3, #0
 800684c:	4629      	mov	r1, r5
 800684e:	220a      	movs	r2, #10
 8006850:	4658      	mov	r0, fp
 8006852:	f000 fae5 	bl	8006e20 <__multadd>
 8006856:	9b08      	ldr	r3, [sp, #32]
 8006858:	4605      	mov	r5, r0
 800685a:	2b00      	cmp	r3, #0
 800685c:	dc61      	bgt.n	8006922 <_dtoa_r+0x952>
 800685e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006860:	2b02      	cmp	r3, #2
 8006862:	dc3b      	bgt.n	80068dc <_dtoa_r+0x90c>
 8006864:	e05d      	b.n	8006922 <_dtoa_r+0x952>
 8006866:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006868:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800686c:	e746      	b.n	80066fc <_dtoa_r+0x72c>
 800686e:	9b07      	ldr	r3, [sp, #28]
 8006870:	1e5c      	subs	r4, r3, #1
 8006872:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006874:	42a3      	cmp	r3, r4
 8006876:	bfbf      	itttt	lt
 8006878:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800687a:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 800687c:	1ae3      	sublt	r3, r4, r3
 800687e:	18d2      	addlt	r2, r2, r3
 8006880:	bfa8      	it	ge
 8006882:	1b1c      	subge	r4, r3, r4
 8006884:	9b07      	ldr	r3, [sp, #28]
 8006886:	bfbe      	ittt	lt
 8006888:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800688a:	920e      	strlt	r2, [sp, #56]	@ 0x38
 800688c:	2400      	movlt	r4, #0
 800688e:	2b00      	cmp	r3, #0
 8006890:	bfb5      	itete	lt
 8006892:	eba8 0603 	sublt.w	r6, r8, r3
 8006896:	4646      	movge	r6, r8
 8006898:	2300      	movlt	r3, #0
 800689a:	9b07      	ldrge	r3, [sp, #28]
 800689c:	e730      	b.n	8006700 <_dtoa_r+0x730>
 800689e:	4646      	mov	r6, r8
 80068a0:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80068a2:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80068a4:	e735      	b.n	8006712 <_dtoa_r+0x742>
 80068a6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80068a8:	e75c      	b.n	8006764 <_dtoa_r+0x794>
 80068aa:	2300      	movs	r3, #0
 80068ac:	e788      	b.n	80067c0 <_dtoa_r+0x7f0>
 80068ae:	9b02      	ldr	r3, [sp, #8]
 80068b0:	e786      	b.n	80067c0 <_dtoa_r+0x7f0>
 80068b2:	2300      	movs	r3, #0
 80068b4:	930a      	str	r3, [sp, #40]	@ 0x28
 80068b6:	e788      	b.n	80067ca <_dtoa_r+0x7fa>
 80068b8:	d09f      	beq.n	80067fa <_dtoa_r+0x82a>
 80068ba:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80068bc:	331c      	adds	r3, #28
 80068be:	441a      	add	r2, r3
 80068c0:	4498      	add	r8, r3
 80068c2:	441e      	add	r6, r3
 80068c4:	9209      	str	r2, [sp, #36]	@ 0x24
 80068c6:	e798      	b.n	80067fa <_dtoa_r+0x82a>
 80068c8:	4603      	mov	r3, r0
 80068ca:	e7f6      	b.n	80068ba <_dtoa_r+0x8ea>
 80068cc:	9b07      	ldr	r3, [sp, #28]
 80068ce:	9704      	str	r7, [sp, #16]
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	dc20      	bgt.n	8006916 <_dtoa_r+0x946>
 80068d4:	9308      	str	r3, [sp, #32]
 80068d6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80068d8:	2b02      	cmp	r3, #2
 80068da:	dd1e      	ble.n	800691a <_dtoa_r+0x94a>
 80068dc:	9b08      	ldr	r3, [sp, #32]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	f47f aebc 	bne.w	800665c <_dtoa_r+0x68c>
 80068e4:	4621      	mov	r1, r4
 80068e6:	2205      	movs	r2, #5
 80068e8:	4658      	mov	r0, fp
 80068ea:	f000 fa99 	bl	8006e20 <__multadd>
 80068ee:	4601      	mov	r1, r0
 80068f0:	4604      	mov	r4, r0
 80068f2:	4648      	mov	r0, r9
 80068f4:	f000 fcaa 	bl	800724c <__mcmp>
 80068f8:	2800      	cmp	r0, #0
 80068fa:	f77f aeaf 	ble.w	800665c <_dtoa_r+0x68c>
 80068fe:	2331      	movs	r3, #49	@ 0x31
 8006900:	4656      	mov	r6, sl
 8006902:	f806 3b01 	strb.w	r3, [r6], #1
 8006906:	9b04      	ldr	r3, [sp, #16]
 8006908:	3301      	adds	r3, #1
 800690a:	9304      	str	r3, [sp, #16]
 800690c:	e6aa      	b.n	8006664 <_dtoa_r+0x694>
 800690e:	9c07      	ldr	r4, [sp, #28]
 8006910:	9704      	str	r7, [sp, #16]
 8006912:	4625      	mov	r5, r4
 8006914:	e7f3      	b.n	80068fe <_dtoa_r+0x92e>
 8006916:	9b07      	ldr	r3, [sp, #28]
 8006918:	9308      	str	r3, [sp, #32]
 800691a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800691c:	2b00      	cmp	r3, #0
 800691e:	f000 8104 	beq.w	8006b2a <_dtoa_r+0xb5a>
 8006922:	2e00      	cmp	r6, #0
 8006924:	dd05      	ble.n	8006932 <_dtoa_r+0x962>
 8006926:	4629      	mov	r1, r5
 8006928:	4632      	mov	r2, r6
 800692a:	4658      	mov	r0, fp
 800692c:	f000 fc22 	bl	8007174 <__lshift>
 8006930:	4605      	mov	r5, r0
 8006932:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006934:	2b00      	cmp	r3, #0
 8006936:	d05a      	beq.n	80069ee <_dtoa_r+0xa1e>
 8006938:	4658      	mov	r0, fp
 800693a:	6869      	ldr	r1, [r5, #4]
 800693c:	f000 fa0e 	bl	8006d5c <_Balloc>
 8006940:	4606      	mov	r6, r0
 8006942:	b928      	cbnz	r0, 8006950 <_dtoa_r+0x980>
 8006944:	4602      	mov	r2, r0
 8006946:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800694a:	4b83      	ldr	r3, [pc, #524]	@ (8006b58 <_dtoa_r+0xb88>)
 800694c:	f7ff bb54 	b.w	8005ff8 <_dtoa_r+0x28>
 8006950:	692a      	ldr	r2, [r5, #16]
 8006952:	f105 010c 	add.w	r1, r5, #12
 8006956:	3202      	adds	r2, #2
 8006958:	0092      	lsls	r2, r2, #2
 800695a:	300c      	adds	r0, #12
 800695c:	f000 fe36 	bl	80075cc <memcpy>
 8006960:	2201      	movs	r2, #1
 8006962:	4631      	mov	r1, r6
 8006964:	4658      	mov	r0, fp
 8006966:	f000 fc05 	bl	8007174 <__lshift>
 800696a:	462f      	mov	r7, r5
 800696c:	4605      	mov	r5, r0
 800696e:	f10a 0301 	add.w	r3, sl, #1
 8006972:	9307      	str	r3, [sp, #28]
 8006974:	9b08      	ldr	r3, [sp, #32]
 8006976:	4453      	add	r3, sl
 8006978:	930b      	str	r3, [sp, #44]	@ 0x2c
 800697a:	9b02      	ldr	r3, [sp, #8]
 800697c:	f003 0301 	and.w	r3, r3, #1
 8006980:	930a      	str	r3, [sp, #40]	@ 0x28
 8006982:	9b07      	ldr	r3, [sp, #28]
 8006984:	4621      	mov	r1, r4
 8006986:	3b01      	subs	r3, #1
 8006988:	4648      	mov	r0, r9
 800698a:	9302      	str	r3, [sp, #8]
 800698c:	f7ff fa95 	bl	8005eba <quorem>
 8006990:	4639      	mov	r1, r7
 8006992:	9008      	str	r0, [sp, #32]
 8006994:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006998:	4648      	mov	r0, r9
 800699a:	f000 fc57 	bl	800724c <__mcmp>
 800699e:	462a      	mov	r2, r5
 80069a0:	9009      	str	r0, [sp, #36]	@ 0x24
 80069a2:	4621      	mov	r1, r4
 80069a4:	4658      	mov	r0, fp
 80069a6:	f000 fc6d 	bl	8007284 <__mdiff>
 80069aa:	68c2      	ldr	r2, [r0, #12]
 80069ac:	4606      	mov	r6, r0
 80069ae:	bb02      	cbnz	r2, 80069f2 <_dtoa_r+0xa22>
 80069b0:	4601      	mov	r1, r0
 80069b2:	4648      	mov	r0, r9
 80069b4:	f000 fc4a 	bl	800724c <__mcmp>
 80069b8:	4602      	mov	r2, r0
 80069ba:	4631      	mov	r1, r6
 80069bc:	4658      	mov	r0, fp
 80069be:	920c      	str	r2, [sp, #48]	@ 0x30
 80069c0:	f000 fa0c 	bl	8006ddc <_Bfree>
 80069c4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80069c6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80069c8:	9e07      	ldr	r6, [sp, #28]
 80069ca:	ea43 0102 	orr.w	r1, r3, r2
 80069ce:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80069d0:	4319      	orrs	r1, r3
 80069d2:	d110      	bne.n	80069f6 <_dtoa_r+0xa26>
 80069d4:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80069d8:	d029      	beq.n	8006a2e <_dtoa_r+0xa5e>
 80069da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80069dc:	2b00      	cmp	r3, #0
 80069de:	dd02      	ble.n	80069e6 <_dtoa_r+0xa16>
 80069e0:	9b08      	ldr	r3, [sp, #32]
 80069e2:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80069e6:	9b02      	ldr	r3, [sp, #8]
 80069e8:	f883 8000 	strb.w	r8, [r3]
 80069ec:	e63b      	b.n	8006666 <_dtoa_r+0x696>
 80069ee:	4628      	mov	r0, r5
 80069f0:	e7bb      	b.n	800696a <_dtoa_r+0x99a>
 80069f2:	2201      	movs	r2, #1
 80069f4:	e7e1      	b.n	80069ba <_dtoa_r+0x9ea>
 80069f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	db04      	blt.n	8006a06 <_dtoa_r+0xa36>
 80069fc:	9920      	ldr	r1, [sp, #128]	@ 0x80
 80069fe:	430b      	orrs	r3, r1
 8006a00:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006a02:	430b      	orrs	r3, r1
 8006a04:	d120      	bne.n	8006a48 <_dtoa_r+0xa78>
 8006a06:	2a00      	cmp	r2, #0
 8006a08:	dded      	ble.n	80069e6 <_dtoa_r+0xa16>
 8006a0a:	4649      	mov	r1, r9
 8006a0c:	2201      	movs	r2, #1
 8006a0e:	4658      	mov	r0, fp
 8006a10:	f000 fbb0 	bl	8007174 <__lshift>
 8006a14:	4621      	mov	r1, r4
 8006a16:	4681      	mov	r9, r0
 8006a18:	f000 fc18 	bl	800724c <__mcmp>
 8006a1c:	2800      	cmp	r0, #0
 8006a1e:	dc03      	bgt.n	8006a28 <_dtoa_r+0xa58>
 8006a20:	d1e1      	bne.n	80069e6 <_dtoa_r+0xa16>
 8006a22:	f018 0f01 	tst.w	r8, #1
 8006a26:	d0de      	beq.n	80069e6 <_dtoa_r+0xa16>
 8006a28:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006a2c:	d1d8      	bne.n	80069e0 <_dtoa_r+0xa10>
 8006a2e:	2339      	movs	r3, #57	@ 0x39
 8006a30:	9a02      	ldr	r2, [sp, #8]
 8006a32:	7013      	strb	r3, [r2, #0]
 8006a34:	4633      	mov	r3, r6
 8006a36:	461e      	mov	r6, r3
 8006a38:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8006a3c:	3b01      	subs	r3, #1
 8006a3e:	2a39      	cmp	r2, #57	@ 0x39
 8006a40:	d052      	beq.n	8006ae8 <_dtoa_r+0xb18>
 8006a42:	3201      	adds	r2, #1
 8006a44:	701a      	strb	r2, [r3, #0]
 8006a46:	e60e      	b.n	8006666 <_dtoa_r+0x696>
 8006a48:	2a00      	cmp	r2, #0
 8006a4a:	dd07      	ble.n	8006a5c <_dtoa_r+0xa8c>
 8006a4c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006a50:	d0ed      	beq.n	8006a2e <_dtoa_r+0xa5e>
 8006a52:	9a02      	ldr	r2, [sp, #8]
 8006a54:	f108 0301 	add.w	r3, r8, #1
 8006a58:	7013      	strb	r3, [r2, #0]
 8006a5a:	e604      	b.n	8006666 <_dtoa_r+0x696>
 8006a5c:	9b07      	ldr	r3, [sp, #28]
 8006a5e:	9a07      	ldr	r2, [sp, #28]
 8006a60:	f803 8c01 	strb.w	r8, [r3, #-1]
 8006a64:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006a66:	4293      	cmp	r3, r2
 8006a68:	d028      	beq.n	8006abc <_dtoa_r+0xaec>
 8006a6a:	4649      	mov	r1, r9
 8006a6c:	2300      	movs	r3, #0
 8006a6e:	220a      	movs	r2, #10
 8006a70:	4658      	mov	r0, fp
 8006a72:	f000 f9d5 	bl	8006e20 <__multadd>
 8006a76:	42af      	cmp	r7, r5
 8006a78:	4681      	mov	r9, r0
 8006a7a:	f04f 0300 	mov.w	r3, #0
 8006a7e:	f04f 020a 	mov.w	r2, #10
 8006a82:	4639      	mov	r1, r7
 8006a84:	4658      	mov	r0, fp
 8006a86:	d107      	bne.n	8006a98 <_dtoa_r+0xac8>
 8006a88:	f000 f9ca 	bl	8006e20 <__multadd>
 8006a8c:	4607      	mov	r7, r0
 8006a8e:	4605      	mov	r5, r0
 8006a90:	9b07      	ldr	r3, [sp, #28]
 8006a92:	3301      	adds	r3, #1
 8006a94:	9307      	str	r3, [sp, #28]
 8006a96:	e774      	b.n	8006982 <_dtoa_r+0x9b2>
 8006a98:	f000 f9c2 	bl	8006e20 <__multadd>
 8006a9c:	4629      	mov	r1, r5
 8006a9e:	4607      	mov	r7, r0
 8006aa0:	2300      	movs	r3, #0
 8006aa2:	220a      	movs	r2, #10
 8006aa4:	4658      	mov	r0, fp
 8006aa6:	f000 f9bb 	bl	8006e20 <__multadd>
 8006aaa:	4605      	mov	r5, r0
 8006aac:	e7f0      	b.n	8006a90 <_dtoa_r+0xac0>
 8006aae:	9b08      	ldr	r3, [sp, #32]
 8006ab0:	2700      	movs	r7, #0
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	bfcc      	ite	gt
 8006ab6:	461e      	movgt	r6, r3
 8006ab8:	2601      	movle	r6, #1
 8006aba:	4456      	add	r6, sl
 8006abc:	4649      	mov	r1, r9
 8006abe:	2201      	movs	r2, #1
 8006ac0:	4658      	mov	r0, fp
 8006ac2:	f000 fb57 	bl	8007174 <__lshift>
 8006ac6:	4621      	mov	r1, r4
 8006ac8:	4681      	mov	r9, r0
 8006aca:	f000 fbbf 	bl	800724c <__mcmp>
 8006ace:	2800      	cmp	r0, #0
 8006ad0:	dcb0      	bgt.n	8006a34 <_dtoa_r+0xa64>
 8006ad2:	d102      	bne.n	8006ada <_dtoa_r+0xb0a>
 8006ad4:	f018 0f01 	tst.w	r8, #1
 8006ad8:	d1ac      	bne.n	8006a34 <_dtoa_r+0xa64>
 8006ada:	4633      	mov	r3, r6
 8006adc:	461e      	mov	r6, r3
 8006ade:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006ae2:	2a30      	cmp	r2, #48	@ 0x30
 8006ae4:	d0fa      	beq.n	8006adc <_dtoa_r+0xb0c>
 8006ae6:	e5be      	b.n	8006666 <_dtoa_r+0x696>
 8006ae8:	459a      	cmp	sl, r3
 8006aea:	d1a4      	bne.n	8006a36 <_dtoa_r+0xa66>
 8006aec:	9b04      	ldr	r3, [sp, #16]
 8006aee:	3301      	adds	r3, #1
 8006af0:	9304      	str	r3, [sp, #16]
 8006af2:	2331      	movs	r3, #49	@ 0x31
 8006af4:	f88a 3000 	strb.w	r3, [sl]
 8006af8:	e5b5      	b.n	8006666 <_dtoa_r+0x696>
 8006afa:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006afc:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8006b5c <_dtoa_r+0xb8c>
 8006b00:	b11b      	cbz	r3, 8006b0a <_dtoa_r+0xb3a>
 8006b02:	f10a 0308 	add.w	r3, sl, #8
 8006b06:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8006b08:	6013      	str	r3, [r2, #0]
 8006b0a:	4650      	mov	r0, sl
 8006b0c:	b017      	add	sp, #92	@ 0x5c
 8006b0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b12:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006b14:	2b01      	cmp	r3, #1
 8006b16:	f77f ae3d 	ble.w	8006794 <_dtoa_r+0x7c4>
 8006b1a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006b1c:	930a      	str	r3, [sp, #40]	@ 0x28
 8006b1e:	2001      	movs	r0, #1
 8006b20:	e65b      	b.n	80067da <_dtoa_r+0x80a>
 8006b22:	9b08      	ldr	r3, [sp, #32]
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	f77f aed6 	ble.w	80068d6 <_dtoa_r+0x906>
 8006b2a:	4656      	mov	r6, sl
 8006b2c:	4621      	mov	r1, r4
 8006b2e:	4648      	mov	r0, r9
 8006b30:	f7ff f9c3 	bl	8005eba <quorem>
 8006b34:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006b38:	9b08      	ldr	r3, [sp, #32]
 8006b3a:	f806 8b01 	strb.w	r8, [r6], #1
 8006b3e:	eba6 020a 	sub.w	r2, r6, sl
 8006b42:	4293      	cmp	r3, r2
 8006b44:	ddb3      	ble.n	8006aae <_dtoa_r+0xade>
 8006b46:	4649      	mov	r1, r9
 8006b48:	2300      	movs	r3, #0
 8006b4a:	220a      	movs	r2, #10
 8006b4c:	4658      	mov	r0, fp
 8006b4e:	f000 f967 	bl	8006e20 <__multadd>
 8006b52:	4681      	mov	r9, r0
 8006b54:	e7ea      	b.n	8006b2c <_dtoa_r+0xb5c>
 8006b56:	bf00      	nop
 8006b58:	08007d0a 	.word	0x08007d0a
 8006b5c:	08007c8e 	.word	0x08007c8e

08006b60 <_free_r>:
 8006b60:	b538      	push	{r3, r4, r5, lr}
 8006b62:	4605      	mov	r5, r0
 8006b64:	2900      	cmp	r1, #0
 8006b66:	d040      	beq.n	8006bea <_free_r+0x8a>
 8006b68:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006b6c:	1f0c      	subs	r4, r1, #4
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	bfb8      	it	lt
 8006b72:	18e4      	addlt	r4, r4, r3
 8006b74:	f000 f8e6 	bl	8006d44 <__malloc_lock>
 8006b78:	4a1c      	ldr	r2, [pc, #112]	@ (8006bec <_free_r+0x8c>)
 8006b7a:	6813      	ldr	r3, [r2, #0]
 8006b7c:	b933      	cbnz	r3, 8006b8c <_free_r+0x2c>
 8006b7e:	6063      	str	r3, [r4, #4]
 8006b80:	6014      	str	r4, [r2, #0]
 8006b82:	4628      	mov	r0, r5
 8006b84:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006b88:	f000 b8e2 	b.w	8006d50 <__malloc_unlock>
 8006b8c:	42a3      	cmp	r3, r4
 8006b8e:	d908      	bls.n	8006ba2 <_free_r+0x42>
 8006b90:	6820      	ldr	r0, [r4, #0]
 8006b92:	1821      	adds	r1, r4, r0
 8006b94:	428b      	cmp	r3, r1
 8006b96:	bf01      	itttt	eq
 8006b98:	6819      	ldreq	r1, [r3, #0]
 8006b9a:	685b      	ldreq	r3, [r3, #4]
 8006b9c:	1809      	addeq	r1, r1, r0
 8006b9e:	6021      	streq	r1, [r4, #0]
 8006ba0:	e7ed      	b.n	8006b7e <_free_r+0x1e>
 8006ba2:	461a      	mov	r2, r3
 8006ba4:	685b      	ldr	r3, [r3, #4]
 8006ba6:	b10b      	cbz	r3, 8006bac <_free_r+0x4c>
 8006ba8:	42a3      	cmp	r3, r4
 8006baa:	d9fa      	bls.n	8006ba2 <_free_r+0x42>
 8006bac:	6811      	ldr	r1, [r2, #0]
 8006bae:	1850      	adds	r0, r2, r1
 8006bb0:	42a0      	cmp	r0, r4
 8006bb2:	d10b      	bne.n	8006bcc <_free_r+0x6c>
 8006bb4:	6820      	ldr	r0, [r4, #0]
 8006bb6:	4401      	add	r1, r0
 8006bb8:	1850      	adds	r0, r2, r1
 8006bba:	4283      	cmp	r3, r0
 8006bbc:	6011      	str	r1, [r2, #0]
 8006bbe:	d1e0      	bne.n	8006b82 <_free_r+0x22>
 8006bc0:	6818      	ldr	r0, [r3, #0]
 8006bc2:	685b      	ldr	r3, [r3, #4]
 8006bc4:	4408      	add	r0, r1
 8006bc6:	6010      	str	r0, [r2, #0]
 8006bc8:	6053      	str	r3, [r2, #4]
 8006bca:	e7da      	b.n	8006b82 <_free_r+0x22>
 8006bcc:	d902      	bls.n	8006bd4 <_free_r+0x74>
 8006bce:	230c      	movs	r3, #12
 8006bd0:	602b      	str	r3, [r5, #0]
 8006bd2:	e7d6      	b.n	8006b82 <_free_r+0x22>
 8006bd4:	6820      	ldr	r0, [r4, #0]
 8006bd6:	1821      	adds	r1, r4, r0
 8006bd8:	428b      	cmp	r3, r1
 8006bda:	bf01      	itttt	eq
 8006bdc:	6819      	ldreq	r1, [r3, #0]
 8006bde:	685b      	ldreq	r3, [r3, #4]
 8006be0:	1809      	addeq	r1, r1, r0
 8006be2:	6021      	streq	r1, [r4, #0]
 8006be4:	6063      	str	r3, [r4, #4]
 8006be6:	6054      	str	r4, [r2, #4]
 8006be8:	e7cb      	b.n	8006b82 <_free_r+0x22>
 8006bea:	bd38      	pop	{r3, r4, r5, pc}
 8006bec:	200004ac 	.word	0x200004ac

08006bf0 <malloc>:
 8006bf0:	4b02      	ldr	r3, [pc, #8]	@ (8006bfc <malloc+0xc>)
 8006bf2:	4601      	mov	r1, r0
 8006bf4:	6818      	ldr	r0, [r3, #0]
 8006bf6:	f000 b825 	b.w	8006c44 <_malloc_r>
 8006bfa:	bf00      	nop
 8006bfc:	20000018 	.word	0x20000018

08006c00 <sbrk_aligned>:
 8006c00:	b570      	push	{r4, r5, r6, lr}
 8006c02:	4e0f      	ldr	r6, [pc, #60]	@ (8006c40 <sbrk_aligned+0x40>)
 8006c04:	460c      	mov	r4, r1
 8006c06:	6831      	ldr	r1, [r6, #0]
 8006c08:	4605      	mov	r5, r0
 8006c0a:	b911      	cbnz	r1, 8006c12 <sbrk_aligned+0x12>
 8006c0c:	f000 fcce 	bl	80075ac <_sbrk_r>
 8006c10:	6030      	str	r0, [r6, #0]
 8006c12:	4621      	mov	r1, r4
 8006c14:	4628      	mov	r0, r5
 8006c16:	f000 fcc9 	bl	80075ac <_sbrk_r>
 8006c1a:	1c43      	adds	r3, r0, #1
 8006c1c:	d103      	bne.n	8006c26 <sbrk_aligned+0x26>
 8006c1e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8006c22:	4620      	mov	r0, r4
 8006c24:	bd70      	pop	{r4, r5, r6, pc}
 8006c26:	1cc4      	adds	r4, r0, #3
 8006c28:	f024 0403 	bic.w	r4, r4, #3
 8006c2c:	42a0      	cmp	r0, r4
 8006c2e:	d0f8      	beq.n	8006c22 <sbrk_aligned+0x22>
 8006c30:	1a21      	subs	r1, r4, r0
 8006c32:	4628      	mov	r0, r5
 8006c34:	f000 fcba 	bl	80075ac <_sbrk_r>
 8006c38:	3001      	adds	r0, #1
 8006c3a:	d1f2      	bne.n	8006c22 <sbrk_aligned+0x22>
 8006c3c:	e7ef      	b.n	8006c1e <sbrk_aligned+0x1e>
 8006c3e:	bf00      	nop
 8006c40:	200004a8 	.word	0x200004a8

08006c44 <_malloc_r>:
 8006c44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006c48:	1ccd      	adds	r5, r1, #3
 8006c4a:	f025 0503 	bic.w	r5, r5, #3
 8006c4e:	3508      	adds	r5, #8
 8006c50:	2d0c      	cmp	r5, #12
 8006c52:	bf38      	it	cc
 8006c54:	250c      	movcc	r5, #12
 8006c56:	2d00      	cmp	r5, #0
 8006c58:	4606      	mov	r6, r0
 8006c5a:	db01      	blt.n	8006c60 <_malloc_r+0x1c>
 8006c5c:	42a9      	cmp	r1, r5
 8006c5e:	d904      	bls.n	8006c6a <_malloc_r+0x26>
 8006c60:	230c      	movs	r3, #12
 8006c62:	6033      	str	r3, [r6, #0]
 8006c64:	2000      	movs	r0, #0
 8006c66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006c6a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006d40 <_malloc_r+0xfc>
 8006c6e:	f000 f869 	bl	8006d44 <__malloc_lock>
 8006c72:	f8d8 3000 	ldr.w	r3, [r8]
 8006c76:	461c      	mov	r4, r3
 8006c78:	bb44      	cbnz	r4, 8006ccc <_malloc_r+0x88>
 8006c7a:	4629      	mov	r1, r5
 8006c7c:	4630      	mov	r0, r6
 8006c7e:	f7ff ffbf 	bl	8006c00 <sbrk_aligned>
 8006c82:	1c43      	adds	r3, r0, #1
 8006c84:	4604      	mov	r4, r0
 8006c86:	d158      	bne.n	8006d3a <_malloc_r+0xf6>
 8006c88:	f8d8 4000 	ldr.w	r4, [r8]
 8006c8c:	4627      	mov	r7, r4
 8006c8e:	2f00      	cmp	r7, #0
 8006c90:	d143      	bne.n	8006d1a <_malloc_r+0xd6>
 8006c92:	2c00      	cmp	r4, #0
 8006c94:	d04b      	beq.n	8006d2e <_malloc_r+0xea>
 8006c96:	6823      	ldr	r3, [r4, #0]
 8006c98:	4639      	mov	r1, r7
 8006c9a:	4630      	mov	r0, r6
 8006c9c:	eb04 0903 	add.w	r9, r4, r3
 8006ca0:	f000 fc84 	bl	80075ac <_sbrk_r>
 8006ca4:	4581      	cmp	r9, r0
 8006ca6:	d142      	bne.n	8006d2e <_malloc_r+0xea>
 8006ca8:	6821      	ldr	r1, [r4, #0]
 8006caa:	4630      	mov	r0, r6
 8006cac:	1a6d      	subs	r5, r5, r1
 8006cae:	4629      	mov	r1, r5
 8006cb0:	f7ff ffa6 	bl	8006c00 <sbrk_aligned>
 8006cb4:	3001      	adds	r0, #1
 8006cb6:	d03a      	beq.n	8006d2e <_malloc_r+0xea>
 8006cb8:	6823      	ldr	r3, [r4, #0]
 8006cba:	442b      	add	r3, r5
 8006cbc:	6023      	str	r3, [r4, #0]
 8006cbe:	f8d8 3000 	ldr.w	r3, [r8]
 8006cc2:	685a      	ldr	r2, [r3, #4]
 8006cc4:	bb62      	cbnz	r2, 8006d20 <_malloc_r+0xdc>
 8006cc6:	f8c8 7000 	str.w	r7, [r8]
 8006cca:	e00f      	b.n	8006cec <_malloc_r+0xa8>
 8006ccc:	6822      	ldr	r2, [r4, #0]
 8006cce:	1b52      	subs	r2, r2, r5
 8006cd0:	d420      	bmi.n	8006d14 <_malloc_r+0xd0>
 8006cd2:	2a0b      	cmp	r2, #11
 8006cd4:	d917      	bls.n	8006d06 <_malloc_r+0xc2>
 8006cd6:	1961      	adds	r1, r4, r5
 8006cd8:	42a3      	cmp	r3, r4
 8006cda:	6025      	str	r5, [r4, #0]
 8006cdc:	bf18      	it	ne
 8006cde:	6059      	strne	r1, [r3, #4]
 8006ce0:	6863      	ldr	r3, [r4, #4]
 8006ce2:	bf08      	it	eq
 8006ce4:	f8c8 1000 	streq.w	r1, [r8]
 8006ce8:	5162      	str	r2, [r4, r5]
 8006cea:	604b      	str	r3, [r1, #4]
 8006cec:	4630      	mov	r0, r6
 8006cee:	f000 f82f 	bl	8006d50 <__malloc_unlock>
 8006cf2:	f104 000b 	add.w	r0, r4, #11
 8006cf6:	1d23      	adds	r3, r4, #4
 8006cf8:	f020 0007 	bic.w	r0, r0, #7
 8006cfc:	1ac2      	subs	r2, r0, r3
 8006cfe:	bf1c      	itt	ne
 8006d00:	1a1b      	subne	r3, r3, r0
 8006d02:	50a3      	strne	r3, [r4, r2]
 8006d04:	e7af      	b.n	8006c66 <_malloc_r+0x22>
 8006d06:	6862      	ldr	r2, [r4, #4]
 8006d08:	42a3      	cmp	r3, r4
 8006d0a:	bf0c      	ite	eq
 8006d0c:	f8c8 2000 	streq.w	r2, [r8]
 8006d10:	605a      	strne	r2, [r3, #4]
 8006d12:	e7eb      	b.n	8006cec <_malloc_r+0xa8>
 8006d14:	4623      	mov	r3, r4
 8006d16:	6864      	ldr	r4, [r4, #4]
 8006d18:	e7ae      	b.n	8006c78 <_malloc_r+0x34>
 8006d1a:	463c      	mov	r4, r7
 8006d1c:	687f      	ldr	r7, [r7, #4]
 8006d1e:	e7b6      	b.n	8006c8e <_malloc_r+0x4a>
 8006d20:	461a      	mov	r2, r3
 8006d22:	685b      	ldr	r3, [r3, #4]
 8006d24:	42a3      	cmp	r3, r4
 8006d26:	d1fb      	bne.n	8006d20 <_malloc_r+0xdc>
 8006d28:	2300      	movs	r3, #0
 8006d2a:	6053      	str	r3, [r2, #4]
 8006d2c:	e7de      	b.n	8006cec <_malloc_r+0xa8>
 8006d2e:	230c      	movs	r3, #12
 8006d30:	4630      	mov	r0, r6
 8006d32:	6033      	str	r3, [r6, #0]
 8006d34:	f000 f80c 	bl	8006d50 <__malloc_unlock>
 8006d38:	e794      	b.n	8006c64 <_malloc_r+0x20>
 8006d3a:	6005      	str	r5, [r0, #0]
 8006d3c:	e7d6      	b.n	8006cec <_malloc_r+0xa8>
 8006d3e:	bf00      	nop
 8006d40:	200004ac 	.word	0x200004ac

08006d44 <__malloc_lock>:
 8006d44:	4801      	ldr	r0, [pc, #4]	@ (8006d4c <__malloc_lock+0x8>)
 8006d46:	f7ff b8a8 	b.w	8005e9a <__retarget_lock_acquire_recursive>
 8006d4a:	bf00      	nop
 8006d4c:	200004a4 	.word	0x200004a4

08006d50 <__malloc_unlock>:
 8006d50:	4801      	ldr	r0, [pc, #4]	@ (8006d58 <__malloc_unlock+0x8>)
 8006d52:	f7ff b8a3 	b.w	8005e9c <__retarget_lock_release_recursive>
 8006d56:	bf00      	nop
 8006d58:	200004a4 	.word	0x200004a4

08006d5c <_Balloc>:
 8006d5c:	b570      	push	{r4, r5, r6, lr}
 8006d5e:	69c6      	ldr	r6, [r0, #28]
 8006d60:	4604      	mov	r4, r0
 8006d62:	460d      	mov	r5, r1
 8006d64:	b976      	cbnz	r6, 8006d84 <_Balloc+0x28>
 8006d66:	2010      	movs	r0, #16
 8006d68:	f7ff ff42 	bl	8006bf0 <malloc>
 8006d6c:	4602      	mov	r2, r0
 8006d6e:	61e0      	str	r0, [r4, #28]
 8006d70:	b920      	cbnz	r0, 8006d7c <_Balloc+0x20>
 8006d72:	216b      	movs	r1, #107	@ 0x6b
 8006d74:	4b17      	ldr	r3, [pc, #92]	@ (8006dd4 <_Balloc+0x78>)
 8006d76:	4818      	ldr	r0, [pc, #96]	@ (8006dd8 <_Balloc+0x7c>)
 8006d78:	f000 fc36 	bl	80075e8 <__assert_func>
 8006d7c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006d80:	6006      	str	r6, [r0, #0]
 8006d82:	60c6      	str	r6, [r0, #12]
 8006d84:	69e6      	ldr	r6, [r4, #28]
 8006d86:	68f3      	ldr	r3, [r6, #12]
 8006d88:	b183      	cbz	r3, 8006dac <_Balloc+0x50>
 8006d8a:	69e3      	ldr	r3, [r4, #28]
 8006d8c:	68db      	ldr	r3, [r3, #12]
 8006d8e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006d92:	b9b8      	cbnz	r0, 8006dc4 <_Balloc+0x68>
 8006d94:	2101      	movs	r1, #1
 8006d96:	fa01 f605 	lsl.w	r6, r1, r5
 8006d9a:	1d72      	adds	r2, r6, #5
 8006d9c:	4620      	mov	r0, r4
 8006d9e:	0092      	lsls	r2, r2, #2
 8006da0:	f000 fc40 	bl	8007624 <_calloc_r>
 8006da4:	b160      	cbz	r0, 8006dc0 <_Balloc+0x64>
 8006da6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006daa:	e00e      	b.n	8006dca <_Balloc+0x6e>
 8006dac:	2221      	movs	r2, #33	@ 0x21
 8006dae:	2104      	movs	r1, #4
 8006db0:	4620      	mov	r0, r4
 8006db2:	f000 fc37 	bl	8007624 <_calloc_r>
 8006db6:	69e3      	ldr	r3, [r4, #28]
 8006db8:	60f0      	str	r0, [r6, #12]
 8006dba:	68db      	ldr	r3, [r3, #12]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d1e4      	bne.n	8006d8a <_Balloc+0x2e>
 8006dc0:	2000      	movs	r0, #0
 8006dc2:	bd70      	pop	{r4, r5, r6, pc}
 8006dc4:	6802      	ldr	r2, [r0, #0]
 8006dc6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006dca:	2300      	movs	r3, #0
 8006dcc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006dd0:	e7f7      	b.n	8006dc2 <_Balloc+0x66>
 8006dd2:	bf00      	nop
 8006dd4:	08007c9b 	.word	0x08007c9b
 8006dd8:	08007d1b 	.word	0x08007d1b

08006ddc <_Bfree>:
 8006ddc:	b570      	push	{r4, r5, r6, lr}
 8006dde:	69c6      	ldr	r6, [r0, #28]
 8006de0:	4605      	mov	r5, r0
 8006de2:	460c      	mov	r4, r1
 8006de4:	b976      	cbnz	r6, 8006e04 <_Bfree+0x28>
 8006de6:	2010      	movs	r0, #16
 8006de8:	f7ff ff02 	bl	8006bf0 <malloc>
 8006dec:	4602      	mov	r2, r0
 8006dee:	61e8      	str	r0, [r5, #28]
 8006df0:	b920      	cbnz	r0, 8006dfc <_Bfree+0x20>
 8006df2:	218f      	movs	r1, #143	@ 0x8f
 8006df4:	4b08      	ldr	r3, [pc, #32]	@ (8006e18 <_Bfree+0x3c>)
 8006df6:	4809      	ldr	r0, [pc, #36]	@ (8006e1c <_Bfree+0x40>)
 8006df8:	f000 fbf6 	bl	80075e8 <__assert_func>
 8006dfc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006e00:	6006      	str	r6, [r0, #0]
 8006e02:	60c6      	str	r6, [r0, #12]
 8006e04:	b13c      	cbz	r4, 8006e16 <_Bfree+0x3a>
 8006e06:	69eb      	ldr	r3, [r5, #28]
 8006e08:	6862      	ldr	r2, [r4, #4]
 8006e0a:	68db      	ldr	r3, [r3, #12]
 8006e0c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006e10:	6021      	str	r1, [r4, #0]
 8006e12:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006e16:	bd70      	pop	{r4, r5, r6, pc}
 8006e18:	08007c9b 	.word	0x08007c9b
 8006e1c:	08007d1b 	.word	0x08007d1b

08006e20 <__multadd>:
 8006e20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e24:	4607      	mov	r7, r0
 8006e26:	460c      	mov	r4, r1
 8006e28:	461e      	mov	r6, r3
 8006e2a:	2000      	movs	r0, #0
 8006e2c:	690d      	ldr	r5, [r1, #16]
 8006e2e:	f101 0c14 	add.w	ip, r1, #20
 8006e32:	f8dc 3000 	ldr.w	r3, [ip]
 8006e36:	3001      	adds	r0, #1
 8006e38:	b299      	uxth	r1, r3
 8006e3a:	fb02 6101 	mla	r1, r2, r1, r6
 8006e3e:	0c1e      	lsrs	r6, r3, #16
 8006e40:	0c0b      	lsrs	r3, r1, #16
 8006e42:	fb02 3306 	mla	r3, r2, r6, r3
 8006e46:	b289      	uxth	r1, r1
 8006e48:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006e4c:	4285      	cmp	r5, r0
 8006e4e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006e52:	f84c 1b04 	str.w	r1, [ip], #4
 8006e56:	dcec      	bgt.n	8006e32 <__multadd+0x12>
 8006e58:	b30e      	cbz	r6, 8006e9e <__multadd+0x7e>
 8006e5a:	68a3      	ldr	r3, [r4, #8]
 8006e5c:	42ab      	cmp	r3, r5
 8006e5e:	dc19      	bgt.n	8006e94 <__multadd+0x74>
 8006e60:	6861      	ldr	r1, [r4, #4]
 8006e62:	4638      	mov	r0, r7
 8006e64:	3101      	adds	r1, #1
 8006e66:	f7ff ff79 	bl	8006d5c <_Balloc>
 8006e6a:	4680      	mov	r8, r0
 8006e6c:	b928      	cbnz	r0, 8006e7a <__multadd+0x5a>
 8006e6e:	4602      	mov	r2, r0
 8006e70:	21ba      	movs	r1, #186	@ 0xba
 8006e72:	4b0c      	ldr	r3, [pc, #48]	@ (8006ea4 <__multadd+0x84>)
 8006e74:	480c      	ldr	r0, [pc, #48]	@ (8006ea8 <__multadd+0x88>)
 8006e76:	f000 fbb7 	bl	80075e8 <__assert_func>
 8006e7a:	6922      	ldr	r2, [r4, #16]
 8006e7c:	f104 010c 	add.w	r1, r4, #12
 8006e80:	3202      	adds	r2, #2
 8006e82:	0092      	lsls	r2, r2, #2
 8006e84:	300c      	adds	r0, #12
 8006e86:	f000 fba1 	bl	80075cc <memcpy>
 8006e8a:	4621      	mov	r1, r4
 8006e8c:	4638      	mov	r0, r7
 8006e8e:	f7ff ffa5 	bl	8006ddc <_Bfree>
 8006e92:	4644      	mov	r4, r8
 8006e94:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006e98:	3501      	adds	r5, #1
 8006e9a:	615e      	str	r6, [r3, #20]
 8006e9c:	6125      	str	r5, [r4, #16]
 8006e9e:	4620      	mov	r0, r4
 8006ea0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006ea4:	08007d0a 	.word	0x08007d0a
 8006ea8:	08007d1b 	.word	0x08007d1b

08006eac <__hi0bits>:
 8006eac:	4603      	mov	r3, r0
 8006eae:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8006eb2:	bf3a      	itte	cc
 8006eb4:	0403      	lslcc	r3, r0, #16
 8006eb6:	2010      	movcc	r0, #16
 8006eb8:	2000      	movcs	r0, #0
 8006eba:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006ebe:	bf3c      	itt	cc
 8006ec0:	021b      	lslcc	r3, r3, #8
 8006ec2:	3008      	addcc	r0, #8
 8006ec4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006ec8:	bf3c      	itt	cc
 8006eca:	011b      	lslcc	r3, r3, #4
 8006ecc:	3004      	addcc	r0, #4
 8006ece:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006ed2:	bf3c      	itt	cc
 8006ed4:	009b      	lslcc	r3, r3, #2
 8006ed6:	3002      	addcc	r0, #2
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	db05      	blt.n	8006ee8 <__hi0bits+0x3c>
 8006edc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8006ee0:	f100 0001 	add.w	r0, r0, #1
 8006ee4:	bf08      	it	eq
 8006ee6:	2020      	moveq	r0, #32
 8006ee8:	4770      	bx	lr

08006eea <__lo0bits>:
 8006eea:	6803      	ldr	r3, [r0, #0]
 8006eec:	4602      	mov	r2, r0
 8006eee:	f013 0007 	ands.w	r0, r3, #7
 8006ef2:	d00b      	beq.n	8006f0c <__lo0bits+0x22>
 8006ef4:	07d9      	lsls	r1, r3, #31
 8006ef6:	d421      	bmi.n	8006f3c <__lo0bits+0x52>
 8006ef8:	0798      	lsls	r0, r3, #30
 8006efa:	bf49      	itett	mi
 8006efc:	085b      	lsrmi	r3, r3, #1
 8006efe:	089b      	lsrpl	r3, r3, #2
 8006f00:	2001      	movmi	r0, #1
 8006f02:	6013      	strmi	r3, [r2, #0]
 8006f04:	bf5c      	itt	pl
 8006f06:	2002      	movpl	r0, #2
 8006f08:	6013      	strpl	r3, [r2, #0]
 8006f0a:	4770      	bx	lr
 8006f0c:	b299      	uxth	r1, r3
 8006f0e:	b909      	cbnz	r1, 8006f14 <__lo0bits+0x2a>
 8006f10:	2010      	movs	r0, #16
 8006f12:	0c1b      	lsrs	r3, r3, #16
 8006f14:	b2d9      	uxtb	r1, r3
 8006f16:	b909      	cbnz	r1, 8006f1c <__lo0bits+0x32>
 8006f18:	3008      	adds	r0, #8
 8006f1a:	0a1b      	lsrs	r3, r3, #8
 8006f1c:	0719      	lsls	r1, r3, #28
 8006f1e:	bf04      	itt	eq
 8006f20:	091b      	lsreq	r3, r3, #4
 8006f22:	3004      	addeq	r0, #4
 8006f24:	0799      	lsls	r1, r3, #30
 8006f26:	bf04      	itt	eq
 8006f28:	089b      	lsreq	r3, r3, #2
 8006f2a:	3002      	addeq	r0, #2
 8006f2c:	07d9      	lsls	r1, r3, #31
 8006f2e:	d403      	bmi.n	8006f38 <__lo0bits+0x4e>
 8006f30:	085b      	lsrs	r3, r3, #1
 8006f32:	f100 0001 	add.w	r0, r0, #1
 8006f36:	d003      	beq.n	8006f40 <__lo0bits+0x56>
 8006f38:	6013      	str	r3, [r2, #0]
 8006f3a:	4770      	bx	lr
 8006f3c:	2000      	movs	r0, #0
 8006f3e:	4770      	bx	lr
 8006f40:	2020      	movs	r0, #32
 8006f42:	4770      	bx	lr

08006f44 <__i2b>:
 8006f44:	b510      	push	{r4, lr}
 8006f46:	460c      	mov	r4, r1
 8006f48:	2101      	movs	r1, #1
 8006f4a:	f7ff ff07 	bl	8006d5c <_Balloc>
 8006f4e:	4602      	mov	r2, r0
 8006f50:	b928      	cbnz	r0, 8006f5e <__i2b+0x1a>
 8006f52:	f240 1145 	movw	r1, #325	@ 0x145
 8006f56:	4b04      	ldr	r3, [pc, #16]	@ (8006f68 <__i2b+0x24>)
 8006f58:	4804      	ldr	r0, [pc, #16]	@ (8006f6c <__i2b+0x28>)
 8006f5a:	f000 fb45 	bl	80075e8 <__assert_func>
 8006f5e:	2301      	movs	r3, #1
 8006f60:	6144      	str	r4, [r0, #20]
 8006f62:	6103      	str	r3, [r0, #16]
 8006f64:	bd10      	pop	{r4, pc}
 8006f66:	bf00      	nop
 8006f68:	08007d0a 	.word	0x08007d0a
 8006f6c:	08007d1b 	.word	0x08007d1b

08006f70 <__multiply>:
 8006f70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f74:	4614      	mov	r4, r2
 8006f76:	690a      	ldr	r2, [r1, #16]
 8006f78:	6923      	ldr	r3, [r4, #16]
 8006f7a:	460f      	mov	r7, r1
 8006f7c:	429a      	cmp	r2, r3
 8006f7e:	bfa2      	ittt	ge
 8006f80:	4623      	movge	r3, r4
 8006f82:	460c      	movge	r4, r1
 8006f84:	461f      	movge	r7, r3
 8006f86:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8006f8a:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8006f8e:	68a3      	ldr	r3, [r4, #8]
 8006f90:	6861      	ldr	r1, [r4, #4]
 8006f92:	eb0a 0609 	add.w	r6, sl, r9
 8006f96:	42b3      	cmp	r3, r6
 8006f98:	b085      	sub	sp, #20
 8006f9a:	bfb8      	it	lt
 8006f9c:	3101      	addlt	r1, #1
 8006f9e:	f7ff fedd 	bl	8006d5c <_Balloc>
 8006fa2:	b930      	cbnz	r0, 8006fb2 <__multiply+0x42>
 8006fa4:	4602      	mov	r2, r0
 8006fa6:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8006faa:	4b43      	ldr	r3, [pc, #268]	@ (80070b8 <__multiply+0x148>)
 8006fac:	4843      	ldr	r0, [pc, #268]	@ (80070bc <__multiply+0x14c>)
 8006fae:	f000 fb1b 	bl	80075e8 <__assert_func>
 8006fb2:	f100 0514 	add.w	r5, r0, #20
 8006fb6:	462b      	mov	r3, r5
 8006fb8:	2200      	movs	r2, #0
 8006fba:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006fbe:	4543      	cmp	r3, r8
 8006fc0:	d321      	bcc.n	8007006 <__multiply+0x96>
 8006fc2:	f107 0114 	add.w	r1, r7, #20
 8006fc6:	f104 0214 	add.w	r2, r4, #20
 8006fca:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8006fce:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8006fd2:	9302      	str	r3, [sp, #8]
 8006fd4:	1b13      	subs	r3, r2, r4
 8006fd6:	3b15      	subs	r3, #21
 8006fd8:	f023 0303 	bic.w	r3, r3, #3
 8006fdc:	3304      	adds	r3, #4
 8006fde:	f104 0715 	add.w	r7, r4, #21
 8006fe2:	42ba      	cmp	r2, r7
 8006fe4:	bf38      	it	cc
 8006fe6:	2304      	movcc	r3, #4
 8006fe8:	9301      	str	r3, [sp, #4]
 8006fea:	9b02      	ldr	r3, [sp, #8]
 8006fec:	9103      	str	r1, [sp, #12]
 8006fee:	428b      	cmp	r3, r1
 8006ff0:	d80c      	bhi.n	800700c <__multiply+0x9c>
 8006ff2:	2e00      	cmp	r6, #0
 8006ff4:	dd03      	ble.n	8006ffe <__multiply+0x8e>
 8006ff6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d05a      	beq.n	80070b4 <__multiply+0x144>
 8006ffe:	6106      	str	r6, [r0, #16]
 8007000:	b005      	add	sp, #20
 8007002:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007006:	f843 2b04 	str.w	r2, [r3], #4
 800700a:	e7d8      	b.n	8006fbe <__multiply+0x4e>
 800700c:	f8b1 a000 	ldrh.w	sl, [r1]
 8007010:	f1ba 0f00 	cmp.w	sl, #0
 8007014:	d023      	beq.n	800705e <__multiply+0xee>
 8007016:	46a9      	mov	r9, r5
 8007018:	f04f 0c00 	mov.w	ip, #0
 800701c:	f104 0e14 	add.w	lr, r4, #20
 8007020:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007024:	f8d9 3000 	ldr.w	r3, [r9]
 8007028:	fa1f fb87 	uxth.w	fp, r7
 800702c:	b29b      	uxth	r3, r3
 800702e:	fb0a 330b 	mla	r3, sl, fp, r3
 8007032:	4463      	add	r3, ip
 8007034:	f8d9 c000 	ldr.w	ip, [r9]
 8007038:	0c3f      	lsrs	r7, r7, #16
 800703a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800703e:	fb0a c707 	mla	r7, sl, r7, ip
 8007042:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8007046:	b29b      	uxth	r3, r3
 8007048:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800704c:	4572      	cmp	r2, lr
 800704e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007052:	f849 3b04 	str.w	r3, [r9], #4
 8007056:	d8e3      	bhi.n	8007020 <__multiply+0xb0>
 8007058:	9b01      	ldr	r3, [sp, #4]
 800705a:	f845 c003 	str.w	ip, [r5, r3]
 800705e:	9b03      	ldr	r3, [sp, #12]
 8007060:	3104      	adds	r1, #4
 8007062:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007066:	f1b9 0f00 	cmp.w	r9, #0
 800706a:	d021      	beq.n	80070b0 <__multiply+0x140>
 800706c:	46ae      	mov	lr, r5
 800706e:	f04f 0a00 	mov.w	sl, #0
 8007072:	682b      	ldr	r3, [r5, #0]
 8007074:	f104 0c14 	add.w	ip, r4, #20
 8007078:	f8bc b000 	ldrh.w	fp, [ip]
 800707c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8007080:	b29b      	uxth	r3, r3
 8007082:	fb09 770b 	mla	r7, r9, fp, r7
 8007086:	4457      	add	r7, sl
 8007088:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800708c:	f84e 3b04 	str.w	r3, [lr], #4
 8007090:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007094:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007098:	f8be 3000 	ldrh.w	r3, [lr]
 800709c:	4562      	cmp	r2, ip
 800709e:	fb09 330a 	mla	r3, r9, sl, r3
 80070a2:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80070a6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80070aa:	d8e5      	bhi.n	8007078 <__multiply+0x108>
 80070ac:	9f01      	ldr	r7, [sp, #4]
 80070ae:	51eb      	str	r3, [r5, r7]
 80070b0:	3504      	adds	r5, #4
 80070b2:	e79a      	b.n	8006fea <__multiply+0x7a>
 80070b4:	3e01      	subs	r6, #1
 80070b6:	e79c      	b.n	8006ff2 <__multiply+0x82>
 80070b8:	08007d0a 	.word	0x08007d0a
 80070bc:	08007d1b 	.word	0x08007d1b

080070c0 <__pow5mult>:
 80070c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80070c4:	4615      	mov	r5, r2
 80070c6:	f012 0203 	ands.w	r2, r2, #3
 80070ca:	4607      	mov	r7, r0
 80070cc:	460e      	mov	r6, r1
 80070ce:	d007      	beq.n	80070e0 <__pow5mult+0x20>
 80070d0:	4c25      	ldr	r4, [pc, #148]	@ (8007168 <__pow5mult+0xa8>)
 80070d2:	3a01      	subs	r2, #1
 80070d4:	2300      	movs	r3, #0
 80070d6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80070da:	f7ff fea1 	bl	8006e20 <__multadd>
 80070de:	4606      	mov	r6, r0
 80070e0:	10ad      	asrs	r5, r5, #2
 80070e2:	d03d      	beq.n	8007160 <__pow5mult+0xa0>
 80070e4:	69fc      	ldr	r4, [r7, #28]
 80070e6:	b97c      	cbnz	r4, 8007108 <__pow5mult+0x48>
 80070e8:	2010      	movs	r0, #16
 80070ea:	f7ff fd81 	bl	8006bf0 <malloc>
 80070ee:	4602      	mov	r2, r0
 80070f0:	61f8      	str	r0, [r7, #28]
 80070f2:	b928      	cbnz	r0, 8007100 <__pow5mult+0x40>
 80070f4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80070f8:	4b1c      	ldr	r3, [pc, #112]	@ (800716c <__pow5mult+0xac>)
 80070fa:	481d      	ldr	r0, [pc, #116]	@ (8007170 <__pow5mult+0xb0>)
 80070fc:	f000 fa74 	bl	80075e8 <__assert_func>
 8007100:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007104:	6004      	str	r4, [r0, #0]
 8007106:	60c4      	str	r4, [r0, #12]
 8007108:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800710c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007110:	b94c      	cbnz	r4, 8007126 <__pow5mult+0x66>
 8007112:	f240 2171 	movw	r1, #625	@ 0x271
 8007116:	4638      	mov	r0, r7
 8007118:	f7ff ff14 	bl	8006f44 <__i2b>
 800711c:	2300      	movs	r3, #0
 800711e:	4604      	mov	r4, r0
 8007120:	f8c8 0008 	str.w	r0, [r8, #8]
 8007124:	6003      	str	r3, [r0, #0]
 8007126:	f04f 0900 	mov.w	r9, #0
 800712a:	07eb      	lsls	r3, r5, #31
 800712c:	d50a      	bpl.n	8007144 <__pow5mult+0x84>
 800712e:	4631      	mov	r1, r6
 8007130:	4622      	mov	r2, r4
 8007132:	4638      	mov	r0, r7
 8007134:	f7ff ff1c 	bl	8006f70 <__multiply>
 8007138:	4680      	mov	r8, r0
 800713a:	4631      	mov	r1, r6
 800713c:	4638      	mov	r0, r7
 800713e:	f7ff fe4d 	bl	8006ddc <_Bfree>
 8007142:	4646      	mov	r6, r8
 8007144:	106d      	asrs	r5, r5, #1
 8007146:	d00b      	beq.n	8007160 <__pow5mult+0xa0>
 8007148:	6820      	ldr	r0, [r4, #0]
 800714a:	b938      	cbnz	r0, 800715c <__pow5mult+0x9c>
 800714c:	4622      	mov	r2, r4
 800714e:	4621      	mov	r1, r4
 8007150:	4638      	mov	r0, r7
 8007152:	f7ff ff0d 	bl	8006f70 <__multiply>
 8007156:	6020      	str	r0, [r4, #0]
 8007158:	f8c0 9000 	str.w	r9, [r0]
 800715c:	4604      	mov	r4, r0
 800715e:	e7e4      	b.n	800712a <__pow5mult+0x6a>
 8007160:	4630      	mov	r0, r6
 8007162:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007166:	bf00      	nop
 8007168:	08007d74 	.word	0x08007d74
 800716c:	08007c9b 	.word	0x08007c9b
 8007170:	08007d1b 	.word	0x08007d1b

08007174 <__lshift>:
 8007174:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007178:	460c      	mov	r4, r1
 800717a:	4607      	mov	r7, r0
 800717c:	4691      	mov	r9, r2
 800717e:	6923      	ldr	r3, [r4, #16]
 8007180:	6849      	ldr	r1, [r1, #4]
 8007182:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007186:	68a3      	ldr	r3, [r4, #8]
 8007188:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800718c:	f108 0601 	add.w	r6, r8, #1
 8007190:	42b3      	cmp	r3, r6
 8007192:	db0b      	blt.n	80071ac <__lshift+0x38>
 8007194:	4638      	mov	r0, r7
 8007196:	f7ff fde1 	bl	8006d5c <_Balloc>
 800719a:	4605      	mov	r5, r0
 800719c:	b948      	cbnz	r0, 80071b2 <__lshift+0x3e>
 800719e:	4602      	mov	r2, r0
 80071a0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80071a4:	4b27      	ldr	r3, [pc, #156]	@ (8007244 <__lshift+0xd0>)
 80071a6:	4828      	ldr	r0, [pc, #160]	@ (8007248 <__lshift+0xd4>)
 80071a8:	f000 fa1e 	bl	80075e8 <__assert_func>
 80071ac:	3101      	adds	r1, #1
 80071ae:	005b      	lsls	r3, r3, #1
 80071b0:	e7ee      	b.n	8007190 <__lshift+0x1c>
 80071b2:	2300      	movs	r3, #0
 80071b4:	f100 0114 	add.w	r1, r0, #20
 80071b8:	f100 0210 	add.w	r2, r0, #16
 80071bc:	4618      	mov	r0, r3
 80071be:	4553      	cmp	r3, sl
 80071c0:	db33      	blt.n	800722a <__lshift+0xb6>
 80071c2:	6920      	ldr	r0, [r4, #16]
 80071c4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80071c8:	f104 0314 	add.w	r3, r4, #20
 80071cc:	f019 091f 	ands.w	r9, r9, #31
 80071d0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80071d4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80071d8:	d02b      	beq.n	8007232 <__lshift+0xbe>
 80071da:	468a      	mov	sl, r1
 80071dc:	2200      	movs	r2, #0
 80071de:	f1c9 0e20 	rsb	lr, r9, #32
 80071e2:	6818      	ldr	r0, [r3, #0]
 80071e4:	fa00 f009 	lsl.w	r0, r0, r9
 80071e8:	4310      	orrs	r0, r2
 80071ea:	f84a 0b04 	str.w	r0, [sl], #4
 80071ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80071f2:	459c      	cmp	ip, r3
 80071f4:	fa22 f20e 	lsr.w	r2, r2, lr
 80071f8:	d8f3      	bhi.n	80071e2 <__lshift+0x6e>
 80071fa:	ebac 0304 	sub.w	r3, ip, r4
 80071fe:	3b15      	subs	r3, #21
 8007200:	f023 0303 	bic.w	r3, r3, #3
 8007204:	3304      	adds	r3, #4
 8007206:	f104 0015 	add.w	r0, r4, #21
 800720a:	4584      	cmp	ip, r0
 800720c:	bf38      	it	cc
 800720e:	2304      	movcc	r3, #4
 8007210:	50ca      	str	r2, [r1, r3]
 8007212:	b10a      	cbz	r2, 8007218 <__lshift+0xa4>
 8007214:	f108 0602 	add.w	r6, r8, #2
 8007218:	3e01      	subs	r6, #1
 800721a:	4638      	mov	r0, r7
 800721c:	4621      	mov	r1, r4
 800721e:	612e      	str	r6, [r5, #16]
 8007220:	f7ff fddc 	bl	8006ddc <_Bfree>
 8007224:	4628      	mov	r0, r5
 8007226:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800722a:	f842 0f04 	str.w	r0, [r2, #4]!
 800722e:	3301      	adds	r3, #1
 8007230:	e7c5      	b.n	80071be <__lshift+0x4a>
 8007232:	3904      	subs	r1, #4
 8007234:	f853 2b04 	ldr.w	r2, [r3], #4
 8007238:	459c      	cmp	ip, r3
 800723a:	f841 2f04 	str.w	r2, [r1, #4]!
 800723e:	d8f9      	bhi.n	8007234 <__lshift+0xc0>
 8007240:	e7ea      	b.n	8007218 <__lshift+0xa4>
 8007242:	bf00      	nop
 8007244:	08007d0a 	.word	0x08007d0a
 8007248:	08007d1b 	.word	0x08007d1b

0800724c <__mcmp>:
 800724c:	4603      	mov	r3, r0
 800724e:	690a      	ldr	r2, [r1, #16]
 8007250:	6900      	ldr	r0, [r0, #16]
 8007252:	b530      	push	{r4, r5, lr}
 8007254:	1a80      	subs	r0, r0, r2
 8007256:	d10e      	bne.n	8007276 <__mcmp+0x2a>
 8007258:	3314      	adds	r3, #20
 800725a:	3114      	adds	r1, #20
 800725c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007260:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007264:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007268:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800726c:	4295      	cmp	r5, r2
 800726e:	d003      	beq.n	8007278 <__mcmp+0x2c>
 8007270:	d205      	bcs.n	800727e <__mcmp+0x32>
 8007272:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007276:	bd30      	pop	{r4, r5, pc}
 8007278:	42a3      	cmp	r3, r4
 800727a:	d3f3      	bcc.n	8007264 <__mcmp+0x18>
 800727c:	e7fb      	b.n	8007276 <__mcmp+0x2a>
 800727e:	2001      	movs	r0, #1
 8007280:	e7f9      	b.n	8007276 <__mcmp+0x2a>
	...

08007284 <__mdiff>:
 8007284:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007288:	4689      	mov	r9, r1
 800728a:	4606      	mov	r6, r0
 800728c:	4611      	mov	r1, r2
 800728e:	4648      	mov	r0, r9
 8007290:	4614      	mov	r4, r2
 8007292:	f7ff ffdb 	bl	800724c <__mcmp>
 8007296:	1e05      	subs	r5, r0, #0
 8007298:	d112      	bne.n	80072c0 <__mdiff+0x3c>
 800729a:	4629      	mov	r1, r5
 800729c:	4630      	mov	r0, r6
 800729e:	f7ff fd5d 	bl	8006d5c <_Balloc>
 80072a2:	4602      	mov	r2, r0
 80072a4:	b928      	cbnz	r0, 80072b2 <__mdiff+0x2e>
 80072a6:	f240 2137 	movw	r1, #567	@ 0x237
 80072aa:	4b3e      	ldr	r3, [pc, #248]	@ (80073a4 <__mdiff+0x120>)
 80072ac:	483e      	ldr	r0, [pc, #248]	@ (80073a8 <__mdiff+0x124>)
 80072ae:	f000 f99b 	bl	80075e8 <__assert_func>
 80072b2:	2301      	movs	r3, #1
 80072b4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80072b8:	4610      	mov	r0, r2
 80072ba:	b003      	add	sp, #12
 80072bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072c0:	bfbc      	itt	lt
 80072c2:	464b      	movlt	r3, r9
 80072c4:	46a1      	movlt	r9, r4
 80072c6:	4630      	mov	r0, r6
 80072c8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80072cc:	bfba      	itte	lt
 80072ce:	461c      	movlt	r4, r3
 80072d0:	2501      	movlt	r5, #1
 80072d2:	2500      	movge	r5, #0
 80072d4:	f7ff fd42 	bl	8006d5c <_Balloc>
 80072d8:	4602      	mov	r2, r0
 80072da:	b918      	cbnz	r0, 80072e4 <__mdiff+0x60>
 80072dc:	f240 2145 	movw	r1, #581	@ 0x245
 80072e0:	4b30      	ldr	r3, [pc, #192]	@ (80073a4 <__mdiff+0x120>)
 80072e2:	e7e3      	b.n	80072ac <__mdiff+0x28>
 80072e4:	f100 0b14 	add.w	fp, r0, #20
 80072e8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80072ec:	f109 0310 	add.w	r3, r9, #16
 80072f0:	60c5      	str	r5, [r0, #12]
 80072f2:	f04f 0c00 	mov.w	ip, #0
 80072f6:	f109 0514 	add.w	r5, r9, #20
 80072fa:	46d9      	mov	r9, fp
 80072fc:	6926      	ldr	r6, [r4, #16]
 80072fe:	f104 0e14 	add.w	lr, r4, #20
 8007302:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007306:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800730a:	9301      	str	r3, [sp, #4]
 800730c:	9b01      	ldr	r3, [sp, #4]
 800730e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8007312:	f853 af04 	ldr.w	sl, [r3, #4]!
 8007316:	b281      	uxth	r1, r0
 8007318:	9301      	str	r3, [sp, #4]
 800731a:	fa1f f38a 	uxth.w	r3, sl
 800731e:	1a5b      	subs	r3, r3, r1
 8007320:	0c00      	lsrs	r0, r0, #16
 8007322:	4463      	add	r3, ip
 8007324:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8007328:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800732c:	b29b      	uxth	r3, r3
 800732e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007332:	4576      	cmp	r6, lr
 8007334:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007338:	f849 3b04 	str.w	r3, [r9], #4
 800733c:	d8e6      	bhi.n	800730c <__mdiff+0x88>
 800733e:	1b33      	subs	r3, r6, r4
 8007340:	3b15      	subs	r3, #21
 8007342:	f023 0303 	bic.w	r3, r3, #3
 8007346:	3415      	adds	r4, #21
 8007348:	3304      	adds	r3, #4
 800734a:	42a6      	cmp	r6, r4
 800734c:	bf38      	it	cc
 800734e:	2304      	movcc	r3, #4
 8007350:	441d      	add	r5, r3
 8007352:	445b      	add	r3, fp
 8007354:	461e      	mov	r6, r3
 8007356:	462c      	mov	r4, r5
 8007358:	4544      	cmp	r4, r8
 800735a:	d30e      	bcc.n	800737a <__mdiff+0xf6>
 800735c:	f108 0103 	add.w	r1, r8, #3
 8007360:	1b49      	subs	r1, r1, r5
 8007362:	f021 0103 	bic.w	r1, r1, #3
 8007366:	3d03      	subs	r5, #3
 8007368:	45a8      	cmp	r8, r5
 800736a:	bf38      	it	cc
 800736c:	2100      	movcc	r1, #0
 800736e:	440b      	add	r3, r1
 8007370:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007374:	b199      	cbz	r1, 800739e <__mdiff+0x11a>
 8007376:	6117      	str	r7, [r2, #16]
 8007378:	e79e      	b.n	80072b8 <__mdiff+0x34>
 800737a:	46e6      	mov	lr, ip
 800737c:	f854 1b04 	ldr.w	r1, [r4], #4
 8007380:	fa1f fc81 	uxth.w	ip, r1
 8007384:	44f4      	add	ip, lr
 8007386:	0c08      	lsrs	r0, r1, #16
 8007388:	4471      	add	r1, lr
 800738a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800738e:	b289      	uxth	r1, r1
 8007390:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007394:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007398:	f846 1b04 	str.w	r1, [r6], #4
 800739c:	e7dc      	b.n	8007358 <__mdiff+0xd4>
 800739e:	3f01      	subs	r7, #1
 80073a0:	e7e6      	b.n	8007370 <__mdiff+0xec>
 80073a2:	bf00      	nop
 80073a4:	08007d0a 	.word	0x08007d0a
 80073a8:	08007d1b 	.word	0x08007d1b

080073ac <__d2b>:
 80073ac:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 80073b0:	2101      	movs	r1, #1
 80073b2:	4690      	mov	r8, r2
 80073b4:	4699      	mov	r9, r3
 80073b6:	9e08      	ldr	r6, [sp, #32]
 80073b8:	f7ff fcd0 	bl	8006d5c <_Balloc>
 80073bc:	4604      	mov	r4, r0
 80073be:	b930      	cbnz	r0, 80073ce <__d2b+0x22>
 80073c0:	4602      	mov	r2, r0
 80073c2:	f240 310f 	movw	r1, #783	@ 0x30f
 80073c6:	4b23      	ldr	r3, [pc, #140]	@ (8007454 <__d2b+0xa8>)
 80073c8:	4823      	ldr	r0, [pc, #140]	@ (8007458 <__d2b+0xac>)
 80073ca:	f000 f90d 	bl	80075e8 <__assert_func>
 80073ce:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80073d2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80073d6:	b10d      	cbz	r5, 80073dc <__d2b+0x30>
 80073d8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80073dc:	9301      	str	r3, [sp, #4]
 80073de:	f1b8 0300 	subs.w	r3, r8, #0
 80073e2:	d024      	beq.n	800742e <__d2b+0x82>
 80073e4:	4668      	mov	r0, sp
 80073e6:	9300      	str	r3, [sp, #0]
 80073e8:	f7ff fd7f 	bl	8006eea <__lo0bits>
 80073ec:	e9dd 1200 	ldrd	r1, r2, [sp]
 80073f0:	b1d8      	cbz	r0, 800742a <__d2b+0x7e>
 80073f2:	f1c0 0320 	rsb	r3, r0, #32
 80073f6:	fa02 f303 	lsl.w	r3, r2, r3
 80073fa:	430b      	orrs	r3, r1
 80073fc:	40c2      	lsrs	r2, r0
 80073fe:	6163      	str	r3, [r4, #20]
 8007400:	9201      	str	r2, [sp, #4]
 8007402:	9b01      	ldr	r3, [sp, #4]
 8007404:	2b00      	cmp	r3, #0
 8007406:	bf0c      	ite	eq
 8007408:	2201      	moveq	r2, #1
 800740a:	2202      	movne	r2, #2
 800740c:	61a3      	str	r3, [r4, #24]
 800740e:	6122      	str	r2, [r4, #16]
 8007410:	b1ad      	cbz	r5, 800743e <__d2b+0x92>
 8007412:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007416:	4405      	add	r5, r0
 8007418:	6035      	str	r5, [r6, #0]
 800741a:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800741e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007420:	6018      	str	r0, [r3, #0]
 8007422:	4620      	mov	r0, r4
 8007424:	b002      	add	sp, #8
 8007426:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800742a:	6161      	str	r1, [r4, #20]
 800742c:	e7e9      	b.n	8007402 <__d2b+0x56>
 800742e:	a801      	add	r0, sp, #4
 8007430:	f7ff fd5b 	bl	8006eea <__lo0bits>
 8007434:	9b01      	ldr	r3, [sp, #4]
 8007436:	2201      	movs	r2, #1
 8007438:	6163      	str	r3, [r4, #20]
 800743a:	3020      	adds	r0, #32
 800743c:	e7e7      	b.n	800740e <__d2b+0x62>
 800743e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8007442:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007446:	6030      	str	r0, [r6, #0]
 8007448:	6918      	ldr	r0, [r3, #16]
 800744a:	f7ff fd2f 	bl	8006eac <__hi0bits>
 800744e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007452:	e7e4      	b.n	800741e <__d2b+0x72>
 8007454:	08007d0a 	.word	0x08007d0a
 8007458:	08007d1b 	.word	0x08007d1b

0800745c <__sflush_r>:
 800745c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007462:	0716      	lsls	r6, r2, #28
 8007464:	4605      	mov	r5, r0
 8007466:	460c      	mov	r4, r1
 8007468:	d454      	bmi.n	8007514 <__sflush_r+0xb8>
 800746a:	684b      	ldr	r3, [r1, #4]
 800746c:	2b00      	cmp	r3, #0
 800746e:	dc02      	bgt.n	8007476 <__sflush_r+0x1a>
 8007470:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007472:	2b00      	cmp	r3, #0
 8007474:	dd48      	ble.n	8007508 <__sflush_r+0xac>
 8007476:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007478:	2e00      	cmp	r6, #0
 800747a:	d045      	beq.n	8007508 <__sflush_r+0xac>
 800747c:	2300      	movs	r3, #0
 800747e:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007482:	682f      	ldr	r7, [r5, #0]
 8007484:	6a21      	ldr	r1, [r4, #32]
 8007486:	602b      	str	r3, [r5, #0]
 8007488:	d030      	beq.n	80074ec <__sflush_r+0x90>
 800748a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800748c:	89a3      	ldrh	r3, [r4, #12]
 800748e:	0759      	lsls	r1, r3, #29
 8007490:	d505      	bpl.n	800749e <__sflush_r+0x42>
 8007492:	6863      	ldr	r3, [r4, #4]
 8007494:	1ad2      	subs	r2, r2, r3
 8007496:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007498:	b10b      	cbz	r3, 800749e <__sflush_r+0x42>
 800749a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800749c:	1ad2      	subs	r2, r2, r3
 800749e:	2300      	movs	r3, #0
 80074a0:	4628      	mov	r0, r5
 80074a2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80074a4:	6a21      	ldr	r1, [r4, #32]
 80074a6:	47b0      	blx	r6
 80074a8:	1c43      	adds	r3, r0, #1
 80074aa:	89a3      	ldrh	r3, [r4, #12]
 80074ac:	d106      	bne.n	80074bc <__sflush_r+0x60>
 80074ae:	6829      	ldr	r1, [r5, #0]
 80074b0:	291d      	cmp	r1, #29
 80074b2:	d82b      	bhi.n	800750c <__sflush_r+0xb0>
 80074b4:	4a28      	ldr	r2, [pc, #160]	@ (8007558 <__sflush_r+0xfc>)
 80074b6:	410a      	asrs	r2, r1
 80074b8:	07d6      	lsls	r6, r2, #31
 80074ba:	d427      	bmi.n	800750c <__sflush_r+0xb0>
 80074bc:	2200      	movs	r2, #0
 80074be:	6062      	str	r2, [r4, #4]
 80074c0:	6922      	ldr	r2, [r4, #16]
 80074c2:	04d9      	lsls	r1, r3, #19
 80074c4:	6022      	str	r2, [r4, #0]
 80074c6:	d504      	bpl.n	80074d2 <__sflush_r+0x76>
 80074c8:	1c42      	adds	r2, r0, #1
 80074ca:	d101      	bne.n	80074d0 <__sflush_r+0x74>
 80074cc:	682b      	ldr	r3, [r5, #0]
 80074ce:	b903      	cbnz	r3, 80074d2 <__sflush_r+0x76>
 80074d0:	6560      	str	r0, [r4, #84]	@ 0x54
 80074d2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80074d4:	602f      	str	r7, [r5, #0]
 80074d6:	b1b9      	cbz	r1, 8007508 <__sflush_r+0xac>
 80074d8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80074dc:	4299      	cmp	r1, r3
 80074de:	d002      	beq.n	80074e6 <__sflush_r+0x8a>
 80074e0:	4628      	mov	r0, r5
 80074e2:	f7ff fb3d 	bl	8006b60 <_free_r>
 80074e6:	2300      	movs	r3, #0
 80074e8:	6363      	str	r3, [r4, #52]	@ 0x34
 80074ea:	e00d      	b.n	8007508 <__sflush_r+0xac>
 80074ec:	2301      	movs	r3, #1
 80074ee:	4628      	mov	r0, r5
 80074f0:	47b0      	blx	r6
 80074f2:	4602      	mov	r2, r0
 80074f4:	1c50      	adds	r0, r2, #1
 80074f6:	d1c9      	bne.n	800748c <__sflush_r+0x30>
 80074f8:	682b      	ldr	r3, [r5, #0]
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d0c6      	beq.n	800748c <__sflush_r+0x30>
 80074fe:	2b1d      	cmp	r3, #29
 8007500:	d001      	beq.n	8007506 <__sflush_r+0xaa>
 8007502:	2b16      	cmp	r3, #22
 8007504:	d11d      	bne.n	8007542 <__sflush_r+0xe6>
 8007506:	602f      	str	r7, [r5, #0]
 8007508:	2000      	movs	r0, #0
 800750a:	e021      	b.n	8007550 <__sflush_r+0xf4>
 800750c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007510:	b21b      	sxth	r3, r3
 8007512:	e01a      	b.n	800754a <__sflush_r+0xee>
 8007514:	690f      	ldr	r7, [r1, #16]
 8007516:	2f00      	cmp	r7, #0
 8007518:	d0f6      	beq.n	8007508 <__sflush_r+0xac>
 800751a:	0793      	lsls	r3, r2, #30
 800751c:	bf18      	it	ne
 800751e:	2300      	movne	r3, #0
 8007520:	680e      	ldr	r6, [r1, #0]
 8007522:	bf08      	it	eq
 8007524:	694b      	ldreq	r3, [r1, #20]
 8007526:	1bf6      	subs	r6, r6, r7
 8007528:	600f      	str	r7, [r1, #0]
 800752a:	608b      	str	r3, [r1, #8]
 800752c:	2e00      	cmp	r6, #0
 800752e:	ddeb      	ble.n	8007508 <__sflush_r+0xac>
 8007530:	4633      	mov	r3, r6
 8007532:	463a      	mov	r2, r7
 8007534:	4628      	mov	r0, r5
 8007536:	6a21      	ldr	r1, [r4, #32]
 8007538:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800753c:	47e0      	blx	ip
 800753e:	2800      	cmp	r0, #0
 8007540:	dc07      	bgt.n	8007552 <__sflush_r+0xf6>
 8007542:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007546:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800754a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800754e:	81a3      	strh	r3, [r4, #12]
 8007550:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007552:	4407      	add	r7, r0
 8007554:	1a36      	subs	r6, r6, r0
 8007556:	e7e9      	b.n	800752c <__sflush_r+0xd0>
 8007558:	dfbffffe 	.word	0xdfbffffe

0800755c <_fflush_r>:
 800755c:	b538      	push	{r3, r4, r5, lr}
 800755e:	690b      	ldr	r3, [r1, #16]
 8007560:	4605      	mov	r5, r0
 8007562:	460c      	mov	r4, r1
 8007564:	b913      	cbnz	r3, 800756c <_fflush_r+0x10>
 8007566:	2500      	movs	r5, #0
 8007568:	4628      	mov	r0, r5
 800756a:	bd38      	pop	{r3, r4, r5, pc}
 800756c:	b118      	cbz	r0, 8007576 <_fflush_r+0x1a>
 800756e:	6a03      	ldr	r3, [r0, #32]
 8007570:	b90b      	cbnz	r3, 8007576 <_fflush_r+0x1a>
 8007572:	f7fe fb9b 	bl	8005cac <__sinit>
 8007576:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800757a:	2b00      	cmp	r3, #0
 800757c:	d0f3      	beq.n	8007566 <_fflush_r+0xa>
 800757e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007580:	07d0      	lsls	r0, r2, #31
 8007582:	d404      	bmi.n	800758e <_fflush_r+0x32>
 8007584:	0599      	lsls	r1, r3, #22
 8007586:	d402      	bmi.n	800758e <_fflush_r+0x32>
 8007588:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800758a:	f7fe fc86 	bl	8005e9a <__retarget_lock_acquire_recursive>
 800758e:	4628      	mov	r0, r5
 8007590:	4621      	mov	r1, r4
 8007592:	f7ff ff63 	bl	800745c <__sflush_r>
 8007596:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007598:	4605      	mov	r5, r0
 800759a:	07da      	lsls	r2, r3, #31
 800759c:	d4e4      	bmi.n	8007568 <_fflush_r+0xc>
 800759e:	89a3      	ldrh	r3, [r4, #12]
 80075a0:	059b      	lsls	r3, r3, #22
 80075a2:	d4e1      	bmi.n	8007568 <_fflush_r+0xc>
 80075a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80075a6:	f7fe fc79 	bl	8005e9c <__retarget_lock_release_recursive>
 80075aa:	e7dd      	b.n	8007568 <_fflush_r+0xc>

080075ac <_sbrk_r>:
 80075ac:	b538      	push	{r3, r4, r5, lr}
 80075ae:	2300      	movs	r3, #0
 80075b0:	4d05      	ldr	r5, [pc, #20]	@ (80075c8 <_sbrk_r+0x1c>)
 80075b2:	4604      	mov	r4, r0
 80075b4:	4608      	mov	r0, r1
 80075b6:	602b      	str	r3, [r5, #0]
 80075b8:	f7fa f974 	bl	80018a4 <_sbrk>
 80075bc:	1c43      	adds	r3, r0, #1
 80075be:	d102      	bne.n	80075c6 <_sbrk_r+0x1a>
 80075c0:	682b      	ldr	r3, [r5, #0]
 80075c2:	b103      	cbz	r3, 80075c6 <_sbrk_r+0x1a>
 80075c4:	6023      	str	r3, [r4, #0]
 80075c6:	bd38      	pop	{r3, r4, r5, pc}
 80075c8:	200004a0 	.word	0x200004a0

080075cc <memcpy>:
 80075cc:	440a      	add	r2, r1
 80075ce:	4291      	cmp	r1, r2
 80075d0:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80075d4:	d100      	bne.n	80075d8 <memcpy+0xc>
 80075d6:	4770      	bx	lr
 80075d8:	b510      	push	{r4, lr}
 80075da:	f811 4b01 	ldrb.w	r4, [r1], #1
 80075de:	4291      	cmp	r1, r2
 80075e0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80075e4:	d1f9      	bne.n	80075da <memcpy+0xe>
 80075e6:	bd10      	pop	{r4, pc}

080075e8 <__assert_func>:
 80075e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80075ea:	4614      	mov	r4, r2
 80075ec:	461a      	mov	r2, r3
 80075ee:	4b09      	ldr	r3, [pc, #36]	@ (8007614 <__assert_func+0x2c>)
 80075f0:	4605      	mov	r5, r0
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	68d8      	ldr	r0, [r3, #12]
 80075f6:	b954      	cbnz	r4, 800760e <__assert_func+0x26>
 80075f8:	4b07      	ldr	r3, [pc, #28]	@ (8007618 <__assert_func+0x30>)
 80075fa:	461c      	mov	r4, r3
 80075fc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007600:	9100      	str	r1, [sp, #0]
 8007602:	462b      	mov	r3, r5
 8007604:	4905      	ldr	r1, [pc, #20]	@ (800761c <__assert_func+0x34>)
 8007606:	f000 f841 	bl	800768c <fiprintf>
 800760a:	f000 f851 	bl	80076b0 <abort>
 800760e:	4b04      	ldr	r3, [pc, #16]	@ (8007620 <__assert_func+0x38>)
 8007610:	e7f4      	b.n	80075fc <__assert_func+0x14>
 8007612:	bf00      	nop
 8007614:	20000018 	.word	0x20000018
 8007618:	08007eb5 	.word	0x08007eb5
 800761c:	08007e87 	.word	0x08007e87
 8007620:	08007e7a 	.word	0x08007e7a

08007624 <_calloc_r>:
 8007624:	b570      	push	{r4, r5, r6, lr}
 8007626:	fba1 5402 	umull	r5, r4, r1, r2
 800762a:	b93c      	cbnz	r4, 800763c <_calloc_r+0x18>
 800762c:	4629      	mov	r1, r5
 800762e:	f7ff fb09 	bl	8006c44 <_malloc_r>
 8007632:	4606      	mov	r6, r0
 8007634:	b928      	cbnz	r0, 8007642 <_calloc_r+0x1e>
 8007636:	2600      	movs	r6, #0
 8007638:	4630      	mov	r0, r6
 800763a:	bd70      	pop	{r4, r5, r6, pc}
 800763c:	220c      	movs	r2, #12
 800763e:	6002      	str	r2, [r0, #0]
 8007640:	e7f9      	b.n	8007636 <_calloc_r+0x12>
 8007642:	462a      	mov	r2, r5
 8007644:	4621      	mov	r1, r4
 8007646:	f7fe fbaa 	bl	8005d9e <memset>
 800764a:	e7f5      	b.n	8007638 <_calloc_r+0x14>

0800764c <__ascii_mbtowc>:
 800764c:	b082      	sub	sp, #8
 800764e:	b901      	cbnz	r1, 8007652 <__ascii_mbtowc+0x6>
 8007650:	a901      	add	r1, sp, #4
 8007652:	b142      	cbz	r2, 8007666 <__ascii_mbtowc+0x1a>
 8007654:	b14b      	cbz	r3, 800766a <__ascii_mbtowc+0x1e>
 8007656:	7813      	ldrb	r3, [r2, #0]
 8007658:	600b      	str	r3, [r1, #0]
 800765a:	7812      	ldrb	r2, [r2, #0]
 800765c:	1e10      	subs	r0, r2, #0
 800765e:	bf18      	it	ne
 8007660:	2001      	movne	r0, #1
 8007662:	b002      	add	sp, #8
 8007664:	4770      	bx	lr
 8007666:	4610      	mov	r0, r2
 8007668:	e7fb      	b.n	8007662 <__ascii_mbtowc+0x16>
 800766a:	f06f 0001 	mvn.w	r0, #1
 800766e:	e7f8      	b.n	8007662 <__ascii_mbtowc+0x16>

08007670 <__ascii_wctomb>:
 8007670:	4603      	mov	r3, r0
 8007672:	4608      	mov	r0, r1
 8007674:	b141      	cbz	r1, 8007688 <__ascii_wctomb+0x18>
 8007676:	2aff      	cmp	r2, #255	@ 0xff
 8007678:	d904      	bls.n	8007684 <__ascii_wctomb+0x14>
 800767a:	228a      	movs	r2, #138	@ 0x8a
 800767c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007680:	601a      	str	r2, [r3, #0]
 8007682:	4770      	bx	lr
 8007684:	2001      	movs	r0, #1
 8007686:	700a      	strb	r2, [r1, #0]
 8007688:	4770      	bx	lr
	...

0800768c <fiprintf>:
 800768c:	b40e      	push	{r1, r2, r3}
 800768e:	b503      	push	{r0, r1, lr}
 8007690:	4601      	mov	r1, r0
 8007692:	ab03      	add	r3, sp, #12
 8007694:	4805      	ldr	r0, [pc, #20]	@ (80076ac <fiprintf+0x20>)
 8007696:	f853 2b04 	ldr.w	r2, [r3], #4
 800769a:	6800      	ldr	r0, [r0, #0]
 800769c:	9301      	str	r3, [sp, #4]
 800769e:	f000 f835 	bl	800770c <_vfiprintf_r>
 80076a2:	b002      	add	sp, #8
 80076a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80076a8:	b003      	add	sp, #12
 80076aa:	4770      	bx	lr
 80076ac:	20000018 	.word	0x20000018

080076b0 <abort>:
 80076b0:	2006      	movs	r0, #6
 80076b2:	b508      	push	{r3, lr}
 80076b4:	f000 f9fe 	bl	8007ab4 <raise>
 80076b8:	2001      	movs	r0, #1
 80076ba:	f7fa f87e 	bl	80017ba <_exit>

080076be <__sfputc_r>:
 80076be:	6893      	ldr	r3, [r2, #8]
 80076c0:	b410      	push	{r4}
 80076c2:	3b01      	subs	r3, #1
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	6093      	str	r3, [r2, #8]
 80076c8:	da07      	bge.n	80076da <__sfputc_r+0x1c>
 80076ca:	6994      	ldr	r4, [r2, #24]
 80076cc:	42a3      	cmp	r3, r4
 80076ce:	db01      	blt.n	80076d4 <__sfputc_r+0x16>
 80076d0:	290a      	cmp	r1, #10
 80076d2:	d102      	bne.n	80076da <__sfputc_r+0x1c>
 80076d4:	bc10      	pop	{r4}
 80076d6:	f000 b931 	b.w	800793c <__swbuf_r>
 80076da:	6813      	ldr	r3, [r2, #0]
 80076dc:	1c58      	adds	r0, r3, #1
 80076de:	6010      	str	r0, [r2, #0]
 80076e0:	7019      	strb	r1, [r3, #0]
 80076e2:	4608      	mov	r0, r1
 80076e4:	bc10      	pop	{r4}
 80076e6:	4770      	bx	lr

080076e8 <__sfputs_r>:
 80076e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076ea:	4606      	mov	r6, r0
 80076ec:	460f      	mov	r7, r1
 80076ee:	4614      	mov	r4, r2
 80076f0:	18d5      	adds	r5, r2, r3
 80076f2:	42ac      	cmp	r4, r5
 80076f4:	d101      	bne.n	80076fa <__sfputs_r+0x12>
 80076f6:	2000      	movs	r0, #0
 80076f8:	e007      	b.n	800770a <__sfputs_r+0x22>
 80076fa:	463a      	mov	r2, r7
 80076fc:	4630      	mov	r0, r6
 80076fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007702:	f7ff ffdc 	bl	80076be <__sfputc_r>
 8007706:	1c43      	adds	r3, r0, #1
 8007708:	d1f3      	bne.n	80076f2 <__sfputs_r+0xa>
 800770a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800770c <_vfiprintf_r>:
 800770c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007710:	460d      	mov	r5, r1
 8007712:	4614      	mov	r4, r2
 8007714:	4698      	mov	r8, r3
 8007716:	4606      	mov	r6, r0
 8007718:	b09d      	sub	sp, #116	@ 0x74
 800771a:	b118      	cbz	r0, 8007724 <_vfiprintf_r+0x18>
 800771c:	6a03      	ldr	r3, [r0, #32]
 800771e:	b90b      	cbnz	r3, 8007724 <_vfiprintf_r+0x18>
 8007720:	f7fe fac4 	bl	8005cac <__sinit>
 8007724:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007726:	07d9      	lsls	r1, r3, #31
 8007728:	d405      	bmi.n	8007736 <_vfiprintf_r+0x2a>
 800772a:	89ab      	ldrh	r3, [r5, #12]
 800772c:	059a      	lsls	r2, r3, #22
 800772e:	d402      	bmi.n	8007736 <_vfiprintf_r+0x2a>
 8007730:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007732:	f7fe fbb2 	bl	8005e9a <__retarget_lock_acquire_recursive>
 8007736:	89ab      	ldrh	r3, [r5, #12]
 8007738:	071b      	lsls	r3, r3, #28
 800773a:	d501      	bpl.n	8007740 <_vfiprintf_r+0x34>
 800773c:	692b      	ldr	r3, [r5, #16]
 800773e:	b99b      	cbnz	r3, 8007768 <_vfiprintf_r+0x5c>
 8007740:	4629      	mov	r1, r5
 8007742:	4630      	mov	r0, r6
 8007744:	f000 f938 	bl	80079b8 <__swsetup_r>
 8007748:	b170      	cbz	r0, 8007768 <_vfiprintf_r+0x5c>
 800774a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800774c:	07dc      	lsls	r4, r3, #31
 800774e:	d504      	bpl.n	800775a <_vfiprintf_r+0x4e>
 8007750:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007754:	b01d      	add	sp, #116	@ 0x74
 8007756:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800775a:	89ab      	ldrh	r3, [r5, #12]
 800775c:	0598      	lsls	r0, r3, #22
 800775e:	d4f7      	bmi.n	8007750 <_vfiprintf_r+0x44>
 8007760:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007762:	f7fe fb9b 	bl	8005e9c <__retarget_lock_release_recursive>
 8007766:	e7f3      	b.n	8007750 <_vfiprintf_r+0x44>
 8007768:	2300      	movs	r3, #0
 800776a:	9309      	str	r3, [sp, #36]	@ 0x24
 800776c:	2320      	movs	r3, #32
 800776e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007772:	2330      	movs	r3, #48	@ 0x30
 8007774:	f04f 0901 	mov.w	r9, #1
 8007778:	f8cd 800c 	str.w	r8, [sp, #12]
 800777c:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8007928 <_vfiprintf_r+0x21c>
 8007780:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007784:	4623      	mov	r3, r4
 8007786:	469a      	mov	sl, r3
 8007788:	f813 2b01 	ldrb.w	r2, [r3], #1
 800778c:	b10a      	cbz	r2, 8007792 <_vfiprintf_r+0x86>
 800778e:	2a25      	cmp	r2, #37	@ 0x25
 8007790:	d1f9      	bne.n	8007786 <_vfiprintf_r+0x7a>
 8007792:	ebba 0b04 	subs.w	fp, sl, r4
 8007796:	d00b      	beq.n	80077b0 <_vfiprintf_r+0xa4>
 8007798:	465b      	mov	r3, fp
 800779a:	4622      	mov	r2, r4
 800779c:	4629      	mov	r1, r5
 800779e:	4630      	mov	r0, r6
 80077a0:	f7ff ffa2 	bl	80076e8 <__sfputs_r>
 80077a4:	3001      	adds	r0, #1
 80077a6:	f000 80a7 	beq.w	80078f8 <_vfiprintf_r+0x1ec>
 80077aa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80077ac:	445a      	add	r2, fp
 80077ae:	9209      	str	r2, [sp, #36]	@ 0x24
 80077b0:	f89a 3000 	ldrb.w	r3, [sl]
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	f000 809f 	beq.w	80078f8 <_vfiprintf_r+0x1ec>
 80077ba:	2300      	movs	r3, #0
 80077bc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80077c0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80077c4:	f10a 0a01 	add.w	sl, sl, #1
 80077c8:	9304      	str	r3, [sp, #16]
 80077ca:	9307      	str	r3, [sp, #28]
 80077cc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80077d0:	931a      	str	r3, [sp, #104]	@ 0x68
 80077d2:	4654      	mov	r4, sl
 80077d4:	2205      	movs	r2, #5
 80077d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80077da:	4853      	ldr	r0, [pc, #332]	@ (8007928 <_vfiprintf_r+0x21c>)
 80077dc:	f7fe fb5f 	bl	8005e9e <memchr>
 80077e0:	9a04      	ldr	r2, [sp, #16]
 80077e2:	b9d8      	cbnz	r0, 800781c <_vfiprintf_r+0x110>
 80077e4:	06d1      	lsls	r1, r2, #27
 80077e6:	bf44      	itt	mi
 80077e8:	2320      	movmi	r3, #32
 80077ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80077ee:	0713      	lsls	r3, r2, #28
 80077f0:	bf44      	itt	mi
 80077f2:	232b      	movmi	r3, #43	@ 0x2b
 80077f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80077f8:	f89a 3000 	ldrb.w	r3, [sl]
 80077fc:	2b2a      	cmp	r3, #42	@ 0x2a
 80077fe:	d015      	beq.n	800782c <_vfiprintf_r+0x120>
 8007800:	4654      	mov	r4, sl
 8007802:	2000      	movs	r0, #0
 8007804:	f04f 0c0a 	mov.w	ip, #10
 8007808:	9a07      	ldr	r2, [sp, #28]
 800780a:	4621      	mov	r1, r4
 800780c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007810:	3b30      	subs	r3, #48	@ 0x30
 8007812:	2b09      	cmp	r3, #9
 8007814:	d94b      	bls.n	80078ae <_vfiprintf_r+0x1a2>
 8007816:	b1b0      	cbz	r0, 8007846 <_vfiprintf_r+0x13a>
 8007818:	9207      	str	r2, [sp, #28]
 800781a:	e014      	b.n	8007846 <_vfiprintf_r+0x13a>
 800781c:	eba0 0308 	sub.w	r3, r0, r8
 8007820:	fa09 f303 	lsl.w	r3, r9, r3
 8007824:	4313      	orrs	r3, r2
 8007826:	46a2      	mov	sl, r4
 8007828:	9304      	str	r3, [sp, #16]
 800782a:	e7d2      	b.n	80077d2 <_vfiprintf_r+0xc6>
 800782c:	9b03      	ldr	r3, [sp, #12]
 800782e:	1d19      	adds	r1, r3, #4
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	9103      	str	r1, [sp, #12]
 8007834:	2b00      	cmp	r3, #0
 8007836:	bfbb      	ittet	lt
 8007838:	425b      	neglt	r3, r3
 800783a:	f042 0202 	orrlt.w	r2, r2, #2
 800783e:	9307      	strge	r3, [sp, #28]
 8007840:	9307      	strlt	r3, [sp, #28]
 8007842:	bfb8      	it	lt
 8007844:	9204      	strlt	r2, [sp, #16]
 8007846:	7823      	ldrb	r3, [r4, #0]
 8007848:	2b2e      	cmp	r3, #46	@ 0x2e
 800784a:	d10a      	bne.n	8007862 <_vfiprintf_r+0x156>
 800784c:	7863      	ldrb	r3, [r4, #1]
 800784e:	2b2a      	cmp	r3, #42	@ 0x2a
 8007850:	d132      	bne.n	80078b8 <_vfiprintf_r+0x1ac>
 8007852:	9b03      	ldr	r3, [sp, #12]
 8007854:	3402      	adds	r4, #2
 8007856:	1d1a      	adds	r2, r3, #4
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	9203      	str	r2, [sp, #12]
 800785c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007860:	9305      	str	r3, [sp, #20]
 8007862:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800792c <_vfiprintf_r+0x220>
 8007866:	2203      	movs	r2, #3
 8007868:	4650      	mov	r0, sl
 800786a:	7821      	ldrb	r1, [r4, #0]
 800786c:	f7fe fb17 	bl	8005e9e <memchr>
 8007870:	b138      	cbz	r0, 8007882 <_vfiprintf_r+0x176>
 8007872:	2240      	movs	r2, #64	@ 0x40
 8007874:	9b04      	ldr	r3, [sp, #16]
 8007876:	eba0 000a 	sub.w	r0, r0, sl
 800787a:	4082      	lsls	r2, r0
 800787c:	4313      	orrs	r3, r2
 800787e:	3401      	adds	r4, #1
 8007880:	9304      	str	r3, [sp, #16]
 8007882:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007886:	2206      	movs	r2, #6
 8007888:	4829      	ldr	r0, [pc, #164]	@ (8007930 <_vfiprintf_r+0x224>)
 800788a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800788e:	f7fe fb06 	bl	8005e9e <memchr>
 8007892:	2800      	cmp	r0, #0
 8007894:	d03f      	beq.n	8007916 <_vfiprintf_r+0x20a>
 8007896:	4b27      	ldr	r3, [pc, #156]	@ (8007934 <_vfiprintf_r+0x228>)
 8007898:	bb1b      	cbnz	r3, 80078e2 <_vfiprintf_r+0x1d6>
 800789a:	9b03      	ldr	r3, [sp, #12]
 800789c:	3307      	adds	r3, #7
 800789e:	f023 0307 	bic.w	r3, r3, #7
 80078a2:	3308      	adds	r3, #8
 80078a4:	9303      	str	r3, [sp, #12]
 80078a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80078a8:	443b      	add	r3, r7
 80078aa:	9309      	str	r3, [sp, #36]	@ 0x24
 80078ac:	e76a      	b.n	8007784 <_vfiprintf_r+0x78>
 80078ae:	460c      	mov	r4, r1
 80078b0:	2001      	movs	r0, #1
 80078b2:	fb0c 3202 	mla	r2, ip, r2, r3
 80078b6:	e7a8      	b.n	800780a <_vfiprintf_r+0xfe>
 80078b8:	2300      	movs	r3, #0
 80078ba:	f04f 0c0a 	mov.w	ip, #10
 80078be:	4619      	mov	r1, r3
 80078c0:	3401      	adds	r4, #1
 80078c2:	9305      	str	r3, [sp, #20]
 80078c4:	4620      	mov	r0, r4
 80078c6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80078ca:	3a30      	subs	r2, #48	@ 0x30
 80078cc:	2a09      	cmp	r2, #9
 80078ce:	d903      	bls.n	80078d8 <_vfiprintf_r+0x1cc>
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d0c6      	beq.n	8007862 <_vfiprintf_r+0x156>
 80078d4:	9105      	str	r1, [sp, #20]
 80078d6:	e7c4      	b.n	8007862 <_vfiprintf_r+0x156>
 80078d8:	4604      	mov	r4, r0
 80078da:	2301      	movs	r3, #1
 80078dc:	fb0c 2101 	mla	r1, ip, r1, r2
 80078e0:	e7f0      	b.n	80078c4 <_vfiprintf_r+0x1b8>
 80078e2:	ab03      	add	r3, sp, #12
 80078e4:	9300      	str	r3, [sp, #0]
 80078e6:	462a      	mov	r2, r5
 80078e8:	4630      	mov	r0, r6
 80078ea:	4b13      	ldr	r3, [pc, #76]	@ (8007938 <_vfiprintf_r+0x22c>)
 80078ec:	a904      	add	r1, sp, #16
 80078ee:	f7fd fd93 	bl	8005418 <_printf_float>
 80078f2:	4607      	mov	r7, r0
 80078f4:	1c78      	adds	r0, r7, #1
 80078f6:	d1d6      	bne.n	80078a6 <_vfiprintf_r+0x19a>
 80078f8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80078fa:	07d9      	lsls	r1, r3, #31
 80078fc:	d405      	bmi.n	800790a <_vfiprintf_r+0x1fe>
 80078fe:	89ab      	ldrh	r3, [r5, #12]
 8007900:	059a      	lsls	r2, r3, #22
 8007902:	d402      	bmi.n	800790a <_vfiprintf_r+0x1fe>
 8007904:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007906:	f7fe fac9 	bl	8005e9c <__retarget_lock_release_recursive>
 800790a:	89ab      	ldrh	r3, [r5, #12]
 800790c:	065b      	lsls	r3, r3, #25
 800790e:	f53f af1f 	bmi.w	8007750 <_vfiprintf_r+0x44>
 8007912:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007914:	e71e      	b.n	8007754 <_vfiprintf_r+0x48>
 8007916:	ab03      	add	r3, sp, #12
 8007918:	9300      	str	r3, [sp, #0]
 800791a:	462a      	mov	r2, r5
 800791c:	4630      	mov	r0, r6
 800791e:	4b06      	ldr	r3, [pc, #24]	@ (8007938 <_vfiprintf_r+0x22c>)
 8007920:	a904      	add	r1, sp, #16
 8007922:	f7fe f817 	bl	8005954 <_printf_i>
 8007926:	e7e4      	b.n	80078f2 <_vfiprintf_r+0x1e6>
 8007928:	08007fb7 	.word	0x08007fb7
 800792c:	08007fbd 	.word	0x08007fbd
 8007930:	08007fc1 	.word	0x08007fc1
 8007934:	08005419 	.word	0x08005419
 8007938:	080076e9 	.word	0x080076e9

0800793c <__swbuf_r>:
 800793c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800793e:	460e      	mov	r6, r1
 8007940:	4614      	mov	r4, r2
 8007942:	4605      	mov	r5, r0
 8007944:	b118      	cbz	r0, 800794e <__swbuf_r+0x12>
 8007946:	6a03      	ldr	r3, [r0, #32]
 8007948:	b90b      	cbnz	r3, 800794e <__swbuf_r+0x12>
 800794a:	f7fe f9af 	bl	8005cac <__sinit>
 800794e:	69a3      	ldr	r3, [r4, #24]
 8007950:	60a3      	str	r3, [r4, #8]
 8007952:	89a3      	ldrh	r3, [r4, #12]
 8007954:	071a      	lsls	r2, r3, #28
 8007956:	d501      	bpl.n	800795c <__swbuf_r+0x20>
 8007958:	6923      	ldr	r3, [r4, #16]
 800795a:	b943      	cbnz	r3, 800796e <__swbuf_r+0x32>
 800795c:	4621      	mov	r1, r4
 800795e:	4628      	mov	r0, r5
 8007960:	f000 f82a 	bl	80079b8 <__swsetup_r>
 8007964:	b118      	cbz	r0, 800796e <__swbuf_r+0x32>
 8007966:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800796a:	4638      	mov	r0, r7
 800796c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800796e:	6823      	ldr	r3, [r4, #0]
 8007970:	6922      	ldr	r2, [r4, #16]
 8007972:	b2f6      	uxtb	r6, r6
 8007974:	1a98      	subs	r0, r3, r2
 8007976:	6963      	ldr	r3, [r4, #20]
 8007978:	4637      	mov	r7, r6
 800797a:	4283      	cmp	r3, r0
 800797c:	dc05      	bgt.n	800798a <__swbuf_r+0x4e>
 800797e:	4621      	mov	r1, r4
 8007980:	4628      	mov	r0, r5
 8007982:	f7ff fdeb 	bl	800755c <_fflush_r>
 8007986:	2800      	cmp	r0, #0
 8007988:	d1ed      	bne.n	8007966 <__swbuf_r+0x2a>
 800798a:	68a3      	ldr	r3, [r4, #8]
 800798c:	3b01      	subs	r3, #1
 800798e:	60a3      	str	r3, [r4, #8]
 8007990:	6823      	ldr	r3, [r4, #0]
 8007992:	1c5a      	adds	r2, r3, #1
 8007994:	6022      	str	r2, [r4, #0]
 8007996:	701e      	strb	r6, [r3, #0]
 8007998:	6962      	ldr	r2, [r4, #20]
 800799a:	1c43      	adds	r3, r0, #1
 800799c:	429a      	cmp	r2, r3
 800799e:	d004      	beq.n	80079aa <__swbuf_r+0x6e>
 80079a0:	89a3      	ldrh	r3, [r4, #12]
 80079a2:	07db      	lsls	r3, r3, #31
 80079a4:	d5e1      	bpl.n	800796a <__swbuf_r+0x2e>
 80079a6:	2e0a      	cmp	r6, #10
 80079a8:	d1df      	bne.n	800796a <__swbuf_r+0x2e>
 80079aa:	4621      	mov	r1, r4
 80079ac:	4628      	mov	r0, r5
 80079ae:	f7ff fdd5 	bl	800755c <_fflush_r>
 80079b2:	2800      	cmp	r0, #0
 80079b4:	d0d9      	beq.n	800796a <__swbuf_r+0x2e>
 80079b6:	e7d6      	b.n	8007966 <__swbuf_r+0x2a>

080079b8 <__swsetup_r>:
 80079b8:	b538      	push	{r3, r4, r5, lr}
 80079ba:	4b29      	ldr	r3, [pc, #164]	@ (8007a60 <__swsetup_r+0xa8>)
 80079bc:	4605      	mov	r5, r0
 80079be:	6818      	ldr	r0, [r3, #0]
 80079c0:	460c      	mov	r4, r1
 80079c2:	b118      	cbz	r0, 80079cc <__swsetup_r+0x14>
 80079c4:	6a03      	ldr	r3, [r0, #32]
 80079c6:	b90b      	cbnz	r3, 80079cc <__swsetup_r+0x14>
 80079c8:	f7fe f970 	bl	8005cac <__sinit>
 80079cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80079d0:	0719      	lsls	r1, r3, #28
 80079d2:	d422      	bmi.n	8007a1a <__swsetup_r+0x62>
 80079d4:	06da      	lsls	r2, r3, #27
 80079d6:	d407      	bmi.n	80079e8 <__swsetup_r+0x30>
 80079d8:	2209      	movs	r2, #9
 80079da:	602a      	str	r2, [r5, #0]
 80079dc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80079e0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80079e4:	81a3      	strh	r3, [r4, #12]
 80079e6:	e033      	b.n	8007a50 <__swsetup_r+0x98>
 80079e8:	0758      	lsls	r0, r3, #29
 80079ea:	d512      	bpl.n	8007a12 <__swsetup_r+0x5a>
 80079ec:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80079ee:	b141      	cbz	r1, 8007a02 <__swsetup_r+0x4a>
 80079f0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80079f4:	4299      	cmp	r1, r3
 80079f6:	d002      	beq.n	80079fe <__swsetup_r+0x46>
 80079f8:	4628      	mov	r0, r5
 80079fa:	f7ff f8b1 	bl	8006b60 <_free_r>
 80079fe:	2300      	movs	r3, #0
 8007a00:	6363      	str	r3, [r4, #52]	@ 0x34
 8007a02:	89a3      	ldrh	r3, [r4, #12]
 8007a04:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007a08:	81a3      	strh	r3, [r4, #12]
 8007a0a:	2300      	movs	r3, #0
 8007a0c:	6063      	str	r3, [r4, #4]
 8007a0e:	6923      	ldr	r3, [r4, #16]
 8007a10:	6023      	str	r3, [r4, #0]
 8007a12:	89a3      	ldrh	r3, [r4, #12]
 8007a14:	f043 0308 	orr.w	r3, r3, #8
 8007a18:	81a3      	strh	r3, [r4, #12]
 8007a1a:	6923      	ldr	r3, [r4, #16]
 8007a1c:	b94b      	cbnz	r3, 8007a32 <__swsetup_r+0x7a>
 8007a1e:	89a3      	ldrh	r3, [r4, #12]
 8007a20:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007a24:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007a28:	d003      	beq.n	8007a32 <__swsetup_r+0x7a>
 8007a2a:	4621      	mov	r1, r4
 8007a2c:	4628      	mov	r0, r5
 8007a2e:	f000 f882 	bl	8007b36 <__smakebuf_r>
 8007a32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007a36:	f013 0201 	ands.w	r2, r3, #1
 8007a3a:	d00a      	beq.n	8007a52 <__swsetup_r+0x9a>
 8007a3c:	2200      	movs	r2, #0
 8007a3e:	60a2      	str	r2, [r4, #8]
 8007a40:	6962      	ldr	r2, [r4, #20]
 8007a42:	4252      	negs	r2, r2
 8007a44:	61a2      	str	r2, [r4, #24]
 8007a46:	6922      	ldr	r2, [r4, #16]
 8007a48:	b942      	cbnz	r2, 8007a5c <__swsetup_r+0xa4>
 8007a4a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007a4e:	d1c5      	bne.n	80079dc <__swsetup_r+0x24>
 8007a50:	bd38      	pop	{r3, r4, r5, pc}
 8007a52:	0799      	lsls	r1, r3, #30
 8007a54:	bf58      	it	pl
 8007a56:	6962      	ldrpl	r2, [r4, #20]
 8007a58:	60a2      	str	r2, [r4, #8]
 8007a5a:	e7f4      	b.n	8007a46 <__swsetup_r+0x8e>
 8007a5c:	2000      	movs	r0, #0
 8007a5e:	e7f7      	b.n	8007a50 <__swsetup_r+0x98>
 8007a60:	20000018 	.word	0x20000018

08007a64 <_raise_r>:
 8007a64:	291f      	cmp	r1, #31
 8007a66:	b538      	push	{r3, r4, r5, lr}
 8007a68:	4605      	mov	r5, r0
 8007a6a:	460c      	mov	r4, r1
 8007a6c:	d904      	bls.n	8007a78 <_raise_r+0x14>
 8007a6e:	2316      	movs	r3, #22
 8007a70:	6003      	str	r3, [r0, #0]
 8007a72:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007a76:	bd38      	pop	{r3, r4, r5, pc}
 8007a78:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8007a7a:	b112      	cbz	r2, 8007a82 <_raise_r+0x1e>
 8007a7c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007a80:	b94b      	cbnz	r3, 8007a96 <_raise_r+0x32>
 8007a82:	4628      	mov	r0, r5
 8007a84:	f000 f830 	bl	8007ae8 <_getpid_r>
 8007a88:	4622      	mov	r2, r4
 8007a8a:	4601      	mov	r1, r0
 8007a8c:	4628      	mov	r0, r5
 8007a8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007a92:	f000 b817 	b.w	8007ac4 <_kill_r>
 8007a96:	2b01      	cmp	r3, #1
 8007a98:	d00a      	beq.n	8007ab0 <_raise_r+0x4c>
 8007a9a:	1c59      	adds	r1, r3, #1
 8007a9c:	d103      	bne.n	8007aa6 <_raise_r+0x42>
 8007a9e:	2316      	movs	r3, #22
 8007aa0:	6003      	str	r3, [r0, #0]
 8007aa2:	2001      	movs	r0, #1
 8007aa4:	e7e7      	b.n	8007a76 <_raise_r+0x12>
 8007aa6:	2100      	movs	r1, #0
 8007aa8:	4620      	mov	r0, r4
 8007aaa:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8007aae:	4798      	blx	r3
 8007ab0:	2000      	movs	r0, #0
 8007ab2:	e7e0      	b.n	8007a76 <_raise_r+0x12>

08007ab4 <raise>:
 8007ab4:	4b02      	ldr	r3, [pc, #8]	@ (8007ac0 <raise+0xc>)
 8007ab6:	4601      	mov	r1, r0
 8007ab8:	6818      	ldr	r0, [r3, #0]
 8007aba:	f7ff bfd3 	b.w	8007a64 <_raise_r>
 8007abe:	bf00      	nop
 8007ac0:	20000018 	.word	0x20000018

08007ac4 <_kill_r>:
 8007ac4:	b538      	push	{r3, r4, r5, lr}
 8007ac6:	2300      	movs	r3, #0
 8007ac8:	4d06      	ldr	r5, [pc, #24]	@ (8007ae4 <_kill_r+0x20>)
 8007aca:	4604      	mov	r4, r0
 8007acc:	4608      	mov	r0, r1
 8007ace:	4611      	mov	r1, r2
 8007ad0:	602b      	str	r3, [r5, #0]
 8007ad2:	f7f9 fe62 	bl	800179a <_kill>
 8007ad6:	1c43      	adds	r3, r0, #1
 8007ad8:	d102      	bne.n	8007ae0 <_kill_r+0x1c>
 8007ada:	682b      	ldr	r3, [r5, #0]
 8007adc:	b103      	cbz	r3, 8007ae0 <_kill_r+0x1c>
 8007ade:	6023      	str	r3, [r4, #0]
 8007ae0:	bd38      	pop	{r3, r4, r5, pc}
 8007ae2:	bf00      	nop
 8007ae4:	200004a0 	.word	0x200004a0

08007ae8 <_getpid_r>:
 8007ae8:	f7f9 be50 	b.w	800178c <_getpid>

08007aec <__swhatbuf_r>:
 8007aec:	b570      	push	{r4, r5, r6, lr}
 8007aee:	460c      	mov	r4, r1
 8007af0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007af4:	4615      	mov	r5, r2
 8007af6:	2900      	cmp	r1, #0
 8007af8:	461e      	mov	r6, r3
 8007afa:	b096      	sub	sp, #88	@ 0x58
 8007afc:	da0c      	bge.n	8007b18 <__swhatbuf_r+0x2c>
 8007afe:	89a3      	ldrh	r3, [r4, #12]
 8007b00:	2100      	movs	r1, #0
 8007b02:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007b06:	bf14      	ite	ne
 8007b08:	2340      	movne	r3, #64	@ 0x40
 8007b0a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007b0e:	2000      	movs	r0, #0
 8007b10:	6031      	str	r1, [r6, #0]
 8007b12:	602b      	str	r3, [r5, #0]
 8007b14:	b016      	add	sp, #88	@ 0x58
 8007b16:	bd70      	pop	{r4, r5, r6, pc}
 8007b18:	466a      	mov	r2, sp
 8007b1a:	f000 f849 	bl	8007bb0 <_fstat_r>
 8007b1e:	2800      	cmp	r0, #0
 8007b20:	dbed      	blt.n	8007afe <__swhatbuf_r+0x12>
 8007b22:	9901      	ldr	r1, [sp, #4]
 8007b24:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007b28:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007b2c:	4259      	negs	r1, r3
 8007b2e:	4159      	adcs	r1, r3
 8007b30:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007b34:	e7eb      	b.n	8007b0e <__swhatbuf_r+0x22>

08007b36 <__smakebuf_r>:
 8007b36:	898b      	ldrh	r3, [r1, #12]
 8007b38:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007b3a:	079d      	lsls	r5, r3, #30
 8007b3c:	4606      	mov	r6, r0
 8007b3e:	460c      	mov	r4, r1
 8007b40:	d507      	bpl.n	8007b52 <__smakebuf_r+0x1c>
 8007b42:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007b46:	6023      	str	r3, [r4, #0]
 8007b48:	6123      	str	r3, [r4, #16]
 8007b4a:	2301      	movs	r3, #1
 8007b4c:	6163      	str	r3, [r4, #20]
 8007b4e:	b003      	add	sp, #12
 8007b50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007b52:	466a      	mov	r2, sp
 8007b54:	ab01      	add	r3, sp, #4
 8007b56:	f7ff ffc9 	bl	8007aec <__swhatbuf_r>
 8007b5a:	9f00      	ldr	r7, [sp, #0]
 8007b5c:	4605      	mov	r5, r0
 8007b5e:	4639      	mov	r1, r7
 8007b60:	4630      	mov	r0, r6
 8007b62:	f7ff f86f 	bl	8006c44 <_malloc_r>
 8007b66:	b948      	cbnz	r0, 8007b7c <__smakebuf_r+0x46>
 8007b68:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b6c:	059a      	lsls	r2, r3, #22
 8007b6e:	d4ee      	bmi.n	8007b4e <__smakebuf_r+0x18>
 8007b70:	f023 0303 	bic.w	r3, r3, #3
 8007b74:	f043 0302 	orr.w	r3, r3, #2
 8007b78:	81a3      	strh	r3, [r4, #12]
 8007b7a:	e7e2      	b.n	8007b42 <__smakebuf_r+0xc>
 8007b7c:	89a3      	ldrh	r3, [r4, #12]
 8007b7e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007b82:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007b86:	81a3      	strh	r3, [r4, #12]
 8007b88:	9b01      	ldr	r3, [sp, #4]
 8007b8a:	6020      	str	r0, [r4, #0]
 8007b8c:	b15b      	cbz	r3, 8007ba6 <__smakebuf_r+0x70>
 8007b8e:	4630      	mov	r0, r6
 8007b90:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007b94:	f000 f81e 	bl	8007bd4 <_isatty_r>
 8007b98:	b128      	cbz	r0, 8007ba6 <__smakebuf_r+0x70>
 8007b9a:	89a3      	ldrh	r3, [r4, #12]
 8007b9c:	f023 0303 	bic.w	r3, r3, #3
 8007ba0:	f043 0301 	orr.w	r3, r3, #1
 8007ba4:	81a3      	strh	r3, [r4, #12]
 8007ba6:	89a3      	ldrh	r3, [r4, #12]
 8007ba8:	431d      	orrs	r5, r3
 8007baa:	81a5      	strh	r5, [r4, #12]
 8007bac:	e7cf      	b.n	8007b4e <__smakebuf_r+0x18>
	...

08007bb0 <_fstat_r>:
 8007bb0:	b538      	push	{r3, r4, r5, lr}
 8007bb2:	2300      	movs	r3, #0
 8007bb4:	4d06      	ldr	r5, [pc, #24]	@ (8007bd0 <_fstat_r+0x20>)
 8007bb6:	4604      	mov	r4, r0
 8007bb8:	4608      	mov	r0, r1
 8007bba:	4611      	mov	r1, r2
 8007bbc:	602b      	str	r3, [r5, #0]
 8007bbe:	f7f9 fe4b 	bl	8001858 <_fstat>
 8007bc2:	1c43      	adds	r3, r0, #1
 8007bc4:	d102      	bne.n	8007bcc <_fstat_r+0x1c>
 8007bc6:	682b      	ldr	r3, [r5, #0]
 8007bc8:	b103      	cbz	r3, 8007bcc <_fstat_r+0x1c>
 8007bca:	6023      	str	r3, [r4, #0]
 8007bcc:	bd38      	pop	{r3, r4, r5, pc}
 8007bce:	bf00      	nop
 8007bd0:	200004a0 	.word	0x200004a0

08007bd4 <_isatty_r>:
 8007bd4:	b538      	push	{r3, r4, r5, lr}
 8007bd6:	2300      	movs	r3, #0
 8007bd8:	4d05      	ldr	r5, [pc, #20]	@ (8007bf0 <_isatty_r+0x1c>)
 8007bda:	4604      	mov	r4, r0
 8007bdc:	4608      	mov	r0, r1
 8007bde:	602b      	str	r3, [r5, #0]
 8007be0:	f7f9 fe49 	bl	8001876 <_isatty>
 8007be4:	1c43      	adds	r3, r0, #1
 8007be6:	d102      	bne.n	8007bee <_isatty_r+0x1a>
 8007be8:	682b      	ldr	r3, [r5, #0]
 8007bea:	b103      	cbz	r3, 8007bee <_isatty_r+0x1a>
 8007bec:	6023      	str	r3, [r4, #0]
 8007bee:	bd38      	pop	{r3, r4, r5, pc}
 8007bf0:	200004a0 	.word	0x200004a0

08007bf4 <_init>:
 8007bf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bf6:	bf00      	nop
 8007bf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007bfa:	bc08      	pop	{r3}
 8007bfc:	469e      	mov	lr, r3
 8007bfe:	4770      	bx	lr

08007c00 <_fini>:
 8007c00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c02:	bf00      	nop
 8007c04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c06:	bc08      	pop	{r3}
 8007c08:	469e      	mov	lr, r3
 8007c0a:	4770      	bx	lr
