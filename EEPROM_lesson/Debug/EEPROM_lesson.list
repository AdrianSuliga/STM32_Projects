
EEPROM_lesson.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000037b0  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  080038bc  080038bc  000048bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003938  08003938  00005068  2**0
                  CONTENTS
  4 .ARM          00000000  08003938  08003938  00005068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003938  08003938  00005068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003938  08003938  00004938  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800393c  0800393c  0000493c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08003940  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000210  20000068  080039a8  00005068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000278  080039a8  00005278  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00005068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a052  00000000  00000000  00005091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c7f  00000000  00000000  0000f0e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009f8  00000000  00000000  00010d68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007ac  00000000  00000000  00011760  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018370  00000000  00000000  00011f0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d045  00000000  00000000  0002a27c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086249  00000000  00000000  000372c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bd50a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002f1c  00000000  00000000  000bd550  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  000c046c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000068 	.word	0x20000068
 8000128:	00000000 	.word	0x00000000
 800012c:	080038a4 	.word	0x080038a4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000006c 	.word	0x2000006c
 8000148:	080038a4 	.word	0x080038a4

0800014c <eeprom_wait>:
#define WRITE_TIMEOUT 6

static uint32_t last_write;

void eeprom_wait(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	while (HAL_GetTick() - last_write <= WRITE_TIMEOUT)
 8000150:	bf00      	nop
 8000152:	f000 fb61 	bl	8000818 <HAL_GetTick>
 8000156:	4602      	mov	r2, r0
 8000158:	4b03      	ldr	r3, [pc, #12]	@ (8000168 <eeprom_wait+0x1c>)
 800015a:	681b      	ldr	r3, [r3, #0]
 800015c:	1ad3      	subs	r3, r2, r3
 800015e:	2b06      	cmp	r3, #6
 8000160:	d9f7      	bls.n	8000152 <eeprom_wait+0x6>
	{

	}
}
 8000162:	bf00      	nop
 8000164:	bf00      	nop
 8000166:	bd80      	pop	{r7, pc}
 8000168:	20000084 	.word	0x20000084

0800016c <eeprom_read>:

HAL_StatusTypeDef eeprom_read(uint32_t addr, void* data, uint32_t size)
{
 800016c:	b580      	push	{r7, lr}
 800016e:	b088      	sub	sp, #32
 8000170:	af04      	add	r7, sp, #16
 8000172:	60f8      	str	r0, [r7, #12]
 8000174:	60b9      	str	r1, [r7, #8]
 8000176:	607a      	str	r2, [r7, #4]
	eeprom_wait();
 8000178:	f7ff ffe8 	bl	800014c <eeprom_wait>
	return HAL_I2C_Mem_Read(&hi2c1, EEPROM_ADDR, addr, 1, data, size, HAL_MAX_DELAY);
 800017c:	68fb      	ldr	r3, [r7, #12]
 800017e:	b29a      	uxth	r2, r3
 8000180:	687b      	ldr	r3, [r7, #4]
 8000182:	b29b      	uxth	r3, r3
 8000184:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000188:	9102      	str	r1, [sp, #8]
 800018a:	9301      	str	r3, [sp, #4]
 800018c:	68bb      	ldr	r3, [r7, #8]
 800018e:	9300      	str	r3, [sp, #0]
 8000190:	2301      	movs	r3, #1
 8000192:	21a0      	movs	r1, #160	@ 0xa0
 8000194:	4803      	ldr	r0, [pc, #12]	@ (80001a4 <eeprom_read+0x38>)
 8000196:	f000 ffef 	bl	8001178 <HAL_I2C_Mem_Read>
 800019a:	4603      	mov	r3, r0
}
 800019c:	4618      	mov	r0, r3
 800019e:	3710      	adds	r7, #16
 80001a0:	46bd      	mov	sp, r7
 80001a2:	bd80      	pop	{r7, pc}
 80001a4:	20000088 	.word	0x20000088

080001a8 <eeprom_write>:

HAL_StatusTypeDef eeprom_write(uint32_t addr, const void* data, uint32_t size)
{
 80001a8:	b580      	push	{r7, lr}
 80001aa:	b08a      	sub	sp, #40	@ 0x28
 80001ac:	af04      	add	r7, sp, #16
 80001ae:	60f8      	str	r0, [r7, #12]
 80001b0:	60b9      	str	r1, [r7, #8]
 80001b2:	607a      	str	r2, [r7, #4]
	HAL_StatusTypeDef result;

	eeprom_wait();
 80001b4:	f7ff ffca 	bl	800014c <eeprom_wait>
	result = HAL_I2C_Mem_Write(&hi2c1, EEPROM_ADDR, addr, 1, (void*)data, size, HAL_MAX_DELAY);
 80001b8:	68fb      	ldr	r3, [r7, #12]
 80001ba:	b29a      	uxth	r2, r3
 80001bc:	687b      	ldr	r3, [r7, #4]
 80001be:	b29b      	uxth	r3, r3
 80001c0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80001c4:	9102      	str	r1, [sp, #8]
 80001c6:	9301      	str	r3, [sp, #4]
 80001c8:	68bb      	ldr	r3, [r7, #8]
 80001ca:	9300      	str	r3, [sp, #0]
 80001cc:	2301      	movs	r3, #1
 80001ce:	21a0      	movs	r1, #160	@ 0xa0
 80001d0:	4807      	ldr	r0, [pc, #28]	@ (80001f0 <eeprom_write+0x48>)
 80001d2:	f000 fed7 	bl	8000f84 <HAL_I2C_Mem_Write>
 80001d6:	4603      	mov	r3, r0
 80001d8:	75fb      	strb	r3, [r7, #23]
	last_write = HAL_GetTick();
 80001da:	f000 fb1d 	bl	8000818 <HAL_GetTick>
 80001de:	4603      	mov	r3, r0
 80001e0:	4a04      	ldr	r2, [pc, #16]	@ (80001f4 <eeprom_write+0x4c>)
 80001e2:	6013      	str	r3, [r2, #0]

	return result;
 80001e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80001e6:	4618      	mov	r0, r3
 80001e8:	3718      	adds	r7, #24
 80001ea:	46bd      	mov	sp, r7
 80001ec:	bd80      	pop	{r7, pc}
 80001ee:	bf00      	nop
 80001f0:	20000088 	.word	0x20000088
 80001f4:	20000084 	.word	0x20000084

080001f8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80001f8:	b480      	push	{r7}
 80001fa:	b083      	sub	sp, #12
 80001fc:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80001fe:	4b0e      	ldr	r3, [pc, #56]	@ (8000238 <MX_GPIO_Init+0x40>)
 8000200:	699b      	ldr	r3, [r3, #24]
 8000202:	4a0d      	ldr	r2, [pc, #52]	@ (8000238 <MX_GPIO_Init+0x40>)
 8000204:	f043 0304 	orr.w	r3, r3, #4
 8000208:	6193      	str	r3, [r2, #24]
 800020a:	4b0b      	ldr	r3, [pc, #44]	@ (8000238 <MX_GPIO_Init+0x40>)
 800020c:	699b      	ldr	r3, [r3, #24]
 800020e:	f003 0304 	and.w	r3, r3, #4
 8000212:	607b      	str	r3, [r7, #4]
 8000214:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000216:	4b08      	ldr	r3, [pc, #32]	@ (8000238 <MX_GPIO_Init+0x40>)
 8000218:	699b      	ldr	r3, [r3, #24]
 800021a:	4a07      	ldr	r2, [pc, #28]	@ (8000238 <MX_GPIO_Init+0x40>)
 800021c:	f043 0308 	orr.w	r3, r3, #8
 8000220:	6193      	str	r3, [r2, #24]
 8000222:	4b05      	ldr	r3, [pc, #20]	@ (8000238 <MX_GPIO_Init+0x40>)
 8000224:	699b      	ldr	r3, [r3, #24]
 8000226:	f003 0308 	and.w	r3, r3, #8
 800022a:	603b      	str	r3, [r7, #0]
 800022c:	683b      	ldr	r3, [r7, #0]

}
 800022e:	bf00      	nop
 8000230:	370c      	adds	r7, #12
 8000232:	46bd      	mov	sp, r7
 8000234:	bc80      	pop	{r7}
 8000236:	4770      	bx	lr
 8000238:	40021000 	.word	0x40021000

0800023c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800023c:	b580      	push	{r7, lr}
 800023e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000240:	4b12      	ldr	r3, [pc, #72]	@ (800028c <MX_I2C1_Init+0x50>)
 8000242:	4a13      	ldr	r2, [pc, #76]	@ (8000290 <MX_I2C1_Init+0x54>)
 8000244:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000246:	4b11      	ldr	r3, [pc, #68]	@ (800028c <MX_I2C1_Init+0x50>)
 8000248:	4a12      	ldr	r2, [pc, #72]	@ (8000294 <MX_I2C1_Init+0x58>)
 800024a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800024c:	4b0f      	ldr	r3, [pc, #60]	@ (800028c <MX_I2C1_Init+0x50>)
 800024e:	2200      	movs	r2, #0
 8000250:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000252:	4b0e      	ldr	r3, [pc, #56]	@ (800028c <MX_I2C1_Init+0x50>)
 8000254:	2200      	movs	r2, #0
 8000256:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000258:	4b0c      	ldr	r3, [pc, #48]	@ (800028c <MX_I2C1_Init+0x50>)
 800025a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800025e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000260:	4b0a      	ldr	r3, [pc, #40]	@ (800028c <MX_I2C1_Init+0x50>)
 8000262:	2200      	movs	r2, #0
 8000264:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000266:	4b09      	ldr	r3, [pc, #36]	@ (800028c <MX_I2C1_Init+0x50>)
 8000268:	2200      	movs	r2, #0
 800026a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800026c:	4b07      	ldr	r3, [pc, #28]	@ (800028c <MX_I2C1_Init+0x50>)
 800026e:	2200      	movs	r2, #0
 8000270:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000272:	4b06      	ldr	r3, [pc, #24]	@ (800028c <MX_I2C1_Init+0x50>)
 8000274:	2200      	movs	r2, #0
 8000276:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000278:	4804      	ldr	r0, [pc, #16]	@ (800028c <MX_I2C1_Init+0x50>)
 800027a:	f000 fd3f 	bl	8000cfc <HAL_I2C_Init>
 800027e:	4603      	mov	r3, r0
 8000280:	2b00      	cmp	r3, #0
 8000282:	d001      	beq.n	8000288 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000284:	f000 f8cb 	bl	800041e <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000288:	bf00      	nop
 800028a:	bd80      	pop	{r7, pc}
 800028c:	20000088 	.word	0x20000088
 8000290:	40005400 	.word	0x40005400
 8000294:	000186a0 	.word	0x000186a0

08000298 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000298:	b580      	push	{r7, lr}
 800029a:	b088      	sub	sp, #32
 800029c:	af00      	add	r7, sp, #0
 800029e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002a0:	f107 0310 	add.w	r3, r7, #16
 80002a4:	2200      	movs	r2, #0
 80002a6:	601a      	str	r2, [r3, #0]
 80002a8:	605a      	str	r2, [r3, #4]
 80002aa:	609a      	str	r2, [r3, #8]
 80002ac:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 80002ae:	687b      	ldr	r3, [r7, #4]
 80002b0:	681b      	ldr	r3, [r3, #0]
 80002b2:	4a15      	ldr	r2, [pc, #84]	@ (8000308 <HAL_I2C_MspInit+0x70>)
 80002b4:	4293      	cmp	r3, r2
 80002b6:	d123      	bne.n	8000300 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80002b8:	4b14      	ldr	r3, [pc, #80]	@ (800030c <HAL_I2C_MspInit+0x74>)
 80002ba:	699b      	ldr	r3, [r3, #24]
 80002bc:	4a13      	ldr	r2, [pc, #76]	@ (800030c <HAL_I2C_MspInit+0x74>)
 80002be:	f043 0308 	orr.w	r3, r3, #8
 80002c2:	6193      	str	r3, [r2, #24]
 80002c4:	4b11      	ldr	r3, [pc, #68]	@ (800030c <HAL_I2C_MspInit+0x74>)
 80002c6:	699b      	ldr	r3, [r3, #24]
 80002c8:	f003 0308 	and.w	r3, r3, #8
 80002cc:	60fb      	str	r3, [r7, #12]
 80002ce:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80002d0:	23c0      	movs	r3, #192	@ 0xc0
 80002d2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80002d4:	2312      	movs	r3, #18
 80002d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80002d8:	2303      	movs	r3, #3
 80002da:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80002dc:	f107 0310 	add.w	r3, r7, #16
 80002e0:	4619      	mov	r1, r3
 80002e2:	480b      	ldr	r0, [pc, #44]	@ (8000310 <HAL_I2C_MspInit+0x78>)
 80002e4:	f000 fb86 	bl	80009f4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80002e8:	4b08      	ldr	r3, [pc, #32]	@ (800030c <HAL_I2C_MspInit+0x74>)
 80002ea:	69db      	ldr	r3, [r3, #28]
 80002ec:	4a07      	ldr	r2, [pc, #28]	@ (800030c <HAL_I2C_MspInit+0x74>)
 80002ee:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80002f2:	61d3      	str	r3, [r2, #28]
 80002f4:	4b05      	ldr	r3, [pc, #20]	@ (800030c <HAL_I2C_MspInit+0x74>)
 80002f6:	69db      	ldr	r3, [r3, #28]
 80002f8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80002fc:	60bb      	str	r3, [r7, #8]
 80002fe:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000300:	bf00      	nop
 8000302:	3720      	adds	r7, #32
 8000304:	46bd      	mov	sp, r7
 8000306:	bd80      	pop	{r7, pc}
 8000308:	40005400 	.word	0x40005400
 800030c:	40021000 	.word	0x40021000
 8000310:	40010c00 	.word	0x40010c00

08000314 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch)
{
 8000314:	b580      	push	{r7, lr}
 8000316:	b082      	sub	sp, #8
 8000318:	af00      	add	r7, sp, #0
 800031a:	6078      	str	r0, [r7, #4]
	if (ch == '\n')
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	2b0a      	cmp	r3, #10
 8000320:	d102      	bne.n	8000328 <__io_putchar+0x14>
		__io_putchar('\r');
 8000322:	200d      	movs	r0, #13
 8000324:	f7ff fff6 	bl	8000314 <__io_putchar>

	HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8000328:	1d39      	adds	r1, r7, #4
 800032a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800032e:	2201      	movs	r2, #1
 8000330:	4803      	ldr	r0, [pc, #12]	@ (8000340 <__io_putchar+0x2c>)
 8000332:	f002 f9a9 	bl	8002688 <HAL_UART_Transmit>
	return 1;
 8000336:	2301      	movs	r3, #1
}
 8000338:	4618      	mov	r0, r3
 800033a:	3708      	adds	r7, #8
 800033c:	46bd      	mov	sp, r7
 800033e:	bd80      	pop	{r7, pc}
 8000340:	200000e0 	.word	0x200000e0

08000344 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000344:	b580      	push	{r7, lr}
 8000346:	b082      	sub	sp, #8
 8000348:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800034a:	f000 fa0d 	bl	8000768 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800034e:	f000 f82b 	bl	80003a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000352:	f7ff ff51 	bl	80001f8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000356:	f000 f96d 	bl	8000634 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800035a:	f7ff ff6f 	bl	800023c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  uint32_t counter = -1;
 800035e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000362:	607b      	str	r3, [r7, #4]
  while (eeprom_read(0x10, &counter, sizeof(counter)) != HAL_OK)
 8000364:	bf00      	nop
 8000366:	1d3b      	adds	r3, r7, #4
 8000368:	2204      	movs	r2, #4
 800036a:	4619      	mov	r1, r3
 800036c:	2010      	movs	r0, #16
 800036e:	f7ff fefd 	bl	800016c <eeprom_read>
 8000372:	4603      	mov	r3, r0
 8000374:	2b00      	cmp	r3, #0
 8000376:	d1f6      	bne.n	8000366 <main+0x22>
  	  {}

  counter++;
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	3301      	adds	r3, #1
 800037c:	607b      	str	r3, [r7, #4]
  printf("Uruchomienie numer: %ld\n", counter);
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	4619      	mov	r1, r3
 8000382:	4808      	ldr	r0, [pc, #32]	@ (80003a4 <main+0x60>)
 8000384:	f002 fc16 	bl	8002bb4 <iprintf>

  if (eeprom_write(0x10, &counter, sizeof(counter)) != HAL_OK)
 8000388:	1d3b      	adds	r3, r7, #4
 800038a:	2204      	movs	r2, #4
 800038c:	4619      	mov	r1, r3
 800038e:	2010      	movs	r0, #16
 8000390:	f7ff ff0a 	bl	80001a8 <eeprom_write>
 8000394:	4603      	mov	r3, r0
 8000396:	2b00      	cmp	r3, #0
 8000398:	d002      	beq.n	80003a0 <main+0x5c>
	  Error_Handler();
 800039a:	f000 f840 	bl	800041e <Error_Handler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800039e:	bf00      	nop
 80003a0:	bf00      	nop
 80003a2:	e7fd      	b.n	80003a0 <main+0x5c>
 80003a4:	080038bc 	.word	0x080038bc

080003a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	b090      	sub	sp, #64	@ 0x40
 80003ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003ae:	f107 0318 	add.w	r3, r7, #24
 80003b2:	2228      	movs	r2, #40	@ 0x28
 80003b4:	2100      	movs	r1, #0
 80003b6:	4618      	mov	r0, r3
 80003b8:	f002 fc51 	bl	8002c5e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003bc:	1d3b      	adds	r3, r7, #4
 80003be:	2200      	movs	r2, #0
 80003c0:	601a      	str	r2, [r3, #0]
 80003c2:	605a      	str	r2, [r3, #4]
 80003c4:	609a      	str	r2, [r3, #8]
 80003c6:	60da      	str	r2, [r3, #12]
 80003c8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80003ca:	2302      	movs	r3, #2
 80003cc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003ce:	2301      	movs	r3, #1
 80003d0:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003d2:	2310      	movs	r3, #16
 80003d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80003d6:	2300      	movs	r3, #0
 80003d8:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003da:	f107 0318 	add.w	r3, r7, #24
 80003de:	4618      	mov	r0, r3
 80003e0:	f001 fcf2 	bl	8001dc8 <HAL_RCC_OscConfig>
 80003e4:	4603      	mov	r3, r0
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	d001      	beq.n	80003ee <SystemClock_Config+0x46>
  {
    Error_Handler();
 80003ea:	f000 f818 	bl	800041e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003ee:	230f      	movs	r3, #15
 80003f0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80003f2:	2300      	movs	r3, #0
 80003f4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003f6:	2300      	movs	r3, #0
 80003f8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003fa:	2300      	movs	r3, #0
 80003fc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003fe:	2300      	movs	r3, #0
 8000400:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000402:	1d3b      	adds	r3, r7, #4
 8000404:	2100      	movs	r1, #0
 8000406:	4618      	mov	r0, r3
 8000408:	f001 ff60 	bl	80022cc <HAL_RCC_ClockConfig>
 800040c:	4603      	mov	r3, r0
 800040e:	2b00      	cmp	r3, #0
 8000410:	d001      	beq.n	8000416 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000412:	f000 f804 	bl	800041e <Error_Handler>
  }
}
 8000416:	bf00      	nop
 8000418:	3740      	adds	r7, #64	@ 0x40
 800041a:	46bd      	mov	sp, r7
 800041c:	bd80      	pop	{r7, pc}

0800041e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800041e:	b480      	push	{r7}
 8000420:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000422:	b672      	cpsid	i
}
 8000424:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000426:	bf00      	nop
 8000428:	e7fd      	b.n	8000426 <Error_Handler+0x8>
	...

0800042c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800042c:	b480      	push	{r7}
 800042e:	b085      	sub	sp, #20
 8000430:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000432:	4b15      	ldr	r3, [pc, #84]	@ (8000488 <HAL_MspInit+0x5c>)
 8000434:	699b      	ldr	r3, [r3, #24]
 8000436:	4a14      	ldr	r2, [pc, #80]	@ (8000488 <HAL_MspInit+0x5c>)
 8000438:	f043 0301 	orr.w	r3, r3, #1
 800043c:	6193      	str	r3, [r2, #24]
 800043e:	4b12      	ldr	r3, [pc, #72]	@ (8000488 <HAL_MspInit+0x5c>)
 8000440:	699b      	ldr	r3, [r3, #24]
 8000442:	f003 0301 	and.w	r3, r3, #1
 8000446:	60bb      	str	r3, [r7, #8]
 8000448:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800044a:	4b0f      	ldr	r3, [pc, #60]	@ (8000488 <HAL_MspInit+0x5c>)
 800044c:	69db      	ldr	r3, [r3, #28]
 800044e:	4a0e      	ldr	r2, [pc, #56]	@ (8000488 <HAL_MspInit+0x5c>)
 8000450:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000454:	61d3      	str	r3, [r2, #28]
 8000456:	4b0c      	ldr	r3, [pc, #48]	@ (8000488 <HAL_MspInit+0x5c>)
 8000458:	69db      	ldr	r3, [r3, #28]
 800045a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800045e:	607b      	str	r3, [r7, #4]
 8000460:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000462:	4b0a      	ldr	r3, [pc, #40]	@ (800048c <HAL_MspInit+0x60>)
 8000464:	685b      	ldr	r3, [r3, #4]
 8000466:	60fb      	str	r3, [r7, #12]
 8000468:	68fb      	ldr	r3, [r7, #12]
 800046a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800046e:	60fb      	str	r3, [r7, #12]
 8000470:	68fb      	ldr	r3, [r7, #12]
 8000472:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000476:	60fb      	str	r3, [r7, #12]
 8000478:	4a04      	ldr	r2, [pc, #16]	@ (800048c <HAL_MspInit+0x60>)
 800047a:	68fb      	ldr	r3, [r7, #12]
 800047c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800047e:	bf00      	nop
 8000480:	3714      	adds	r7, #20
 8000482:	46bd      	mov	sp, r7
 8000484:	bc80      	pop	{r7}
 8000486:	4770      	bx	lr
 8000488:	40021000 	.word	0x40021000
 800048c:	40010000 	.word	0x40010000

08000490 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000490:	b480      	push	{r7}
 8000492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000494:	bf00      	nop
 8000496:	e7fd      	b.n	8000494 <NMI_Handler+0x4>

08000498 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000498:	b480      	push	{r7}
 800049a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800049c:	bf00      	nop
 800049e:	e7fd      	b.n	800049c <HardFault_Handler+0x4>

080004a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004a0:	b480      	push	{r7}
 80004a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004a4:	bf00      	nop
 80004a6:	e7fd      	b.n	80004a4 <MemManage_Handler+0x4>

080004a8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004a8:	b480      	push	{r7}
 80004aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004ac:	bf00      	nop
 80004ae:	e7fd      	b.n	80004ac <BusFault_Handler+0x4>

080004b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004b0:	b480      	push	{r7}
 80004b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004b4:	bf00      	nop
 80004b6:	e7fd      	b.n	80004b4 <UsageFault_Handler+0x4>

080004b8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004b8:	b480      	push	{r7}
 80004ba:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80004bc:	bf00      	nop
 80004be:	46bd      	mov	sp, r7
 80004c0:	bc80      	pop	{r7}
 80004c2:	4770      	bx	lr

080004c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004c4:	b480      	push	{r7}
 80004c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004c8:	bf00      	nop
 80004ca:	46bd      	mov	sp, r7
 80004cc:	bc80      	pop	{r7}
 80004ce:	4770      	bx	lr

080004d0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004d0:	b480      	push	{r7}
 80004d2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80004d4:	bf00      	nop
 80004d6:	46bd      	mov	sp, r7
 80004d8:	bc80      	pop	{r7}
 80004da:	4770      	bx	lr

080004dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004e0:	f000 f988 	bl	80007f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004e4:	bf00      	nop
 80004e6:	bd80      	pop	{r7, pc}

080004e8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b086      	sub	sp, #24
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	60f8      	str	r0, [r7, #12]
 80004f0:	60b9      	str	r1, [r7, #8]
 80004f2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004f4:	2300      	movs	r3, #0
 80004f6:	617b      	str	r3, [r7, #20]
 80004f8:	e00a      	b.n	8000510 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80004fa:	f3af 8000 	nop.w
 80004fe:	4601      	mov	r1, r0
 8000500:	68bb      	ldr	r3, [r7, #8]
 8000502:	1c5a      	adds	r2, r3, #1
 8000504:	60ba      	str	r2, [r7, #8]
 8000506:	b2ca      	uxtb	r2, r1
 8000508:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800050a:	697b      	ldr	r3, [r7, #20]
 800050c:	3301      	adds	r3, #1
 800050e:	617b      	str	r3, [r7, #20]
 8000510:	697a      	ldr	r2, [r7, #20]
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	429a      	cmp	r2, r3
 8000516:	dbf0      	blt.n	80004fa <_read+0x12>
  }

  return len;
 8000518:	687b      	ldr	r3, [r7, #4]
}
 800051a:	4618      	mov	r0, r3
 800051c:	3718      	adds	r7, #24
 800051e:	46bd      	mov	sp, r7
 8000520:	bd80      	pop	{r7, pc}

08000522 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000522:	b580      	push	{r7, lr}
 8000524:	b086      	sub	sp, #24
 8000526:	af00      	add	r7, sp, #0
 8000528:	60f8      	str	r0, [r7, #12]
 800052a:	60b9      	str	r1, [r7, #8]
 800052c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800052e:	2300      	movs	r3, #0
 8000530:	617b      	str	r3, [r7, #20]
 8000532:	e009      	b.n	8000548 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000534:	68bb      	ldr	r3, [r7, #8]
 8000536:	1c5a      	adds	r2, r3, #1
 8000538:	60ba      	str	r2, [r7, #8]
 800053a:	781b      	ldrb	r3, [r3, #0]
 800053c:	4618      	mov	r0, r3
 800053e:	f7ff fee9 	bl	8000314 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000542:	697b      	ldr	r3, [r7, #20]
 8000544:	3301      	adds	r3, #1
 8000546:	617b      	str	r3, [r7, #20]
 8000548:	697a      	ldr	r2, [r7, #20]
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	429a      	cmp	r2, r3
 800054e:	dbf1      	blt.n	8000534 <_write+0x12>
  }
  return len;
 8000550:	687b      	ldr	r3, [r7, #4]
}
 8000552:	4618      	mov	r0, r3
 8000554:	3718      	adds	r7, #24
 8000556:	46bd      	mov	sp, r7
 8000558:	bd80      	pop	{r7, pc}

0800055a <_close>:

int _close(int file)
{
 800055a:	b480      	push	{r7}
 800055c:	b083      	sub	sp, #12
 800055e:	af00      	add	r7, sp, #0
 8000560:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000562:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000566:	4618      	mov	r0, r3
 8000568:	370c      	adds	r7, #12
 800056a:	46bd      	mov	sp, r7
 800056c:	bc80      	pop	{r7}
 800056e:	4770      	bx	lr

08000570 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000570:	b480      	push	{r7}
 8000572:	b083      	sub	sp, #12
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
 8000578:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800057a:	683b      	ldr	r3, [r7, #0]
 800057c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000580:	605a      	str	r2, [r3, #4]
  return 0;
 8000582:	2300      	movs	r3, #0
}
 8000584:	4618      	mov	r0, r3
 8000586:	370c      	adds	r7, #12
 8000588:	46bd      	mov	sp, r7
 800058a:	bc80      	pop	{r7}
 800058c:	4770      	bx	lr

0800058e <_isatty>:

int _isatty(int file)
{
 800058e:	b480      	push	{r7}
 8000590:	b083      	sub	sp, #12
 8000592:	af00      	add	r7, sp, #0
 8000594:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000596:	2301      	movs	r3, #1
}
 8000598:	4618      	mov	r0, r3
 800059a:	370c      	adds	r7, #12
 800059c:	46bd      	mov	sp, r7
 800059e:	bc80      	pop	{r7}
 80005a0:	4770      	bx	lr

080005a2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80005a2:	b480      	push	{r7}
 80005a4:	b085      	sub	sp, #20
 80005a6:	af00      	add	r7, sp, #0
 80005a8:	60f8      	str	r0, [r7, #12]
 80005aa:	60b9      	str	r1, [r7, #8]
 80005ac:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80005ae:	2300      	movs	r3, #0
}
 80005b0:	4618      	mov	r0, r3
 80005b2:	3714      	adds	r7, #20
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bc80      	pop	{r7}
 80005b8:	4770      	bx	lr
	...

080005bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b086      	sub	sp, #24
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80005c4:	4a14      	ldr	r2, [pc, #80]	@ (8000618 <_sbrk+0x5c>)
 80005c6:	4b15      	ldr	r3, [pc, #84]	@ (800061c <_sbrk+0x60>)
 80005c8:	1ad3      	subs	r3, r2, r3
 80005ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80005cc:	697b      	ldr	r3, [r7, #20]
 80005ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80005d0:	4b13      	ldr	r3, [pc, #76]	@ (8000620 <_sbrk+0x64>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d102      	bne.n	80005de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80005d8:	4b11      	ldr	r3, [pc, #68]	@ (8000620 <_sbrk+0x64>)
 80005da:	4a12      	ldr	r2, [pc, #72]	@ (8000624 <_sbrk+0x68>)
 80005dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80005de:	4b10      	ldr	r3, [pc, #64]	@ (8000620 <_sbrk+0x64>)
 80005e0:	681a      	ldr	r2, [r3, #0]
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	4413      	add	r3, r2
 80005e6:	693a      	ldr	r2, [r7, #16]
 80005e8:	429a      	cmp	r2, r3
 80005ea:	d207      	bcs.n	80005fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80005ec:	f002 fb86 	bl	8002cfc <__errno>
 80005f0:	4603      	mov	r3, r0
 80005f2:	220c      	movs	r2, #12
 80005f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80005f6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80005fa:	e009      	b.n	8000610 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80005fc:	4b08      	ldr	r3, [pc, #32]	@ (8000620 <_sbrk+0x64>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000602:	4b07      	ldr	r3, [pc, #28]	@ (8000620 <_sbrk+0x64>)
 8000604:	681a      	ldr	r2, [r3, #0]
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	4413      	add	r3, r2
 800060a:	4a05      	ldr	r2, [pc, #20]	@ (8000620 <_sbrk+0x64>)
 800060c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800060e:	68fb      	ldr	r3, [r7, #12]
}
 8000610:	4618      	mov	r0, r3
 8000612:	3718      	adds	r7, #24
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}
 8000618:	20005000 	.word	0x20005000
 800061c:	00000400 	.word	0x00000400
 8000620:	200000dc 	.word	0x200000dc
 8000624:	20000278 	.word	0x20000278

08000628 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000628:	b480      	push	{r7}
 800062a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800062c:	bf00      	nop
 800062e:	46bd      	mov	sp, r7
 8000630:	bc80      	pop	{r7}
 8000632:	4770      	bx	lr

08000634 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000638:	4b11      	ldr	r3, [pc, #68]	@ (8000680 <MX_USART2_UART_Init+0x4c>)
 800063a:	4a12      	ldr	r2, [pc, #72]	@ (8000684 <MX_USART2_UART_Init+0x50>)
 800063c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800063e:	4b10      	ldr	r3, [pc, #64]	@ (8000680 <MX_USART2_UART_Init+0x4c>)
 8000640:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000644:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000646:	4b0e      	ldr	r3, [pc, #56]	@ (8000680 <MX_USART2_UART_Init+0x4c>)
 8000648:	2200      	movs	r2, #0
 800064a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800064c:	4b0c      	ldr	r3, [pc, #48]	@ (8000680 <MX_USART2_UART_Init+0x4c>)
 800064e:	2200      	movs	r2, #0
 8000650:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000652:	4b0b      	ldr	r3, [pc, #44]	@ (8000680 <MX_USART2_UART_Init+0x4c>)
 8000654:	2200      	movs	r2, #0
 8000656:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000658:	4b09      	ldr	r3, [pc, #36]	@ (8000680 <MX_USART2_UART_Init+0x4c>)
 800065a:	220c      	movs	r2, #12
 800065c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800065e:	4b08      	ldr	r3, [pc, #32]	@ (8000680 <MX_USART2_UART_Init+0x4c>)
 8000660:	2200      	movs	r2, #0
 8000662:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000664:	4b06      	ldr	r3, [pc, #24]	@ (8000680 <MX_USART2_UART_Init+0x4c>)
 8000666:	2200      	movs	r2, #0
 8000668:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800066a:	4805      	ldr	r0, [pc, #20]	@ (8000680 <MX_USART2_UART_Init+0x4c>)
 800066c:	f001 ffbc 	bl	80025e8 <HAL_UART_Init>
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	d001      	beq.n	800067a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000676:	f7ff fed2 	bl	800041e <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800067a:	bf00      	nop
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	200000e0 	.word	0x200000e0
 8000684:	40004400 	.word	0x40004400

08000688 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b088      	sub	sp, #32
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000690:	f107 0310 	add.w	r3, r7, #16
 8000694:	2200      	movs	r2, #0
 8000696:	601a      	str	r2, [r3, #0]
 8000698:	605a      	str	r2, [r3, #4]
 800069a:	609a      	str	r2, [r3, #8]
 800069c:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	4a1b      	ldr	r2, [pc, #108]	@ (8000710 <HAL_UART_MspInit+0x88>)
 80006a4:	4293      	cmp	r3, r2
 80006a6:	d12f      	bne.n	8000708 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80006a8:	4b1a      	ldr	r3, [pc, #104]	@ (8000714 <HAL_UART_MspInit+0x8c>)
 80006aa:	69db      	ldr	r3, [r3, #28]
 80006ac:	4a19      	ldr	r2, [pc, #100]	@ (8000714 <HAL_UART_MspInit+0x8c>)
 80006ae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80006b2:	61d3      	str	r3, [r2, #28]
 80006b4:	4b17      	ldr	r3, [pc, #92]	@ (8000714 <HAL_UART_MspInit+0x8c>)
 80006b6:	69db      	ldr	r3, [r3, #28]
 80006b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80006bc:	60fb      	str	r3, [r7, #12]
 80006be:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006c0:	4b14      	ldr	r3, [pc, #80]	@ (8000714 <HAL_UART_MspInit+0x8c>)
 80006c2:	699b      	ldr	r3, [r3, #24]
 80006c4:	4a13      	ldr	r2, [pc, #76]	@ (8000714 <HAL_UART_MspInit+0x8c>)
 80006c6:	f043 0304 	orr.w	r3, r3, #4
 80006ca:	6193      	str	r3, [r2, #24]
 80006cc:	4b11      	ldr	r3, [pc, #68]	@ (8000714 <HAL_UART_MspInit+0x8c>)
 80006ce:	699b      	ldr	r3, [r3, #24]
 80006d0:	f003 0304 	and.w	r3, r3, #4
 80006d4:	60bb      	str	r3, [r7, #8]
 80006d6:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80006d8:	2304      	movs	r3, #4
 80006da:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006dc:	2302      	movs	r3, #2
 80006de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006e0:	2303      	movs	r3, #3
 80006e2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006e4:	f107 0310 	add.w	r3, r7, #16
 80006e8:	4619      	mov	r1, r3
 80006ea:	480b      	ldr	r0, [pc, #44]	@ (8000718 <HAL_UART_MspInit+0x90>)
 80006ec:	f000 f982 	bl	80009f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80006f0:	2308      	movs	r3, #8
 80006f2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006f4:	2300      	movs	r3, #0
 80006f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f8:	2300      	movs	r3, #0
 80006fa:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006fc:	f107 0310 	add.w	r3, r7, #16
 8000700:	4619      	mov	r1, r3
 8000702:	4805      	ldr	r0, [pc, #20]	@ (8000718 <HAL_UART_MspInit+0x90>)
 8000704:	f000 f976 	bl	80009f4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000708:	bf00      	nop
 800070a:	3720      	adds	r7, #32
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}
 8000710:	40004400 	.word	0x40004400
 8000714:	40021000 	.word	0x40021000
 8000718:	40010800 	.word	0x40010800

0800071c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800071c:	f7ff ff84 	bl	8000628 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000720:	480b      	ldr	r0, [pc, #44]	@ (8000750 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000722:	490c      	ldr	r1, [pc, #48]	@ (8000754 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000724:	4a0c      	ldr	r2, [pc, #48]	@ (8000758 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000726:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000728:	e002      	b.n	8000730 <LoopCopyDataInit>

0800072a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800072a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800072c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800072e:	3304      	adds	r3, #4

08000730 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000730:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000732:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000734:	d3f9      	bcc.n	800072a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000736:	4a09      	ldr	r2, [pc, #36]	@ (800075c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000738:	4c09      	ldr	r4, [pc, #36]	@ (8000760 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800073a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800073c:	e001      	b.n	8000742 <LoopFillZerobss>

0800073e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800073e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000740:	3204      	adds	r2, #4

08000742 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000742:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000744:	d3fb      	bcc.n	800073e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000746:	f002 fadf 	bl	8002d08 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800074a:	f7ff fdfb 	bl	8000344 <main>
  bx lr
 800074e:	4770      	bx	lr
  ldr r0, =_sdata
 8000750:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000754:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000758:	08003940 	.word	0x08003940
  ldr r2, =_sbss
 800075c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000760:	20000278 	.word	0x20000278

08000764 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000764:	e7fe      	b.n	8000764 <ADC1_2_IRQHandler>
	...

08000768 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800076c:	4b08      	ldr	r3, [pc, #32]	@ (8000790 <HAL_Init+0x28>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	4a07      	ldr	r2, [pc, #28]	@ (8000790 <HAL_Init+0x28>)
 8000772:	f043 0310 	orr.w	r3, r3, #16
 8000776:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000778:	2003      	movs	r0, #3
 800077a:	f000 f907 	bl	800098c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800077e:	200f      	movs	r0, #15
 8000780:	f000 f808 	bl	8000794 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000784:	f7ff fe52 	bl	800042c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000788:	2300      	movs	r3, #0
}
 800078a:	4618      	mov	r0, r3
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	40022000 	.word	0x40022000

08000794 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b082      	sub	sp, #8
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800079c:	4b12      	ldr	r3, [pc, #72]	@ (80007e8 <HAL_InitTick+0x54>)
 800079e:	681a      	ldr	r2, [r3, #0]
 80007a0:	4b12      	ldr	r3, [pc, #72]	@ (80007ec <HAL_InitTick+0x58>)
 80007a2:	781b      	ldrb	r3, [r3, #0]
 80007a4:	4619      	mov	r1, r3
 80007a6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80007aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80007ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80007b2:	4618      	mov	r0, r3
 80007b4:	f000 f911 	bl	80009da <HAL_SYSTICK_Config>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d001      	beq.n	80007c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80007be:	2301      	movs	r3, #1
 80007c0:	e00e      	b.n	80007e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	2b0f      	cmp	r3, #15
 80007c6:	d80a      	bhi.n	80007de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007c8:	2200      	movs	r2, #0
 80007ca:	6879      	ldr	r1, [r7, #4]
 80007cc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80007d0:	f000 f8e7 	bl	80009a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80007d4:	4a06      	ldr	r2, [pc, #24]	@ (80007f0 <HAL_InitTick+0x5c>)
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80007da:	2300      	movs	r3, #0
 80007dc:	e000      	b.n	80007e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80007de:	2301      	movs	r3, #1
}
 80007e0:	4618      	mov	r0, r3
 80007e2:	3708      	adds	r7, #8
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	20000000 	.word	0x20000000
 80007ec:	20000008 	.word	0x20000008
 80007f0:	20000004 	.word	0x20000004

080007f4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007f4:	b480      	push	{r7}
 80007f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007f8:	4b05      	ldr	r3, [pc, #20]	@ (8000810 <HAL_IncTick+0x1c>)
 80007fa:	781b      	ldrb	r3, [r3, #0]
 80007fc:	461a      	mov	r2, r3
 80007fe:	4b05      	ldr	r3, [pc, #20]	@ (8000814 <HAL_IncTick+0x20>)
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	4413      	add	r3, r2
 8000804:	4a03      	ldr	r2, [pc, #12]	@ (8000814 <HAL_IncTick+0x20>)
 8000806:	6013      	str	r3, [r2, #0]
}
 8000808:	bf00      	nop
 800080a:	46bd      	mov	sp, r7
 800080c:	bc80      	pop	{r7}
 800080e:	4770      	bx	lr
 8000810:	20000008 	.word	0x20000008
 8000814:	20000128 	.word	0x20000128

08000818 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000818:	b480      	push	{r7}
 800081a:	af00      	add	r7, sp, #0
  return uwTick;
 800081c:	4b02      	ldr	r3, [pc, #8]	@ (8000828 <HAL_GetTick+0x10>)
 800081e:	681b      	ldr	r3, [r3, #0]
}
 8000820:	4618      	mov	r0, r3
 8000822:	46bd      	mov	sp, r7
 8000824:	bc80      	pop	{r7}
 8000826:	4770      	bx	lr
 8000828:	20000128 	.word	0x20000128

0800082c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800082c:	b480      	push	{r7}
 800082e:	b085      	sub	sp, #20
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	f003 0307 	and.w	r3, r3, #7
 800083a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800083c:	4b0c      	ldr	r3, [pc, #48]	@ (8000870 <__NVIC_SetPriorityGrouping+0x44>)
 800083e:	68db      	ldr	r3, [r3, #12]
 8000840:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000842:	68ba      	ldr	r2, [r7, #8]
 8000844:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000848:	4013      	ands	r3, r2
 800084a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800084c:	68fb      	ldr	r3, [r7, #12]
 800084e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000850:	68bb      	ldr	r3, [r7, #8]
 8000852:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000854:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000858:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800085c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800085e:	4a04      	ldr	r2, [pc, #16]	@ (8000870 <__NVIC_SetPriorityGrouping+0x44>)
 8000860:	68bb      	ldr	r3, [r7, #8]
 8000862:	60d3      	str	r3, [r2, #12]
}
 8000864:	bf00      	nop
 8000866:	3714      	adds	r7, #20
 8000868:	46bd      	mov	sp, r7
 800086a:	bc80      	pop	{r7}
 800086c:	4770      	bx	lr
 800086e:	bf00      	nop
 8000870:	e000ed00 	.word	0xe000ed00

08000874 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000874:	b480      	push	{r7}
 8000876:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000878:	4b04      	ldr	r3, [pc, #16]	@ (800088c <__NVIC_GetPriorityGrouping+0x18>)
 800087a:	68db      	ldr	r3, [r3, #12]
 800087c:	0a1b      	lsrs	r3, r3, #8
 800087e:	f003 0307 	and.w	r3, r3, #7
}
 8000882:	4618      	mov	r0, r3
 8000884:	46bd      	mov	sp, r7
 8000886:	bc80      	pop	{r7}
 8000888:	4770      	bx	lr
 800088a:	bf00      	nop
 800088c:	e000ed00 	.word	0xe000ed00

08000890 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000890:	b480      	push	{r7}
 8000892:	b083      	sub	sp, #12
 8000894:	af00      	add	r7, sp, #0
 8000896:	4603      	mov	r3, r0
 8000898:	6039      	str	r1, [r7, #0]
 800089a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800089c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	db0a      	blt.n	80008ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008a4:	683b      	ldr	r3, [r7, #0]
 80008a6:	b2da      	uxtb	r2, r3
 80008a8:	490c      	ldr	r1, [pc, #48]	@ (80008dc <__NVIC_SetPriority+0x4c>)
 80008aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008ae:	0112      	lsls	r2, r2, #4
 80008b0:	b2d2      	uxtb	r2, r2
 80008b2:	440b      	add	r3, r1
 80008b4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008b8:	e00a      	b.n	80008d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008ba:	683b      	ldr	r3, [r7, #0]
 80008bc:	b2da      	uxtb	r2, r3
 80008be:	4908      	ldr	r1, [pc, #32]	@ (80008e0 <__NVIC_SetPriority+0x50>)
 80008c0:	79fb      	ldrb	r3, [r7, #7]
 80008c2:	f003 030f 	and.w	r3, r3, #15
 80008c6:	3b04      	subs	r3, #4
 80008c8:	0112      	lsls	r2, r2, #4
 80008ca:	b2d2      	uxtb	r2, r2
 80008cc:	440b      	add	r3, r1
 80008ce:	761a      	strb	r2, [r3, #24]
}
 80008d0:	bf00      	nop
 80008d2:	370c      	adds	r7, #12
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bc80      	pop	{r7}
 80008d8:	4770      	bx	lr
 80008da:	bf00      	nop
 80008dc:	e000e100 	.word	0xe000e100
 80008e0:	e000ed00 	.word	0xe000ed00

080008e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008e4:	b480      	push	{r7}
 80008e6:	b089      	sub	sp, #36	@ 0x24
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	60f8      	str	r0, [r7, #12]
 80008ec:	60b9      	str	r1, [r7, #8]
 80008ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80008f0:	68fb      	ldr	r3, [r7, #12]
 80008f2:	f003 0307 	and.w	r3, r3, #7
 80008f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008f8:	69fb      	ldr	r3, [r7, #28]
 80008fa:	f1c3 0307 	rsb	r3, r3, #7
 80008fe:	2b04      	cmp	r3, #4
 8000900:	bf28      	it	cs
 8000902:	2304      	movcs	r3, #4
 8000904:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000906:	69fb      	ldr	r3, [r7, #28]
 8000908:	3304      	adds	r3, #4
 800090a:	2b06      	cmp	r3, #6
 800090c:	d902      	bls.n	8000914 <NVIC_EncodePriority+0x30>
 800090e:	69fb      	ldr	r3, [r7, #28]
 8000910:	3b03      	subs	r3, #3
 8000912:	e000      	b.n	8000916 <NVIC_EncodePriority+0x32>
 8000914:	2300      	movs	r3, #0
 8000916:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000918:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800091c:	69bb      	ldr	r3, [r7, #24]
 800091e:	fa02 f303 	lsl.w	r3, r2, r3
 8000922:	43da      	mvns	r2, r3
 8000924:	68bb      	ldr	r3, [r7, #8]
 8000926:	401a      	ands	r2, r3
 8000928:	697b      	ldr	r3, [r7, #20]
 800092a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800092c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000930:	697b      	ldr	r3, [r7, #20]
 8000932:	fa01 f303 	lsl.w	r3, r1, r3
 8000936:	43d9      	mvns	r1, r3
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800093c:	4313      	orrs	r3, r2
         );
}
 800093e:	4618      	mov	r0, r3
 8000940:	3724      	adds	r7, #36	@ 0x24
 8000942:	46bd      	mov	sp, r7
 8000944:	bc80      	pop	{r7}
 8000946:	4770      	bx	lr

08000948 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b082      	sub	sp, #8
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	3b01      	subs	r3, #1
 8000954:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000958:	d301      	bcc.n	800095e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800095a:	2301      	movs	r3, #1
 800095c:	e00f      	b.n	800097e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800095e:	4a0a      	ldr	r2, [pc, #40]	@ (8000988 <SysTick_Config+0x40>)
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	3b01      	subs	r3, #1
 8000964:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000966:	210f      	movs	r1, #15
 8000968:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800096c:	f7ff ff90 	bl	8000890 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000970:	4b05      	ldr	r3, [pc, #20]	@ (8000988 <SysTick_Config+0x40>)
 8000972:	2200      	movs	r2, #0
 8000974:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000976:	4b04      	ldr	r3, [pc, #16]	@ (8000988 <SysTick_Config+0x40>)
 8000978:	2207      	movs	r2, #7
 800097a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800097c:	2300      	movs	r3, #0
}
 800097e:	4618      	mov	r0, r3
 8000980:	3708      	adds	r7, #8
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	e000e010 	.word	0xe000e010

0800098c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b082      	sub	sp, #8
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000994:	6878      	ldr	r0, [r7, #4]
 8000996:	f7ff ff49 	bl	800082c <__NVIC_SetPriorityGrouping>
}
 800099a:	bf00      	nop
 800099c:	3708      	adds	r7, #8
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}

080009a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80009a2:	b580      	push	{r7, lr}
 80009a4:	b086      	sub	sp, #24
 80009a6:	af00      	add	r7, sp, #0
 80009a8:	4603      	mov	r3, r0
 80009aa:	60b9      	str	r1, [r7, #8]
 80009ac:	607a      	str	r2, [r7, #4]
 80009ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80009b0:	2300      	movs	r3, #0
 80009b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80009b4:	f7ff ff5e 	bl	8000874 <__NVIC_GetPriorityGrouping>
 80009b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80009ba:	687a      	ldr	r2, [r7, #4]
 80009bc:	68b9      	ldr	r1, [r7, #8]
 80009be:	6978      	ldr	r0, [r7, #20]
 80009c0:	f7ff ff90 	bl	80008e4 <NVIC_EncodePriority>
 80009c4:	4602      	mov	r2, r0
 80009c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009ca:	4611      	mov	r1, r2
 80009cc:	4618      	mov	r0, r3
 80009ce:	f7ff ff5f 	bl	8000890 <__NVIC_SetPriority>
}
 80009d2:	bf00      	nop
 80009d4:	3718      	adds	r7, #24
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}

080009da <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80009da:	b580      	push	{r7, lr}
 80009dc:	b082      	sub	sp, #8
 80009de:	af00      	add	r7, sp, #0
 80009e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80009e2:	6878      	ldr	r0, [r7, #4]
 80009e4:	f7ff ffb0 	bl	8000948 <SysTick_Config>
 80009e8:	4603      	mov	r3, r0
}
 80009ea:	4618      	mov	r0, r3
 80009ec:	3708      	adds	r7, #8
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}
	...

080009f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80009f4:	b480      	push	{r7}
 80009f6:	b08b      	sub	sp, #44	@ 0x2c
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
 80009fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80009fe:	2300      	movs	r3, #0
 8000a00:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000a02:	2300      	movs	r3, #0
 8000a04:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a06:	e169      	b.n	8000cdc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000a08:	2201      	movs	r2, #1
 8000a0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a10:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a12:	683b      	ldr	r3, [r7, #0]
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	69fa      	ldr	r2, [r7, #28]
 8000a18:	4013      	ands	r3, r2
 8000a1a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000a1c:	69ba      	ldr	r2, [r7, #24]
 8000a1e:	69fb      	ldr	r3, [r7, #28]
 8000a20:	429a      	cmp	r2, r3
 8000a22:	f040 8158 	bne.w	8000cd6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000a26:	683b      	ldr	r3, [r7, #0]
 8000a28:	685b      	ldr	r3, [r3, #4]
 8000a2a:	4a9a      	ldr	r2, [pc, #616]	@ (8000c94 <HAL_GPIO_Init+0x2a0>)
 8000a2c:	4293      	cmp	r3, r2
 8000a2e:	d05e      	beq.n	8000aee <HAL_GPIO_Init+0xfa>
 8000a30:	4a98      	ldr	r2, [pc, #608]	@ (8000c94 <HAL_GPIO_Init+0x2a0>)
 8000a32:	4293      	cmp	r3, r2
 8000a34:	d875      	bhi.n	8000b22 <HAL_GPIO_Init+0x12e>
 8000a36:	4a98      	ldr	r2, [pc, #608]	@ (8000c98 <HAL_GPIO_Init+0x2a4>)
 8000a38:	4293      	cmp	r3, r2
 8000a3a:	d058      	beq.n	8000aee <HAL_GPIO_Init+0xfa>
 8000a3c:	4a96      	ldr	r2, [pc, #600]	@ (8000c98 <HAL_GPIO_Init+0x2a4>)
 8000a3e:	4293      	cmp	r3, r2
 8000a40:	d86f      	bhi.n	8000b22 <HAL_GPIO_Init+0x12e>
 8000a42:	4a96      	ldr	r2, [pc, #600]	@ (8000c9c <HAL_GPIO_Init+0x2a8>)
 8000a44:	4293      	cmp	r3, r2
 8000a46:	d052      	beq.n	8000aee <HAL_GPIO_Init+0xfa>
 8000a48:	4a94      	ldr	r2, [pc, #592]	@ (8000c9c <HAL_GPIO_Init+0x2a8>)
 8000a4a:	4293      	cmp	r3, r2
 8000a4c:	d869      	bhi.n	8000b22 <HAL_GPIO_Init+0x12e>
 8000a4e:	4a94      	ldr	r2, [pc, #592]	@ (8000ca0 <HAL_GPIO_Init+0x2ac>)
 8000a50:	4293      	cmp	r3, r2
 8000a52:	d04c      	beq.n	8000aee <HAL_GPIO_Init+0xfa>
 8000a54:	4a92      	ldr	r2, [pc, #584]	@ (8000ca0 <HAL_GPIO_Init+0x2ac>)
 8000a56:	4293      	cmp	r3, r2
 8000a58:	d863      	bhi.n	8000b22 <HAL_GPIO_Init+0x12e>
 8000a5a:	4a92      	ldr	r2, [pc, #584]	@ (8000ca4 <HAL_GPIO_Init+0x2b0>)
 8000a5c:	4293      	cmp	r3, r2
 8000a5e:	d046      	beq.n	8000aee <HAL_GPIO_Init+0xfa>
 8000a60:	4a90      	ldr	r2, [pc, #576]	@ (8000ca4 <HAL_GPIO_Init+0x2b0>)
 8000a62:	4293      	cmp	r3, r2
 8000a64:	d85d      	bhi.n	8000b22 <HAL_GPIO_Init+0x12e>
 8000a66:	2b12      	cmp	r3, #18
 8000a68:	d82a      	bhi.n	8000ac0 <HAL_GPIO_Init+0xcc>
 8000a6a:	2b12      	cmp	r3, #18
 8000a6c:	d859      	bhi.n	8000b22 <HAL_GPIO_Init+0x12e>
 8000a6e:	a201      	add	r2, pc, #4	@ (adr r2, 8000a74 <HAL_GPIO_Init+0x80>)
 8000a70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a74:	08000aef 	.word	0x08000aef
 8000a78:	08000ac9 	.word	0x08000ac9
 8000a7c:	08000adb 	.word	0x08000adb
 8000a80:	08000b1d 	.word	0x08000b1d
 8000a84:	08000b23 	.word	0x08000b23
 8000a88:	08000b23 	.word	0x08000b23
 8000a8c:	08000b23 	.word	0x08000b23
 8000a90:	08000b23 	.word	0x08000b23
 8000a94:	08000b23 	.word	0x08000b23
 8000a98:	08000b23 	.word	0x08000b23
 8000a9c:	08000b23 	.word	0x08000b23
 8000aa0:	08000b23 	.word	0x08000b23
 8000aa4:	08000b23 	.word	0x08000b23
 8000aa8:	08000b23 	.word	0x08000b23
 8000aac:	08000b23 	.word	0x08000b23
 8000ab0:	08000b23 	.word	0x08000b23
 8000ab4:	08000b23 	.word	0x08000b23
 8000ab8:	08000ad1 	.word	0x08000ad1
 8000abc:	08000ae5 	.word	0x08000ae5
 8000ac0:	4a79      	ldr	r2, [pc, #484]	@ (8000ca8 <HAL_GPIO_Init+0x2b4>)
 8000ac2:	4293      	cmp	r3, r2
 8000ac4:	d013      	beq.n	8000aee <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000ac6:	e02c      	b.n	8000b22 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000ac8:	683b      	ldr	r3, [r7, #0]
 8000aca:	68db      	ldr	r3, [r3, #12]
 8000acc:	623b      	str	r3, [r7, #32]
          break;
 8000ace:	e029      	b.n	8000b24 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000ad0:	683b      	ldr	r3, [r7, #0]
 8000ad2:	68db      	ldr	r3, [r3, #12]
 8000ad4:	3304      	adds	r3, #4
 8000ad6:	623b      	str	r3, [r7, #32]
          break;
 8000ad8:	e024      	b.n	8000b24 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000ada:	683b      	ldr	r3, [r7, #0]
 8000adc:	68db      	ldr	r3, [r3, #12]
 8000ade:	3308      	adds	r3, #8
 8000ae0:	623b      	str	r3, [r7, #32]
          break;
 8000ae2:	e01f      	b.n	8000b24 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000ae4:	683b      	ldr	r3, [r7, #0]
 8000ae6:	68db      	ldr	r3, [r3, #12]
 8000ae8:	330c      	adds	r3, #12
 8000aea:	623b      	str	r3, [r7, #32]
          break;
 8000aec:	e01a      	b.n	8000b24 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000aee:	683b      	ldr	r3, [r7, #0]
 8000af0:	689b      	ldr	r3, [r3, #8]
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d102      	bne.n	8000afc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000af6:	2304      	movs	r3, #4
 8000af8:	623b      	str	r3, [r7, #32]
          break;
 8000afa:	e013      	b.n	8000b24 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000afc:	683b      	ldr	r3, [r7, #0]
 8000afe:	689b      	ldr	r3, [r3, #8]
 8000b00:	2b01      	cmp	r3, #1
 8000b02:	d105      	bne.n	8000b10 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b04:	2308      	movs	r3, #8
 8000b06:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	69fa      	ldr	r2, [r7, #28]
 8000b0c:	611a      	str	r2, [r3, #16]
          break;
 8000b0e:	e009      	b.n	8000b24 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b10:	2308      	movs	r3, #8
 8000b12:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	69fa      	ldr	r2, [r7, #28]
 8000b18:	615a      	str	r2, [r3, #20]
          break;
 8000b1a:	e003      	b.n	8000b24 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	623b      	str	r3, [r7, #32]
          break;
 8000b20:	e000      	b.n	8000b24 <HAL_GPIO_Init+0x130>
          break;
 8000b22:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000b24:	69bb      	ldr	r3, [r7, #24]
 8000b26:	2bff      	cmp	r3, #255	@ 0xff
 8000b28:	d801      	bhi.n	8000b2e <HAL_GPIO_Init+0x13a>
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	e001      	b.n	8000b32 <HAL_GPIO_Init+0x13e>
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	3304      	adds	r3, #4
 8000b32:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000b34:	69bb      	ldr	r3, [r7, #24]
 8000b36:	2bff      	cmp	r3, #255	@ 0xff
 8000b38:	d802      	bhi.n	8000b40 <HAL_GPIO_Init+0x14c>
 8000b3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b3c:	009b      	lsls	r3, r3, #2
 8000b3e:	e002      	b.n	8000b46 <HAL_GPIO_Init+0x152>
 8000b40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b42:	3b08      	subs	r3, #8
 8000b44:	009b      	lsls	r3, r3, #2
 8000b46:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000b48:	697b      	ldr	r3, [r7, #20]
 8000b4a:	681a      	ldr	r2, [r3, #0]
 8000b4c:	210f      	movs	r1, #15
 8000b4e:	693b      	ldr	r3, [r7, #16]
 8000b50:	fa01 f303 	lsl.w	r3, r1, r3
 8000b54:	43db      	mvns	r3, r3
 8000b56:	401a      	ands	r2, r3
 8000b58:	6a39      	ldr	r1, [r7, #32]
 8000b5a:	693b      	ldr	r3, [r7, #16]
 8000b5c:	fa01 f303 	lsl.w	r3, r1, r3
 8000b60:	431a      	orrs	r2, r3
 8000b62:	697b      	ldr	r3, [r7, #20]
 8000b64:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000b66:	683b      	ldr	r3, [r7, #0]
 8000b68:	685b      	ldr	r3, [r3, #4]
 8000b6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	f000 80b1 	beq.w	8000cd6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000b74:	4b4d      	ldr	r3, [pc, #308]	@ (8000cac <HAL_GPIO_Init+0x2b8>)
 8000b76:	699b      	ldr	r3, [r3, #24]
 8000b78:	4a4c      	ldr	r2, [pc, #304]	@ (8000cac <HAL_GPIO_Init+0x2b8>)
 8000b7a:	f043 0301 	orr.w	r3, r3, #1
 8000b7e:	6193      	str	r3, [r2, #24]
 8000b80:	4b4a      	ldr	r3, [pc, #296]	@ (8000cac <HAL_GPIO_Init+0x2b8>)
 8000b82:	699b      	ldr	r3, [r3, #24]
 8000b84:	f003 0301 	and.w	r3, r3, #1
 8000b88:	60bb      	str	r3, [r7, #8]
 8000b8a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000b8c:	4a48      	ldr	r2, [pc, #288]	@ (8000cb0 <HAL_GPIO_Init+0x2bc>)
 8000b8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b90:	089b      	lsrs	r3, r3, #2
 8000b92:	3302      	adds	r3, #2
 8000b94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b98:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000b9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b9c:	f003 0303 	and.w	r3, r3, #3
 8000ba0:	009b      	lsls	r3, r3, #2
 8000ba2:	220f      	movs	r2, #15
 8000ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba8:	43db      	mvns	r3, r3
 8000baa:	68fa      	ldr	r2, [r7, #12]
 8000bac:	4013      	ands	r3, r2
 8000bae:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	4a40      	ldr	r2, [pc, #256]	@ (8000cb4 <HAL_GPIO_Init+0x2c0>)
 8000bb4:	4293      	cmp	r3, r2
 8000bb6:	d013      	beq.n	8000be0 <HAL_GPIO_Init+0x1ec>
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	4a3f      	ldr	r2, [pc, #252]	@ (8000cb8 <HAL_GPIO_Init+0x2c4>)
 8000bbc:	4293      	cmp	r3, r2
 8000bbe:	d00d      	beq.n	8000bdc <HAL_GPIO_Init+0x1e8>
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	4a3e      	ldr	r2, [pc, #248]	@ (8000cbc <HAL_GPIO_Init+0x2c8>)
 8000bc4:	4293      	cmp	r3, r2
 8000bc6:	d007      	beq.n	8000bd8 <HAL_GPIO_Init+0x1e4>
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	4a3d      	ldr	r2, [pc, #244]	@ (8000cc0 <HAL_GPIO_Init+0x2cc>)
 8000bcc:	4293      	cmp	r3, r2
 8000bce:	d101      	bne.n	8000bd4 <HAL_GPIO_Init+0x1e0>
 8000bd0:	2303      	movs	r3, #3
 8000bd2:	e006      	b.n	8000be2 <HAL_GPIO_Init+0x1ee>
 8000bd4:	2304      	movs	r3, #4
 8000bd6:	e004      	b.n	8000be2 <HAL_GPIO_Init+0x1ee>
 8000bd8:	2302      	movs	r3, #2
 8000bda:	e002      	b.n	8000be2 <HAL_GPIO_Init+0x1ee>
 8000bdc:	2301      	movs	r3, #1
 8000bde:	e000      	b.n	8000be2 <HAL_GPIO_Init+0x1ee>
 8000be0:	2300      	movs	r3, #0
 8000be2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000be4:	f002 0203 	and.w	r2, r2, #3
 8000be8:	0092      	lsls	r2, r2, #2
 8000bea:	4093      	lsls	r3, r2
 8000bec:	68fa      	ldr	r2, [r7, #12]
 8000bee:	4313      	orrs	r3, r2
 8000bf0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000bf2:	492f      	ldr	r1, [pc, #188]	@ (8000cb0 <HAL_GPIO_Init+0x2bc>)
 8000bf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bf6:	089b      	lsrs	r3, r3, #2
 8000bf8:	3302      	adds	r3, #2
 8000bfa:	68fa      	ldr	r2, [r7, #12]
 8000bfc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c00:	683b      	ldr	r3, [r7, #0]
 8000c02:	685b      	ldr	r3, [r3, #4]
 8000c04:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d006      	beq.n	8000c1a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000c0c:	4b2d      	ldr	r3, [pc, #180]	@ (8000cc4 <HAL_GPIO_Init+0x2d0>)
 8000c0e:	689a      	ldr	r2, [r3, #8]
 8000c10:	492c      	ldr	r1, [pc, #176]	@ (8000cc4 <HAL_GPIO_Init+0x2d0>)
 8000c12:	69bb      	ldr	r3, [r7, #24]
 8000c14:	4313      	orrs	r3, r2
 8000c16:	608b      	str	r3, [r1, #8]
 8000c18:	e006      	b.n	8000c28 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000c1a:	4b2a      	ldr	r3, [pc, #168]	@ (8000cc4 <HAL_GPIO_Init+0x2d0>)
 8000c1c:	689a      	ldr	r2, [r3, #8]
 8000c1e:	69bb      	ldr	r3, [r7, #24]
 8000c20:	43db      	mvns	r3, r3
 8000c22:	4928      	ldr	r1, [pc, #160]	@ (8000cc4 <HAL_GPIO_Init+0x2d0>)
 8000c24:	4013      	ands	r3, r2
 8000c26:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000c28:	683b      	ldr	r3, [r7, #0]
 8000c2a:	685b      	ldr	r3, [r3, #4]
 8000c2c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d006      	beq.n	8000c42 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000c34:	4b23      	ldr	r3, [pc, #140]	@ (8000cc4 <HAL_GPIO_Init+0x2d0>)
 8000c36:	68da      	ldr	r2, [r3, #12]
 8000c38:	4922      	ldr	r1, [pc, #136]	@ (8000cc4 <HAL_GPIO_Init+0x2d0>)
 8000c3a:	69bb      	ldr	r3, [r7, #24]
 8000c3c:	4313      	orrs	r3, r2
 8000c3e:	60cb      	str	r3, [r1, #12]
 8000c40:	e006      	b.n	8000c50 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000c42:	4b20      	ldr	r3, [pc, #128]	@ (8000cc4 <HAL_GPIO_Init+0x2d0>)
 8000c44:	68da      	ldr	r2, [r3, #12]
 8000c46:	69bb      	ldr	r3, [r7, #24]
 8000c48:	43db      	mvns	r3, r3
 8000c4a:	491e      	ldr	r1, [pc, #120]	@ (8000cc4 <HAL_GPIO_Init+0x2d0>)
 8000c4c:	4013      	ands	r3, r2
 8000c4e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000c50:	683b      	ldr	r3, [r7, #0]
 8000c52:	685b      	ldr	r3, [r3, #4]
 8000c54:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d006      	beq.n	8000c6a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000c5c:	4b19      	ldr	r3, [pc, #100]	@ (8000cc4 <HAL_GPIO_Init+0x2d0>)
 8000c5e:	685a      	ldr	r2, [r3, #4]
 8000c60:	4918      	ldr	r1, [pc, #96]	@ (8000cc4 <HAL_GPIO_Init+0x2d0>)
 8000c62:	69bb      	ldr	r3, [r7, #24]
 8000c64:	4313      	orrs	r3, r2
 8000c66:	604b      	str	r3, [r1, #4]
 8000c68:	e006      	b.n	8000c78 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000c6a:	4b16      	ldr	r3, [pc, #88]	@ (8000cc4 <HAL_GPIO_Init+0x2d0>)
 8000c6c:	685a      	ldr	r2, [r3, #4]
 8000c6e:	69bb      	ldr	r3, [r7, #24]
 8000c70:	43db      	mvns	r3, r3
 8000c72:	4914      	ldr	r1, [pc, #80]	@ (8000cc4 <HAL_GPIO_Init+0x2d0>)
 8000c74:	4013      	ands	r3, r2
 8000c76:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000c78:	683b      	ldr	r3, [r7, #0]
 8000c7a:	685b      	ldr	r3, [r3, #4]
 8000c7c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d021      	beq.n	8000cc8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000c84:	4b0f      	ldr	r3, [pc, #60]	@ (8000cc4 <HAL_GPIO_Init+0x2d0>)
 8000c86:	681a      	ldr	r2, [r3, #0]
 8000c88:	490e      	ldr	r1, [pc, #56]	@ (8000cc4 <HAL_GPIO_Init+0x2d0>)
 8000c8a:	69bb      	ldr	r3, [r7, #24]
 8000c8c:	4313      	orrs	r3, r2
 8000c8e:	600b      	str	r3, [r1, #0]
 8000c90:	e021      	b.n	8000cd6 <HAL_GPIO_Init+0x2e2>
 8000c92:	bf00      	nop
 8000c94:	10320000 	.word	0x10320000
 8000c98:	10310000 	.word	0x10310000
 8000c9c:	10220000 	.word	0x10220000
 8000ca0:	10210000 	.word	0x10210000
 8000ca4:	10120000 	.word	0x10120000
 8000ca8:	10110000 	.word	0x10110000
 8000cac:	40021000 	.word	0x40021000
 8000cb0:	40010000 	.word	0x40010000
 8000cb4:	40010800 	.word	0x40010800
 8000cb8:	40010c00 	.word	0x40010c00
 8000cbc:	40011000 	.word	0x40011000
 8000cc0:	40011400 	.word	0x40011400
 8000cc4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000cc8:	4b0b      	ldr	r3, [pc, #44]	@ (8000cf8 <HAL_GPIO_Init+0x304>)
 8000cca:	681a      	ldr	r2, [r3, #0]
 8000ccc:	69bb      	ldr	r3, [r7, #24]
 8000cce:	43db      	mvns	r3, r3
 8000cd0:	4909      	ldr	r1, [pc, #36]	@ (8000cf8 <HAL_GPIO_Init+0x304>)
 8000cd2:	4013      	ands	r3, r2
 8000cd4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000cd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000cd8:	3301      	adds	r3, #1
 8000cda:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cdc:	683b      	ldr	r3, [r7, #0]
 8000cde:	681a      	ldr	r2, [r3, #0]
 8000ce0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ce2:	fa22 f303 	lsr.w	r3, r2, r3
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	f47f ae8e 	bne.w	8000a08 <HAL_GPIO_Init+0x14>
  }
}
 8000cec:	bf00      	nop
 8000cee:	bf00      	nop
 8000cf0:	372c      	adds	r7, #44	@ 0x2c
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bc80      	pop	{r7}
 8000cf6:	4770      	bx	lr
 8000cf8:	40010400 	.word	0x40010400

08000cfc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b084      	sub	sp, #16
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d101      	bne.n	8000d0e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000d0a:	2301      	movs	r3, #1
 8000d0c:	e12b      	b.n	8000f66 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8000d14:	b2db      	uxtb	r3, r3
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d106      	bne.n	8000d28 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000d22:	6878      	ldr	r0, [r7, #4]
 8000d24:	f7ff fab8 	bl	8000298 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	2224      	movs	r2, #36	@ 0x24
 8000d2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	681a      	ldr	r2, [r3, #0]
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	f022 0201 	bic.w	r2, r2, #1
 8000d3e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	681a      	ldr	r2, [r3, #0]
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8000d4e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	681a      	ldr	r2, [r3, #0]
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8000d5e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000d60:	f001 fbfc 	bl	800255c <HAL_RCC_GetPCLK1Freq>
 8000d64:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	685b      	ldr	r3, [r3, #4]
 8000d6a:	4a81      	ldr	r2, [pc, #516]	@ (8000f70 <HAL_I2C_Init+0x274>)
 8000d6c:	4293      	cmp	r3, r2
 8000d6e:	d807      	bhi.n	8000d80 <HAL_I2C_Init+0x84>
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	4a80      	ldr	r2, [pc, #512]	@ (8000f74 <HAL_I2C_Init+0x278>)
 8000d74:	4293      	cmp	r3, r2
 8000d76:	bf94      	ite	ls
 8000d78:	2301      	movls	r3, #1
 8000d7a:	2300      	movhi	r3, #0
 8000d7c:	b2db      	uxtb	r3, r3
 8000d7e:	e006      	b.n	8000d8e <HAL_I2C_Init+0x92>
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	4a7d      	ldr	r2, [pc, #500]	@ (8000f78 <HAL_I2C_Init+0x27c>)
 8000d84:	4293      	cmp	r3, r2
 8000d86:	bf94      	ite	ls
 8000d88:	2301      	movls	r3, #1
 8000d8a:	2300      	movhi	r3, #0
 8000d8c:	b2db      	uxtb	r3, r3
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d001      	beq.n	8000d96 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8000d92:	2301      	movs	r3, #1
 8000d94:	e0e7      	b.n	8000f66 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8000d96:	68fb      	ldr	r3, [r7, #12]
 8000d98:	4a78      	ldr	r2, [pc, #480]	@ (8000f7c <HAL_I2C_Init+0x280>)
 8000d9a:	fba2 2303 	umull	r2, r3, r2, r3
 8000d9e:	0c9b      	lsrs	r3, r3, #18
 8000da0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	685b      	ldr	r3, [r3, #4]
 8000da8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	68ba      	ldr	r2, [r7, #8]
 8000db2:	430a      	orrs	r2, r1
 8000db4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	6a1b      	ldr	r3, [r3, #32]
 8000dbc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	685b      	ldr	r3, [r3, #4]
 8000dc4:	4a6a      	ldr	r2, [pc, #424]	@ (8000f70 <HAL_I2C_Init+0x274>)
 8000dc6:	4293      	cmp	r3, r2
 8000dc8:	d802      	bhi.n	8000dd0 <HAL_I2C_Init+0xd4>
 8000dca:	68bb      	ldr	r3, [r7, #8]
 8000dcc:	3301      	adds	r3, #1
 8000dce:	e009      	b.n	8000de4 <HAL_I2C_Init+0xe8>
 8000dd0:	68bb      	ldr	r3, [r7, #8]
 8000dd2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8000dd6:	fb02 f303 	mul.w	r3, r2, r3
 8000dda:	4a69      	ldr	r2, [pc, #420]	@ (8000f80 <HAL_I2C_Init+0x284>)
 8000ddc:	fba2 2303 	umull	r2, r3, r2, r3
 8000de0:	099b      	lsrs	r3, r3, #6
 8000de2:	3301      	adds	r3, #1
 8000de4:	687a      	ldr	r2, [r7, #4]
 8000de6:	6812      	ldr	r2, [r2, #0]
 8000de8:	430b      	orrs	r3, r1
 8000dea:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	69db      	ldr	r3, [r3, #28]
 8000df2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8000df6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	685b      	ldr	r3, [r3, #4]
 8000dfe:	495c      	ldr	r1, [pc, #368]	@ (8000f70 <HAL_I2C_Init+0x274>)
 8000e00:	428b      	cmp	r3, r1
 8000e02:	d819      	bhi.n	8000e38 <HAL_I2C_Init+0x13c>
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	1e59      	subs	r1, r3, #1
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	685b      	ldr	r3, [r3, #4]
 8000e0c:	005b      	lsls	r3, r3, #1
 8000e0e:	fbb1 f3f3 	udiv	r3, r1, r3
 8000e12:	1c59      	adds	r1, r3, #1
 8000e14:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8000e18:	400b      	ands	r3, r1
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d00a      	beq.n	8000e34 <HAL_I2C_Init+0x138>
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	1e59      	subs	r1, r3, #1
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	685b      	ldr	r3, [r3, #4]
 8000e26:	005b      	lsls	r3, r3, #1
 8000e28:	fbb1 f3f3 	udiv	r3, r1, r3
 8000e2c:	3301      	adds	r3, #1
 8000e2e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000e32:	e051      	b.n	8000ed8 <HAL_I2C_Init+0x1dc>
 8000e34:	2304      	movs	r3, #4
 8000e36:	e04f      	b.n	8000ed8 <HAL_I2C_Init+0x1dc>
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	689b      	ldr	r3, [r3, #8]
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d111      	bne.n	8000e64 <HAL_I2C_Init+0x168>
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	1e58      	subs	r0, r3, #1
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	6859      	ldr	r1, [r3, #4]
 8000e48:	460b      	mov	r3, r1
 8000e4a:	005b      	lsls	r3, r3, #1
 8000e4c:	440b      	add	r3, r1
 8000e4e:	fbb0 f3f3 	udiv	r3, r0, r3
 8000e52:	3301      	adds	r3, #1
 8000e54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	bf0c      	ite	eq
 8000e5c:	2301      	moveq	r3, #1
 8000e5e:	2300      	movne	r3, #0
 8000e60:	b2db      	uxtb	r3, r3
 8000e62:	e012      	b.n	8000e8a <HAL_I2C_Init+0x18e>
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	1e58      	subs	r0, r3, #1
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	6859      	ldr	r1, [r3, #4]
 8000e6c:	460b      	mov	r3, r1
 8000e6e:	009b      	lsls	r3, r3, #2
 8000e70:	440b      	add	r3, r1
 8000e72:	0099      	lsls	r1, r3, #2
 8000e74:	440b      	add	r3, r1
 8000e76:	fbb0 f3f3 	udiv	r3, r0, r3
 8000e7a:	3301      	adds	r3, #1
 8000e7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	bf0c      	ite	eq
 8000e84:	2301      	moveq	r3, #1
 8000e86:	2300      	movne	r3, #0
 8000e88:	b2db      	uxtb	r3, r3
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d001      	beq.n	8000e92 <HAL_I2C_Init+0x196>
 8000e8e:	2301      	movs	r3, #1
 8000e90:	e022      	b.n	8000ed8 <HAL_I2C_Init+0x1dc>
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	689b      	ldr	r3, [r3, #8]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d10e      	bne.n	8000eb8 <HAL_I2C_Init+0x1bc>
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	1e58      	subs	r0, r3, #1
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	6859      	ldr	r1, [r3, #4]
 8000ea2:	460b      	mov	r3, r1
 8000ea4:	005b      	lsls	r3, r3, #1
 8000ea6:	440b      	add	r3, r1
 8000ea8:	fbb0 f3f3 	udiv	r3, r0, r3
 8000eac:	3301      	adds	r3, #1
 8000eae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000eb2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000eb6:	e00f      	b.n	8000ed8 <HAL_I2C_Init+0x1dc>
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	1e58      	subs	r0, r3, #1
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	6859      	ldr	r1, [r3, #4]
 8000ec0:	460b      	mov	r3, r1
 8000ec2:	009b      	lsls	r3, r3, #2
 8000ec4:	440b      	add	r3, r1
 8000ec6:	0099      	lsls	r1, r3, #2
 8000ec8:	440b      	add	r3, r1
 8000eca:	fbb0 f3f3 	udiv	r3, r0, r3
 8000ece:	3301      	adds	r3, #1
 8000ed0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000ed4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000ed8:	6879      	ldr	r1, [r7, #4]
 8000eda:	6809      	ldr	r1, [r1, #0]
 8000edc:	4313      	orrs	r3, r2
 8000ede:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	69da      	ldr	r2, [r3, #28]
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	6a1b      	ldr	r3, [r3, #32]
 8000ef2:	431a      	orrs	r2, r3
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	430a      	orrs	r2, r1
 8000efa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	689b      	ldr	r3, [r3, #8]
 8000f02:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8000f06:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8000f0a:	687a      	ldr	r2, [r7, #4]
 8000f0c:	6911      	ldr	r1, [r2, #16]
 8000f0e:	687a      	ldr	r2, [r7, #4]
 8000f10:	68d2      	ldr	r2, [r2, #12]
 8000f12:	4311      	orrs	r1, r2
 8000f14:	687a      	ldr	r2, [r7, #4]
 8000f16:	6812      	ldr	r2, [r2, #0]
 8000f18:	430b      	orrs	r3, r1
 8000f1a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	68db      	ldr	r3, [r3, #12]
 8000f22:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	695a      	ldr	r2, [r3, #20]
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	699b      	ldr	r3, [r3, #24]
 8000f2e:	431a      	orrs	r2, r3
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	430a      	orrs	r2, r1
 8000f36:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	681a      	ldr	r2, [r3, #0]
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	f042 0201 	orr.w	r2, r2, #1
 8000f46:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	2220      	movs	r2, #32
 8000f52:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	2200      	movs	r2, #0
 8000f5a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	2200      	movs	r2, #0
 8000f60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8000f64:	2300      	movs	r3, #0
}
 8000f66:	4618      	mov	r0, r3
 8000f68:	3710      	adds	r7, #16
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	000186a0 	.word	0x000186a0
 8000f74:	001e847f 	.word	0x001e847f
 8000f78:	003d08ff 	.word	0x003d08ff
 8000f7c:	431bde83 	.word	0x431bde83
 8000f80:	10624dd3 	.word	0x10624dd3

08000f84 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b088      	sub	sp, #32
 8000f88:	af02      	add	r7, sp, #8
 8000f8a:	60f8      	str	r0, [r7, #12]
 8000f8c:	4608      	mov	r0, r1
 8000f8e:	4611      	mov	r1, r2
 8000f90:	461a      	mov	r2, r3
 8000f92:	4603      	mov	r3, r0
 8000f94:	817b      	strh	r3, [r7, #10]
 8000f96:	460b      	mov	r3, r1
 8000f98:	813b      	strh	r3, [r7, #8]
 8000f9a:	4613      	mov	r3, r2
 8000f9c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8000f9e:	f7ff fc3b 	bl	8000818 <HAL_GetTick>
 8000fa2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8000faa:	b2db      	uxtb	r3, r3
 8000fac:	2b20      	cmp	r3, #32
 8000fae:	f040 80d9 	bne.w	8001164 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8000fb2:	697b      	ldr	r3, [r7, #20]
 8000fb4:	9300      	str	r3, [sp, #0]
 8000fb6:	2319      	movs	r3, #25
 8000fb8:	2201      	movs	r2, #1
 8000fba:	496d      	ldr	r1, [pc, #436]	@ (8001170 <HAL_I2C_Mem_Write+0x1ec>)
 8000fbc:	68f8      	ldr	r0, [r7, #12]
 8000fbe:	f000 fccd 	bl	800195c <I2C_WaitOnFlagUntilTimeout>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d001      	beq.n	8000fcc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8000fc8:	2302      	movs	r3, #2
 8000fca:	e0cc      	b.n	8001166 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8000fd2:	2b01      	cmp	r3, #1
 8000fd4:	d101      	bne.n	8000fda <HAL_I2C_Mem_Write+0x56>
 8000fd6:	2302      	movs	r3, #2
 8000fd8:	e0c5      	b.n	8001166 <HAL_I2C_Mem_Write+0x1e2>
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	2201      	movs	r2, #1
 8000fde:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	f003 0301 	and.w	r3, r3, #1
 8000fec:	2b01      	cmp	r3, #1
 8000fee:	d007      	beq.n	8001000 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	681a      	ldr	r2, [r3, #0]
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	f042 0201 	orr.w	r2, r2, #1
 8000ffe:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	681a      	ldr	r2, [r3, #0]
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800100e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	2221      	movs	r2, #33	@ 0x21
 8001014:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	2240      	movs	r2, #64	@ 0x40
 800101c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	2200      	movs	r2, #0
 8001024:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	6a3a      	ldr	r2, [r7, #32]
 800102a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001030:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001036:	b29a      	uxth	r2, r3
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	4a4d      	ldr	r2, [pc, #308]	@ (8001174 <HAL_I2C_Mem_Write+0x1f0>)
 8001040:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001042:	88f8      	ldrh	r0, [r7, #6]
 8001044:	893a      	ldrh	r2, [r7, #8]
 8001046:	8979      	ldrh	r1, [r7, #10]
 8001048:	697b      	ldr	r3, [r7, #20]
 800104a:	9301      	str	r3, [sp, #4]
 800104c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800104e:	9300      	str	r3, [sp, #0]
 8001050:	4603      	mov	r3, r0
 8001052:	68f8      	ldr	r0, [r7, #12]
 8001054:	f000 fb04 	bl	8001660 <I2C_RequestMemoryWrite>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d052      	beq.n	8001104 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800105e:	2301      	movs	r3, #1
 8001060:	e081      	b.n	8001166 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001062:	697a      	ldr	r2, [r7, #20]
 8001064:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001066:	68f8      	ldr	r0, [r7, #12]
 8001068:	f000 fd92 	bl	8001b90 <I2C_WaitOnTXEFlagUntilTimeout>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d00d      	beq.n	800108e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001076:	2b04      	cmp	r3, #4
 8001078:	d107      	bne.n	800108a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	681a      	ldr	r2, [r3, #0]
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001088:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800108a:	2301      	movs	r3, #1
 800108c:	e06b      	b.n	8001166 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001092:	781a      	ldrb	r2, [r3, #0]
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800109e:	1c5a      	adds	r2, r3, #1
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80010a8:	3b01      	subs	r3, #1
 80010aa:	b29a      	uxth	r2, r3
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80010b4:	b29b      	uxth	r3, r3
 80010b6:	3b01      	subs	r3, #1
 80010b8:	b29a      	uxth	r2, r3
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	695b      	ldr	r3, [r3, #20]
 80010c4:	f003 0304 	and.w	r3, r3, #4
 80010c8:	2b04      	cmp	r3, #4
 80010ca:	d11b      	bne.n	8001104 <HAL_I2C_Mem_Write+0x180>
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d017      	beq.n	8001104 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010d8:	781a      	ldrb	r2, [r3, #0]
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010e4:	1c5a      	adds	r2, r3, #1
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80010ee:	3b01      	subs	r3, #1
 80010f0:	b29a      	uxth	r2, r3
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80010fa:	b29b      	uxth	r3, r3
 80010fc:	3b01      	subs	r3, #1
 80010fe:	b29a      	uxth	r2, r3
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001108:	2b00      	cmp	r3, #0
 800110a:	d1aa      	bne.n	8001062 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800110c:	697a      	ldr	r2, [r7, #20]
 800110e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001110:	68f8      	ldr	r0, [r7, #12]
 8001112:	f000 fd85 	bl	8001c20 <I2C_WaitOnBTFFlagUntilTimeout>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d00d      	beq.n	8001138 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001120:	2b04      	cmp	r3, #4
 8001122:	d107      	bne.n	8001134 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	681a      	ldr	r2, [r3, #0]
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001132:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001134:	2301      	movs	r3, #1
 8001136:	e016      	b.n	8001166 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	681a      	ldr	r2, [r3, #0]
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001146:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	2220      	movs	r2, #32
 800114c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	2200      	movs	r2, #0
 8001154:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	2200      	movs	r2, #0
 800115c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001160:	2300      	movs	r3, #0
 8001162:	e000      	b.n	8001166 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001164:	2302      	movs	r3, #2
  }
}
 8001166:	4618      	mov	r0, r3
 8001168:	3718      	adds	r7, #24
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	00100002 	.word	0x00100002
 8001174:	ffff0000 	.word	0xffff0000

08001178 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b08c      	sub	sp, #48	@ 0x30
 800117c:	af02      	add	r7, sp, #8
 800117e:	60f8      	str	r0, [r7, #12]
 8001180:	4608      	mov	r0, r1
 8001182:	4611      	mov	r1, r2
 8001184:	461a      	mov	r2, r3
 8001186:	4603      	mov	r3, r0
 8001188:	817b      	strh	r3, [r7, #10]
 800118a:	460b      	mov	r3, r1
 800118c:	813b      	strh	r3, [r7, #8]
 800118e:	4613      	mov	r3, r2
 8001190:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8001192:	2300      	movs	r3, #0
 8001194:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001196:	f7ff fb3f 	bl	8000818 <HAL_GetTick>
 800119a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80011a2:	b2db      	uxtb	r3, r3
 80011a4:	2b20      	cmp	r3, #32
 80011a6:	f040 8250 	bne.w	800164a <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80011aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011ac:	9300      	str	r3, [sp, #0]
 80011ae:	2319      	movs	r3, #25
 80011b0:	2201      	movs	r2, #1
 80011b2:	4982      	ldr	r1, [pc, #520]	@ (80013bc <HAL_I2C_Mem_Read+0x244>)
 80011b4:	68f8      	ldr	r0, [r7, #12]
 80011b6:	f000 fbd1 	bl	800195c <I2C_WaitOnFlagUntilTimeout>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d001      	beq.n	80011c4 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 80011c0:	2302      	movs	r3, #2
 80011c2:	e243      	b.n	800164c <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80011ca:	2b01      	cmp	r3, #1
 80011cc:	d101      	bne.n	80011d2 <HAL_I2C_Mem_Read+0x5a>
 80011ce:	2302      	movs	r3, #2
 80011d0:	e23c      	b.n	800164c <HAL_I2C_Mem_Read+0x4d4>
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	2201      	movs	r2, #1
 80011d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f003 0301 	and.w	r3, r3, #1
 80011e4:	2b01      	cmp	r3, #1
 80011e6:	d007      	beq.n	80011f8 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	681a      	ldr	r2, [r3, #0]
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f042 0201 	orr.w	r2, r2, #1
 80011f6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	681a      	ldr	r2, [r3, #0]
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001206:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	2222      	movs	r2, #34	@ 0x22
 800120c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	2240      	movs	r2, #64	@ 0x40
 8001214:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	2200      	movs	r2, #0
 800121c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001222:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8001228:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800122e:	b29a      	uxth	r2, r3
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	4a62      	ldr	r2, [pc, #392]	@ (80013c0 <HAL_I2C_Mem_Read+0x248>)
 8001238:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800123a:	88f8      	ldrh	r0, [r7, #6]
 800123c:	893a      	ldrh	r2, [r7, #8]
 800123e:	8979      	ldrh	r1, [r7, #10]
 8001240:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001242:	9301      	str	r3, [sp, #4]
 8001244:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001246:	9300      	str	r3, [sp, #0]
 8001248:	4603      	mov	r3, r0
 800124a:	68f8      	ldr	r0, [r7, #12]
 800124c:	f000 fa9e 	bl	800178c <I2C_RequestMemoryRead>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d001      	beq.n	800125a <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8001256:	2301      	movs	r3, #1
 8001258:	e1f8      	b.n	800164c <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800125e:	2b00      	cmp	r3, #0
 8001260:	d113      	bne.n	800128a <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001262:	2300      	movs	r3, #0
 8001264:	61fb      	str	r3, [r7, #28]
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	695b      	ldr	r3, [r3, #20]
 800126c:	61fb      	str	r3, [r7, #28]
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	699b      	ldr	r3, [r3, #24]
 8001274:	61fb      	str	r3, [r7, #28]
 8001276:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	681a      	ldr	r2, [r3, #0]
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001286:	601a      	str	r2, [r3, #0]
 8001288:	e1cc      	b.n	8001624 <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800128e:	2b01      	cmp	r3, #1
 8001290:	d11e      	bne.n	80012d0 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	681a      	ldr	r2, [r3, #0]
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80012a0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80012a2:	b672      	cpsid	i
}
 80012a4:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80012a6:	2300      	movs	r3, #0
 80012a8:	61bb      	str	r3, [r7, #24]
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	695b      	ldr	r3, [r3, #20]
 80012b0:	61bb      	str	r3, [r7, #24]
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	699b      	ldr	r3, [r3, #24]
 80012b8:	61bb      	str	r3, [r7, #24]
 80012ba:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	681a      	ldr	r2, [r3, #0]
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80012ca:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80012cc:	b662      	cpsie	i
}
 80012ce:	e035      	b.n	800133c <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80012d4:	2b02      	cmp	r3, #2
 80012d6:	d11e      	bne.n	8001316 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	681a      	ldr	r2, [r3, #0]
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80012e6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80012e8:	b672      	cpsid	i
}
 80012ea:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80012ec:	2300      	movs	r3, #0
 80012ee:	617b      	str	r3, [r7, #20]
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	695b      	ldr	r3, [r3, #20]
 80012f6:	617b      	str	r3, [r7, #20]
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	699b      	ldr	r3, [r3, #24]
 80012fe:	617b      	str	r3, [r7, #20]
 8001300:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	681a      	ldr	r2, [r3, #0]
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001310:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001312:	b662      	cpsie	i
}
 8001314:	e012      	b.n	800133c <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	681a      	ldr	r2, [r3, #0]
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001324:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001326:	2300      	movs	r3, #0
 8001328:	613b      	str	r3, [r7, #16]
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	695b      	ldr	r3, [r3, #20]
 8001330:	613b      	str	r3, [r7, #16]
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	699b      	ldr	r3, [r3, #24]
 8001338:	613b      	str	r3, [r7, #16]
 800133a:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 800133c:	e172      	b.n	8001624 <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001342:	2b03      	cmp	r3, #3
 8001344:	f200 811f 	bhi.w	8001586 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800134c:	2b01      	cmp	r3, #1
 800134e:	d123      	bne.n	8001398 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001350:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001352:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8001354:	68f8      	ldr	r0, [r7, #12]
 8001356:	f000 fcab 	bl	8001cb0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	d001      	beq.n	8001364 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8001360:	2301      	movs	r3, #1
 8001362:	e173      	b.n	800164c <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	691a      	ldr	r2, [r3, #16]
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800136e:	b2d2      	uxtb	r2, r2
 8001370:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001376:	1c5a      	adds	r2, r3, #1
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001380:	3b01      	subs	r3, #1
 8001382:	b29a      	uxth	r2, r3
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800138c:	b29b      	uxth	r3, r3
 800138e:	3b01      	subs	r3, #1
 8001390:	b29a      	uxth	r2, r3
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001396:	e145      	b.n	8001624 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800139c:	2b02      	cmp	r3, #2
 800139e:	d152      	bne.n	8001446 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80013a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013a2:	9300      	str	r3, [sp, #0]
 80013a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80013a6:	2200      	movs	r2, #0
 80013a8:	4906      	ldr	r1, [pc, #24]	@ (80013c4 <HAL_I2C_Mem_Read+0x24c>)
 80013aa:	68f8      	ldr	r0, [r7, #12]
 80013ac:	f000 fad6 	bl	800195c <I2C_WaitOnFlagUntilTimeout>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d008      	beq.n	80013c8 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 80013b6:	2301      	movs	r3, #1
 80013b8:	e148      	b.n	800164c <HAL_I2C_Mem_Read+0x4d4>
 80013ba:	bf00      	nop
 80013bc:	00100002 	.word	0x00100002
 80013c0:	ffff0000 	.word	0xffff0000
 80013c4:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80013c8:	b672      	cpsid	i
}
 80013ca:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	681a      	ldr	r2, [r3, #0]
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80013da:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	691a      	ldr	r2, [r3, #16]
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013e6:	b2d2      	uxtb	r2, r2
 80013e8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013ee:	1c5a      	adds	r2, r3, #1
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80013f8:	3b01      	subs	r3, #1
 80013fa:	b29a      	uxth	r2, r3
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001404:	b29b      	uxth	r3, r3
 8001406:	3b01      	subs	r3, #1
 8001408:	b29a      	uxth	r2, r3
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800140e:	b662      	cpsie	i
}
 8001410:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	691a      	ldr	r2, [r3, #16]
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800141c:	b2d2      	uxtb	r2, r2
 800141e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001424:	1c5a      	adds	r2, r3, #1
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800142e:	3b01      	subs	r3, #1
 8001430:	b29a      	uxth	r2, r3
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800143a:	b29b      	uxth	r3, r3
 800143c:	3b01      	subs	r3, #1
 800143e:	b29a      	uxth	r2, r3
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001444:	e0ee      	b.n	8001624 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001446:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001448:	9300      	str	r3, [sp, #0]
 800144a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800144c:	2200      	movs	r2, #0
 800144e:	4981      	ldr	r1, [pc, #516]	@ (8001654 <HAL_I2C_Mem_Read+0x4dc>)
 8001450:	68f8      	ldr	r0, [r7, #12]
 8001452:	f000 fa83 	bl	800195c <I2C_WaitOnFlagUntilTimeout>
 8001456:	4603      	mov	r3, r0
 8001458:	2b00      	cmp	r3, #0
 800145a:	d001      	beq.n	8001460 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 800145c:	2301      	movs	r3, #1
 800145e:	e0f5      	b.n	800164c <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	681a      	ldr	r2, [r3, #0]
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800146e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001470:	b672      	cpsid	i
}
 8001472:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	691a      	ldr	r2, [r3, #16]
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800147e:	b2d2      	uxtb	r2, r2
 8001480:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001486:	1c5a      	adds	r2, r3, #1
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001490:	3b01      	subs	r3, #1
 8001492:	b29a      	uxth	r2, r3
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800149c:	b29b      	uxth	r3, r3
 800149e:	3b01      	subs	r3, #1
 80014a0:	b29a      	uxth	r2, r3
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80014a6:	4b6c      	ldr	r3, [pc, #432]	@ (8001658 <HAL_I2C_Mem_Read+0x4e0>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	08db      	lsrs	r3, r3, #3
 80014ac:	4a6b      	ldr	r2, [pc, #428]	@ (800165c <HAL_I2C_Mem_Read+0x4e4>)
 80014ae:	fba2 2303 	umull	r2, r3, r2, r3
 80014b2:	0a1a      	lsrs	r2, r3, #8
 80014b4:	4613      	mov	r3, r2
 80014b6:	009b      	lsls	r3, r3, #2
 80014b8:	4413      	add	r3, r2
 80014ba:	00da      	lsls	r2, r3, #3
 80014bc:	1ad3      	subs	r3, r2, r3
 80014be:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80014c0:	6a3b      	ldr	r3, [r7, #32]
 80014c2:	3b01      	subs	r3, #1
 80014c4:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80014c6:	6a3b      	ldr	r3, [r7, #32]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d118      	bne.n	80014fe <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	2200      	movs	r2, #0
 80014d0:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	2220      	movs	r2, #32
 80014d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	2200      	movs	r2, #0
 80014de:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014e6:	f043 0220 	orr.w	r2, r3, #32
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80014ee:	b662      	cpsie	i
}
 80014f0:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	2200      	movs	r2, #0
 80014f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 80014fa:	2301      	movs	r3, #1
 80014fc:	e0a6      	b.n	800164c <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	695b      	ldr	r3, [r3, #20]
 8001504:	f003 0304 	and.w	r3, r3, #4
 8001508:	2b04      	cmp	r3, #4
 800150a:	d1d9      	bne.n	80014c0 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	681a      	ldr	r2, [r3, #0]
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800151a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	691a      	ldr	r2, [r3, #16]
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001526:	b2d2      	uxtb	r2, r2
 8001528:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800152e:	1c5a      	adds	r2, r3, #1
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001538:	3b01      	subs	r3, #1
 800153a:	b29a      	uxth	r2, r3
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001544:	b29b      	uxth	r3, r3
 8001546:	3b01      	subs	r3, #1
 8001548:	b29a      	uxth	r2, r3
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800154e:	b662      	cpsie	i
}
 8001550:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	691a      	ldr	r2, [r3, #16]
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800155c:	b2d2      	uxtb	r2, r2
 800155e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001564:	1c5a      	adds	r2, r3, #1
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800156e:	3b01      	subs	r3, #1
 8001570:	b29a      	uxth	r2, r3
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800157a:	b29b      	uxth	r3, r3
 800157c:	3b01      	subs	r3, #1
 800157e:	b29a      	uxth	r2, r3
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001584:	e04e      	b.n	8001624 <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001586:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001588:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800158a:	68f8      	ldr	r0, [r7, #12]
 800158c:	f000 fb90 	bl	8001cb0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d001      	beq.n	800159a <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8001596:	2301      	movs	r3, #1
 8001598:	e058      	b.n	800164c <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	691a      	ldr	r2, [r3, #16]
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015a4:	b2d2      	uxtb	r2, r2
 80015a6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015ac:	1c5a      	adds	r2, r3, #1
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80015b6:	3b01      	subs	r3, #1
 80015b8:	b29a      	uxth	r2, r3
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80015c2:	b29b      	uxth	r3, r3
 80015c4:	3b01      	subs	r3, #1
 80015c6:	b29a      	uxth	r2, r3
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	695b      	ldr	r3, [r3, #20]
 80015d2:	f003 0304 	and.w	r3, r3, #4
 80015d6:	2b04      	cmp	r3, #4
 80015d8:	d124      	bne.n	8001624 <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80015de:	2b03      	cmp	r3, #3
 80015e0:	d107      	bne.n	80015f2 <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	681a      	ldr	r2, [r3, #0]
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80015f0:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	691a      	ldr	r2, [r3, #16]
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015fc:	b2d2      	uxtb	r2, r2
 80015fe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001604:	1c5a      	adds	r2, r3, #1
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800160e:	3b01      	subs	r3, #1
 8001610:	b29a      	uxth	r2, r3
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800161a:	b29b      	uxth	r3, r3
 800161c:	3b01      	subs	r3, #1
 800161e:	b29a      	uxth	r2, r3
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001628:	2b00      	cmp	r3, #0
 800162a:	f47f ae88 	bne.w	800133e <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	2220      	movs	r2, #32
 8001632:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	2200      	movs	r2, #0
 800163a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	2200      	movs	r2, #0
 8001642:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001646:	2300      	movs	r3, #0
 8001648:	e000      	b.n	800164c <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 800164a:	2302      	movs	r3, #2
  }
}
 800164c:	4618      	mov	r0, r3
 800164e:	3728      	adds	r7, #40	@ 0x28
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}
 8001654:	00010004 	.word	0x00010004
 8001658:	20000000 	.word	0x20000000
 800165c:	14f8b589 	.word	0x14f8b589

08001660 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b088      	sub	sp, #32
 8001664:	af02      	add	r7, sp, #8
 8001666:	60f8      	str	r0, [r7, #12]
 8001668:	4608      	mov	r0, r1
 800166a:	4611      	mov	r1, r2
 800166c:	461a      	mov	r2, r3
 800166e:	4603      	mov	r3, r0
 8001670:	817b      	strh	r3, [r7, #10]
 8001672:	460b      	mov	r3, r1
 8001674:	813b      	strh	r3, [r7, #8]
 8001676:	4613      	mov	r3, r2
 8001678:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	681a      	ldr	r2, [r3, #0]
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001688:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800168a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800168c:	9300      	str	r3, [sp, #0]
 800168e:	6a3b      	ldr	r3, [r7, #32]
 8001690:	2200      	movs	r2, #0
 8001692:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001696:	68f8      	ldr	r0, [r7, #12]
 8001698:	f000 f960 	bl	800195c <I2C_WaitOnFlagUntilTimeout>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d00d      	beq.n	80016be <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016ac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80016b0:	d103      	bne.n	80016ba <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80016b8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80016ba:	2303      	movs	r3, #3
 80016bc:	e05f      	b.n	800177e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80016be:	897b      	ldrh	r3, [r7, #10]
 80016c0:	b2db      	uxtb	r3, r3
 80016c2:	461a      	mov	r2, r3
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80016cc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80016ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016d0:	6a3a      	ldr	r2, [r7, #32]
 80016d2:	492d      	ldr	r1, [pc, #180]	@ (8001788 <I2C_RequestMemoryWrite+0x128>)
 80016d4:	68f8      	ldr	r0, [r7, #12]
 80016d6:	f000 f9bb 	bl	8001a50 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80016da:	4603      	mov	r3, r0
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d001      	beq.n	80016e4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80016e0:	2301      	movs	r3, #1
 80016e2:	e04c      	b.n	800177e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80016e4:	2300      	movs	r3, #0
 80016e6:	617b      	str	r3, [r7, #20]
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	695b      	ldr	r3, [r3, #20]
 80016ee:	617b      	str	r3, [r7, #20]
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	699b      	ldr	r3, [r3, #24]
 80016f6:	617b      	str	r3, [r7, #20]
 80016f8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80016fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80016fc:	6a39      	ldr	r1, [r7, #32]
 80016fe:	68f8      	ldr	r0, [r7, #12]
 8001700:	f000 fa46 	bl	8001b90 <I2C_WaitOnTXEFlagUntilTimeout>
 8001704:	4603      	mov	r3, r0
 8001706:	2b00      	cmp	r3, #0
 8001708:	d00d      	beq.n	8001726 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800170e:	2b04      	cmp	r3, #4
 8001710:	d107      	bne.n	8001722 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	681a      	ldr	r2, [r3, #0]
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001720:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001722:	2301      	movs	r3, #1
 8001724:	e02b      	b.n	800177e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001726:	88fb      	ldrh	r3, [r7, #6]
 8001728:	2b01      	cmp	r3, #1
 800172a:	d105      	bne.n	8001738 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800172c:	893b      	ldrh	r3, [r7, #8]
 800172e:	b2da      	uxtb	r2, r3
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	611a      	str	r2, [r3, #16]
 8001736:	e021      	b.n	800177c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001738:	893b      	ldrh	r3, [r7, #8]
 800173a:	0a1b      	lsrs	r3, r3, #8
 800173c:	b29b      	uxth	r3, r3
 800173e:	b2da      	uxtb	r2, r3
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001746:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001748:	6a39      	ldr	r1, [r7, #32]
 800174a:	68f8      	ldr	r0, [r7, #12]
 800174c:	f000 fa20 	bl	8001b90 <I2C_WaitOnTXEFlagUntilTimeout>
 8001750:	4603      	mov	r3, r0
 8001752:	2b00      	cmp	r3, #0
 8001754:	d00d      	beq.n	8001772 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800175a:	2b04      	cmp	r3, #4
 800175c:	d107      	bne.n	800176e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	681a      	ldr	r2, [r3, #0]
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800176c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800176e:	2301      	movs	r3, #1
 8001770:	e005      	b.n	800177e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001772:	893b      	ldrh	r3, [r7, #8]
 8001774:	b2da      	uxtb	r2, r3
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800177c:	2300      	movs	r3, #0
}
 800177e:	4618      	mov	r0, r3
 8001780:	3718      	adds	r7, #24
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	00010002 	.word	0x00010002

0800178c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b088      	sub	sp, #32
 8001790:	af02      	add	r7, sp, #8
 8001792:	60f8      	str	r0, [r7, #12]
 8001794:	4608      	mov	r0, r1
 8001796:	4611      	mov	r1, r2
 8001798:	461a      	mov	r2, r3
 800179a:	4603      	mov	r3, r0
 800179c:	817b      	strh	r3, [r7, #10]
 800179e:	460b      	mov	r3, r1
 80017a0:	813b      	strh	r3, [r7, #8]
 80017a2:	4613      	mov	r3, r2
 80017a4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	681a      	ldr	r2, [r3, #0]
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80017b4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	681a      	ldr	r2, [r3, #0]
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80017c4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80017c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017c8:	9300      	str	r3, [sp, #0]
 80017ca:	6a3b      	ldr	r3, [r7, #32]
 80017cc:	2200      	movs	r2, #0
 80017ce:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80017d2:	68f8      	ldr	r0, [r7, #12]
 80017d4:	f000 f8c2 	bl	800195c <I2C_WaitOnFlagUntilTimeout>
 80017d8:	4603      	mov	r3, r0
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d00d      	beq.n	80017fa <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80017e8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80017ec:	d103      	bne.n	80017f6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80017f4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80017f6:	2303      	movs	r3, #3
 80017f8:	e0aa      	b.n	8001950 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80017fa:	897b      	ldrh	r3, [r7, #10]
 80017fc:	b2db      	uxtb	r3, r3
 80017fe:	461a      	mov	r2, r3
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001808:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800180a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800180c:	6a3a      	ldr	r2, [r7, #32]
 800180e:	4952      	ldr	r1, [pc, #328]	@ (8001958 <I2C_RequestMemoryRead+0x1cc>)
 8001810:	68f8      	ldr	r0, [r7, #12]
 8001812:	f000 f91d 	bl	8001a50 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001816:	4603      	mov	r3, r0
 8001818:	2b00      	cmp	r3, #0
 800181a:	d001      	beq.n	8001820 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800181c:	2301      	movs	r3, #1
 800181e:	e097      	b.n	8001950 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001820:	2300      	movs	r3, #0
 8001822:	617b      	str	r3, [r7, #20]
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	695b      	ldr	r3, [r3, #20]
 800182a:	617b      	str	r3, [r7, #20]
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	699b      	ldr	r3, [r3, #24]
 8001832:	617b      	str	r3, [r7, #20]
 8001834:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001836:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001838:	6a39      	ldr	r1, [r7, #32]
 800183a:	68f8      	ldr	r0, [r7, #12]
 800183c:	f000 f9a8 	bl	8001b90 <I2C_WaitOnTXEFlagUntilTimeout>
 8001840:	4603      	mov	r3, r0
 8001842:	2b00      	cmp	r3, #0
 8001844:	d00d      	beq.n	8001862 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800184a:	2b04      	cmp	r3, #4
 800184c:	d107      	bne.n	800185e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	681a      	ldr	r2, [r3, #0]
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800185c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800185e:	2301      	movs	r3, #1
 8001860:	e076      	b.n	8001950 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001862:	88fb      	ldrh	r3, [r7, #6]
 8001864:	2b01      	cmp	r3, #1
 8001866:	d105      	bne.n	8001874 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001868:	893b      	ldrh	r3, [r7, #8]
 800186a:	b2da      	uxtb	r2, r3
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	611a      	str	r2, [r3, #16]
 8001872:	e021      	b.n	80018b8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001874:	893b      	ldrh	r3, [r7, #8]
 8001876:	0a1b      	lsrs	r3, r3, #8
 8001878:	b29b      	uxth	r3, r3
 800187a:	b2da      	uxtb	r2, r3
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001882:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001884:	6a39      	ldr	r1, [r7, #32]
 8001886:	68f8      	ldr	r0, [r7, #12]
 8001888:	f000 f982 	bl	8001b90 <I2C_WaitOnTXEFlagUntilTimeout>
 800188c:	4603      	mov	r3, r0
 800188e:	2b00      	cmp	r3, #0
 8001890:	d00d      	beq.n	80018ae <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001896:	2b04      	cmp	r3, #4
 8001898:	d107      	bne.n	80018aa <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	681a      	ldr	r2, [r3, #0]
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80018a8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80018aa:	2301      	movs	r3, #1
 80018ac:	e050      	b.n	8001950 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80018ae:	893b      	ldrh	r3, [r7, #8]
 80018b0:	b2da      	uxtb	r2, r3
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80018b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80018ba:	6a39      	ldr	r1, [r7, #32]
 80018bc:	68f8      	ldr	r0, [r7, #12]
 80018be:	f000 f967 	bl	8001b90 <I2C_WaitOnTXEFlagUntilTimeout>
 80018c2:	4603      	mov	r3, r0
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d00d      	beq.n	80018e4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018cc:	2b04      	cmp	r3, #4
 80018ce:	d107      	bne.n	80018e0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	681a      	ldr	r2, [r3, #0]
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80018de:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80018e0:	2301      	movs	r3, #1
 80018e2:	e035      	b.n	8001950 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	681a      	ldr	r2, [r3, #0]
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80018f2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80018f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018f6:	9300      	str	r3, [sp, #0]
 80018f8:	6a3b      	ldr	r3, [r7, #32]
 80018fa:	2200      	movs	r2, #0
 80018fc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001900:	68f8      	ldr	r0, [r7, #12]
 8001902:	f000 f82b 	bl	800195c <I2C_WaitOnFlagUntilTimeout>
 8001906:	4603      	mov	r3, r0
 8001908:	2b00      	cmp	r3, #0
 800190a:	d00d      	beq.n	8001928 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001916:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800191a:	d103      	bne.n	8001924 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001922:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001924:	2303      	movs	r3, #3
 8001926:	e013      	b.n	8001950 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8001928:	897b      	ldrh	r3, [r7, #10]
 800192a:	b2db      	uxtb	r3, r3
 800192c:	f043 0301 	orr.w	r3, r3, #1
 8001930:	b2da      	uxtb	r2, r3
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001938:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800193a:	6a3a      	ldr	r2, [r7, #32]
 800193c:	4906      	ldr	r1, [pc, #24]	@ (8001958 <I2C_RequestMemoryRead+0x1cc>)
 800193e:	68f8      	ldr	r0, [r7, #12]
 8001940:	f000 f886 	bl	8001a50 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001944:	4603      	mov	r3, r0
 8001946:	2b00      	cmp	r3, #0
 8001948:	d001      	beq.n	800194e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800194a:	2301      	movs	r3, #1
 800194c:	e000      	b.n	8001950 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800194e:	2300      	movs	r3, #0
}
 8001950:	4618      	mov	r0, r3
 8001952:	3718      	adds	r7, #24
 8001954:	46bd      	mov	sp, r7
 8001956:	bd80      	pop	{r7, pc}
 8001958:	00010002 	.word	0x00010002

0800195c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b084      	sub	sp, #16
 8001960:	af00      	add	r7, sp, #0
 8001962:	60f8      	str	r0, [r7, #12]
 8001964:	60b9      	str	r1, [r7, #8]
 8001966:	603b      	str	r3, [r7, #0]
 8001968:	4613      	mov	r3, r2
 800196a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800196c:	e048      	b.n	8001a00 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001974:	d044      	beq.n	8001a00 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001976:	f7fe ff4f 	bl	8000818 <HAL_GetTick>
 800197a:	4602      	mov	r2, r0
 800197c:	69bb      	ldr	r3, [r7, #24]
 800197e:	1ad3      	subs	r3, r2, r3
 8001980:	683a      	ldr	r2, [r7, #0]
 8001982:	429a      	cmp	r2, r3
 8001984:	d302      	bcc.n	800198c <I2C_WaitOnFlagUntilTimeout+0x30>
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	2b00      	cmp	r3, #0
 800198a:	d139      	bne.n	8001a00 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800198c:	68bb      	ldr	r3, [r7, #8]
 800198e:	0c1b      	lsrs	r3, r3, #16
 8001990:	b2db      	uxtb	r3, r3
 8001992:	2b01      	cmp	r3, #1
 8001994:	d10d      	bne.n	80019b2 <I2C_WaitOnFlagUntilTimeout+0x56>
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	695b      	ldr	r3, [r3, #20]
 800199c:	43da      	mvns	r2, r3
 800199e:	68bb      	ldr	r3, [r7, #8]
 80019a0:	4013      	ands	r3, r2
 80019a2:	b29b      	uxth	r3, r3
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	bf0c      	ite	eq
 80019a8:	2301      	moveq	r3, #1
 80019aa:	2300      	movne	r3, #0
 80019ac:	b2db      	uxtb	r3, r3
 80019ae:	461a      	mov	r2, r3
 80019b0:	e00c      	b.n	80019cc <I2C_WaitOnFlagUntilTimeout+0x70>
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	699b      	ldr	r3, [r3, #24]
 80019b8:	43da      	mvns	r2, r3
 80019ba:	68bb      	ldr	r3, [r7, #8]
 80019bc:	4013      	ands	r3, r2
 80019be:	b29b      	uxth	r3, r3
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	bf0c      	ite	eq
 80019c4:	2301      	moveq	r3, #1
 80019c6:	2300      	movne	r3, #0
 80019c8:	b2db      	uxtb	r3, r3
 80019ca:	461a      	mov	r2, r3
 80019cc:	79fb      	ldrb	r3, [r7, #7]
 80019ce:	429a      	cmp	r2, r3
 80019d0:	d116      	bne.n	8001a00 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	2200      	movs	r2, #0
 80019d6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	2220      	movs	r2, #32
 80019dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	2200      	movs	r2, #0
 80019e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019ec:	f043 0220 	orr.w	r2, r3, #32
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	2200      	movs	r2, #0
 80019f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80019fc:	2301      	movs	r3, #1
 80019fe:	e023      	b.n	8001a48 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001a00:	68bb      	ldr	r3, [r7, #8]
 8001a02:	0c1b      	lsrs	r3, r3, #16
 8001a04:	b2db      	uxtb	r3, r3
 8001a06:	2b01      	cmp	r3, #1
 8001a08:	d10d      	bne.n	8001a26 <I2C_WaitOnFlagUntilTimeout+0xca>
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	695b      	ldr	r3, [r3, #20]
 8001a10:	43da      	mvns	r2, r3
 8001a12:	68bb      	ldr	r3, [r7, #8]
 8001a14:	4013      	ands	r3, r2
 8001a16:	b29b      	uxth	r3, r3
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	bf0c      	ite	eq
 8001a1c:	2301      	moveq	r3, #1
 8001a1e:	2300      	movne	r3, #0
 8001a20:	b2db      	uxtb	r3, r3
 8001a22:	461a      	mov	r2, r3
 8001a24:	e00c      	b.n	8001a40 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	699b      	ldr	r3, [r3, #24]
 8001a2c:	43da      	mvns	r2, r3
 8001a2e:	68bb      	ldr	r3, [r7, #8]
 8001a30:	4013      	ands	r3, r2
 8001a32:	b29b      	uxth	r3, r3
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	bf0c      	ite	eq
 8001a38:	2301      	moveq	r3, #1
 8001a3a:	2300      	movne	r3, #0
 8001a3c:	b2db      	uxtb	r3, r3
 8001a3e:	461a      	mov	r2, r3
 8001a40:	79fb      	ldrb	r3, [r7, #7]
 8001a42:	429a      	cmp	r2, r3
 8001a44:	d093      	beq.n	800196e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001a46:	2300      	movs	r3, #0
}
 8001a48:	4618      	mov	r0, r3
 8001a4a:	3710      	adds	r7, #16
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}

08001a50 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b084      	sub	sp, #16
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	60f8      	str	r0, [r7, #12]
 8001a58:	60b9      	str	r1, [r7, #8]
 8001a5a:	607a      	str	r2, [r7, #4]
 8001a5c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001a5e:	e071      	b.n	8001b44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	695b      	ldr	r3, [r3, #20]
 8001a66:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a6a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001a6e:	d123      	bne.n	8001ab8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	681a      	ldr	r2, [r3, #0]
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001a7e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001a88:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	2220      	movs	r2, #32
 8001a94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aa4:	f043 0204 	orr.w	r2, r3, #4
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	2200      	movs	r2, #0
 8001ab0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	e067      	b.n	8001b88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001abe:	d041      	beq.n	8001b44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ac0:	f7fe feaa 	bl	8000818 <HAL_GetTick>
 8001ac4:	4602      	mov	r2, r0
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	1ad3      	subs	r3, r2, r3
 8001aca:	687a      	ldr	r2, [r7, #4]
 8001acc:	429a      	cmp	r2, r3
 8001ace:	d302      	bcc.n	8001ad6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d136      	bne.n	8001b44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8001ad6:	68bb      	ldr	r3, [r7, #8]
 8001ad8:	0c1b      	lsrs	r3, r3, #16
 8001ada:	b2db      	uxtb	r3, r3
 8001adc:	2b01      	cmp	r3, #1
 8001ade:	d10c      	bne.n	8001afa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	695b      	ldr	r3, [r3, #20]
 8001ae6:	43da      	mvns	r2, r3
 8001ae8:	68bb      	ldr	r3, [r7, #8]
 8001aea:	4013      	ands	r3, r2
 8001aec:	b29b      	uxth	r3, r3
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	bf14      	ite	ne
 8001af2:	2301      	movne	r3, #1
 8001af4:	2300      	moveq	r3, #0
 8001af6:	b2db      	uxtb	r3, r3
 8001af8:	e00b      	b.n	8001b12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	699b      	ldr	r3, [r3, #24]
 8001b00:	43da      	mvns	r2, r3
 8001b02:	68bb      	ldr	r3, [r7, #8]
 8001b04:	4013      	ands	r3, r2
 8001b06:	b29b      	uxth	r3, r3
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	bf14      	ite	ne
 8001b0c:	2301      	movne	r3, #1
 8001b0e:	2300      	moveq	r3, #0
 8001b10:	b2db      	uxtb	r3, r3
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d016      	beq.n	8001b44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	2200      	movs	r2, #0
 8001b1a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	2220      	movs	r2, #32
 8001b20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	2200      	movs	r2, #0
 8001b28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b30:	f043 0220 	orr.w	r2, r3, #32
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001b40:	2301      	movs	r3, #1
 8001b42:	e021      	b.n	8001b88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001b44:	68bb      	ldr	r3, [r7, #8]
 8001b46:	0c1b      	lsrs	r3, r3, #16
 8001b48:	b2db      	uxtb	r3, r3
 8001b4a:	2b01      	cmp	r3, #1
 8001b4c:	d10c      	bne.n	8001b68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	695b      	ldr	r3, [r3, #20]
 8001b54:	43da      	mvns	r2, r3
 8001b56:	68bb      	ldr	r3, [r7, #8]
 8001b58:	4013      	ands	r3, r2
 8001b5a:	b29b      	uxth	r3, r3
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	bf14      	ite	ne
 8001b60:	2301      	movne	r3, #1
 8001b62:	2300      	moveq	r3, #0
 8001b64:	b2db      	uxtb	r3, r3
 8001b66:	e00b      	b.n	8001b80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	699b      	ldr	r3, [r3, #24]
 8001b6e:	43da      	mvns	r2, r3
 8001b70:	68bb      	ldr	r3, [r7, #8]
 8001b72:	4013      	ands	r3, r2
 8001b74:	b29b      	uxth	r3, r3
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	bf14      	ite	ne
 8001b7a:	2301      	movne	r3, #1
 8001b7c:	2300      	moveq	r3, #0
 8001b7e:	b2db      	uxtb	r3, r3
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	f47f af6d 	bne.w	8001a60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8001b86:	2300      	movs	r3, #0
}
 8001b88:	4618      	mov	r0, r3
 8001b8a:	3710      	adds	r7, #16
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd80      	pop	{r7, pc}

08001b90 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b084      	sub	sp, #16
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	60f8      	str	r0, [r7, #12]
 8001b98:	60b9      	str	r1, [r7, #8]
 8001b9a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001b9c:	e034      	b.n	8001c08 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001b9e:	68f8      	ldr	r0, [r7, #12]
 8001ba0:	f000 f8e3 	bl	8001d6a <I2C_IsAcknowledgeFailed>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d001      	beq.n	8001bae <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001baa:	2301      	movs	r3, #1
 8001bac:	e034      	b.n	8001c18 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001bae:	68bb      	ldr	r3, [r7, #8]
 8001bb0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001bb4:	d028      	beq.n	8001c08 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001bb6:	f7fe fe2f 	bl	8000818 <HAL_GetTick>
 8001bba:	4602      	mov	r2, r0
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	1ad3      	subs	r3, r2, r3
 8001bc0:	68ba      	ldr	r2, [r7, #8]
 8001bc2:	429a      	cmp	r2, r3
 8001bc4:	d302      	bcc.n	8001bcc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001bc6:	68bb      	ldr	r3, [r7, #8]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d11d      	bne.n	8001c08 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	695b      	ldr	r3, [r3, #20]
 8001bd2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001bd6:	2b80      	cmp	r3, #128	@ 0x80
 8001bd8:	d016      	beq.n	8001c08 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	2200      	movs	r2, #0
 8001bde:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	2220      	movs	r2, #32
 8001be4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	2200      	movs	r2, #0
 8001bec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bf4:	f043 0220 	orr.w	r2, r3, #32
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	2200      	movs	r2, #0
 8001c00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001c04:	2301      	movs	r3, #1
 8001c06:	e007      	b.n	8001c18 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	695b      	ldr	r3, [r3, #20]
 8001c0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c12:	2b80      	cmp	r3, #128	@ 0x80
 8001c14:	d1c3      	bne.n	8001b9e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001c16:	2300      	movs	r3, #0
}
 8001c18:	4618      	mov	r0, r3
 8001c1a:	3710      	adds	r7, #16
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}

08001c20 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b084      	sub	sp, #16
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	60f8      	str	r0, [r7, #12]
 8001c28:	60b9      	str	r1, [r7, #8]
 8001c2a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001c2c:	e034      	b.n	8001c98 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001c2e:	68f8      	ldr	r0, [r7, #12]
 8001c30:	f000 f89b 	bl	8001d6a <I2C_IsAcknowledgeFailed>
 8001c34:	4603      	mov	r3, r0
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d001      	beq.n	8001c3e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	e034      	b.n	8001ca8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c3e:	68bb      	ldr	r3, [r7, #8]
 8001c40:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001c44:	d028      	beq.n	8001c98 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c46:	f7fe fde7 	bl	8000818 <HAL_GetTick>
 8001c4a:	4602      	mov	r2, r0
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	1ad3      	subs	r3, r2, r3
 8001c50:	68ba      	ldr	r2, [r7, #8]
 8001c52:	429a      	cmp	r2, r3
 8001c54:	d302      	bcc.n	8001c5c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001c56:	68bb      	ldr	r3, [r7, #8]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d11d      	bne.n	8001c98 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	695b      	ldr	r3, [r3, #20]
 8001c62:	f003 0304 	and.w	r3, r3, #4
 8001c66:	2b04      	cmp	r3, #4
 8001c68:	d016      	beq.n	8001c98 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	2220      	movs	r2, #32
 8001c74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c84:	f043 0220 	orr.w	r2, r3, #32
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	2200      	movs	r2, #0
 8001c90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001c94:	2301      	movs	r3, #1
 8001c96:	e007      	b.n	8001ca8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	695b      	ldr	r3, [r3, #20]
 8001c9e:	f003 0304 	and.w	r3, r3, #4
 8001ca2:	2b04      	cmp	r3, #4
 8001ca4:	d1c3      	bne.n	8001c2e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001ca6:	2300      	movs	r3, #0
}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	3710      	adds	r7, #16
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}

08001cb0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b084      	sub	sp, #16
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	60f8      	str	r0, [r7, #12]
 8001cb8:	60b9      	str	r1, [r7, #8]
 8001cba:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001cbc:	e049      	b.n	8001d52 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	695b      	ldr	r3, [r3, #20]
 8001cc4:	f003 0310 	and.w	r3, r3, #16
 8001cc8:	2b10      	cmp	r3, #16
 8001cca:	d119      	bne.n	8001d00 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f06f 0210 	mvn.w	r2, #16
 8001cd4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	2200      	movs	r2, #0
 8001cda:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	2220      	movs	r2, #32
 8001ce0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	e030      	b.n	8001d62 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d00:	f7fe fd8a 	bl	8000818 <HAL_GetTick>
 8001d04:	4602      	mov	r2, r0
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	1ad3      	subs	r3, r2, r3
 8001d0a:	68ba      	ldr	r2, [r7, #8]
 8001d0c:	429a      	cmp	r2, r3
 8001d0e:	d302      	bcc.n	8001d16 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8001d10:	68bb      	ldr	r3, [r7, #8]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d11d      	bne.n	8001d52 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	695b      	ldr	r3, [r3, #20]
 8001d1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d20:	2b40      	cmp	r3, #64	@ 0x40
 8001d22:	d016      	beq.n	8001d52 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	2200      	movs	r2, #0
 8001d28:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	2220      	movs	r2, #32
 8001d2e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	2200      	movs	r2, #0
 8001d36:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d3e:	f043 0220 	orr.w	r2, r3, #32
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	2200      	movs	r2, #0
 8001d4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	e007      	b.n	8001d62 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	695b      	ldr	r3, [r3, #20]
 8001d58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d5c:	2b40      	cmp	r3, #64	@ 0x40
 8001d5e:	d1ae      	bne.n	8001cbe <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001d60:	2300      	movs	r3, #0
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	3710      	adds	r7, #16
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}

08001d6a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001d6a:	b480      	push	{r7}
 8001d6c:	b083      	sub	sp, #12
 8001d6e:	af00      	add	r7, sp, #0
 8001d70:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	695b      	ldr	r3, [r3, #20]
 8001d78:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d7c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001d80:	d11b      	bne.n	8001dba <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001d8a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2200      	movs	r2, #0
 8001d90:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2220      	movs	r2, #32
 8001d96:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001da6:	f043 0204 	orr.w	r2, r3, #4
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2200      	movs	r2, #0
 8001db2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8001db6:	2301      	movs	r3, #1
 8001db8:	e000      	b.n	8001dbc <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001dba:	2300      	movs	r3, #0
}
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	370c      	adds	r7, #12
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bc80      	pop	{r7}
 8001dc4:	4770      	bx	lr
	...

08001dc8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b086      	sub	sp, #24
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d101      	bne.n	8001dda <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	e272      	b.n	80022c0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f003 0301 	and.w	r3, r3, #1
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	f000 8087 	beq.w	8001ef6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001de8:	4b92      	ldr	r3, [pc, #584]	@ (8002034 <HAL_RCC_OscConfig+0x26c>)
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	f003 030c 	and.w	r3, r3, #12
 8001df0:	2b04      	cmp	r3, #4
 8001df2:	d00c      	beq.n	8001e0e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001df4:	4b8f      	ldr	r3, [pc, #572]	@ (8002034 <HAL_RCC_OscConfig+0x26c>)
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	f003 030c 	and.w	r3, r3, #12
 8001dfc:	2b08      	cmp	r3, #8
 8001dfe:	d112      	bne.n	8001e26 <HAL_RCC_OscConfig+0x5e>
 8001e00:	4b8c      	ldr	r3, [pc, #560]	@ (8002034 <HAL_RCC_OscConfig+0x26c>)
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e08:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e0c:	d10b      	bne.n	8001e26 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e0e:	4b89      	ldr	r3, [pc, #548]	@ (8002034 <HAL_RCC_OscConfig+0x26c>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d06c      	beq.n	8001ef4 <HAL_RCC_OscConfig+0x12c>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d168      	bne.n	8001ef4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001e22:	2301      	movs	r3, #1
 8001e24:	e24c      	b.n	80022c0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e2e:	d106      	bne.n	8001e3e <HAL_RCC_OscConfig+0x76>
 8001e30:	4b80      	ldr	r3, [pc, #512]	@ (8002034 <HAL_RCC_OscConfig+0x26c>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4a7f      	ldr	r2, [pc, #508]	@ (8002034 <HAL_RCC_OscConfig+0x26c>)
 8001e36:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e3a:	6013      	str	r3, [r2, #0]
 8001e3c:	e02e      	b.n	8001e9c <HAL_RCC_OscConfig+0xd4>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d10c      	bne.n	8001e60 <HAL_RCC_OscConfig+0x98>
 8001e46:	4b7b      	ldr	r3, [pc, #492]	@ (8002034 <HAL_RCC_OscConfig+0x26c>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4a7a      	ldr	r2, [pc, #488]	@ (8002034 <HAL_RCC_OscConfig+0x26c>)
 8001e4c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001e50:	6013      	str	r3, [r2, #0]
 8001e52:	4b78      	ldr	r3, [pc, #480]	@ (8002034 <HAL_RCC_OscConfig+0x26c>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4a77      	ldr	r2, [pc, #476]	@ (8002034 <HAL_RCC_OscConfig+0x26c>)
 8001e58:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001e5c:	6013      	str	r3, [r2, #0]
 8001e5e:	e01d      	b.n	8001e9c <HAL_RCC_OscConfig+0xd4>
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001e68:	d10c      	bne.n	8001e84 <HAL_RCC_OscConfig+0xbc>
 8001e6a:	4b72      	ldr	r3, [pc, #456]	@ (8002034 <HAL_RCC_OscConfig+0x26c>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4a71      	ldr	r2, [pc, #452]	@ (8002034 <HAL_RCC_OscConfig+0x26c>)
 8001e70:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001e74:	6013      	str	r3, [r2, #0]
 8001e76:	4b6f      	ldr	r3, [pc, #444]	@ (8002034 <HAL_RCC_OscConfig+0x26c>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4a6e      	ldr	r2, [pc, #440]	@ (8002034 <HAL_RCC_OscConfig+0x26c>)
 8001e7c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e80:	6013      	str	r3, [r2, #0]
 8001e82:	e00b      	b.n	8001e9c <HAL_RCC_OscConfig+0xd4>
 8001e84:	4b6b      	ldr	r3, [pc, #428]	@ (8002034 <HAL_RCC_OscConfig+0x26c>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a6a      	ldr	r2, [pc, #424]	@ (8002034 <HAL_RCC_OscConfig+0x26c>)
 8001e8a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001e8e:	6013      	str	r3, [r2, #0]
 8001e90:	4b68      	ldr	r3, [pc, #416]	@ (8002034 <HAL_RCC_OscConfig+0x26c>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a67      	ldr	r2, [pc, #412]	@ (8002034 <HAL_RCC_OscConfig+0x26c>)
 8001e96:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001e9a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d013      	beq.n	8001ecc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ea4:	f7fe fcb8 	bl	8000818 <HAL_GetTick>
 8001ea8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001eaa:	e008      	b.n	8001ebe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001eac:	f7fe fcb4 	bl	8000818 <HAL_GetTick>
 8001eb0:	4602      	mov	r2, r0
 8001eb2:	693b      	ldr	r3, [r7, #16]
 8001eb4:	1ad3      	subs	r3, r2, r3
 8001eb6:	2b64      	cmp	r3, #100	@ 0x64
 8001eb8:	d901      	bls.n	8001ebe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001eba:	2303      	movs	r3, #3
 8001ebc:	e200      	b.n	80022c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ebe:	4b5d      	ldr	r3, [pc, #372]	@ (8002034 <HAL_RCC_OscConfig+0x26c>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d0f0      	beq.n	8001eac <HAL_RCC_OscConfig+0xe4>
 8001eca:	e014      	b.n	8001ef6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ecc:	f7fe fca4 	bl	8000818 <HAL_GetTick>
 8001ed0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ed2:	e008      	b.n	8001ee6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ed4:	f7fe fca0 	bl	8000818 <HAL_GetTick>
 8001ed8:	4602      	mov	r2, r0
 8001eda:	693b      	ldr	r3, [r7, #16]
 8001edc:	1ad3      	subs	r3, r2, r3
 8001ede:	2b64      	cmp	r3, #100	@ 0x64
 8001ee0:	d901      	bls.n	8001ee6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001ee2:	2303      	movs	r3, #3
 8001ee4:	e1ec      	b.n	80022c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ee6:	4b53      	ldr	r3, [pc, #332]	@ (8002034 <HAL_RCC_OscConfig+0x26c>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d1f0      	bne.n	8001ed4 <HAL_RCC_OscConfig+0x10c>
 8001ef2:	e000      	b.n	8001ef6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ef4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f003 0302 	and.w	r3, r3, #2
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d063      	beq.n	8001fca <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f02:	4b4c      	ldr	r3, [pc, #304]	@ (8002034 <HAL_RCC_OscConfig+0x26c>)
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	f003 030c 	and.w	r3, r3, #12
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d00b      	beq.n	8001f26 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001f0e:	4b49      	ldr	r3, [pc, #292]	@ (8002034 <HAL_RCC_OscConfig+0x26c>)
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	f003 030c 	and.w	r3, r3, #12
 8001f16:	2b08      	cmp	r3, #8
 8001f18:	d11c      	bne.n	8001f54 <HAL_RCC_OscConfig+0x18c>
 8001f1a:	4b46      	ldr	r3, [pc, #280]	@ (8002034 <HAL_RCC_OscConfig+0x26c>)
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d116      	bne.n	8001f54 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f26:	4b43      	ldr	r3, [pc, #268]	@ (8002034 <HAL_RCC_OscConfig+0x26c>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f003 0302 	and.w	r3, r3, #2
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d005      	beq.n	8001f3e <HAL_RCC_OscConfig+0x176>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	691b      	ldr	r3, [r3, #16]
 8001f36:	2b01      	cmp	r3, #1
 8001f38:	d001      	beq.n	8001f3e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	e1c0      	b.n	80022c0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f3e:	4b3d      	ldr	r3, [pc, #244]	@ (8002034 <HAL_RCC_OscConfig+0x26c>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	695b      	ldr	r3, [r3, #20]
 8001f4a:	00db      	lsls	r3, r3, #3
 8001f4c:	4939      	ldr	r1, [pc, #228]	@ (8002034 <HAL_RCC_OscConfig+0x26c>)
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f52:	e03a      	b.n	8001fca <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	691b      	ldr	r3, [r3, #16]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d020      	beq.n	8001f9e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f5c:	4b36      	ldr	r3, [pc, #216]	@ (8002038 <HAL_RCC_OscConfig+0x270>)
 8001f5e:	2201      	movs	r2, #1
 8001f60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f62:	f7fe fc59 	bl	8000818 <HAL_GetTick>
 8001f66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f68:	e008      	b.n	8001f7c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f6a:	f7fe fc55 	bl	8000818 <HAL_GetTick>
 8001f6e:	4602      	mov	r2, r0
 8001f70:	693b      	ldr	r3, [r7, #16]
 8001f72:	1ad3      	subs	r3, r2, r3
 8001f74:	2b02      	cmp	r3, #2
 8001f76:	d901      	bls.n	8001f7c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001f78:	2303      	movs	r3, #3
 8001f7a:	e1a1      	b.n	80022c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f7c:	4b2d      	ldr	r3, [pc, #180]	@ (8002034 <HAL_RCC_OscConfig+0x26c>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f003 0302 	and.w	r3, r3, #2
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d0f0      	beq.n	8001f6a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f88:	4b2a      	ldr	r3, [pc, #168]	@ (8002034 <HAL_RCC_OscConfig+0x26c>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	695b      	ldr	r3, [r3, #20]
 8001f94:	00db      	lsls	r3, r3, #3
 8001f96:	4927      	ldr	r1, [pc, #156]	@ (8002034 <HAL_RCC_OscConfig+0x26c>)
 8001f98:	4313      	orrs	r3, r2
 8001f9a:	600b      	str	r3, [r1, #0]
 8001f9c:	e015      	b.n	8001fca <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f9e:	4b26      	ldr	r3, [pc, #152]	@ (8002038 <HAL_RCC_OscConfig+0x270>)
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fa4:	f7fe fc38 	bl	8000818 <HAL_GetTick>
 8001fa8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001faa:	e008      	b.n	8001fbe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fac:	f7fe fc34 	bl	8000818 <HAL_GetTick>
 8001fb0:	4602      	mov	r2, r0
 8001fb2:	693b      	ldr	r3, [r7, #16]
 8001fb4:	1ad3      	subs	r3, r2, r3
 8001fb6:	2b02      	cmp	r3, #2
 8001fb8:	d901      	bls.n	8001fbe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001fba:	2303      	movs	r3, #3
 8001fbc:	e180      	b.n	80022c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fbe:	4b1d      	ldr	r3, [pc, #116]	@ (8002034 <HAL_RCC_OscConfig+0x26c>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f003 0302 	and.w	r3, r3, #2
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d1f0      	bne.n	8001fac <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f003 0308 	and.w	r3, r3, #8
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d03a      	beq.n	800204c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	699b      	ldr	r3, [r3, #24]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d019      	beq.n	8002012 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001fde:	4b17      	ldr	r3, [pc, #92]	@ (800203c <HAL_RCC_OscConfig+0x274>)
 8001fe0:	2201      	movs	r2, #1
 8001fe2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fe4:	f7fe fc18 	bl	8000818 <HAL_GetTick>
 8001fe8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fea:	e008      	b.n	8001ffe <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fec:	f7fe fc14 	bl	8000818 <HAL_GetTick>
 8001ff0:	4602      	mov	r2, r0
 8001ff2:	693b      	ldr	r3, [r7, #16]
 8001ff4:	1ad3      	subs	r3, r2, r3
 8001ff6:	2b02      	cmp	r3, #2
 8001ff8:	d901      	bls.n	8001ffe <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001ffa:	2303      	movs	r3, #3
 8001ffc:	e160      	b.n	80022c0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ffe:	4b0d      	ldr	r3, [pc, #52]	@ (8002034 <HAL_RCC_OscConfig+0x26c>)
 8002000:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002002:	f003 0302 	and.w	r3, r3, #2
 8002006:	2b00      	cmp	r3, #0
 8002008:	d0f0      	beq.n	8001fec <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800200a:	2001      	movs	r0, #1
 800200c:	f000 face 	bl	80025ac <RCC_Delay>
 8002010:	e01c      	b.n	800204c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002012:	4b0a      	ldr	r3, [pc, #40]	@ (800203c <HAL_RCC_OscConfig+0x274>)
 8002014:	2200      	movs	r2, #0
 8002016:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002018:	f7fe fbfe 	bl	8000818 <HAL_GetTick>
 800201c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800201e:	e00f      	b.n	8002040 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002020:	f7fe fbfa 	bl	8000818 <HAL_GetTick>
 8002024:	4602      	mov	r2, r0
 8002026:	693b      	ldr	r3, [r7, #16]
 8002028:	1ad3      	subs	r3, r2, r3
 800202a:	2b02      	cmp	r3, #2
 800202c:	d908      	bls.n	8002040 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800202e:	2303      	movs	r3, #3
 8002030:	e146      	b.n	80022c0 <HAL_RCC_OscConfig+0x4f8>
 8002032:	bf00      	nop
 8002034:	40021000 	.word	0x40021000
 8002038:	42420000 	.word	0x42420000
 800203c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002040:	4b92      	ldr	r3, [pc, #584]	@ (800228c <HAL_RCC_OscConfig+0x4c4>)
 8002042:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002044:	f003 0302 	and.w	r3, r3, #2
 8002048:	2b00      	cmp	r3, #0
 800204a:	d1e9      	bne.n	8002020 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f003 0304 	and.w	r3, r3, #4
 8002054:	2b00      	cmp	r3, #0
 8002056:	f000 80a6 	beq.w	80021a6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800205a:	2300      	movs	r3, #0
 800205c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800205e:	4b8b      	ldr	r3, [pc, #556]	@ (800228c <HAL_RCC_OscConfig+0x4c4>)
 8002060:	69db      	ldr	r3, [r3, #28]
 8002062:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002066:	2b00      	cmp	r3, #0
 8002068:	d10d      	bne.n	8002086 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800206a:	4b88      	ldr	r3, [pc, #544]	@ (800228c <HAL_RCC_OscConfig+0x4c4>)
 800206c:	69db      	ldr	r3, [r3, #28]
 800206e:	4a87      	ldr	r2, [pc, #540]	@ (800228c <HAL_RCC_OscConfig+0x4c4>)
 8002070:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002074:	61d3      	str	r3, [r2, #28]
 8002076:	4b85      	ldr	r3, [pc, #532]	@ (800228c <HAL_RCC_OscConfig+0x4c4>)
 8002078:	69db      	ldr	r3, [r3, #28]
 800207a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800207e:	60bb      	str	r3, [r7, #8]
 8002080:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002082:	2301      	movs	r3, #1
 8002084:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002086:	4b82      	ldr	r3, [pc, #520]	@ (8002290 <HAL_RCC_OscConfig+0x4c8>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800208e:	2b00      	cmp	r3, #0
 8002090:	d118      	bne.n	80020c4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002092:	4b7f      	ldr	r3, [pc, #508]	@ (8002290 <HAL_RCC_OscConfig+0x4c8>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4a7e      	ldr	r2, [pc, #504]	@ (8002290 <HAL_RCC_OscConfig+0x4c8>)
 8002098:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800209c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800209e:	f7fe fbbb 	bl	8000818 <HAL_GetTick>
 80020a2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020a4:	e008      	b.n	80020b8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020a6:	f7fe fbb7 	bl	8000818 <HAL_GetTick>
 80020aa:	4602      	mov	r2, r0
 80020ac:	693b      	ldr	r3, [r7, #16]
 80020ae:	1ad3      	subs	r3, r2, r3
 80020b0:	2b64      	cmp	r3, #100	@ 0x64
 80020b2:	d901      	bls.n	80020b8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80020b4:	2303      	movs	r3, #3
 80020b6:	e103      	b.n	80022c0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020b8:	4b75      	ldr	r3, [pc, #468]	@ (8002290 <HAL_RCC_OscConfig+0x4c8>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d0f0      	beq.n	80020a6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	68db      	ldr	r3, [r3, #12]
 80020c8:	2b01      	cmp	r3, #1
 80020ca:	d106      	bne.n	80020da <HAL_RCC_OscConfig+0x312>
 80020cc:	4b6f      	ldr	r3, [pc, #444]	@ (800228c <HAL_RCC_OscConfig+0x4c4>)
 80020ce:	6a1b      	ldr	r3, [r3, #32]
 80020d0:	4a6e      	ldr	r2, [pc, #440]	@ (800228c <HAL_RCC_OscConfig+0x4c4>)
 80020d2:	f043 0301 	orr.w	r3, r3, #1
 80020d6:	6213      	str	r3, [r2, #32]
 80020d8:	e02d      	b.n	8002136 <HAL_RCC_OscConfig+0x36e>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	68db      	ldr	r3, [r3, #12]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d10c      	bne.n	80020fc <HAL_RCC_OscConfig+0x334>
 80020e2:	4b6a      	ldr	r3, [pc, #424]	@ (800228c <HAL_RCC_OscConfig+0x4c4>)
 80020e4:	6a1b      	ldr	r3, [r3, #32]
 80020e6:	4a69      	ldr	r2, [pc, #420]	@ (800228c <HAL_RCC_OscConfig+0x4c4>)
 80020e8:	f023 0301 	bic.w	r3, r3, #1
 80020ec:	6213      	str	r3, [r2, #32]
 80020ee:	4b67      	ldr	r3, [pc, #412]	@ (800228c <HAL_RCC_OscConfig+0x4c4>)
 80020f0:	6a1b      	ldr	r3, [r3, #32]
 80020f2:	4a66      	ldr	r2, [pc, #408]	@ (800228c <HAL_RCC_OscConfig+0x4c4>)
 80020f4:	f023 0304 	bic.w	r3, r3, #4
 80020f8:	6213      	str	r3, [r2, #32]
 80020fa:	e01c      	b.n	8002136 <HAL_RCC_OscConfig+0x36e>
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	68db      	ldr	r3, [r3, #12]
 8002100:	2b05      	cmp	r3, #5
 8002102:	d10c      	bne.n	800211e <HAL_RCC_OscConfig+0x356>
 8002104:	4b61      	ldr	r3, [pc, #388]	@ (800228c <HAL_RCC_OscConfig+0x4c4>)
 8002106:	6a1b      	ldr	r3, [r3, #32]
 8002108:	4a60      	ldr	r2, [pc, #384]	@ (800228c <HAL_RCC_OscConfig+0x4c4>)
 800210a:	f043 0304 	orr.w	r3, r3, #4
 800210e:	6213      	str	r3, [r2, #32]
 8002110:	4b5e      	ldr	r3, [pc, #376]	@ (800228c <HAL_RCC_OscConfig+0x4c4>)
 8002112:	6a1b      	ldr	r3, [r3, #32]
 8002114:	4a5d      	ldr	r2, [pc, #372]	@ (800228c <HAL_RCC_OscConfig+0x4c4>)
 8002116:	f043 0301 	orr.w	r3, r3, #1
 800211a:	6213      	str	r3, [r2, #32]
 800211c:	e00b      	b.n	8002136 <HAL_RCC_OscConfig+0x36e>
 800211e:	4b5b      	ldr	r3, [pc, #364]	@ (800228c <HAL_RCC_OscConfig+0x4c4>)
 8002120:	6a1b      	ldr	r3, [r3, #32]
 8002122:	4a5a      	ldr	r2, [pc, #360]	@ (800228c <HAL_RCC_OscConfig+0x4c4>)
 8002124:	f023 0301 	bic.w	r3, r3, #1
 8002128:	6213      	str	r3, [r2, #32]
 800212a:	4b58      	ldr	r3, [pc, #352]	@ (800228c <HAL_RCC_OscConfig+0x4c4>)
 800212c:	6a1b      	ldr	r3, [r3, #32]
 800212e:	4a57      	ldr	r2, [pc, #348]	@ (800228c <HAL_RCC_OscConfig+0x4c4>)
 8002130:	f023 0304 	bic.w	r3, r3, #4
 8002134:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	68db      	ldr	r3, [r3, #12]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d015      	beq.n	800216a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800213e:	f7fe fb6b 	bl	8000818 <HAL_GetTick>
 8002142:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002144:	e00a      	b.n	800215c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002146:	f7fe fb67 	bl	8000818 <HAL_GetTick>
 800214a:	4602      	mov	r2, r0
 800214c:	693b      	ldr	r3, [r7, #16]
 800214e:	1ad3      	subs	r3, r2, r3
 8002150:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002154:	4293      	cmp	r3, r2
 8002156:	d901      	bls.n	800215c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002158:	2303      	movs	r3, #3
 800215a:	e0b1      	b.n	80022c0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800215c:	4b4b      	ldr	r3, [pc, #300]	@ (800228c <HAL_RCC_OscConfig+0x4c4>)
 800215e:	6a1b      	ldr	r3, [r3, #32]
 8002160:	f003 0302 	and.w	r3, r3, #2
 8002164:	2b00      	cmp	r3, #0
 8002166:	d0ee      	beq.n	8002146 <HAL_RCC_OscConfig+0x37e>
 8002168:	e014      	b.n	8002194 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800216a:	f7fe fb55 	bl	8000818 <HAL_GetTick>
 800216e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002170:	e00a      	b.n	8002188 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002172:	f7fe fb51 	bl	8000818 <HAL_GetTick>
 8002176:	4602      	mov	r2, r0
 8002178:	693b      	ldr	r3, [r7, #16]
 800217a:	1ad3      	subs	r3, r2, r3
 800217c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002180:	4293      	cmp	r3, r2
 8002182:	d901      	bls.n	8002188 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002184:	2303      	movs	r3, #3
 8002186:	e09b      	b.n	80022c0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002188:	4b40      	ldr	r3, [pc, #256]	@ (800228c <HAL_RCC_OscConfig+0x4c4>)
 800218a:	6a1b      	ldr	r3, [r3, #32]
 800218c:	f003 0302 	and.w	r3, r3, #2
 8002190:	2b00      	cmp	r3, #0
 8002192:	d1ee      	bne.n	8002172 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002194:	7dfb      	ldrb	r3, [r7, #23]
 8002196:	2b01      	cmp	r3, #1
 8002198:	d105      	bne.n	80021a6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800219a:	4b3c      	ldr	r3, [pc, #240]	@ (800228c <HAL_RCC_OscConfig+0x4c4>)
 800219c:	69db      	ldr	r3, [r3, #28]
 800219e:	4a3b      	ldr	r2, [pc, #236]	@ (800228c <HAL_RCC_OscConfig+0x4c4>)
 80021a0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80021a4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	69db      	ldr	r3, [r3, #28]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	f000 8087 	beq.w	80022be <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80021b0:	4b36      	ldr	r3, [pc, #216]	@ (800228c <HAL_RCC_OscConfig+0x4c4>)
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	f003 030c 	and.w	r3, r3, #12
 80021b8:	2b08      	cmp	r3, #8
 80021ba:	d061      	beq.n	8002280 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	69db      	ldr	r3, [r3, #28]
 80021c0:	2b02      	cmp	r3, #2
 80021c2:	d146      	bne.n	8002252 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021c4:	4b33      	ldr	r3, [pc, #204]	@ (8002294 <HAL_RCC_OscConfig+0x4cc>)
 80021c6:	2200      	movs	r2, #0
 80021c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021ca:	f7fe fb25 	bl	8000818 <HAL_GetTick>
 80021ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021d0:	e008      	b.n	80021e4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021d2:	f7fe fb21 	bl	8000818 <HAL_GetTick>
 80021d6:	4602      	mov	r2, r0
 80021d8:	693b      	ldr	r3, [r7, #16]
 80021da:	1ad3      	subs	r3, r2, r3
 80021dc:	2b02      	cmp	r3, #2
 80021de:	d901      	bls.n	80021e4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80021e0:	2303      	movs	r3, #3
 80021e2:	e06d      	b.n	80022c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021e4:	4b29      	ldr	r3, [pc, #164]	@ (800228c <HAL_RCC_OscConfig+0x4c4>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d1f0      	bne.n	80021d2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6a1b      	ldr	r3, [r3, #32]
 80021f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80021f8:	d108      	bne.n	800220c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80021fa:	4b24      	ldr	r3, [pc, #144]	@ (800228c <HAL_RCC_OscConfig+0x4c4>)
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	689b      	ldr	r3, [r3, #8]
 8002206:	4921      	ldr	r1, [pc, #132]	@ (800228c <HAL_RCC_OscConfig+0x4c4>)
 8002208:	4313      	orrs	r3, r2
 800220a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800220c:	4b1f      	ldr	r3, [pc, #124]	@ (800228c <HAL_RCC_OscConfig+0x4c4>)
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6a19      	ldr	r1, [r3, #32]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800221c:	430b      	orrs	r3, r1
 800221e:	491b      	ldr	r1, [pc, #108]	@ (800228c <HAL_RCC_OscConfig+0x4c4>)
 8002220:	4313      	orrs	r3, r2
 8002222:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002224:	4b1b      	ldr	r3, [pc, #108]	@ (8002294 <HAL_RCC_OscConfig+0x4cc>)
 8002226:	2201      	movs	r2, #1
 8002228:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800222a:	f7fe faf5 	bl	8000818 <HAL_GetTick>
 800222e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002230:	e008      	b.n	8002244 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002232:	f7fe faf1 	bl	8000818 <HAL_GetTick>
 8002236:	4602      	mov	r2, r0
 8002238:	693b      	ldr	r3, [r7, #16]
 800223a:	1ad3      	subs	r3, r2, r3
 800223c:	2b02      	cmp	r3, #2
 800223e:	d901      	bls.n	8002244 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002240:	2303      	movs	r3, #3
 8002242:	e03d      	b.n	80022c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002244:	4b11      	ldr	r3, [pc, #68]	@ (800228c <HAL_RCC_OscConfig+0x4c4>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800224c:	2b00      	cmp	r3, #0
 800224e:	d0f0      	beq.n	8002232 <HAL_RCC_OscConfig+0x46a>
 8002250:	e035      	b.n	80022be <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002252:	4b10      	ldr	r3, [pc, #64]	@ (8002294 <HAL_RCC_OscConfig+0x4cc>)
 8002254:	2200      	movs	r2, #0
 8002256:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002258:	f7fe fade 	bl	8000818 <HAL_GetTick>
 800225c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800225e:	e008      	b.n	8002272 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002260:	f7fe fada 	bl	8000818 <HAL_GetTick>
 8002264:	4602      	mov	r2, r0
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	1ad3      	subs	r3, r2, r3
 800226a:	2b02      	cmp	r3, #2
 800226c:	d901      	bls.n	8002272 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800226e:	2303      	movs	r3, #3
 8002270:	e026      	b.n	80022c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002272:	4b06      	ldr	r3, [pc, #24]	@ (800228c <HAL_RCC_OscConfig+0x4c4>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800227a:	2b00      	cmp	r3, #0
 800227c:	d1f0      	bne.n	8002260 <HAL_RCC_OscConfig+0x498>
 800227e:	e01e      	b.n	80022be <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	69db      	ldr	r3, [r3, #28]
 8002284:	2b01      	cmp	r3, #1
 8002286:	d107      	bne.n	8002298 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002288:	2301      	movs	r3, #1
 800228a:	e019      	b.n	80022c0 <HAL_RCC_OscConfig+0x4f8>
 800228c:	40021000 	.word	0x40021000
 8002290:	40007000 	.word	0x40007000
 8002294:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002298:	4b0b      	ldr	r3, [pc, #44]	@ (80022c8 <HAL_RCC_OscConfig+0x500>)
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6a1b      	ldr	r3, [r3, #32]
 80022a8:	429a      	cmp	r2, r3
 80022aa:	d106      	bne.n	80022ba <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022b6:	429a      	cmp	r2, r3
 80022b8:	d001      	beq.n	80022be <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80022ba:	2301      	movs	r3, #1
 80022bc:	e000      	b.n	80022c0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80022be:	2300      	movs	r3, #0
}
 80022c0:	4618      	mov	r0, r3
 80022c2:	3718      	adds	r7, #24
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bd80      	pop	{r7, pc}
 80022c8:	40021000 	.word	0x40021000

080022cc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b084      	sub	sp, #16
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
 80022d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d101      	bne.n	80022e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022dc:	2301      	movs	r3, #1
 80022de:	e0d0      	b.n	8002482 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80022e0:	4b6a      	ldr	r3, [pc, #424]	@ (800248c <HAL_RCC_ClockConfig+0x1c0>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f003 0307 	and.w	r3, r3, #7
 80022e8:	683a      	ldr	r2, [r7, #0]
 80022ea:	429a      	cmp	r2, r3
 80022ec:	d910      	bls.n	8002310 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022ee:	4b67      	ldr	r3, [pc, #412]	@ (800248c <HAL_RCC_ClockConfig+0x1c0>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f023 0207 	bic.w	r2, r3, #7
 80022f6:	4965      	ldr	r1, [pc, #404]	@ (800248c <HAL_RCC_ClockConfig+0x1c0>)
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	4313      	orrs	r3, r2
 80022fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022fe:	4b63      	ldr	r3, [pc, #396]	@ (800248c <HAL_RCC_ClockConfig+0x1c0>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f003 0307 	and.w	r3, r3, #7
 8002306:	683a      	ldr	r2, [r7, #0]
 8002308:	429a      	cmp	r2, r3
 800230a:	d001      	beq.n	8002310 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800230c:	2301      	movs	r3, #1
 800230e:	e0b8      	b.n	8002482 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f003 0302 	and.w	r3, r3, #2
 8002318:	2b00      	cmp	r3, #0
 800231a:	d020      	beq.n	800235e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f003 0304 	and.w	r3, r3, #4
 8002324:	2b00      	cmp	r3, #0
 8002326:	d005      	beq.n	8002334 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002328:	4b59      	ldr	r3, [pc, #356]	@ (8002490 <HAL_RCC_ClockConfig+0x1c4>)
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	4a58      	ldr	r2, [pc, #352]	@ (8002490 <HAL_RCC_ClockConfig+0x1c4>)
 800232e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002332:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f003 0308 	and.w	r3, r3, #8
 800233c:	2b00      	cmp	r3, #0
 800233e:	d005      	beq.n	800234c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002340:	4b53      	ldr	r3, [pc, #332]	@ (8002490 <HAL_RCC_ClockConfig+0x1c4>)
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	4a52      	ldr	r2, [pc, #328]	@ (8002490 <HAL_RCC_ClockConfig+0x1c4>)
 8002346:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800234a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800234c:	4b50      	ldr	r3, [pc, #320]	@ (8002490 <HAL_RCC_ClockConfig+0x1c4>)
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	689b      	ldr	r3, [r3, #8]
 8002358:	494d      	ldr	r1, [pc, #308]	@ (8002490 <HAL_RCC_ClockConfig+0x1c4>)
 800235a:	4313      	orrs	r3, r2
 800235c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f003 0301 	and.w	r3, r3, #1
 8002366:	2b00      	cmp	r3, #0
 8002368:	d040      	beq.n	80023ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	2b01      	cmp	r3, #1
 8002370:	d107      	bne.n	8002382 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002372:	4b47      	ldr	r3, [pc, #284]	@ (8002490 <HAL_RCC_ClockConfig+0x1c4>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800237a:	2b00      	cmp	r3, #0
 800237c:	d115      	bne.n	80023aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800237e:	2301      	movs	r3, #1
 8002380:	e07f      	b.n	8002482 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	2b02      	cmp	r3, #2
 8002388:	d107      	bne.n	800239a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800238a:	4b41      	ldr	r3, [pc, #260]	@ (8002490 <HAL_RCC_ClockConfig+0x1c4>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002392:	2b00      	cmp	r3, #0
 8002394:	d109      	bne.n	80023aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002396:	2301      	movs	r3, #1
 8002398:	e073      	b.n	8002482 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800239a:	4b3d      	ldr	r3, [pc, #244]	@ (8002490 <HAL_RCC_ClockConfig+0x1c4>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f003 0302 	and.w	r3, r3, #2
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d101      	bne.n	80023aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023a6:	2301      	movs	r3, #1
 80023a8:	e06b      	b.n	8002482 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023aa:	4b39      	ldr	r3, [pc, #228]	@ (8002490 <HAL_RCC_ClockConfig+0x1c4>)
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	f023 0203 	bic.w	r2, r3, #3
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	4936      	ldr	r1, [pc, #216]	@ (8002490 <HAL_RCC_ClockConfig+0x1c4>)
 80023b8:	4313      	orrs	r3, r2
 80023ba:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80023bc:	f7fe fa2c 	bl	8000818 <HAL_GetTick>
 80023c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023c2:	e00a      	b.n	80023da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023c4:	f7fe fa28 	bl	8000818 <HAL_GetTick>
 80023c8:	4602      	mov	r2, r0
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	1ad3      	subs	r3, r2, r3
 80023ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d901      	bls.n	80023da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80023d6:	2303      	movs	r3, #3
 80023d8:	e053      	b.n	8002482 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023da:	4b2d      	ldr	r3, [pc, #180]	@ (8002490 <HAL_RCC_ClockConfig+0x1c4>)
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	f003 020c 	and.w	r2, r3, #12
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	009b      	lsls	r3, r3, #2
 80023e8:	429a      	cmp	r2, r3
 80023ea:	d1eb      	bne.n	80023c4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80023ec:	4b27      	ldr	r3, [pc, #156]	@ (800248c <HAL_RCC_ClockConfig+0x1c0>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f003 0307 	and.w	r3, r3, #7
 80023f4:	683a      	ldr	r2, [r7, #0]
 80023f6:	429a      	cmp	r2, r3
 80023f8:	d210      	bcs.n	800241c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023fa:	4b24      	ldr	r3, [pc, #144]	@ (800248c <HAL_RCC_ClockConfig+0x1c0>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f023 0207 	bic.w	r2, r3, #7
 8002402:	4922      	ldr	r1, [pc, #136]	@ (800248c <HAL_RCC_ClockConfig+0x1c0>)
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	4313      	orrs	r3, r2
 8002408:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800240a:	4b20      	ldr	r3, [pc, #128]	@ (800248c <HAL_RCC_ClockConfig+0x1c0>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f003 0307 	and.w	r3, r3, #7
 8002412:	683a      	ldr	r2, [r7, #0]
 8002414:	429a      	cmp	r2, r3
 8002416:	d001      	beq.n	800241c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002418:	2301      	movs	r3, #1
 800241a:	e032      	b.n	8002482 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f003 0304 	and.w	r3, r3, #4
 8002424:	2b00      	cmp	r3, #0
 8002426:	d008      	beq.n	800243a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002428:	4b19      	ldr	r3, [pc, #100]	@ (8002490 <HAL_RCC_ClockConfig+0x1c4>)
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	68db      	ldr	r3, [r3, #12]
 8002434:	4916      	ldr	r1, [pc, #88]	@ (8002490 <HAL_RCC_ClockConfig+0x1c4>)
 8002436:	4313      	orrs	r3, r2
 8002438:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f003 0308 	and.w	r3, r3, #8
 8002442:	2b00      	cmp	r3, #0
 8002444:	d009      	beq.n	800245a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002446:	4b12      	ldr	r3, [pc, #72]	@ (8002490 <HAL_RCC_ClockConfig+0x1c4>)
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	691b      	ldr	r3, [r3, #16]
 8002452:	00db      	lsls	r3, r3, #3
 8002454:	490e      	ldr	r1, [pc, #56]	@ (8002490 <HAL_RCC_ClockConfig+0x1c4>)
 8002456:	4313      	orrs	r3, r2
 8002458:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800245a:	f000 f821 	bl	80024a0 <HAL_RCC_GetSysClockFreq>
 800245e:	4602      	mov	r2, r0
 8002460:	4b0b      	ldr	r3, [pc, #44]	@ (8002490 <HAL_RCC_ClockConfig+0x1c4>)
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	091b      	lsrs	r3, r3, #4
 8002466:	f003 030f 	and.w	r3, r3, #15
 800246a:	490a      	ldr	r1, [pc, #40]	@ (8002494 <HAL_RCC_ClockConfig+0x1c8>)
 800246c:	5ccb      	ldrb	r3, [r1, r3]
 800246e:	fa22 f303 	lsr.w	r3, r2, r3
 8002472:	4a09      	ldr	r2, [pc, #36]	@ (8002498 <HAL_RCC_ClockConfig+0x1cc>)
 8002474:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002476:	4b09      	ldr	r3, [pc, #36]	@ (800249c <HAL_RCC_ClockConfig+0x1d0>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4618      	mov	r0, r3
 800247c:	f7fe f98a 	bl	8000794 <HAL_InitTick>

  return HAL_OK;
 8002480:	2300      	movs	r3, #0
}
 8002482:	4618      	mov	r0, r3
 8002484:	3710      	adds	r7, #16
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}
 800248a:	bf00      	nop
 800248c:	40022000 	.word	0x40022000
 8002490:	40021000 	.word	0x40021000
 8002494:	080038d8 	.word	0x080038d8
 8002498:	20000000 	.word	0x20000000
 800249c:	20000004 	.word	0x20000004

080024a0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024a0:	b480      	push	{r7}
 80024a2:	b087      	sub	sp, #28
 80024a4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80024a6:	2300      	movs	r3, #0
 80024a8:	60fb      	str	r3, [r7, #12]
 80024aa:	2300      	movs	r3, #0
 80024ac:	60bb      	str	r3, [r7, #8]
 80024ae:	2300      	movs	r3, #0
 80024b0:	617b      	str	r3, [r7, #20]
 80024b2:	2300      	movs	r3, #0
 80024b4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80024b6:	2300      	movs	r3, #0
 80024b8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80024ba:	4b1e      	ldr	r3, [pc, #120]	@ (8002534 <HAL_RCC_GetSysClockFreq+0x94>)
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	f003 030c 	and.w	r3, r3, #12
 80024c6:	2b04      	cmp	r3, #4
 80024c8:	d002      	beq.n	80024d0 <HAL_RCC_GetSysClockFreq+0x30>
 80024ca:	2b08      	cmp	r3, #8
 80024cc:	d003      	beq.n	80024d6 <HAL_RCC_GetSysClockFreq+0x36>
 80024ce:	e027      	b.n	8002520 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80024d0:	4b19      	ldr	r3, [pc, #100]	@ (8002538 <HAL_RCC_GetSysClockFreq+0x98>)
 80024d2:	613b      	str	r3, [r7, #16]
      break;
 80024d4:	e027      	b.n	8002526 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	0c9b      	lsrs	r3, r3, #18
 80024da:	f003 030f 	and.w	r3, r3, #15
 80024de:	4a17      	ldr	r2, [pc, #92]	@ (800253c <HAL_RCC_GetSysClockFreq+0x9c>)
 80024e0:	5cd3      	ldrb	r3, [r2, r3]
 80024e2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d010      	beq.n	8002510 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80024ee:	4b11      	ldr	r3, [pc, #68]	@ (8002534 <HAL_RCC_GetSysClockFreq+0x94>)
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	0c5b      	lsrs	r3, r3, #17
 80024f4:	f003 0301 	and.w	r3, r3, #1
 80024f8:	4a11      	ldr	r2, [pc, #68]	@ (8002540 <HAL_RCC_GetSysClockFreq+0xa0>)
 80024fa:	5cd3      	ldrb	r3, [r2, r3]
 80024fc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	4a0d      	ldr	r2, [pc, #52]	@ (8002538 <HAL_RCC_GetSysClockFreq+0x98>)
 8002502:	fb03 f202 	mul.w	r2, r3, r2
 8002506:	68bb      	ldr	r3, [r7, #8]
 8002508:	fbb2 f3f3 	udiv	r3, r2, r3
 800250c:	617b      	str	r3, [r7, #20]
 800250e:	e004      	b.n	800251a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	4a0c      	ldr	r2, [pc, #48]	@ (8002544 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002514:	fb02 f303 	mul.w	r3, r2, r3
 8002518:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800251a:	697b      	ldr	r3, [r7, #20]
 800251c:	613b      	str	r3, [r7, #16]
      break;
 800251e:	e002      	b.n	8002526 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002520:	4b05      	ldr	r3, [pc, #20]	@ (8002538 <HAL_RCC_GetSysClockFreq+0x98>)
 8002522:	613b      	str	r3, [r7, #16]
      break;
 8002524:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002526:	693b      	ldr	r3, [r7, #16]
}
 8002528:	4618      	mov	r0, r3
 800252a:	371c      	adds	r7, #28
 800252c:	46bd      	mov	sp, r7
 800252e:	bc80      	pop	{r7}
 8002530:	4770      	bx	lr
 8002532:	bf00      	nop
 8002534:	40021000 	.word	0x40021000
 8002538:	007a1200 	.word	0x007a1200
 800253c:	080038f0 	.word	0x080038f0
 8002540:	08003900 	.word	0x08003900
 8002544:	003d0900 	.word	0x003d0900

08002548 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002548:	b480      	push	{r7}
 800254a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800254c:	4b02      	ldr	r3, [pc, #8]	@ (8002558 <HAL_RCC_GetHCLKFreq+0x10>)
 800254e:	681b      	ldr	r3, [r3, #0]
}
 8002550:	4618      	mov	r0, r3
 8002552:	46bd      	mov	sp, r7
 8002554:	bc80      	pop	{r7}
 8002556:	4770      	bx	lr
 8002558:	20000000 	.word	0x20000000

0800255c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002560:	f7ff fff2 	bl	8002548 <HAL_RCC_GetHCLKFreq>
 8002564:	4602      	mov	r2, r0
 8002566:	4b05      	ldr	r3, [pc, #20]	@ (800257c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	0a1b      	lsrs	r3, r3, #8
 800256c:	f003 0307 	and.w	r3, r3, #7
 8002570:	4903      	ldr	r1, [pc, #12]	@ (8002580 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002572:	5ccb      	ldrb	r3, [r1, r3]
 8002574:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002578:	4618      	mov	r0, r3
 800257a:	bd80      	pop	{r7, pc}
 800257c:	40021000 	.word	0x40021000
 8002580:	080038e8 	.word	0x080038e8

08002584 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002588:	f7ff ffde 	bl	8002548 <HAL_RCC_GetHCLKFreq>
 800258c:	4602      	mov	r2, r0
 800258e:	4b05      	ldr	r3, [pc, #20]	@ (80025a4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	0adb      	lsrs	r3, r3, #11
 8002594:	f003 0307 	and.w	r3, r3, #7
 8002598:	4903      	ldr	r1, [pc, #12]	@ (80025a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800259a:	5ccb      	ldrb	r3, [r1, r3]
 800259c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025a0:	4618      	mov	r0, r3
 80025a2:	bd80      	pop	{r7, pc}
 80025a4:	40021000 	.word	0x40021000
 80025a8:	080038e8 	.word	0x080038e8

080025ac <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80025ac:	b480      	push	{r7}
 80025ae:	b085      	sub	sp, #20
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80025b4:	4b0a      	ldr	r3, [pc, #40]	@ (80025e0 <RCC_Delay+0x34>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a0a      	ldr	r2, [pc, #40]	@ (80025e4 <RCC_Delay+0x38>)
 80025ba:	fba2 2303 	umull	r2, r3, r2, r3
 80025be:	0a5b      	lsrs	r3, r3, #9
 80025c0:	687a      	ldr	r2, [r7, #4]
 80025c2:	fb02 f303 	mul.w	r3, r2, r3
 80025c6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80025c8:	bf00      	nop
  }
  while (Delay --);
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	1e5a      	subs	r2, r3, #1
 80025ce:	60fa      	str	r2, [r7, #12]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d1f9      	bne.n	80025c8 <RCC_Delay+0x1c>
}
 80025d4:	bf00      	nop
 80025d6:	bf00      	nop
 80025d8:	3714      	adds	r7, #20
 80025da:	46bd      	mov	sp, r7
 80025dc:	bc80      	pop	{r7}
 80025de:	4770      	bx	lr
 80025e0:	20000000 	.word	0x20000000
 80025e4:	10624dd3 	.word	0x10624dd3

080025e8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b082      	sub	sp, #8
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d101      	bne.n	80025fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80025f6:	2301      	movs	r3, #1
 80025f8:	e042      	b.n	8002680 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002600:	b2db      	uxtb	r3, r3
 8002602:	2b00      	cmp	r3, #0
 8002604:	d106      	bne.n	8002614 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2200      	movs	r2, #0
 800260a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800260e:	6878      	ldr	r0, [r7, #4]
 8002610:	f7fe f83a 	bl	8000688 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2224      	movs	r2, #36	@ 0x24
 8002618:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	68da      	ldr	r2, [r3, #12]
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800262a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800262c:	6878      	ldr	r0, [r7, #4]
 800262e:	f000 f971 	bl	8002914 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	691a      	ldr	r2, [r3, #16]
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002640:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	695a      	ldr	r2, [r3, #20]
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002650:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	68da      	ldr	r2, [r3, #12]
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002660:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2200      	movs	r2, #0
 8002666:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2220      	movs	r2, #32
 800266c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2220      	movs	r2, #32
 8002674:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2200      	movs	r2, #0
 800267c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800267e:	2300      	movs	r3, #0
}
 8002680:	4618      	mov	r0, r3
 8002682:	3708      	adds	r7, #8
 8002684:	46bd      	mov	sp, r7
 8002686:	bd80      	pop	{r7, pc}

08002688 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b08a      	sub	sp, #40	@ 0x28
 800268c:	af02      	add	r7, sp, #8
 800268e:	60f8      	str	r0, [r7, #12]
 8002690:	60b9      	str	r1, [r7, #8]
 8002692:	603b      	str	r3, [r7, #0]
 8002694:	4613      	mov	r3, r2
 8002696:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002698:	2300      	movs	r3, #0
 800269a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80026a2:	b2db      	uxtb	r3, r3
 80026a4:	2b20      	cmp	r3, #32
 80026a6:	d175      	bne.n	8002794 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80026a8:	68bb      	ldr	r3, [r7, #8]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d002      	beq.n	80026b4 <HAL_UART_Transmit+0x2c>
 80026ae:	88fb      	ldrh	r3, [r7, #6]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d101      	bne.n	80026b8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80026b4:	2301      	movs	r3, #1
 80026b6:	e06e      	b.n	8002796 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	2200      	movs	r2, #0
 80026bc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	2221      	movs	r2, #33	@ 0x21
 80026c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80026c6:	f7fe f8a7 	bl	8000818 <HAL_GetTick>
 80026ca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	88fa      	ldrh	r2, [r7, #6]
 80026d0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	88fa      	ldrh	r2, [r7, #6]
 80026d6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	689b      	ldr	r3, [r3, #8]
 80026dc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80026e0:	d108      	bne.n	80026f4 <HAL_UART_Transmit+0x6c>
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	691b      	ldr	r3, [r3, #16]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d104      	bne.n	80026f4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80026ea:	2300      	movs	r3, #0
 80026ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80026ee:	68bb      	ldr	r3, [r7, #8]
 80026f0:	61bb      	str	r3, [r7, #24]
 80026f2:	e003      	b.n	80026fc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80026f4:	68bb      	ldr	r3, [r7, #8]
 80026f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80026f8:	2300      	movs	r3, #0
 80026fa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80026fc:	e02e      	b.n	800275c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	9300      	str	r3, [sp, #0]
 8002702:	697b      	ldr	r3, [r7, #20]
 8002704:	2200      	movs	r2, #0
 8002706:	2180      	movs	r1, #128	@ 0x80
 8002708:	68f8      	ldr	r0, [r7, #12]
 800270a:	f000 f848 	bl	800279e <UART_WaitOnFlagUntilTimeout>
 800270e:	4603      	mov	r3, r0
 8002710:	2b00      	cmp	r3, #0
 8002712:	d005      	beq.n	8002720 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	2220      	movs	r2, #32
 8002718:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800271c:	2303      	movs	r3, #3
 800271e:	e03a      	b.n	8002796 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002720:	69fb      	ldr	r3, [r7, #28]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d10b      	bne.n	800273e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002726:	69bb      	ldr	r3, [r7, #24]
 8002728:	881b      	ldrh	r3, [r3, #0]
 800272a:	461a      	mov	r2, r3
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002734:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002736:	69bb      	ldr	r3, [r7, #24]
 8002738:	3302      	adds	r3, #2
 800273a:	61bb      	str	r3, [r7, #24]
 800273c:	e007      	b.n	800274e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800273e:	69fb      	ldr	r3, [r7, #28]
 8002740:	781a      	ldrb	r2, [r3, #0]
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002748:	69fb      	ldr	r3, [r7, #28]
 800274a:	3301      	adds	r3, #1
 800274c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002752:	b29b      	uxth	r3, r3
 8002754:	3b01      	subs	r3, #1
 8002756:	b29a      	uxth	r2, r3
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002760:	b29b      	uxth	r3, r3
 8002762:	2b00      	cmp	r3, #0
 8002764:	d1cb      	bne.n	80026fe <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	9300      	str	r3, [sp, #0]
 800276a:	697b      	ldr	r3, [r7, #20]
 800276c:	2200      	movs	r2, #0
 800276e:	2140      	movs	r1, #64	@ 0x40
 8002770:	68f8      	ldr	r0, [r7, #12]
 8002772:	f000 f814 	bl	800279e <UART_WaitOnFlagUntilTimeout>
 8002776:	4603      	mov	r3, r0
 8002778:	2b00      	cmp	r3, #0
 800277a:	d005      	beq.n	8002788 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	2220      	movs	r2, #32
 8002780:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002784:	2303      	movs	r3, #3
 8002786:	e006      	b.n	8002796 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	2220      	movs	r2, #32
 800278c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002790:	2300      	movs	r3, #0
 8002792:	e000      	b.n	8002796 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002794:	2302      	movs	r3, #2
  }
}
 8002796:	4618      	mov	r0, r3
 8002798:	3720      	adds	r7, #32
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}

0800279e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800279e:	b580      	push	{r7, lr}
 80027a0:	b086      	sub	sp, #24
 80027a2:	af00      	add	r7, sp, #0
 80027a4:	60f8      	str	r0, [r7, #12]
 80027a6:	60b9      	str	r1, [r7, #8]
 80027a8:	603b      	str	r3, [r7, #0]
 80027aa:	4613      	mov	r3, r2
 80027ac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80027ae:	e03b      	b.n	8002828 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027b0:	6a3b      	ldr	r3, [r7, #32]
 80027b2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80027b6:	d037      	beq.n	8002828 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027b8:	f7fe f82e 	bl	8000818 <HAL_GetTick>
 80027bc:	4602      	mov	r2, r0
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	1ad3      	subs	r3, r2, r3
 80027c2:	6a3a      	ldr	r2, [r7, #32]
 80027c4:	429a      	cmp	r2, r3
 80027c6:	d302      	bcc.n	80027ce <UART_WaitOnFlagUntilTimeout+0x30>
 80027c8:	6a3b      	ldr	r3, [r7, #32]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d101      	bne.n	80027d2 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80027ce:	2303      	movs	r3, #3
 80027d0:	e03a      	b.n	8002848 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	68db      	ldr	r3, [r3, #12]
 80027d8:	f003 0304 	and.w	r3, r3, #4
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d023      	beq.n	8002828 <UART_WaitOnFlagUntilTimeout+0x8a>
 80027e0:	68bb      	ldr	r3, [r7, #8]
 80027e2:	2b80      	cmp	r3, #128	@ 0x80
 80027e4:	d020      	beq.n	8002828 <UART_WaitOnFlagUntilTimeout+0x8a>
 80027e6:	68bb      	ldr	r3, [r7, #8]
 80027e8:	2b40      	cmp	r3, #64	@ 0x40
 80027ea:	d01d      	beq.n	8002828 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f003 0308 	and.w	r3, r3, #8
 80027f6:	2b08      	cmp	r3, #8
 80027f8:	d116      	bne.n	8002828 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80027fa:	2300      	movs	r3, #0
 80027fc:	617b      	str	r3, [r7, #20]
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	617b      	str	r3, [r7, #20]
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	617b      	str	r3, [r7, #20]
 800280e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002810:	68f8      	ldr	r0, [r7, #12]
 8002812:	f000 f81d 	bl	8002850 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	2208      	movs	r2, #8
 800281a:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	2200      	movs	r2, #0
 8002820:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002824:	2301      	movs	r3, #1
 8002826:	e00f      	b.n	8002848 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	681a      	ldr	r2, [r3, #0]
 800282e:	68bb      	ldr	r3, [r7, #8]
 8002830:	4013      	ands	r3, r2
 8002832:	68ba      	ldr	r2, [r7, #8]
 8002834:	429a      	cmp	r2, r3
 8002836:	bf0c      	ite	eq
 8002838:	2301      	moveq	r3, #1
 800283a:	2300      	movne	r3, #0
 800283c:	b2db      	uxtb	r3, r3
 800283e:	461a      	mov	r2, r3
 8002840:	79fb      	ldrb	r3, [r7, #7]
 8002842:	429a      	cmp	r2, r3
 8002844:	d0b4      	beq.n	80027b0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002846:	2300      	movs	r3, #0
}
 8002848:	4618      	mov	r0, r3
 800284a:	3718      	adds	r7, #24
 800284c:	46bd      	mov	sp, r7
 800284e:	bd80      	pop	{r7, pc}

08002850 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002850:	b480      	push	{r7}
 8002852:	b095      	sub	sp, #84	@ 0x54
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	330c      	adds	r3, #12
 800285e:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002860:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002862:	e853 3f00 	ldrex	r3, [r3]
 8002866:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002868:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800286a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800286e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	330c      	adds	r3, #12
 8002876:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002878:	643a      	str	r2, [r7, #64]	@ 0x40
 800287a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800287c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800287e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002880:	e841 2300 	strex	r3, r2, [r1]
 8002884:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002886:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002888:	2b00      	cmp	r3, #0
 800288a:	d1e5      	bne.n	8002858 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	3314      	adds	r3, #20
 8002892:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002894:	6a3b      	ldr	r3, [r7, #32]
 8002896:	e853 3f00 	ldrex	r3, [r3]
 800289a:	61fb      	str	r3, [r7, #28]
   return(result);
 800289c:	69fb      	ldr	r3, [r7, #28]
 800289e:	f023 0301 	bic.w	r3, r3, #1
 80028a2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	3314      	adds	r3, #20
 80028aa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80028ac:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80028ae:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028b0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80028b2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80028b4:	e841 2300 	strex	r3, r2, [r1]
 80028b8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80028ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d1e5      	bne.n	800288c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028c4:	2b01      	cmp	r3, #1
 80028c6:	d119      	bne.n	80028fc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	330c      	adds	r3, #12
 80028ce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	e853 3f00 	ldrex	r3, [r3]
 80028d6:	60bb      	str	r3, [r7, #8]
   return(result);
 80028d8:	68bb      	ldr	r3, [r7, #8]
 80028da:	f023 0310 	bic.w	r3, r3, #16
 80028de:	647b      	str	r3, [r7, #68]	@ 0x44
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	330c      	adds	r3, #12
 80028e6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80028e8:	61ba      	str	r2, [r7, #24]
 80028ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028ec:	6979      	ldr	r1, [r7, #20]
 80028ee:	69ba      	ldr	r2, [r7, #24]
 80028f0:	e841 2300 	strex	r3, r2, [r1]
 80028f4:	613b      	str	r3, [r7, #16]
   return(result);
 80028f6:	693b      	ldr	r3, [r7, #16]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d1e5      	bne.n	80028c8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2220      	movs	r2, #32
 8002900:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2200      	movs	r2, #0
 8002908:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800290a:	bf00      	nop
 800290c:	3754      	adds	r7, #84	@ 0x54
 800290e:	46bd      	mov	sp, r7
 8002910:	bc80      	pop	{r7}
 8002912:	4770      	bx	lr

08002914 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b084      	sub	sp, #16
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	691b      	ldr	r3, [r3, #16]
 8002922:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	68da      	ldr	r2, [r3, #12]
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	430a      	orrs	r2, r1
 8002930:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	689a      	ldr	r2, [r3, #8]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	691b      	ldr	r3, [r3, #16]
 800293a:	431a      	orrs	r2, r3
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	695b      	ldr	r3, [r3, #20]
 8002940:	4313      	orrs	r3, r2
 8002942:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	68db      	ldr	r3, [r3, #12]
 800294a:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800294e:	f023 030c 	bic.w	r3, r3, #12
 8002952:	687a      	ldr	r2, [r7, #4]
 8002954:	6812      	ldr	r2, [r2, #0]
 8002956:	68b9      	ldr	r1, [r7, #8]
 8002958:	430b      	orrs	r3, r1
 800295a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	695b      	ldr	r3, [r3, #20]
 8002962:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	699a      	ldr	r2, [r3, #24]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	430a      	orrs	r2, r1
 8002970:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4a2c      	ldr	r2, [pc, #176]	@ (8002a28 <UART_SetConfig+0x114>)
 8002978:	4293      	cmp	r3, r2
 800297a:	d103      	bne.n	8002984 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800297c:	f7ff fe02 	bl	8002584 <HAL_RCC_GetPCLK2Freq>
 8002980:	60f8      	str	r0, [r7, #12]
 8002982:	e002      	b.n	800298a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002984:	f7ff fdea 	bl	800255c <HAL_RCC_GetPCLK1Freq>
 8002988:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800298a:	68fa      	ldr	r2, [r7, #12]
 800298c:	4613      	mov	r3, r2
 800298e:	009b      	lsls	r3, r3, #2
 8002990:	4413      	add	r3, r2
 8002992:	009a      	lsls	r2, r3, #2
 8002994:	441a      	add	r2, r3
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	009b      	lsls	r3, r3, #2
 800299c:	fbb2 f3f3 	udiv	r3, r2, r3
 80029a0:	4a22      	ldr	r2, [pc, #136]	@ (8002a2c <UART_SetConfig+0x118>)
 80029a2:	fba2 2303 	umull	r2, r3, r2, r3
 80029a6:	095b      	lsrs	r3, r3, #5
 80029a8:	0119      	lsls	r1, r3, #4
 80029aa:	68fa      	ldr	r2, [r7, #12]
 80029ac:	4613      	mov	r3, r2
 80029ae:	009b      	lsls	r3, r3, #2
 80029b0:	4413      	add	r3, r2
 80029b2:	009a      	lsls	r2, r3, #2
 80029b4:	441a      	add	r2, r3
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	009b      	lsls	r3, r3, #2
 80029bc:	fbb2 f2f3 	udiv	r2, r2, r3
 80029c0:	4b1a      	ldr	r3, [pc, #104]	@ (8002a2c <UART_SetConfig+0x118>)
 80029c2:	fba3 0302 	umull	r0, r3, r3, r2
 80029c6:	095b      	lsrs	r3, r3, #5
 80029c8:	2064      	movs	r0, #100	@ 0x64
 80029ca:	fb00 f303 	mul.w	r3, r0, r3
 80029ce:	1ad3      	subs	r3, r2, r3
 80029d0:	011b      	lsls	r3, r3, #4
 80029d2:	3332      	adds	r3, #50	@ 0x32
 80029d4:	4a15      	ldr	r2, [pc, #84]	@ (8002a2c <UART_SetConfig+0x118>)
 80029d6:	fba2 2303 	umull	r2, r3, r2, r3
 80029da:	095b      	lsrs	r3, r3, #5
 80029dc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80029e0:	4419      	add	r1, r3
 80029e2:	68fa      	ldr	r2, [r7, #12]
 80029e4:	4613      	mov	r3, r2
 80029e6:	009b      	lsls	r3, r3, #2
 80029e8:	4413      	add	r3, r2
 80029ea:	009a      	lsls	r2, r3, #2
 80029ec:	441a      	add	r2, r3
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	009b      	lsls	r3, r3, #2
 80029f4:	fbb2 f2f3 	udiv	r2, r2, r3
 80029f8:	4b0c      	ldr	r3, [pc, #48]	@ (8002a2c <UART_SetConfig+0x118>)
 80029fa:	fba3 0302 	umull	r0, r3, r3, r2
 80029fe:	095b      	lsrs	r3, r3, #5
 8002a00:	2064      	movs	r0, #100	@ 0x64
 8002a02:	fb00 f303 	mul.w	r3, r0, r3
 8002a06:	1ad3      	subs	r3, r2, r3
 8002a08:	011b      	lsls	r3, r3, #4
 8002a0a:	3332      	adds	r3, #50	@ 0x32
 8002a0c:	4a07      	ldr	r2, [pc, #28]	@ (8002a2c <UART_SetConfig+0x118>)
 8002a0e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a12:	095b      	lsrs	r3, r3, #5
 8002a14:	f003 020f 	and.w	r2, r3, #15
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	440a      	add	r2, r1
 8002a1e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002a20:	bf00      	nop
 8002a22:	3710      	adds	r7, #16
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bd80      	pop	{r7, pc}
 8002a28:	40013800 	.word	0x40013800
 8002a2c:	51eb851f 	.word	0x51eb851f

08002a30 <std>:
 8002a30:	2300      	movs	r3, #0
 8002a32:	b510      	push	{r4, lr}
 8002a34:	4604      	mov	r4, r0
 8002a36:	e9c0 3300 	strd	r3, r3, [r0]
 8002a3a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002a3e:	6083      	str	r3, [r0, #8]
 8002a40:	8181      	strh	r1, [r0, #12]
 8002a42:	6643      	str	r3, [r0, #100]	@ 0x64
 8002a44:	81c2      	strh	r2, [r0, #14]
 8002a46:	6183      	str	r3, [r0, #24]
 8002a48:	4619      	mov	r1, r3
 8002a4a:	2208      	movs	r2, #8
 8002a4c:	305c      	adds	r0, #92	@ 0x5c
 8002a4e:	f000 f906 	bl	8002c5e <memset>
 8002a52:	4b0d      	ldr	r3, [pc, #52]	@ (8002a88 <std+0x58>)
 8002a54:	6224      	str	r4, [r4, #32]
 8002a56:	6263      	str	r3, [r4, #36]	@ 0x24
 8002a58:	4b0c      	ldr	r3, [pc, #48]	@ (8002a8c <std+0x5c>)
 8002a5a:	62a3      	str	r3, [r4, #40]	@ 0x28
 8002a5c:	4b0c      	ldr	r3, [pc, #48]	@ (8002a90 <std+0x60>)
 8002a5e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8002a60:	4b0c      	ldr	r3, [pc, #48]	@ (8002a94 <std+0x64>)
 8002a62:	6323      	str	r3, [r4, #48]	@ 0x30
 8002a64:	4b0c      	ldr	r3, [pc, #48]	@ (8002a98 <std+0x68>)
 8002a66:	429c      	cmp	r4, r3
 8002a68:	d006      	beq.n	8002a78 <std+0x48>
 8002a6a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8002a6e:	4294      	cmp	r4, r2
 8002a70:	d002      	beq.n	8002a78 <std+0x48>
 8002a72:	33d0      	adds	r3, #208	@ 0xd0
 8002a74:	429c      	cmp	r4, r3
 8002a76:	d105      	bne.n	8002a84 <std+0x54>
 8002a78:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8002a7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002a80:	f000 b966 	b.w	8002d50 <__retarget_lock_init_recursive>
 8002a84:	bd10      	pop	{r4, pc}
 8002a86:	bf00      	nop
 8002a88:	08002bd9 	.word	0x08002bd9
 8002a8c:	08002bfb 	.word	0x08002bfb
 8002a90:	08002c33 	.word	0x08002c33
 8002a94:	08002c57 	.word	0x08002c57
 8002a98:	2000012c 	.word	0x2000012c

08002a9c <stdio_exit_handler>:
 8002a9c:	4a02      	ldr	r2, [pc, #8]	@ (8002aa8 <stdio_exit_handler+0xc>)
 8002a9e:	4903      	ldr	r1, [pc, #12]	@ (8002aac <stdio_exit_handler+0x10>)
 8002aa0:	4803      	ldr	r0, [pc, #12]	@ (8002ab0 <stdio_exit_handler+0x14>)
 8002aa2:	f000 b869 	b.w	8002b78 <_fwalk_sglue>
 8002aa6:	bf00      	nop
 8002aa8:	2000000c 	.word	0x2000000c
 8002aac:	080035e9 	.word	0x080035e9
 8002ab0:	2000001c 	.word	0x2000001c

08002ab4 <cleanup_stdio>:
 8002ab4:	6841      	ldr	r1, [r0, #4]
 8002ab6:	4b0c      	ldr	r3, [pc, #48]	@ (8002ae8 <cleanup_stdio+0x34>)
 8002ab8:	b510      	push	{r4, lr}
 8002aba:	4299      	cmp	r1, r3
 8002abc:	4604      	mov	r4, r0
 8002abe:	d001      	beq.n	8002ac4 <cleanup_stdio+0x10>
 8002ac0:	f000 fd92 	bl	80035e8 <_fflush_r>
 8002ac4:	68a1      	ldr	r1, [r4, #8]
 8002ac6:	4b09      	ldr	r3, [pc, #36]	@ (8002aec <cleanup_stdio+0x38>)
 8002ac8:	4299      	cmp	r1, r3
 8002aca:	d002      	beq.n	8002ad2 <cleanup_stdio+0x1e>
 8002acc:	4620      	mov	r0, r4
 8002ace:	f000 fd8b 	bl	80035e8 <_fflush_r>
 8002ad2:	68e1      	ldr	r1, [r4, #12]
 8002ad4:	4b06      	ldr	r3, [pc, #24]	@ (8002af0 <cleanup_stdio+0x3c>)
 8002ad6:	4299      	cmp	r1, r3
 8002ad8:	d004      	beq.n	8002ae4 <cleanup_stdio+0x30>
 8002ada:	4620      	mov	r0, r4
 8002adc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002ae0:	f000 bd82 	b.w	80035e8 <_fflush_r>
 8002ae4:	bd10      	pop	{r4, pc}
 8002ae6:	bf00      	nop
 8002ae8:	2000012c 	.word	0x2000012c
 8002aec:	20000194 	.word	0x20000194
 8002af0:	200001fc 	.word	0x200001fc

08002af4 <global_stdio_init.part.0>:
 8002af4:	b510      	push	{r4, lr}
 8002af6:	4b0b      	ldr	r3, [pc, #44]	@ (8002b24 <global_stdio_init.part.0+0x30>)
 8002af8:	4c0b      	ldr	r4, [pc, #44]	@ (8002b28 <global_stdio_init.part.0+0x34>)
 8002afa:	4a0c      	ldr	r2, [pc, #48]	@ (8002b2c <global_stdio_init.part.0+0x38>)
 8002afc:	4620      	mov	r0, r4
 8002afe:	601a      	str	r2, [r3, #0]
 8002b00:	2104      	movs	r1, #4
 8002b02:	2200      	movs	r2, #0
 8002b04:	f7ff ff94 	bl	8002a30 <std>
 8002b08:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8002b0c:	2201      	movs	r2, #1
 8002b0e:	2109      	movs	r1, #9
 8002b10:	f7ff ff8e 	bl	8002a30 <std>
 8002b14:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8002b18:	2202      	movs	r2, #2
 8002b1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002b1e:	2112      	movs	r1, #18
 8002b20:	f7ff bf86 	b.w	8002a30 <std>
 8002b24:	20000264 	.word	0x20000264
 8002b28:	2000012c 	.word	0x2000012c
 8002b2c:	08002a9d 	.word	0x08002a9d

08002b30 <__sfp_lock_acquire>:
 8002b30:	4801      	ldr	r0, [pc, #4]	@ (8002b38 <__sfp_lock_acquire+0x8>)
 8002b32:	f000 b90e 	b.w	8002d52 <__retarget_lock_acquire_recursive>
 8002b36:	bf00      	nop
 8002b38:	2000026d 	.word	0x2000026d

08002b3c <__sfp_lock_release>:
 8002b3c:	4801      	ldr	r0, [pc, #4]	@ (8002b44 <__sfp_lock_release+0x8>)
 8002b3e:	f000 b909 	b.w	8002d54 <__retarget_lock_release_recursive>
 8002b42:	bf00      	nop
 8002b44:	2000026d 	.word	0x2000026d

08002b48 <__sinit>:
 8002b48:	b510      	push	{r4, lr}
 8002b4a:	4604      	mov	r4, r0
 8002b4c:	f7ff fff0 	bl	8002b30 <__sfp_lock_acquire>
 8002b50:	6a23      	ldr	r3, [r4, #32]
 8002b52:	b11b      	cbz	r3, 8002b5c <__sinit+0x14>
 8002b54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002b58:	f7ff bff0 	b.w	8002b3c <__sfp_lock_release>
 8002b5c:	4b04      	ldr	r3, [pc, #16]	@ (8002b70 <__sinit+0x28>)
 8002b5e:	6223      	str	r3, [r4, #32]
 8002b60:	4b04      	ldr	r3, [pc, #16]	@ (8002b74 <__sinit+0x2c>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d1f5      	bne.n	8002b54 <__sinit+0xc>
 8002b68:	f7ff ffc4 	bl	8002af4 <global_stdio_init.part.0>
 8002b6c:	e7f2      	b.n	8002b54 <__sinit+0xc>
 8002b6e:	bf00      	nop
 8002b70:	08002ab5 	.word	0x08002ab5
 8002b74:	20000264 	.word	0x20000264

08002b78 <_fwalk_sglue>:
 8002b78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002b7c:	4607      	mov	r7, r0
 8002b7e:	4688      	mov	r8, r1
 8002b80:	4614      	mov	r4, r2
 8002b82:	2600      	movs	r6, #0
 8002b84:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002b88:	f1b9 0901 	subs.w	r9, r9, #1
 8002b8c:	d505      	bpl.n	8002b9a <_fwalk_sglue+0x22>
 8002b8e:	6824      	ldr	r4, [r4, #0]
 8002b90:	2c00      	cmp	r4, #0
 8002b92:	d1f7      	bne.n	8002b84 <_fwalk_sglue+0xc>
 8002b94:	4630      	mov	r0, r6
 8002b96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002b9a:	89ab      	ldrh	r3, [r5, #12]
 8002b9c:	2b01      	cmp	r3, #1
 8002b9e:	d907      	bls.n	8002bb0 <_fwalk_sglue+0x38>
 8002ba0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002ba4:	3301      	adds	r3, #1
 8002ba6:	d003      	beq.n	8002bb0 <_fwalk_sglue+0x38>
 8002ba8:	4629      	mov	r1, r5
 8002baa:	4638      	mov	r0, r7
 8002bac:	47c0      	blx	r8
 8002bae:	4306      	orrs	r6, r0
 8002bb0:	3568      	adds	r5, #104	@ 0x68
 8002bb2:	e7e9      	b.n	8002b88 <_fwalk_sglue+0x10>

08002bb4 <iprintf>:
 8002bb4:	b40f      	push	{r0, r1, r2, r3}
 8002bb6:	b507      	push	{r0, r1, r2, lr}
 8002bb8:	4906      	ldr	r1, [pc, #24]	@ (8002bd4 <iprintf+0x20>)
 8002bba:	ab04      	add	r3, sp, #16
 8002bbc:	6808      	ldr	r0, [r1, #0]
 8002bbe:	f853 2b04 	ldr.w	r2, [r3], #4
 8002bc2:	6881      	ldr	r1, [r0, #8]
 8002bc4:	9301      	str	r3, [sp, #4]
 8002bc6:	f000 f9e5 	bl	8002f94 <_vfiprintf_r>
 8002bca:	b003      	add	sp, #12
 8002bcc:	f85d eb04 	ldr.w	lr, [sp], #4
 8002bd0:	b004      	add	sp, #16
 8002bd2:	4770      	bx	lr
 8002bd4:	20000018 	.word	0x20000018

08002bd8 <__sread>:
 8002bd8:	b510      	push	{r4, lr}
 8002bda:	460c      	mov	r4, r1
 8002bdc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002be0:	f000 f868 	bl	8002cb4 <_read_r>
 8002be4:	2800      	cmp	r0, #0
 8002be6:	bfab      	itete	ge
 8002be8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8002bea:	89a3      	ldrhlt	r3, [r4, #12]
 8002bec:	181b      	addge	r3, r3, r0
 8002bee:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8002bf2:	bfac      	ite	ge
 8002bf4:	6563      	strge	r3, [r4, #84]	@ 0x54
 8002bf6:	81a3      	strhlt	r3, [r4, #12]
 8002bf8:	bd10      	pop	{r4, pc}

08002bfa <__swrite>:
 8002bfa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002bfe:	461f      	mov	r7, r3
 8002c00:	898b      	ldrh	r3, [r1, #12]
 8002c02:	4605      	mov	r5, r0
 8002c04:	05db      	lsls	r3, r3, #23
 8002c06:	460c      	mov	r4, r1
 8002c08:	4616      	mov	r6, r2
 8002c0a:	d505      	bpl.n	8002c18 <__swrite+0x1e>
 8002c0c:	2302      	movs	r3, #2
 8002c0e:	2200      	movs	r2, #0
 8002c10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002c14:	f000 f83c 	bl	8002c90 <_lseek_r>
 8002c18:	89a3      	ldrh	r3, [r4, #12]
 8002c1a:	4632      	mov	r2, r6
 8002c1c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002c20:	81a3      	strh	r3, [r4, #12]
 8002c22:	4628      	mov	r0, r5
 8002c24:	463b      	mov	r3, r7
 8002c26:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002c2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002c2e:	f000 b853 	b.w	8002cd8 <_write_r>

08002c32 <__sseek>:
 8002c32:	b510      	push	{r4, lr}
 8002c34:	460c      	mov	r4, r1
 8002c36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002c3a:	f000 f829 	bl	8002c90 <_lseek_r>
 8002c3e:	1c43      	adds	r3, r0, #1
 8002c40:	89a3      	ldrh	r3, [r4, #12]
 8002c42:	bf15      	itete	ne
 8002c44:	6560      	strne	r0, [r4, #84]	@ 0x54
 8002c46:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8002c4a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8002c4e:	81a3      	strheq	r3, [r4, #12]
 8002c50:	bf18      	it	ne
 8002c52:	81a3      	strhne	r3, [r4, #12]
 8002c54:	bd10      	pop	{r4, pc}

08002c56 <__sclose>:
 8002c56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002c5a:	f000 b809 	b.w	8002c70 <_close_r>

08002c5e <memset>:
 8002c5e:	4603      	mov	r3, r0
 8002c60:	4402      	add	r2, r0
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d100      	bne.n	8002c68 <memset+0xa>
 8002c66:	4770      	bx	lr
 8002c68:	f803 1b01 	strb.w	r1, [r3], #1
 8002c6c:	e7f9      	b.n	8002c62 <memset+0x4>
	...

08002c70 <_close_r>:
 8002c70:	b538      	push	{r3, r4, r5, lr}
 8002c72:	2300      	movs	r3, #0
 8002c74:	4d05      	ldr	r5, [pc, #20]	@ (8002c8c <_close_r+0x1c>)
 8002c76:	4604      	mov	r4, r0
 8002c78:	4608      	mov	r0, r1
 8002c7a:	602b      	str	r3, [r5, #0]
 8002c7c:	f7fd fc6d 	bl	800055a <_close>
 8002c80:	1c43      	adds	r3, r0, #1
 8002c82:	d102      	bne.n	8002c8a <_close_r+0x1a>
 8002c84:	682b      	ldr	r3, [r5, #0]
 8002c86:	b103      	cbz	r3, 8002c8a <_close_r+0x1a>
 8002c88:	6023      	str	r3, [r4, #0]
 8002c8a:	bd38      	pop	{r3, r4, r5, pc}
 8002c8c:	20000268 	.word	0x20000268

08002c90 <_lseek_r>:
 8002c90:	b538      	push	{r3, r4, r5, lr}
 8002c92:	4604      	mov	r4, r0
 8002c94:	4608      	mov	r0, r1
 8002c96:	4611      	mov	r1, r2
 8002c98:	2200      	movs	r2, #0
 8002c9a:	4d05      	ldr	r5, [pc, #20]	@ (8002cb0 <_lseek_r+0x20>)
 8002c9c:	602a      	str	r2, [r5, #0]
 8002c9e:	461a      	mov	r2, r3
 8002ca0:	f7fd fc7f 	bl	80005a2 <_lseek>
 8002ca4:	1c43      	adds	r3, r0, #1
 8002ca6:	d102      	bne.n	8002cae <_lseek_r+0x1e>
 8002ca8:	682b      	ldr	r3, [r5, #0]
 8002caa:	b103      	cbz	r3, 8002cae <_lseek_r+0x1e>
 8002cac:	6023      	str	r3, [r4, #0]
 8002cae:	bd38      	pop	{r3, r4, r5, pc}
 8002cb0:	20000268 	.word	0x20000268

08002cb4 <_read_r>:
 8002cb4:	b538      	push	{r3, r4, r5, lr}
 8002cb6:	4604      	mov	r4, r0
 8002cb8:	4608      	mov	r0, r1
 8002cba:	4611      	mov	r1, r2
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	4d05      	ldr	r5, [pc, #20]	@ (8002cd4 <_read_r+0x20>)
 8002cc0:	602a      	str	r2, [r5, #0]
 8002cc2:	461a      	mov	r2, r3
 8002cc4:	f7fd fc10 	bl	80004e8 <_read>
 8002cc8:	1c43      	adds	r3, r0, #1
 8002cca:	d102      	bne.n	8002cd2 <_read_r+0x1e>
 8002ccc:	682b      	ldr	r3, [r5, #0]
 8002cce:	b103      	cbz	r3, 8002cd2 <_read_r+0x1e>
 8002cd0:	6023      	str	r3, [r4, #0]
 8002cd2:	bd38      	pop	{r3, r4, r5, pc}
 8002cd4:	20000268 	.word	0x20000268

08002cd8 <_write_r>:
 8002cd8:	b538      	push	{r3, r4, r5, lr}
 8002cda:	4604      	mov	r4, r0
 8002cdc:	4608      	mov	r0, r1
 8002cde:	4611      	mov	r1, r2
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	4d05      	ldr	r5, [pc, #20]	@ (8002cf8 <_write_r+0x20>)
 8002ce4:	602a      	str	r2, [r5, #0]
 8002ce6:	461a      	mov	r2, r3
 8002ce8:	f7fd fc1b 	bl	8000522 <_write>
 8002cec:	1c43      	adds	r3, r0, #1
 8002cee:	d102      	bne.n	8002cf6 <_write_r+0x1e>
 8002cf0:	682b      	ldr	r3, [r5, #0]
 8002cf2:	b103      	cbz	r3, 8002cf6 <_write_r+0x1e>
 8002cf4:	6023      	str	r3, [r4, #0]
 8002cf6:	bd38      	pop	{r3, r4, r5, pc}
 8002cf8:	20000268 	.word	0x20000268

08002cfc <__errno>:
 8002cfc:	4b01      	ldr	r3, [pc, #4]	@ (8002d04 <__errno+0x8>)
 8002cfe:	6818      	ldr	r0, [r3, #0]
 8002d00:	4770      	bx	lr
 8002d02:	bf00      	nop
 8002d04:	20000018 	.word	0x20000018

08002d08 <__libc_init_array>:
 8002d08:	b570      	push	{r4, r5, r6, lr}
 8002d0a:	2600      	movs	r6, #0
 8002d0c:	4d0c      	ldr	r5, [pc, #48]	@ (8002d40 <__libc_init_array+0x38>)
 8002d0e:	4c0d      	ldr	r4, [pc, #52]	@ (8002d44 <__libc_init_array+0x3c>)
 8002d10:	1b64      	subs	r4, r4, r5
 8002d12:	10a4      	asrs	r4, r4, #2
 8002d14:	42a6      	cmp	r6, r4
 8002d16:	d109      	bne.n	8002d2c <__libc_init_array+0x24>
 8002d18:	f000 fdc4 	bl	80038a4 <_init>
 8002d1c:	2600      	movs	r6, #0
 8002d1e:	4d0a      	ldr	r5, [pc, #40]	@ (8002d48 <__libc_init_array+0x40>)
 8002d20:	4c0a      	ldr	r4, [pc, #40]	@ (8002d4c <__libc_init_array+0x44>)
 8002d22:	1b64      	subs	r4, r4, r5
 8002d24:	10a4      	asrs	r4, r4, #2
 8002d26:	42a6      	cmp	r6, r4
 8002d28:	d105      	bne.n	8002d36 <__libc_init_array+0x2e>
 8002d2a:	bd70      	pop	{r4, r5, r6, pc}
 8002d2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d30:	4798      	blx	r3
 8002d32:	3601      	adds	r6, #1
 8002d34:	e7ee      	b.n	8002d14 <__libc_init_array+0xc>
 8002d36:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d3a:	4798      	blx	r3
 8002d3c:	3601      	adds	r6, #1
 8002d3e:	e7f2      	b.n	8002d26 <__libc_init_array+0x1e>
 8002d40:	08003938 	.word	0x08003938
 8002d44:	08003938 	.word	0x08003938
 8002d48:	08003938 	.word	0x08003938
 8002d4c:	0800393c 	.word	0x0800393c

08002d50 <__retarget_lock_init_recursive>:
 8002d50:	4770      	bx	lr

08002d52 <__retarget_lock_acquire_recursive>:
 8002d52:	4770      	bx	lr

08002d54 <__retarget_lock_release_recursive>:
 8002d54:	4770      	bx	lr
	...

08002d58 <_free_r>:
 8002d58:	b538      	push	{r3, r4, r5, lr}
 8002d5a:	4605      	mov	r5, r0
 8002d5c:	2900      	cmp	r1, #0
 8002d5e:	d040      	beq.n	8002de2 <_free_r+0x8a>
 8002d60:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002d64:	1f0c      	subs	r4, r1, #4
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	bfb8      	it	lt
 8002d6a:	18e4      	addlt	r4, r4, r3
 8002d6c:	f000 f8de 	bl	8002f2c <__malloc_lock>
 8002d70:	4a1c      	ldr	r2, [pc, #112]	@ (8002de4 <_free_r+0x8c>)
 8002d72:	6813      	ldr	r3, [r2, #0]
 8002d74:	b933      	cbnz	r3, 8002d84 <_free_r+0x2c>
 8002d76:	6063      	str	r3, [r4, #4]
 8002d78:	6014      	str	r4, [r2, #0]
 8002d7a:	4628      	mov	r0, r5
 8002d7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002d80:	f000 b8da 	b.w	8002f38 <__malloc_unlock>
 8002d84:	42a3      	cmp	r3, r4
 8002d86:	d908      	bls.n	8002d9a <_free_r+0x42>
 8002d88:	6820      	ldr	r0, [r4, #0]
 8002d8a:	1821      	adds	r1, r4, r0
 8002d8c:	428b      	cmp	r3, r1
 8002d8e:	bf01      	itttt	eq
 8002d90:	6819      	ldreq	r1, [r3, #0]
 8002d92:	685b      	ldreq	r3, [r3, #4]
 8002d94:	1809      	addeq	r1, r1, r0
 8002d96:	6021      	streq	r1, [r4, #0]
 8002d98:	e7ed      	b.n	8002d76 <_free_r+0x1e>
 8002d9a:	461a      	mov	r2, r3
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	b10b      	cbz	r3, 8002da4 <_free_r+0x4c>
 8002da0:	42a3      	cmp	r3, r4
 8002da2:	d9fa      	bls.n	8002d9a <_free_r+0x42>
 8002da4:	6811      	ldr	r1, [r2, #0]
 8002da6:	1850      	adds	r0, r2, r1
 8002da8:	42a0      	cmp	r0, r4
 8002daa:	d10b      	bne.n	8002dc4 <_free_r+0x6c>
 8002dac:	6820      	ldr	r0, [r4, #0]
 8002dae:	4401      	add	r1, r0
 8002db0:	1850      	adds	r0, r2, r1
 8002db2:	4283      	cmp	r3, r0
 8002db4:	6011      	str	r1, [r2, #0]
 8002db6:	d1e0      	bne.n	8002d7a <_free_r+0x22>
 8002db8:	6818      	ldr	r0, [r3, #0]
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	4408      	add	r0, r1
 8002dbe:	6010      	str	r0, [r2, #0]
 8002dc0:	6053      	str	r3, [r2, #4]
 8002dc2:	e7da      	b.n	8002d7a <_free_r+0x22>
 8002dc4:	d902      	bls.n	8002dcc <_free_r+0x74>
 8002dc6:	230c      	movs	r3, #12
 8002dc8:	602b      	str	r3, [r5, #0]
 8002dca:	e7d6      	b.n	8002d7a <_free_r+0x22>
 8002dcc:	6820      	ldr	r0, [r4, #0]
 8002dce:	1821      	adds	r1, r4, r0
 8002dd0:	428b      	cmp	r3, r1
 8002dd2:	bf01      	itttt	eq
 8002dd4:	6819      	ldreq	r1, [r3, #0]
 8002dd6:	685b      	ldreq	r3, [r3, #4]
 8002dd8:	1809      	addeq	r1, r1, r0
 8002dda:	6021      	streq	r1, [r4, #0]
 8002ddc:	6063      	str	r3, [r4, #4]
 8002dde:	6054      	str	r4, [r2, #4]
 8002de0:	e7cb      	b.n	8002d7a <_free_r+0x22>
 8002de2:	bd38      	pop	{r3, r4, r5, pc}
 8002de4:	20000274 	.word	0x20000274

08002de8 <sbrk_aligned>:
 8002de8:	b570      	push	{r4, r5, r6, lr}
 8002dea:	4e0f      	ldr	r6, [pc, #60]	@ (8002e28 <sbrk_aligned+0x40>)
 8002dec:	460c      	mov	r4, r1
 8002dee:	6831      	ldr	r1, [r6, #0]
 8002df0:	4605      	mov	r5, r0
 8002df2:	b911      	cbnz	r1, 8002dfa <sbrk_aligned+0x12>
 8002df4:	f000 fcb4 	bl	8003760 <_sbrk_r>
 8002df8:	6030      	str	r0, [r6, #0]
 8002dfa:	4621      	mov	r1, r4
 8002dfc:	4628      	mov	r0, r5
 8002dfe:	f000 fcaf 	bl	8003760 <_sbrk_r>
 8002e02:	1c43      	adds	r3, r0, #1
 8002e04:	d103      	bne.n	8002e0e <sbrk_aligned+0x26>
 8002e06:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8002e0a:	4620      	mov	r0, r4
 8002e0c:	bd70      	pop	{r4, r5, r6, pc}
 8002e0e:	1cc4      	adds	r4, r0, #3
 8002e10:	f024 0403 	bic.w	r4, r4, #3
 8002e14:	42a0      	cmp	r0, r4
 8002e16:	d0f8      	beq.n	8002e0a <sbrk_aligned+0x22>
 8002e18:	1a21      	subs	r1, r4, r0
 8002e1a:	4628      	mov	r0, r5
 8002e1c:	f000 fca0 	bl	8003760 <_sbrk_r>
 8002e20:	3001      	adds	r0, #1
 8002e22:	d1f2      	bne.n	8002e0a <sbrk_aligned+0x22>
 8002e24:	e7ef      	b.n	8002e06 <sbrk_aligned+0x1e>
 8002e26:	bf00      	nop
 8002e28:	20000270 	.word	0x20000270

08002e2c <_malloc_r>:
 8002e2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002e30:	1ccd      	adds	r5, r1, #3
 8002e32:	f025 0503 	bic.w	r5, r5, #3
 8002e36:	3508      	adds	r5, #8
 8002e38:	2d0c      	cmp	r5, #12
 8002e3a:	bf38      	it	cc
 8002e3c:	250c      	movcc	r5, #12
 8002e3e:	2d00      	cmp	r5, #0
 8002e40:	4606      	mov	r6, r0
 8002e42:	db01      	blt.n	8002e48 <_malloc_r+0x1c>
 8002e44:	42a9      	cmp	r1, r5
 8002e46:	d904      	bls.n	8002e52 <_malloc_r+0x26>
 8002e48:	230c      	movs	r3, #12
 8002e4a:	6033      	str	r3, [r6, #0]
 8002e4c:	2000      	movs	r0, #0
 8002e4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002e52:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002f28 <_malloc_r+0xfc>
 8002e56:	f000 f869 	bl	8002f2c <__malloc_lock>
 8002e5a:	f8d8 3000 	ldr.w	r3, [r8]
 8002e5e:	461c      	mov	r4, r3
 8002e60:	bb44      	cbnz	r4, 8002eb4 <_malloc_r+0x88>
 8002e62:	4629      	mov	r1, r5
 8002e64:	4630      	mov	r0, r6
 8002e66:	f7ff ffbf 	bl	8002de8 <sbrk_aligned>
 8002e6a:	1c43      	adds	r3, r0, #1
 8002e6c:	4604      	mov	r4, r0
 8002e6e:	d158      	bne.n	8002f22 <_malloc_r+0xf6>
 8002e70:	f8d8 4000 	ldr.w	r4, [r8]
 8002e74:	4627      	mov	r7, r4
 8002e76:	2f00      	cmp	r7, #0
 8002e78:	d143      	bne.n	8002f02 <_malloc_r+0xd6>
 8002e7a:	2c00      	cmp	r4, #0
 8002e7c:	d04b      	beq.n	8002f16 <_malloc_r+0xea>
 8002e7e:	6823      	ldr	r3, [r4, #0]
 8002e80:	4639      	mov	r1, r7
 8002e82:	4630      	mov	r0, r6
 8002e84:	eb04 0903 	add.w	r9, r4, r3
 8002e88:	f000 fc6a 	bl	8003760 <_sbrk_r>
 8002e8c:	4581      	cmp	r9, r0
 8002e8e:	d142      	bne.n	8002f16 <_malloc_r+0xea>
 8002e90:	6821      	ldr	r1, [r4, #0]
 8002e92:	4630      	mov	r0, r6
 8002e94:	1a6d      	subs	r5, r5, r1
 8002e96:	4629      	mov	r1, r5
 8002e98:	f7ff ffa6 	bl	8002de8 <sbrk_aligned>
 8002e9c:	3001      	adds	r0, #1
 8002e9e:	d03a      	beq.n	8002f16 <_malloc_r+0xea>
 8002ea0:	6823      	ldr	r3, [r4, #0]
 8002ea2:	442b      	add	r3, r5
 8002ea4:	6023      	str	r3, [r4, #0]
 8002ea6:	f8d8 3000 	ldr.w	r3, [r8]
 8002eaa:	685a      	ldr	r2, [r3, #4]
 8002eac:	bb62      	cbnz	r2, 8002f08 <_malloc_r+0xdc>
 8002eae:	f8c8 7000 	str.w	r7, [r8]
 8002eb2:	e00f      	b.n	8002ed4 <_malloc_r+0xa8>
 8002eb4:	6822      	ldr	r2, [r4, #0]
 8002eb6:	1b52      	subs	r2, r2, r5
 8002eb8:	d420      	bmi.n	8002efc <_malloc_r+0xd0>
 8002eba:	2a0b      	cmp	r2, #11
 8002ebc:	d917      	bls.n	8002eee <_malloc_r+0xc2>
 8002ebe:	1961      	adds	r1, r4, r5
 8002ec0:	42a3      	cmp	r3, r4
 8002ec2:	6025      	str	r5, [r4, #0]
 8002ec4:	bf18      	it	ne
 8002ec6:	6059      	strne	r1, [r3, #4]
 8002ec8:	6863      	ldr	r3, [r4, #4]
 8002eca:	bf08      	it	eq
 8002ecc:	f8c8 1000 	streq.w	r1, [r8]
 8002ed0:	5162      	str	r2, [r4, r5]
 8002ed2:	604b      	str	r3, [r1, #4]
 8002ed4:	4630      	mov	r0, r6
 8002ed6:	f000 f82f 	bl	8002f38 <__malloc_unlock>
 8002eda:	f104 000b 	add.w	r0, r4, #11
 8002ede:	1d23      	adds	r3, r4, #4
 8002ee0:	f020 0007 	bic.w	r0, r0, #7
 8002ee4:	1ac2      	subs	r2, r0, r3
 8002ee6:	bf1c      	itt	ne
 8002ee8:	1a1b      	subne	r3, r3, r0
 8002eea:	50a3      	strne	r3, [r4, r2]
 8002eec:	e7af      	b.n	8002e4e <_malloc_r+0x22>
 8002eee:	6862      	ldr	r2, [r4, #4]
 8002ef0:	42a3      	cmp	r3, r4
 8002ef2:	bf0c      	ite	eq
 8002ef4:	f8c8 2000 	streq.w	r2, [r8]
 8002ef8:	605a      	strne	r2, [r3, #4]
 8002efa:	e7eb      	b.n	8002ed4 <_malloc_r+0xa8>
 8002efc:	4623      	mov	r3, r4
 8002efe:	6864      	ldr	r4, [r4, #4]
 8002f00:	e7ae      	b.n	8002e60 <_malloc_r+0x34>
 8002f02:	463c      	mov	r4, r7
 8002f04:	687f      	ldr	r7, [r7, #4]
 8002f06:	e7b6      	b.n	8002e76 <_malloc_r+0x4a>
 8002f08:	461a      	mov	r2, r3
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	42a3      	cmp	r3, r4
 8002f0e:	d1fb      	bne.n	8002f08 <_malloc_r+0xdc>
 8002f10:	2300      	movs	r3, #0
 8002f12:	6053      	str	r3, [r2, #4]
 8002f14:	e7de      	b.n	8002ed4 <_malloc_r+0xa8>
 8002f16:	230c      	movs	r3, #12
 8002f18:	4630      	mov	r0, r6
 8002f1a:	6033      	str	r3, [r6, #0]
 8002f1c:	f000 f80c 	bl	8002f38 <__malloc_unlock>
 8002f20:	e794      	b.n	8002e4c <_malloc_r+0x20>
 8002f22:	6005      	str	r5, [r0, #0]
 8002f24:	e7d6      	b.n	8002ed4 <_malloc_r+0xa8>
 8002f26:	bf00      	nop
 8002f28:	20000274 	.word	0x20000274

08002f2c <__malloc_lock>:
 8002f2c:	4801      	ldr	r0, [pc, #4]	@ (8002f34 <__malloc_lock+0x8>)
 8002f2e:	f7ff bf10 	b.w	8002d52 <__retarget_lock_acquire_recursive>
 8002f32:	bf00      	nop
 8002f34:	2000026c 	.word	0x2000026c

08002f38 <__malloc_unlock>:
 8002f38:	4801      	ldr	r0, [pc, #4]	@ (8002f40 <__malloc_unlock+0x8>)
 8002f3a:	f7ff bf0b 	b.w	8002d54 <__retarget_lock_release_recursive>
 8002f3e:	bf00      	nop
 8002f40:	2000026c 	.word	0x2000026c

08002f44 <__sfputc_r>:
 8002f44:	6893      	ldr	r3, [r2, #8]
 8002f46:	b410      	push	{r4}
 8002f48:	3b01      	subs	r3, #1
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	6093      	str	r3, [r2, #8]
 8002f4e:	da07      	bge.n	8002f60 <__sfputc_r+0x1c>
 8002f50:	6994      	ldr	r4, [r2, #24]
 8002f52:	42a3      	cmp	r3, r4
 8002f54:	db01      	blt.n	8002f5a <__sfputc_r+0x16>
 8002f56:	290a      	cmp	r1, #10
 8002f58:	d102      	bne.n	8002f60 <__sfputc_r+0x1c>
 8002f5a:	bc10      	pop	{r4}
 8002f5c:	f000 bb6c 	b.w	8003638 <__swbuf_r>
 8002f60:	6813      	ldr	r3, [r2, #0]
 8002f62:	1c58      	adds	r0, r3, #1
 8002f64:	6010      	str	r0, [r2, #0]
 8002f66:	7019      	strb	r1, [r3, #0]
 8002f68:	4608      	mov	r0, r1
 8002f6a:	bc10      	pop	{r4}
 8002f6c:	4770      	bx	lr

08002f6e <__sfputs_r>:
 8002f6e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f70:	4606      	mov	r6, r0
 8002f72:	460f      	mov	r7, r1
 8002f74:	4614      	mov	r4, r2
 8002f76:	18d5      	adds	r5, r2, r3
 8002f78:	42ac      	cmp	r4, r5
 8002f7a:	d101      	bne.n	8002f80 <__sfputs_r+0x12>
 8002f7c:	2000      	movs	r0, #0
 8002f7e:	e007      	b.n	8002f90 <__sfputs_r+0x22>
 8002f80:	463a      	mov	r2, r7
 8002f82:	4630      	mov	r0, r6
 8002f84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002f88:	f7ff ffdc 	bl	8002f44 <__sfputc_r>
 8002f8c:	1c43      	adds	r3, r0, #1
 8002f8e:	d1f3      	bne.n	8002f78 <__sfputs_r+0xa>
 8002f90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002f94 <_vfiprintf_r>:
 8002f94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f98:	460d      	mov	r5, r1
 8002f9a:	4614      	mov	r4, r2
 8002f9c:	4698      	mov	r8, r3
 8002f9e:	4606      	mov	r6, r0
 8002fa0:	b09d      	sub	sp, #116	@ 0x74
 8002fa2:	b118      	cbz	r0, 8002fac <_vfiprintf_r+0x18>
 8002fa4:	6a03      	ldr	r3, [r0, #32]
 8002fa6:	b90b      	cbnz	r3, 8002fac <_vfiprintf_r+0x18>
 8002fa8:	f7ff fdce 	bl	8002b48 <__sinit>
 8002fac:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002fae:	07d9      	lsls	r1, r3, #31
 8002fb0:	d405      	bmi.n	8002fbe <_vfiprintf_r+0x2a>
 8002fb2:	89ab      	ldrh	r3, [r5, #12]
 8002fb4:	059a      	lsls	r2, r3, #22
 8002fb6:	d402      	bmi.n	8002fbe <_vfiprintf_r+0x2a>
 8002fb8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002fba:	f7ff feca 	bl	8002d52 <__retarget_lock_acquire_recursive>
 8002fbe:	89ab      	ldrh	r3, [r5, #12]
 8002fc0:	071b      	lsls	r3, r3, #28
 8002fc2:	d501      	bpl.n	8002fc8 <_vfiprintf_r+0x34>
 8002fc4:	692b      	ldr	r3, [r5, #16]
 8002fc6:	b99b      	cbnz	r3, 8002ff0 <_vfiprintf_r+0x5c>
 8002fc8:	4629      	mov	r1, r5
 8002fca:	4630      	mov	r0, r6
 8002fcc:	f000 fb72 	bl	80036b4 <__swsetup_r>
 8002fd0:	b170      	cbz	r0, 8002ff0 <_vfiprintf_r+0x5c>
 8002fd2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002fd4:	07dc      	lsls	r4, r3, #31
 8002fd6:	d504      	bpl.n	8002fe2 <_vfiprintf_r+0x4e>
 8002fd8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002fdc:	b01d      	add	sp, #116	@ 0x74
 8002fde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002fe2:	89ab      	ldrh	r3, [r5, #12]
 8002fe4:	0598      	lsls	r0, r3, #22
 8002fe6:	d4f7      	bmi.n	8002fd8 <_vfiprintf_r+0x44>
 8002fe8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002fea:	f7ff feb3 	bl	8002d54 <__retarget_lock_release_recursive>
 8002fee:	e7f3      	b.n	8002fd8 <_vfiprintf_r+0x44>
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	9309      	str	r3, [sp, #36]	@ 0x24
 8002ff4:	2320      	movs	r3, #32
 8002ff6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8002ffa:	2330      	movs	r3, #48	@ 0x30
 8002ffc:	f04f 0901 	mov.w	r9, #1
 8003000:	f8cd 800c 	str.w	r8, [sp, #12]
 8003004:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 80031b0 <_vfiprintf_r+0x21c>
 8003008:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800300c:	4623      	mov	r3, r4
 800300e:	469a      	mov	sl, r3
 8003010:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003014:	b10a      	cbz	r2, 800301a <_vfiprintf_r+0x86>
 8003016:	2a25      	cmp	r2, #37	@ 0x25
 8003018:	d1f9      	bne.n	800300e <_vfiprintf_r+0x7a>
 800301a:	ebba 0b04 	subs.w	fp, sl, r4
 800301e:	d00b      	beq.n	8003038 <_vfiprintf_r+0xa4>
 8003020:	465b      	mov	r3, fp
 8003022:	4622      	mov	r2, r4
 8003024:	4629      	mov	r1, r5
 8003026:	4630      	mov	r0, r6
 8003028:	f7ff ffa1 	bl	8002f6e <__sfputs_r>
 800302c:	3001      	adds	r0, #1
 800302e:	f000 80a7 	beq.w	8003180 <_vfiprintf_r+0x1ec>
 8003032:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003034:	445a      	add	r2, fp
 8003036:	9209      	str	r2, [sp, #36]	@ 0x24
 8003038:	f89a 3000 	ldrb.w	r3, [sl]
 800303c:	2b00      	cmp	r3, #0
 800303e:	f000 809f 	beq.w	8003180 <_vfiprintf_r+0x1ec>
 8003042:	2300      	movs	r3, #0
 8003044:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003048:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800304c:	f10a 0a01 	add.w	sl, sl, #1
 8003050:	9304      	str	r3, [sp, #16]
 8003052:	9307      	str	r3, [sp, #28]
 8003054:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003058:	931a      	str	r3, [sp, #104]	@ 0x68
 800305a:	4654      	mov	r4, sl
 800305c:	2205      	movs	r2, #5
 800305e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003062:	4853      	ldr	r0, [pc, #332]	@ (80031b0 <_vfiprintf_r+0x21c>)
 8003064:	f000 fb8c 	bl	8003780 <memchr>
 8003068:	9a04      	ldr	r2, [sp, #16]
 800306a:	b9d8      	cbnz	r0, 80030a4 <_vfiprintf_r+0x110>
 800306c:	06d1      	lsls	r1, r2, #27
 800306e:	bf44      	itt	mi
 8003070:	2320      	movmi	r3, #32
 8003072:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003076:	0713      	lsls	r3, r2, #28
 8003078:	bf44      	itt	mi
 800307a:	232b      	movmi	r3, #43	@ 0x2b
 800307c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003080:	f89a 3000 	ldrb.w	r3, [sl]
 8003084:	2b2a      	cmp	r3, #42	@ 0x2a
 8003086:	d015      	beq.n	80030b4 <_vfiprintf_r+0x120>
 8003088:	4654      	mov	r4, sl
 800308a:	2000      	movs	r0, #0
 800308c:	f04f 0c0a 	mov.w	ip, #10
 8003090:	9a07      	ldr	r2, [sp, #28]
 8003092:	4621      	mov	r1, r4
 8003094:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003098:	3b30      	subs	r3, #48	@ 0x30
 800309a:	2b09      	cmp	r3, #9
 800309c:	d94b      	bls.n	8003136 <_vfiprintf_r+0x1a2>
 800309e:	b1b0      	cbz	r0, 80030ce <_vfiprintf_r+0x13a>
 80030a0:	9207      	str	r2, [sp, #28]
 80030a2:	e014      	b.n	80030ce <_vfiprintf_r+0x13a>
 80030a4:	eba0 0308 	sub.w	r3, r0, r8
 80030a8:	fa09 f303 	lsl.w	r3, r9, r3
 80030ac:	4313      	orrs	r3, r2
 80030ae:	46a2      	mov	sl, r4
 80030b0:	9304      	str	r3, [sp, #16]
 80030b2:	e7d2      	b.n	800305a <_vfiprintf_r+0xc6>
 80030b4:	9b03      	ldr	r3, [sp, #12]
 80030b6:	1d19      	adds	r1, r3, #4
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	9103      	str	r1, [sp, #12]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	bfbb      	ittet	lt
 80030c0:	425b      	neglt	r3, r3
 80030c2:	f042 0202 	orrlt.w	r2, r2, #2
 80030c6:	9307      	strge	r3, [sp, #28]
 80030c8:	9307      	strlt	r3, [sp, #28]
 80030ca:	bfb8      	it	lt
 80030cc:	9204      	strlt	r2, [sp, #16]
 80030ce:	7823      	ldrb	r3, [r4, #0]
 80030d0:	2b2e      	cmp	r3, #46	@ 0x2e
 80030d2:	d10a      	bne.n	80030ea <_vfiprintf_r+0x156>
 80030d4:	7863      	ldrb	r3, [r4, #1]
 80030d6:	2b2a      	cmp	r3, #42	@ 0x2a
 80030d8:	d132      	bne.n	8003140 <_vfiprintf_r+0x1ac>
 80030da:	9b03      	ldr	r3, [sp, #12]
 80030dc:	3402      	adds	r4, #2
 80030de:	1d1a      	adds	r2, r3, #4
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	9203      	str	r2, [sp, #12]
 80030e4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80030e8:	9305      	str	r3, [sp, #20]
 80030ea:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 80031b4 <_vfiprintf_r+0x220>
 80030ee:	2203      	movs	r2, #3
 80030f0:	4650      	mov	r0, sl
 80030f2:	7821      	ldrb	r1, [r4, #0]
 80030f4:	f000 fb44 	bl	8003780 <memchr>
 80030f8:	b138      	cbz	r0, 800310a <_vfiprintf_r+0x176>
 80030fa:	2240      	movs	r2, #64	@ 0x40
 80030fc:	9b04      	ldr	r3, [sp, #16]
 80030fe:	eba0 000a 	sub.w	r0, r0, sl
 8003102:	4082      	lsls	r2, r0
 8003104:	4313      	orrs	r3, r2
 8003106:	3401      	adds	r4, #1
 8003108:	9304      	str	r3, [sp, #16]
 800310a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800310e:	2206      	movs	r2, #6
 8003110:	4829      	ldr	r0, [pc, #164]	@ (80031b8 <_vfiprintf_r+0x224>)
 8003112:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003116:	f000 fb33 	bl	8003780 <memchr>
 800311a:	2800      	cmp	r0, #0
 800311c:	d03f      	beq.n	800319e <_vfiprintf_r+0x20a>
 800311e:	4b27      	ldr	r3, [pc, #156]	@ (80031bc <_vfiprintf_r+0x228>)
 8003120:	bb1b      	cbnz	r3, 800316a <_vfiprintf_r+0x1d6>
 8003122:	9b03      	ldr	r3, [sp, #12]
 8003124:	3307      	adds	r3, #7
 8003126:	f023 0307 	bic.w	r3, r3, #7
 800312a:	3308      	adds	r3, #8
 800312c:	9303      	str	r3, [sp, #12]
 800312e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003130:	443b      	add	r3, r7
 8003132:	9309      	str	r3, [sp, #36]	@ 0x24
 8003134:	e76a      	b.n	800300c <_vfiprintf_r+0x78>
 8003136:	460c      	mov	r4, r1
 8003138:	2001      	movs	r0, #1
 800313a:	fb0c 3202 	mla	r2, ip, r2, r3
 800313e:	e7a8      	b.n	8003092 <_vfiprintf_r+0xfe>
 8003140:	2300      	movs	r3, #0
 8003142:	f04f 0c0a 	mov.w	ip, #10
 8003146:	4619      	mov	r1, r3
 8003148:	3401      	adds	r4, #1
 800314a:	9305      	str	r3, [sp, #20]
 800314c:	4620      	mov	r0, r4
 800314e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003152:	3a30      	subs	r2, #48	@ 0x30
 8003154:	2a09      	cmp	r2, #9
 8003156:	d903      	bls.n	8003160 <_vfiprintf_r+0x1cc>
 8003158:	2b00      	cmp	r3, #0
 800315a:	d0c6      	beq.n	80030ea <_vfiprintf_r+0x156>
 800315c:	9105      	str	r1, [sp, #20]
 800315e:	e7c4      	b.n	80030ea <_vfiprintf_r+0x156>
 8003160:	4604      	mov	r4, r0
 8003162:	2301      	movs	r3, #1
 8003164:	fb0c 2101 	mla	r1, ip, r1, r2
 8003168:	e7f0      	b.n	800314c <_vfiprintf_r+0x1b8>
 800316a:	ab03      	add	r3, sp, #12
 800316c:	9300      	str	r3, [sp, #0]
 800316e:	462a      	mov	r2, r5
 8003170:	4630      	mov	r0, r6
 8003172:	4b13      	ldr	r3, [pc, #76]	@ (80031c0 <_vfiprintf_r+0x22c>)
 8003174:	a904      	add	r1, sp, #16
 8003176:	f3af 8000 	nop.w
 800317a:	4607      	mov	r7, r0
 800317c:	1c78      	adds	r0, r7, #1
 800317e:	d1d6      	bne.n	800312e <_vfiprintf_r+0x19a>
 8003180:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003182:	07d9      	lsls	r1, r3, #31
 8003184:	d405      	bmi.n	8003192 <_vfiprintf_r+0x1fe>
 8003186:	89ab      	ldrh	r3, [r5, #12]
 8003188:	059a      	lsls	r2, r3, #22
 800318a:	d402      	bmi.n	8003192 <_vfiprintf_r+0x1fe>
 800318c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800318e:	f7ff fde1 	bl	8002d54 <__retarget_lock_release_recursive>
 8003192:	89ab      	ldrh	r3, [r5, #12]
 8003194:	065b      	lsls	r3, r3, #25
 8003196:	f53f af1f 	bmi.w	8002fd8 <_vfiprintf_r+0x44>
 800319a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800319c:	e71e      	b.n	8002fdc <_vfiprintf_r+0x48>
 800319e:	ab03      	add	r3, sp, #12
 80031a0:	9300      	str	r3, [sp, #0]
 80031a2:	462a      	mov	r2, r5
 80031a4:	4630      	mov	r0, r6
 80031a6:	4b06      	ldr	r3, [pc, #24]	@ (80031c0 <_vfiprintf_r+0x22c>)
 80031a8:	a904      	add	r1, sp, #16
 80031aa:	f000 f87d 	bl	80032a8 <_printf_i>
 80031ae:	e7e4      	b.n	800317a <_vfiprintf_r+0x1e6>
 80031b0:	08003902 	.word	0x08003902
 80031b4:	08003908 	.word	0x08003908
 80031b8:	0800390c 	.word	0x0800390c
 80031bc:	00000000 	.word	0x00000000
 80031c0:	08002f6f 	.word	0x08002f6f

080031c4 <_printf_common>:
 80031c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80031c8:	4616      	mov	r6, r2
 80031ca:	4698      	mov	r8, r3
 80031cc:	688a      	ldr	r2, [r1, #8]
 80031ce:	690b      	ldr	r3, [r1, #16]
 80031d0:	4607      	mov	r7, r0
 80031d2:	4293      	cmp	r3, r2
 80031d4:	bfb8      	it	lt
 80031d6:	4613      	movlt	r3, r2
 80031d8:	6033      	str	r3, [r6, #0]
 80031da:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80031de:	460c      	mov	r4, r1
 80031e0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80031e4:	b10a      	cbz	r2, 80031ea <_printf_common+0x26>
 80031e6:	3301      	adds	r3, #1
 80031e8:	6033      	str	r3, [r6, #0]
 80031ea:	6823      	ldr	r3, [r4, #0]
 80031ec:	0699      	lsls	r1, r3, #26
 80031ee:	bf42      	ittt	mi
 80031f0:	6833      	ldrmi	r3, [r6, #0]
 80031f2:	3302      	addmi	r3, #2
 80031f4:	6033      	strmi	r3, [r6, #0]
 80031f6:	6825      	ldr	r5, [r4, #0]
 80031f8:	f015 0506 	ands.w	r5, r5, #6
 80031fc:	d106      	bne.n	800320c <_printf_common+0x48>
 80031fe:	f104 0a19 	add.w	sl, r4, #25
 8003202:	68e3      	ldr	r3, [r4, #12]
 8003204:	6832      	ldr	r2, [r6, #0]
 8003206:	1a9b      	subs	r3, r3, r2
 8003208:	42ab      	cmp	r3, r5
 800320a:	dc2b      	bgt.n	8003264 <_printf_common+0xa0>
 800320c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003210:	6822      	ldr	r2, [r4, #0]
 8003212:	3b00      	subs	r3, #0
 8003214:	bf18      	it	ne
 8003216:	2301      	movne	r3, #1
 8003218:	0692      	lsls	r2, r2, #26
 800321a:	d430      	bmi.n	800327e <_printf_common+0xba>
 800321c:	4641      	mov	r1, r8
 800321e:	4638      	mov	r0, r7
 8003220:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003224:	47c8      	blx	r9
 8003226:	3001      	adds	r0, #1
 8003228:	d023      	beq.n	8003272 <_printf_common+0xae>
 800322a:	6823      	ldr	r3, [r4, #0]
 800322c:	6922      	ldr	r2, [r4, #16]
 800322e:	f003 0306 	and.w	r3, r3, #6
 8003232:	2b04      	cmp	r3, #4
 8003234:	bf14      	ite	ne
 8003236:	2500      	movne	r5, #0
 8003238:	6833      	ldreq	r3, [r6, #0]
 800323a:	f04f 0600 	mov.w	r6, #0
 800323e:	bf08      	it	eq
 8003240:	68e5      	ldreq	r5, [r4, #12]
 8003242:	f104 041a 	add.w	r4, r4, #26
 8003246:	bf08      	it	eq
 8003248:	1aed      	subeq	r5, r5, r3
 800324a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800324e:	bf08      	it	eq
 8003250:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003254:	4293      	cmp	r3, r2
 8003256:	bfc4      	itt	gt
 8003258:	1a9b      	subgt	r3, r3, r2
 800325a:	18ed      	addgt	r5, r5, r3
 800325c:	42b5      	cmp	r5, r6
 800325e:	d11a      	bne.n	8003296 <_printf_common+0xd2>
 8003260:	2000      	movs	r0, #0
 8003262:	e008      	b.n	8003276 <_printf_common+0xb2>
 8003264:	2301      	movs	r3, #1
 8003266:	4652      	mov	r2, sl
 8003268:	4641      	mov	r1, r8
 800326a:	4638      	mov	r0, r7
 800326c:	47c8      	blx	r9
 800326e:	3001      	adds	r0, #1
 8003270:	d103      	bne.n	800327a <_printf_common+0xb6>
 8003272:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003276:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800327a:	3501      	adds	r5, #1
 800327c:	e7c1      	b.n	8003202 <_printf_common+0x3e>
 800327e:	2030      	movs	r0, #48	@ 0x30
 8003280:	18e1      	adds	r1, r4, r3
 8003282:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003286:	1c5a      	adds	r2, r3, #1
 8003288:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800328c:	4422      	add	r2, r4
 800328e:	3302      	adds	r3, #2
 8003290:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003294:	e7c2      	b.n	800321c <_printf_common+0x58>
 8003296:	2301      	movs	r3, #1
 8003298:	4622      	mov	r2, r4
 800329a:	4641      	mov	r1, r8
 800329c:	4638      	mov	r0, r7
 800329e:	47c8      	blx	r9
 80032a0:	3001      	adds	r0, #1
 80032a2:	d0e6      	beq.n	8003272 <_printf_common+0xae>
 80032a4:	3601      	adds	r6, #1
 80032a6:	e7d9      	b.n	800325c <_printf_common+0x98>

080032a8 <_printf_i>:
 80032a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80032ac:	7e0f      	ldrb	r7, [r1, #24]
 80032ae:	4691      	mov	r9, r2
 80032b0:	2f78      	cmp	r7, #120	@ 0x78
 80032b2:	4680      	mov	r8, r0
 80032b4:	460c      	mov	r4, r1
 80032b6:	469a      	mov	sl, r3
 80032b8:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80032ba:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80032be:	d807      	bhi.n	80032d0 <_printf_i+0x28>
 80032c0:	2f62      	cmp	r7, #98	@ 0x62
 80032c2:	d80a      	bhi.n	80032da <_printf_i+0x32>
 80032c4:	2f00      	cmp	r7, #0
 80032c6:	f000 80d3 	beq.w	8003470 <_printf_i+0x1c8>
 80032ca:	2f58      	cmp	r7, #88	@ 0x58
 80032cc:	f000 80ba 	beq.w	8003444 <_printf_i+0x19c>
 80032d0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80032d4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80032d8:	e03a      	b.n	8003350 <_printf_i+0xa8>
 80032da:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80032de:	2b15      	cmp	r3, #21
 80032e0:	d8f6      	bhi.n	80032d0 <_printf_i+0x28>
 80032e2:	a101      	add	r1, pc, #4	@ (adr r1, 80032e8 <_printf_i+0x40>)
 80032e4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80032e8:	08003341 	.word	0x08003341
 80032ec:	08003355 	.word	0x08003355
 80032f0:	080032d1 	.word	0x080032d1
 80032f4:	080032d1 	.word	0x080032d1
 80032f8:	080032d1 	.word	0x080032d1
 80032fc:	080032d1 	.word	0x080032d1
 8003300:	08003355 	.word	0x08003355
 8003304:	080032d1 	.word	0x080032d1
 8003308:	080032d1 	.word	0x080032d1
 800330c:	080032d1 	.word	0x080032d1
 8003310:	080032d1 	.word	0x080032d1
 8003314:	08003457 	.word	0x08003457
 8003318:	0800337f 	.word	0x0800337f
 800331c:	08003411 	.word	0x08003411
 8003320:	080032d1 	.word	0x080032d1
 8003324:	080032d1 	.word	0x080032d1
 8003328:	08003479 	.word	0x08003479
 800332c:	080032d1 	.word	0x080032d1
 8003330:	0800337f 	.word	0x0800337f
 8003334:	080032d1 	.word	0x080032d1
 8003338:	080032d1 	.word	0x080032d1
 800333c:	08003419 	.word	0x08003419
 8003340:	6833      	ldr	r3, [r6, #0]
 8003342:	1d1a      	adds	r2, r3, #4
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	6032      	str	r2, [r6, #0]
 8003348:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800334c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003350:	2301      	movs	r3, #1
 8003352:	e09e      	b.n	8003492 <_printf_i+0x1ea>
 8003354:	6833      	ldr	r3, [r6, #0]
 8003356:	6820      	ldr	r0, [r4, #0]
 8003358:	1d19      	adds	r1, r3, #4
 800335a:	6031      	str	r1, [r6, #0]
 800335c:	0606      	lsls	r6, r0, #24
 800335e:	d501      	bpl.n	8003364 <_printf_i+0xbc>
 8003360:	681d      	ldr	r5, [r3, #0]
 8003362:	e003      	b.n	800336c <_printf_i+0xc4>
 8003364:	0645      	lsls	r5, r0, #25
 8003366:	d5fb      	bpl.n	8003360 <_printf_i+0xb8>
 8003368:	f9b3 5000 	ldrsh.w	r5, [r3]
 800336c:	2d00      	cmp	r5, #0
 800336e:	da03      	bge.n	8003378 <_printf_i+0xd0>
 8003370:	232d      	movs	r3, #45	@ 0x2d
 8003372:	426d      	negs	r5, r5
 8003374:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003378:	230a      	movs	r3, #10
 800337a:	4859      	ldr	r0, [pc, #356]	@ (80034e0 <_printf_i+0x238>)
 800337c:	e011      	b.n	80033a2 <_printf_i+0xfa>
 800337e:	6821      	ldr	r1, [r4, #0]
 8003380:	6833      	ldr	r3, [r6, #0]
 8003382:	0608      	lsls	r0, r1, #24
 8003384:	f853 5b04 	ldr.w	r5, [r3], #4
 8003388:	d402      	bmi.n	8003390 <_printf_i+0xe8>
 800338a:	0649      	lsls	r1, r1, #25
 800338c:	bf48      	it	mi
 800338e:	b2ad      	uxthmi	r5, r5
 8003390:	2f6f      	cmp	r7, #111	@ 0x6f
 8003392:	6033      	str	r3, [r6, #0]
 8003394:	bf14      	ite	ne
 8003396:	230a      	movne	r3, #10
 8003398:	2308      	moveq	r3, #8
 800339a:	4851      	ldr	r0, [pc, #324]	@ (80034e0 <_printf_i+0x238>)
 800339c:	2100      	movs	r1, #0
 800339e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80033a2:	6866      	ldr	r6, [r4, #4]
 80033a4:	2e00      	cmp	r6, #0
 80033a6:	bfa8      	it	ge
 80033a8:	6821      	ldrge	r1, [r4, #0]
 80033aa:	60a6      	str	r6, [r4, #8]
 80033ac:	bfa4      	itt	ge
 80033ae:	f021 0104 	bicge.w	r1, r1, #4
 80033b2:	6021      	strge	r1, [r4, #0]
 80033b4:	b90d      	cbnz	r5, 80033ba <_printf_i+0x112>
 80033b6:	2e00      	cmp	r6, #0
 80033b8:	d04b      	beq.n	8003452 <_printf_i+0x1aa>
 80033ba:	4616      	mov	r6, r2
 80033bc:	fbb5 f1f3 	udiv	r1, r5, r3
 80033c0:	fb03 5711 	mls	r7, r3, r1, r5
 80033c4:	5dc7      	ldrb	r7, [r0, r7]
 80033c6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80033ca:	462f      	mov	r7, r5
 80033cc:	42bb      	cmp	r3, r7
 80033ce:	460d      	mov	r5, r1
 80033d0:	d9f4      	bls.n	80033bc <_printf_i+0x114>
 80033d2:	2b08      	cmp	r3, #8
 80033d4:	d10b      	bne.n	80033ee <_printf_i+0x146>
 80033d6:	6823      	ldr	r3, [r4, #0]
 80033d8:	07df      	lsls	r7, r3, #31
 80033da:	d508      	bpl.n	80033ee <_printf_i+0x146>
 80033dc:	6923      	ldr	r3, [r4, #16]
 80033de:	6861      	ldr	r1, [r4, #4]
 80033e0:	4299      	cmp	r1, r3
 80033e2:	bfde      	ittt	le
 80033e4:	2330      	movle	r3, #48	@ 0x30
 80033e6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80033ea:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80033ee:	1b92      	subs	r2, r2, r6
 80033f0:	6122      	str	r2, [r4, #16]
 80033f2:	464b      	mov	r3, r9
 80033f4:	4621      	mov	r1, r4
 80033f6:	4640      	mov	r0, r8
 80033f8:	f8cd a000 	str.w	sl, [sp]
 80033fc:	aa03      	add	r2, sp, #12
 80033fe:	f7ff fee1 	bl	80031c4 <_printf_common>
 8003402:	3001      	adds	r0, #1
 8003404:	d14a      	bne.n	800349c <_printf_i+0x1f4>
 8003406:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800340a:	b004      	add	sp, #16
 800340c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003410:	6823      	ldr	r3, [r4, #0]
 8003412:	f043 0320 	orr.w	r3, r3, #32
 8003416:	6023      	str	r3, [r4, #0]
 8003418:	2778      	movs	r7, #120	@ 0x78
 800341a:	4832      	ldr	r0, [pc, #200]	@ (80034e4 <_printf_i+0x23c>)
 800341c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003420:	6823      	ldr	r3, [r4, #0]
 8003422:	6831      	ldr	r1, [r6, #0]
 8003424:	061f      	lsls	r7, r3, #24
 8003426:	f851 5b04 	ldr.w	r5, [r1], #4
 800342a:	d402      	bmi.n	8003432 <_printf_i+0x18a>
 800342c:	065f      	lsls	r7, r3, #25
 800342e:	bf48      	it	mi
 8003430:	b2ad      	uxthmi	r5, r5
 8003432:	6031      	str	r1, [r6, #0]
 8003434:	07d9      	lsls	r1, r3, #31
 8003436:	bf44      	itt	mi
 8003438:	f043 0320 	orrmi.w	r3, r3, #32
 800343c:	6023      	strmi	r3, [r4, #0]
 800343e:	b11d      	cbz	r5, 8003448 <_printf_i+0x1a0>
 8003440:	2310      	movs	r3, #16
 8003442:	e7ab      	b.n	800339c <_printf_i+0xf4>
 8003444:	4826      	ldr	r0, [pc, #152]	@ (80034e0 <_printf_i+0x238>)
 8003446:	e7e9      	b.n	800341c <_printf_i+0x174>
 8003448:	6823      	ldr	r3, [r4, #0]
 800344a:	f023 0320 	bic.w	r3, r3, #32
 800344e:	6023      	str	r3, [r4, #0]
 8003450:	e7f6      	b.n	8003440 <_printf_i+0x198>
 8003452:	4616      	mov	r6, r2
 8003454:	e7bd      	b.n	80033d2 <_printf_i+0x12a>
 8003456:	6833      	ldr	r3, [r6, #0]
 8003458:	6825      	ldr	r5, [r4, #0]
 800345a:	1d18      	adds	r0, r3, #4
 800345c:	6961      	ldr	r1, [r4, #20]
 800345e:	6030      	str	r0, [r6, #0]
 8003460:	062e      	lsls	r6, r5, #24
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	d501      	bpl.n	800346a <_printf_i+0x1c2>
 8003466:	6019      	str	r1, [r3, #0]
 8003468:	e002      	b.n	8003470 <_printf_i+0x1c8>
 800346a:	0668      	lsls	r0, r5, #25
 800346c:	d5fb      	bpl.n	8003466 <_printf_i+0x1be>
 800346e:	8019      	strh	r1, [r3, #0]
 8003470:	2300      	movs	r3, #0
 8003472:	4616      	mov	r6, r2
 8003474:	6123      	str	r3, [r4, #16]
 8003476:	e7bc      	b.n	80033f2 <_printf_i+0x14a>
 8003478:	6833      	ldr	r3, [r6, #0]
 800347a:	2100      	movs	r1, #0
 800347c:	1d1a      	adds	r2, r3, #4
 800347e:	6032      	str	r2, [r6, #0]
 8003480:	681e      	ldr	r6, [r3, #0]
 8003482:	6862      	ldr	r2, [r4, #4]
 8003484:	4630      	mov	r0, r6
 8003486:	f000 f97b 	bl	8003780 <memchr>
 800348a:	b108      	cbz	r0, 8003490 <_printf_i+0x1e8>
 800348c:	1b80      	subs	r0, r0, r6
 800348e:	6060      	str	r0, [r4, #4]
 8003490:	6863      	ldr	r3, [r4, #4]
 8003492:	6123      	str	r3, [r4, #16]
 8003494:	2300      	movs	r3, #0
 8003496:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800349a:	e7aa      	b.n	80033f2 <_printf_i+0x14a>
 800349c:	4632      	mov	r2, r6
 800349e:	4649      	mov	r1, r9
 80034a0:	4640      	mov	r0, r8
 80034a2:	6923      	ldr	r3, [r4, #16]
 80034a4:	47d0      	blx	sl
 80034a6:	3001      	adds	r0, #1
 80034a8:	d0ad      	beq.n	8003406 <_printf_i+0x15e>
 80034aa:	6823      	ldr	r3, [r4, #0]
 80034ac:	079b      	lsls	r3, r3, #30
 80034ae:	d413      	bmi.n	80034d8 <_printf_i+0x230>
 80034b0:	68e0      	ldr	r0, [r4, #12]
 80034b2:	9b03      	ldr	r3, [sp, #12]
 80034b4:	4298      	cmp	r0, r3
 80034b6:	bfb8      	it	lt
 80034b8:	4618      	movlt	r0, r3
 80034ba:	e7a6      	b.n	800340a <_printf_i+0x162>
 80034bc:	2301      	movs	r3, #1
 80034be:	4632      	mov	r2, r6
 80034c0:	4649      	mov	r1, r9
 80034c2:	4640      	mov	r0, r8
 80034c4:	47d0      	blx	sl
 80034c6:	3001      	adds	r0, #1
 80034c8:	d09d      	beq.n	8003406 <_printf_i+0x15e>
 80034ca:	3501      	adds	r5, #1
 80034cc:	68e3      	ldr	r3, [r4, #12]
 80034ce:	9903      	ldr	r1, [sp, #12]
 80034d0:	1a5b      	subs	r3, r3, r1
 80034d2:	42ab      	cmp	r3, r5
 80034d4:	dcf2      	bgt.n	80034bc <_printf_i+0x214>
 80034d6:	e7eb      	b.n	80034b0 <_printf_i+0x208>
 80034d8:	2500      	movs	r5, #0
 80034da:	f104 0619 	add.w	r6, r4, #25
 80034de:	e7f5      	b.n	80034cc <_printf_i+0x224>
 80034e0:	08003913 	.word	0x08003913
 80034e4:	08003924 	.word	0x08003924

080034e8 <__sflush_r>:
 80034e8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80034ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034ee:	0716      	lsls	r6, r2, #28
 80034f0:	4605      	mov	r5, r0
 80034f2:	460c      	mov	r4, r1
 80034f4:	d454      	bmi.n	80035a0 <__sflush_r+0xb8>
 80034f6:	684b      	ldr	r3, [r1, #4]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	dc02      	bgt.n	8003502 <__sflush_r+0x1a>
 80034fc:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80034fe:	2b00      	cmp	r3, #0
 8003500:	dd48      	ble.n	8003594 <__sflush_r+0xac>
 8003502:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003504:	2e00      	cmp	r6, #0
 8003506:	d045      	beq.n	8003594 <__sflush_r+0xac>
 8003508:	2300      	movs	r3, #0
 800350a:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800350e:	682f      	ldr	r7, [r5, #0]
 8003510:	6a21      	ldr	r1, [r4, #32]
 8003512:	602b      	str	r3, [r5, #0]
 8003514:	d030      	beq.n	8003578 <__sflush_r+0x90>
 8003516:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003518:	89a3      	ldrh	r3, [r4, #12]
 800351a:	0759      	lsls	r1, r3, #29
 800351c:	d505      	bpl.n	800352a <__sflush_r+0x42>
 800351e:	6863      	ldr	r3, [r4, #4]
 8003520:	1ad2      	subs	r2, r2, r3
 8003522:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8003524:	b10b      	cbz	r3, 800352a <__sflush_r+0x42>
 8003526:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003528:	1ad2      	subs	r2, r2, r3
 800352a:	2300      	movs	r3, #0
 800352c:	4628      	mov	r0, r5
 800352e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003530:	6a21      	ldr	r1, [r4, #32]
 8003532:	47b0      	blx	r6
 8003534:	1c43      	adds	r3, r0, #1
 8003536:	89a3      	ldrh	r3, [r4, #12]
 8003538:	d106      	bne.n	8003548 <__sflush_r+0x60>
 800353a:	6829      	ldr	r1, [r5, #0]
 800353c:	291d      	cmp	r1, #29
 800353e:	d82b      	bhi.n	8003598 <__sflush_r+0xb0>
 8003540:	4a28      	ldr	r2, [pc, #160]	@ (80035e4 <__sflush_r+0xfc>)
 8003542:	410a      	asrs	r2, r1
 8003544:	07d6      	lsls	r6, r2, #31
 8003546:	d427      	bmi.n	8003598 <__sflush_r+0xb0>
 8003548:	2200      	movs	r2, #0
 800354a:	6062      	str	r2, [r4, #4]
 800354c:	6922      	ldr	r2, [r4, #16]
 800354e:	04d9      	lsls	r1, r3, #19
 8003550:	6022      	str	r2, [r4, #0]
 8003552:	d504      	bpl.n	800355e <__sflush_r+0x76>
 8003554:	1c42      	adds	r2, r0, #1
 8003556:	d101      	bne.n	800355c <__sflush_r+0x74>
 8003558:	682b      	ldr	r3, [r5, #0]
 800355a:	b903      	cbnz	r3, 800355e <__sflush_r+0x76>
 800355c:	6560      	str	r0, [r4, #84]	@ 0x54
 800355e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003560:	602f      	str	r7, [r5, #0]
 8003562:	b1b9      	cbz	r1, 8003594 <__sflush_r+0xac>
 8003564:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003568:	4299      	cmp	r1, r3
 800356a:	d002      	beq.n	8003572 <__sflush_r+0x8a>
 800356c:	4628      	mov	r0, r5
 800356e:	f7ff fbf3 	bl	8002d58 <_free_r>
 8003572:	2300      	movs	r3, #0
 8003574:	6363      	str	r3, [r4, #52]	@ 0x34
 8003576:	e00d      	b.n	8003594 <__sflush_r+0xac>
 8003578:	2301      	movs	r3, #1
 800357a:	4628      	mov	r0, r5
 800357c:	47b0      	blx	r6
 800357e:	4602      	mov	r2, r0
 8003580:	1c50      	adds	r0, r2, #1
 8003582:	d1c9      	bne.n	8003518 <__sflush_r+0x30>
 8003584:	682b      	ldr	r3, [r5, #0]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d0c6      	beq.n	8003518 <__sflush_r+0x30>
 800358a:	2b1d      	cmp	r3, #29
 800358c:	d001      	beq.n	8003592 <__sflush_r+0xaa>
 800358e:	2b16      	cmp	r3, #22
 8003590:	d11d      	bne.n	80035ce <__sflush_r+0xe6>
 8003592:	602f      	str	r7, [r5, #0]
 8003594:	2000      	movs	r0, #0
 8003596:	e021      	b.n	80035dc <__sflush_r+0xf4>
 8003598:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800359c:	b21b      	sxth	r3, r3
 800359e:	e01a      	b.n	80035d6 <__sflush_r+0xee>
 80035a0:	690f      	ldr	r7, [r1, #16]
 80035a2:	2f00      	cmp	r7, #0
 80035a4:	d0f6      	beq.n	8003594 <__sflush_r+0xac>
 80035a6:	0793      	lsls	r3, r2, #30
 80035a8:	bf18      	it	ne
 80035aa:	2300      	movne	r3, #0
 80035ac:	680e      	ldr	r6, [r1, #0]
 80035ae:	bf08      	it	eq
 80035b0:	694b      	ldreq	r3, [r1, #20]
 80035b2:	1bf6      	subs	r6, r6, r7
 80035b4:	600f      	str	r7, [r1, #0]
 80035b6:	608b      	str	r3, [r1, #8]
 80035b8:	2e00      	cmp	r6, #0
 80035ba:	ddeb      	ble.n	8003594 <__sflush_r+0xac>
 80035bc:	4633      	mov	r3, r6
 80035be:	463a      	mov	r2, r7
 80035c0:	4628      	mov	r0, r5
 80035c2:	6a21      	ldr	r1, [r4, #32]
 80035c4:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 80035c8:	47e0      	blx	ip
 80035ca:	2800      	cmp	r0, #0
 80035cc:	dc07      	bgt.n	80035de <__sflush_r+0xf6>
 80035ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80035d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80035d6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80035da:	81a3      	strh	r3, [r4, #12]
 80035dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80035de:	4407      	add	r7, r0
 80035e0:	1a36      	subs	r6, r6, r0
 80035e2:	e7e9      	b.n	80035b8 <__sflush_r+0xd0>
 80035e4:	dfbffffe 	.word	0xdfbffffe

080035e8 <_fflush_r>:
 80035e8:	b538      	push	{r3, r4, r5, lr}
 80035ea:	690b      	ldr	r3, [r1, #16]
 80035ec:	4605      	mov	r5, r0
 80035ee:	460c      	mov	r4, r1
 80035f0:	b913      	cbnz	r3, 80035f8 <_fflush_r+0x10>
 80035f2:	2500      	movs	r5, #0
 80035f4:	4628      	mov	r0, r5
 80035f6:	bd38      	pop	{r3, r4, r5, pc}
 80035f8:	b118      	cbz	r0, 8003602 <_fflush_r+0x1a>
 80035fa:	6a03      	ldr	r3, [r0, #32]
 80035fc:	b90b      	cbnz	r3, 8003602 <_fflush_r+0x1a>
 80035fe:	f7ff faa3 	bl	8002b48 <__sinit>
 8003602:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d0f3      	beq.n	80035f2 <_fflush_r+0xa>
 800360a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800360c:	07d0      	lsls	r0, r2, #31
 800360e:	d404      	bmi.n	800361a <_fflush_r+0x32>
 8003610:	0599      	lsls	r1, r3, #22
 8003612:	d402      	bmi.n	800361a <_fflush_r+0x32>
 8003614:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003616:	f7ff fb9c 	bl	8002d52 <__retarget_lock_acquire_recursive>
 800361a:	4628      	mov	r0, r5
 800361c:	4621      	mov	r1, r4
 800361e:	f7ff ff63 	bl	80034e8 <__sflush_r>
 8003622:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003624:	4605      	mov	r5, r0
 8003626:	07da      	lsls	r2, r3, #31
 8003628:	d4e4      	bmi.n	80035f4 <_fflush_r+0xc>
 800362a:	89a3      	ldrh	r3, [r4, #12]
 800362c:	059b      	lsls	r3, r3, #22
 800362e:	d4e1      	bmi.n	80035f4 <_fflush_r+0xc>
 8003630:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003632:	f7ff fb8f 	bl	8002d54 <__retarget_lock_release_recursive>
 8003636:	e7dd      	b.n	80035f4 <_fflush_r+0xc>

08003638 <__swbuf_r>:
 8003638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800363a:	460e      	mov	r6, r1
 800363c:	4614      	mov	r4, r2
 800363e:	4605      	mov	r5, r0
 8003640:	b118      	cbz	r0, 800364a <__swbuf_r+0x12>
 8003642:	6a03      	ldr	r3, [r0, #32]
 8003644:	b90b      	cbnz	r3, 800364a <__swbuf_r+0x12>
 8003646:	f7ff fa7f 	bl	8002b48 <__sinit>
 800364a:	69a3      	ldr	r3, [r4, #24]
 800364c:	60a3      	str	r3, [r4, #8]
 800364e:	89a3      	ldrh	r3, [r4, #12]
 8003650:	071a      	lsls	r2, r3, #28
 8003652:	d501      	bpl.n	8003658 <__swbuf_r+0x20>
 8003654:	6923      	ldr	r3, [r4, #16]
 8003656:	b943      	cbnz	r3, 800366a <__swbuf_r+0x32>
 8003658:	4621      	mov	r1, r4
 800365a:	4628      	mov	r0, r5
 800365c:	f000 f82a 	bl	80036b4 <__swsetup_r>
 8003660:	b118      	cbz	r0, 800366a <__swbuf_r+0x32>
 8003662:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8003666:	4638      	mov	r0, r7
 8003668:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800366a:	6823      	ldr	r3, [r4, #0]
 800366c:	6922      	ldr	r2, [r4, #16]
 800366e:	b2f6      	uxtb	r6, r6
 8003670:	1a98      	subs	r0, r3, r2
 8003672:	6963      	ldr	r3, [r4, #20]
 8003674:	4637      	mov	r7, r6
 8003676:	4283      	cmp	r3, r0
 8003678:	dc05      	bgt.n	8003686 <__swbuf_r+0x4e>
 800367a:	4621      	mov	r1, r4
 800367c:	4628      	mov	r0, r5
 800367e:	f7ff ffb3 	bl	80035e8 <_fflush_r>
 8003682:	2800      	cmp	r0, #0
 8003684:	d1ed      	bne.n	8003662 <__swbuf_r+0x2a>
 8003686:	68a3      	ldr	r3, [r4, #8]
 8003688:	3b01      	subs	r3, #1
 800368a:	60a3      	str	r3, [r4, #8]
 800368c:	6823      	ldr	r3, [r4, #0]
 800368e:	1c5a      	adds	r2, r3, #1
 8003690:	6022      	str	r2, [r4, #0]
 8003692:	701e      	strb	r6, [r3, #0]
 8003694:	6962      	ldr	r2, [r4, #20]
 8003696:	1c43      	adds	r3, r0, #1
 8003698:	429a      	cmp	r2, r3
 800369a:	d004      	beq.n	80036a6 <__swbuf_r+0x6e>
 800369c:	89a3      	ldrh	r3, [r4, #12]
 800369e:	07db      	lsls	r3, r3, #31
 80036a0:	d5e1      	bpl.n	8003666 <__swbuf_r+0x2e>
 80036a2:	2e0a      	cmp	r6, #10
 80036a4:	d1df      	bne.n	8003666 <__swbuf_r+0x2e>
 80036a6:	4621      	mov	r1, r4
 80036a8:	4628      	mov	r0, r5
 80036aa:	f7ff ff9d 	bl	80035e8 <_fflush_r>
 80036ae:	2800      	cmp	r0, #0
 80036b0:	d0d9      	beq.n	8003666 <__swbuf_r+0x2e>
 80036b2:	e7d6      	b.n	8003662 <__swbuf_r+0x2a>

080036b4 <__swsetup_r>:
 80036b4:	b538      	push	{r3, r4, r5, lr}
 80036b6:	4b29      	ldr	r3, [pc, #164]	@ (800375c <__swsetup_r+0xa8>)
 80036b8:	4605      	mov	r5, r0
 80036ba:	6818      	ldr	r0, [r3, #0]
 80036bc:	460c      	mov	r4, r1
 80036be:	b118      	cbz	r0, 80036c8 <__swsetup_r+0x14>
 80036c0:	6a03      	ldr	r3, [r0, #32]
 80036c2:	b90b      	cbnz	r3, 80036c8 <__swsetup_r+0x14>
 80036c4:	f7ff fa40 	bl	8002b48 <__sinit>
 80036c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80036cc:	0719      	lsls	r1, r3, #28
 80036ce:	d422      	bmi.n	8003716 <__swsetup_r+0x62>
 80036d0:	06da      	lsls	r2, r3, #27
 80036d2:	d407      	bmi.n	80036e4 <__swsetup_r+0x30>
 80036d4:	2209      	movs	r2, #9
 80036d6:	602a      	str	r2, [r5, #0]
 80036d8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80036dc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80036e0:	81a3      	strh	r3, [r4, #12]
 80036e2:	e033      	b.n	800374c <__swsetup_r+0x98>
 80036e4:	0758      	lsls	r0, r3, #29
 80036e6:	d512      	bpl.n	800370e <__swsetup_r+0x5a>
 80036e8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80036ea:	b141      	cbz	r1, 80036fe <__swsetup_r+0x4a>
 80036ec:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80036f0:	4299      	cmp	r1, r3
 80036f2:	d002      	beq.n	80036fa <__swsetup_r+0x46>
 80036f4:	4628      	mov	r0, r5
 80036f6:	f7ff fb2f 	bl	8002d58 <_free_r>
 80036fa:	2300      	movs	r3, #0
 80036fc:	6363      	str	r3, [r4, #52]	@ 0x34
 80036fe:	89a3      	ldrh	r3, [r4, #12]
 8003700:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8003704:	81a3      	strh	r3, [r4, #12]
 8003706:	2300      	movs	r3, #0
 8003708:	6063      	str	r3, [r4, #4]
 800370a:	6923      	ldr	r3, [r4, #16]
 800370c:	6023      	str	r3, [r4, #0]
 800370e:	89a3      	ldrh	r3, [r4, #12]
 8003710:	f043 0308 	orr.w	r3, r3, #8
 8003714:	81a3      	strh	r3, [r4, #12]
 8003716:	6923      	ldr	r3, [r4, #16]
 8003718:	b94b      	cbnz	r3, 800372e <__swsetup_r+0x7a>
 800371a:	89a3      	ldrh	r3, [r4, #12]
 800371c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8003720:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003724:	d003      	beq.n	800372e <__swsetup_r+0x7a>
 8003726:	4621      	mov	r1, r4
 8003728:	4628      	mov	r0, r5
 800372a:	f000 f85c 	bl	80037e6 <__smakebuf_r>
 800372e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003732:	f013 0201 	ands.w	r2, r3, #1
 8003736:	d00a      	beq.n	800374e <__swsetup_r+0x9a>
 8003738:	2200      	movs	r2, #0
 800373a:	60a2      	str	r2, [r4, #8]
 800373c:	6962      	ldr	r2, [r4, #20]
 800373e:	4252      	negs	r2, r2
 8003740:	61a2      	str	r2, [r4, #24]
 8003742:	6922      	ldr	r2, [r4, #16]
 8003744:	b942      	cbnz	r2, 8003758 <__swsetup_r+0xa4>
 8003746:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800374a:	d1c5      	bne.n	80036d8 <__swsetup_r+0x24>
 800374c:	bd38      	pop	{r3, r4, r5, pc}
 800374e:	0799      	lsls	r1, r3, #30
 8003750:	bf58      	it	pl
 8003752:	6962      	ldrpl	r2, [r4, #20]
 8003754:	60a2      	str	r2, [r4, #8]
 8003756:	e7f4      	b.n	8003742 <__swsetup_r+0x8e>
 8003758:	2000      	movs	r0, #0
 800375a:	e7f7      	b.n	800374c <__swsetup_r+0x98>
 800375c:	20000018 	.word	0x20000018

08003760 <_sbrk_r>:
 8003760:	b538      	push	{r3, r4, r5, lr}
 8003762:	2300      	movs	r3, #0
 8003764:	4d05      	ldr	r5, [pc, #20]	@ (800377c <_sbrk_r+0x1c>)
 8003766:	4604      	mov	r4, r0
 8003768:	4608      	mov	r0, r1
 800376a:	602b      	str	r3, [r5, #0]
 800376c:	f7fc ff26 	bl	80005bc <_sbrk>
 8003770:	1c43      	adds	r3, r0, #1
 8003772:	d102      	bne.n	800377a <_sbrk_r+0x1a>
 8003774:	682b      	ldr	r3, [r5, #0]
 8003776:	b103      	cbz	r3, 800377a <_sbrk_r+0x1a>
 8003778:	6023      	str	r3, [r4, #0]
 800377a:	bd38      	pop	{r3, r4, r5, pc}
 800377c:	20000268 	.word	0x20000268

08003780 <memchr>:
 8003780:	4603      	mov	r3, r0
 8003782:	b510      	push	{r4, lr}
 8003784:	b2c9      	uxtb	r1, r1
 8003786:	4402      	add	r2, r0
 8003788:	4293      	cmp	r3, r2
 800378a:	4618      	mov	r0, r3
 800378c:	d101      	bne.n	8003792 <memchr+0x12>
 800378e:	2000      	movs	r0, #0
 8003790:	e003      	b.n	800379a <memchr+0x1a>
 8003792:	7804      	ldrb	r4, [r0, #0]
 8003794:	3301      	adds	r3, #1
 8003796:	428c      	cmp	r4, r1
 8003798:	d1f6      	bne.n	8003788 <memchr+0x8>
 800379a:	bd10      	pop	{r4, pc}

0800379c <__swhatbuf_r>:
 800379c:	b570      	push	{r4, r5, r6, lr}
 800379e:	460c      	mov	r4, r1
 80037a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80037a4:	4615      	mov	r5, r2
 80037a6:	2900      	cmp	r1, #0
 80037a8:	461e      	mov	r6, r3
 80037aa:	b096      	sub	sp, #88	@ 0x58
 80037ac:	da0c      	bge.n	80037c8 <__swhatbuf_r+0x2c>
 80037ae:	89a3      	ldrh	r3, [r4, #12]
 80037b0:	2100      	movs	r1, #0
 80037b2:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80037b6:	bf14      	ite	ne
 80037b8:	2340      	movne	r3, #64	@ 0x40
 80037ba:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80037be:	2000      	movs	r0, #0
 80037c0:	6031      	str	r1, [r6, #0]
 80037c2:	602b      	str	r3, [r5, #0]
 80037c4:	b016      	add	sp, #88	@ 0x58
 80037c6:	bd70      	pop	{r4, r5, r6, pc}
 80037c8:	466a      	mov	r2, sp
 80037ca:	f000 f849 	bl	8003860 <_fstat_r>
 80037ce:	2800      	cmp	r0, #0
 80037d0:	dbed      	blt.n	80037ae <__swhatbuf_r+0x12>
 80037d2:	9901      	ldr	r1, [sp, #4]
 80037d4:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80037d8:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80037dc:	4259      	negs	r1, r3
 80037de:	4159      	adcs	r1, r3
 80037e0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80037e4:	e7eb      	b.n	80037be <__swhatbuf_r+0x22>

080037e6 <__smakebuf_r>:
 80037e6:	898b      	ldrh	r3, [r1, #12]
 80037e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80037ea:	079d      	lsls	r5, r3, #30
 80037ec:	4606      	mov	r6, r0
 80037ee:	460c      	mov	r4, r1
 80037f0:	d507      	bpl.n	8003802 <__smakebuf_r+0x1c>
 80037f2:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80037f6:	6023      	str	r3, [r4, #0]
 80037f8:	6123      	str	r3, [r4, #16]
 80037fa:	2301      	movs	r3, #1
 80037fc:	6163      	str	r3, [r4, #20]
 80037fe:	b003      	add	sp, #12
 8003800:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003802:	466a      	mov	r2, sp
 8003804:	ab01      	add	r3, sp, #4
 8003806:	f7ff ffc9 	bl	800379c <__swhatbuf_r>
 800380a:	9f00      	ldr	r7, [sp, #0]
 800380c:	4605      	mov	r5, r0
 800380e:	4639      	mov	r1, r7
 8003810:	4630      	mov	r0, r6
 8003812:	f7ff fb0b 	bl	8002e2c <_malloc_r>
 8003816:	b948      	cbnz	r0, 800382c <__smakebuf_r+0x46>
 8003818:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800381c:	059a      	lsls	r2, r3, #22
 800381e:	d4ee      	bmi.n	80037fe <__smakebuf_r+0x18>
 8003820:	f023 0303 	bic.w	r3, r3, #3
 8003824:	f043 0302 	orr.w	r3, r3, #2
 8003828:	81a3      	strh	r3, [r4, #12]
 800382a:	e7e2      	b.n	80037f2 <__smakebuf_r+0xc>
 800382c:	89a3      	ldrh	r3, [r4, #12]
 800382e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8003832:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003836:	81a3      	strh	r3, [r4, #12]
 8003838:	9b01      	ldr	r3, [sp, #4]
 800383a:	6020      	str	r0, [r4, #0]
 800383c:	b15b      	cbz	r3, 8003856 <__smakebuf_r+0x70>
 800383e:	4630      	mov	r0, r6
 8003840:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003844:	f000 f81e 	bl	8003884 <_isatty_r>
 8003848:	b128      	cbz	r0, 8003856 <__smakebuf_r+0x70>
 800384a:	89a3      	ldrh	r3, [r4, #12]
 800384c:	f023 0303 	bic.w	r3, r3, #3
 8003850:	f043 0301 	orr.w	r3, r3, #1
 8003854:	81a3      	strh	r3, [r4, #12]
 8003856:	89a3      	ldrh	r3, [r4, #12]
 8003858:	431d      	orrs	r5, r3
 800385a:	81a5      	strh	r5, [r4, #12]
 800385c:	e7cf      	b.n	80037fe <__smakebuf_r+0x18>
	...

08003860 <_fstat_r>:
 8003860:	b538      	push	{r3, r4, r5, lr}
 8003862:	2300      	movs	r3, #0
 8003864:	4d06      	ldr	r5, [pc, #24]	@ (8003880 <_fstat_r+0x20>)
 8003866:	4604      	mov	r4, r0
 8003868:	4608      	mov	r0, r1
 800386a:	4611      	mov	r1, r2
 800386c:	602b      	str	r3, [r5, #0]
 800386e:	f7fc fe7f 	bl	8000570 <_fstat>
 8003872:	1c43      	adds	r3, r0, #1
 8003874:	d102      	bne.n	800387c <_fstat_r+0x1c>
 8003876:	682b      	ldr	r3, [r5, #0]
 8003878:	b103      	cbz	r3, 800387c <_fstat_r+0x1c>
 800387a:	6023      	str	r3, [r4, #0]
 800387c:	bd38      	pop	{r3, r4, r5, pc}
 800387e:	bf00      	nop
 8003880:	20000268 	.word	0x20000268

08003884 <_isatty_r>:
 8003884:	b538      	push	{r3, r4, r5, lr}
 8003886:	2300      	movs	r3, #0
 8003888:	4d05      	ldr	r5, [pc, #20]	@ (80038a0 <_isatty_r+0x1c>)
 800388a:	4604      	mov	r4, r0
 800388c:	4608      	mov	r0, r1
 800388e:	602b      	str	r3, [r5, #0]
 8003890:	f7fc fe7d 	bl	800058e <_isatty>
 8003894:	1c43      	adds	r3, r0, #1
 8003896:	d102      	bne.n	800389e <_isatty_r+0x1a>
 8003898:	682b      	ldr	r3, [r5, #0]
 800389a:	b103      	cbz	r3, 800389e <_isatty_r+0x1a>
 800389c:	6023      	str	r3, [r4, #0]
 800389e:	bd38      	pop	{r3, r4, r5, pc}
 80038a0:	20000268 	.word	0x20000268

080038a4 <_init>:
 80038a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038a6:	bf00      	nop
 80038a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038aa:	bc08      	pop	{r3}
 80038ac:	469e      	mov	lr, r3
 80038ae:	4770      	bx	lr

080038b0 <_fini>:
 80038b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038b2:	bf00      	nop
 80038b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038b6:	bc08      	pop	{r3}
 80038b8:	469e      	mov	lr, r3
 80038ba:	4770      	bx	lr
