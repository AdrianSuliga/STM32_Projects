
ADC_ex_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b10  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  08004c1c  08004c1c  00005c1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ca0  08004ca0  00006068  2**0
                  CONTENTS
  4 .ARM          00000000  08004ca0  08004ca0  00006068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004ca0  08004ca0  00006068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004ca0  08004ca0  00005ca0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004ca4  08004ca4  00005ca4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08004ca8  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000290  20000068  08004d10  00006068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002f8  08004d10  000062f8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00006068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f8d6  00000000  00000000  00006091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002870  00000000  00000000  00015967  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001020  00000000  00000000  000181d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c8b  00000000  00000000  000191f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019aff  00000000  00000000  00019e83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011c74  00000000  00000000  00033982  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000936b7  00000000  00000000  000455f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d8cad  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004a78  00000000  00000000  000d8cf0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  000dd768  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000068 	.word	0x20000068
 8000128:	00000000 	.word	0x00000000
 800012c:	08004c04 	.word	0x08004c04

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000006c 	.word	0x2000006c
 8000148:	08004c04 	.word	0x08004c04

0800014c <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	if (ch == '\n')
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	2b0a      	cmp	r3, #10
 8000158:	d102      	bne.n	8000160 <__io_putchar+0x14>
		__io_putchar('\r');
 800015a:	200d      	movs	r0, #13
 800015c:	f7ff fff6 	bl	800014c <__io_putchar>
	HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8000160:	1d39      	adds	r1, r7, #4
 8000162:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000166:	2201      	movs	r2, #1
 8000168:	4803      	ldr	r0, [pc, #12]	@ (8000178 <__io_putchar+0x2c>)
 800016a:	f003 fc3d 	bl	80039e8 <HAL_UART_Transmit>
	return 1;
 800016e:	2301      	movs	r3, #1
}
 8000170:	4618      	mov	r0, r3
 8000172:	3708      	adds	r7, #8
 8000174:	46bd      	mov	sp, r7
 8000176:	bd80      	pop	{r7, pc}
 8000178:	20000154 	.word	0x20000154

0800017c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800017c:	b580      	push	{r7, lr}
 800017e:	b082      	sub	sp, #8
 8000180:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000182:	f000 fc93 	bl	8000aac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000186:	f000 f871 	bl	800026c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800018a:	f000 fa07 	bl	800059c <MX_GPIO_Init>
  MX_DMA_Init();
 800018e:	f000 f9e7 	bl	8000560 <MX_DMA_Init>
  MX_ADC1_Init();
 8000192:	f000 f8c1 	bl	8000318 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8000196:	f000 f9b9 	bl	800050c <MX_USART2_UART_Init>
  MX_RTC_Init();
 800019a:	f000 f919 	bl	80003d0 <MX_RTC_Init>
  MX_TIM3_Init();
 800019e:	f000 f933 	bl	8000408 <MX_TIM3_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  volatile static uint16_t adc_value[3];
  uint16_t old_x = 0;
 80001a2:	2300      	movs	r3, #0
 80001a4:	80fb      	strh	r3, [r7, #6]
  uint16_t old_y = 0;
 80001a6:	2300      	movs	r3, #0
 80001a8:	80bb      	strh	r3, [r7, #4]

  HAL_ADCEx_Calibration_Start(&hadc1);
 80001aa:	482b      	ldr	r0, [pc, #172]	@ (8000258 <main+0xdc>)
 80001ac:	f001 f8ac 	bl	8001308 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_value, 3);
 80001b0:	2203      	movs	r2, #3
 80001b2:	492a      	ldr	r1, [pc, #168]	@ (800025c <main+0xe0>)
 80001b4:	4828      	ldr	r0, [pc, #160]	@ (8000258 <main+0xdc>)
 80001b6:	f000 fdb3 	bl	8000d20 <HAL_ADC_Start_DMA>

  HAL_TIM_Base_Start_IT(&htim3);
 80001ba:	4829      	ldr	r0, [pc, #164]	@ (8000260 <main+0xe4>)
 80001bc:	f002 fcb2 	bl	8002b24 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80001c0:	2100      	movs	r1, #0
 80001c2:	4827      	ldr	r0, [pc, #156]	@ (8000260 <main+0xe4>)
 80001c4:	f002 fd58 	bl	8002c78 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80001c8:	2104      	movs	r1, #4
 80001ca:	4825      	ldr	r0, [pc, #148]	@ (8000260 <main+0xe4>)
 80001cc:	f002 fd54 	bl	8002c78 <HAL_TIM_PWM_Start>

  while (1)
  {
	  uint16_t pulse = adc_value[0] / 400;
 80001d0:	4b22      	ldr	r3, [pc, #136]	@ (800025c <main+0xe0>)
 80001d2:	881b      	ldrh	r3, [r3, #0]
 80001d4:	b29b      	uxth	r3, r3
 80001d6:	4a23      	ldr	r2, [pc, #140]	@ (8000264 <main+0xe8>)
 80001d8:	fba2 2303 	umull	r2, r3, r2, r3
 80001dc:	09db      	lsrs	r3, r3, #7
 80001de:	807b      	strh	r3, [r7, #2]
	  pulse = 2000 - pulse * 500;
 80001e0:	887b      	ldrh	r3, [r7, #2]
 80001e2:	461a      	mov	r2, r3
 80001e4:	01d2      	lsls	r2, r2, #7
 80001e6:	1ad2      	subs	r2, r2, r3
 80001e8:	0192      	lsls	r2, r2, #6
 80001ea:	441a      	add	r2, r3
 80001ec:	0052      	lsls	r2, r2, #1
 80001ee:	4413      	add	r3, r2
 80001f0:	009b      	lsls	r3, r3, #2
 80001f2:	b29b      	uxth	r3, r3
 80001f4:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 80001f8:	807b      	strh	r3, [r7, #2]
	  if (pulse < 0)
		  pulse = 0;

	  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, pulse);
 80001fa:	4b19      	ldr	r3, [pc, #100]	@ (8000260 <main+0xe4>)
 80001fc:	681b      	ldr	r3, [r3, #0]
 80001fe:	887a      	ldrh	r2, [r7, #2]
 8000200:	635a      	str	r2, [r3, #52]	@ 0x34
	  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, pulse);
 8000202:	4b17      	ldr	r3, [pc, #92]	@ (8000260 <main+0xe4>)
 8000204:	681b      	ldr	r3, [r3, #0]
 8000206:	887a      	ldrh	r2, [r7, #2]
 8000208:	639a      	str	r2, [r3, #56]	@ 0x38

	  if (
			  abs(old_x - adc_value[1]) > 100 ||
 800020a:	88fb      	ldrh	r3, [r7, #6]
 800020c:	4a13      	ldr	r2, [pc, #76]	@ (800025c <main+0xe0>)
 800020e:	8852      	ldrh	r2, [r2, #2]
 8000210:	b292      	uxth	r2, r2
 8000212:	1a9b      	subs	r3, r3, r2
 8000214:	2b00      	cmp	r3, #0
 8000216:	bfb8      	it	lt
 8000218:	425b      	neglt	r3, r3
	  if (
 800021a:	2b64      	cmp	r3, #100	@ 0x64
 800021c:	dc09      	bgt.n	8000232 <main+0xb6>
			  abs(old_y - adc_value[2]) > 100
 800021e:	88bb      	ldrh	r3, [r7, #4]
 8000220:	4a0e      	ldr	r2, [pc, #56]	@ (800025c <main+0xe0>)
 8000222:	8892      	ldrh	r2, [r2, #4]
 8000224:	b292      	uxth	r2, r2
 8000226:	1a9b      	subs	r3, r3, r2
 8000228:	2b00      	cmp	r3, #0
 800022a:	bfb8      	it	lt
 800022c:	425b      	neglt	r3, r3
			  abs(old_x - adc_value[1]) > 100 ||
 800022e:	2b64      	cmp	r3, #100	@ 0x64
 8000230:	ddce      	ble.n	80001d0 <main+0x54>
	  )
	  {
		  printf("x = %d, y = %d\n", adc_value[1], adc_value[2]);
 8000232:	4b0a      	ldr	r3, [pc, #40]	@ (800025c <main+0xe0>)
 8000234:	885b      	ldrh	r3, [r3, #2]
 8000236:	b29b      	uxth	r3, r3
 8000238:	4619      	mov	r1, r3
 800023a:	4b08      	ldr	r3, [pc, #32]	@ (800025c <main+0xe0>)
 800023c:	889b      	ldrh	r3, [r3, #4]
 800023e:	b29b      	uxth	r3, r3
 8000240:	461a      	mov	r2, r3
 8000242:	4809      	ldr	r0, [pc, #36]	@ (8000268 <main+0xec>)
 8000244:	f003 fe66 	bl	8003f14 <iprintf>
		  old_x = adc_value[1];
 8000248:	4b04      	ldr	r3, [pc, #16]	@ (800025c <main+0xe0>)
 800024a:	885b      	ldrh	r3, [r3, #2]
 800024c:	80fb      	strh	r3, [r7, #6]
		  old_y = adc_value[2];
 800024e:	4b03      	ldr	r3, [pc, #12]	@ (800025c <main+0xe0>)
 8000250:	889b      	ldrh	r3, [r3, #4]
 8000252:	80bb      	strh	r3, [r7, #4]
  {
 8000254:	e7bc      	b.n	80001d0 <main+0x54>
 8000256:	bf00      	nop
 8000258:	20000084 	.word	0x20000084
 800025c:	2000019c 	.word	0x2000019c
 8000260:	2000010c 	.word	0x2000010c
 8000264:	51eb851f 	.word	0x51eb851f
 8000268:	08004c1c 	.word	0x08004c1c

0800026c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800026c:	b580      	push	{r7, lr}
 800026e:	b094      	sub	sp, #80	@ 0x50
 8000270:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000272:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000276:	2228      	movs	r2, #40	@ 0x28
 8000278:	2100      	movs	r1, #0
 800027a:	4618      	mov	r0, r3
 800027c:	f003 fe9f 	bl	8003fbe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000280:	f107 0314 	add.w	r3, r7, #20
 8000284:	2200      	movs	r2, #0
 8000286:	601a      	str	r2, [r3, #0]
 8000288:	605a      	str	r2, [r3, #4]
 800028a:	609a      	str	r2, [r3, #8]
 800028c:	60da      	str	r2, [r3, #12]
 800028e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000290:	1d3b      	adds	r3, r7, #4
 8000292:	2200      	movs	r2, #0
 8000294:	601a      	str	r2, [r3, #0]
 8000296:	605a      	str	r2, [r3, #4]
 8000298:	609a      	str	r2, [r3, #8]
 800029a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 800029c:	230a      	movs	r3, #10
 800029e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002a0:	2301      	movs	r3, #1
 80002a2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002a4:	2310      	movs	r3, #16
 80002a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80002a8:	2301      	movs	r3, #1
 80002aa:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002ac:	2300      	movs	r3, #0
 80002ae:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002b0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80002b4:	4618      	mov	r0, r3
 80002b6:	f001 fd61 	bl	8001d7c <HAL_RCC_OscConfig>
 80002ba:	4603      	mov	r3, r0
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d001      	beq.n	80002c4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80002c0:	f000 f982 	bl	80005c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002c4:	230f      	movs	r3, #15
 80002c6:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002c8:	2300      	movs	r3, #0
 80002ca:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002cc:	2300      	movs	r3, #0
 80002ce:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002d0:	2300      	movs	r3, #0
 80002d2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002d4:	2300      	movs	r3, #0
 80002d6:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002d8:	f107 0314 	add.w	r3, r7, #20
 80002dc:	2100      	movs	r1, #0
 80002de:	4618      	mov	r0, r3
 80002e0:	f001 ffce 	bl	8002280 <HAL_RCC_ClockConfig>
 80002e4:	4603      	mov	r3, r0
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	d001      	beq.n	80002ee <SystemClock_Config+0x82>
  {
    Error_Handler();
 80002ea:	f000 f96d 	bl	80005c8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_ADC;
 80002ee:	2303      	movs	r3, #3
 80002f0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80002f2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80002f6:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 80002f8:	2300      	movs	r3, #0
 80002fa:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002fc:	1d3b      	adds	r3, r7, #4
 80002fe:	4618      	mov	r0, r3
 8000300:	f002 f94c 	bl	800259c <HAL_RCCEx_PeriphCLKConfig>
 8000304:	4603      	mov	r3, r0
 8000306:	2b00      	cmp	r3, #0
 8000308:	d001      	beq.n	800030e <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800030a:	f000 f95d 	bl	80005c8 <Error_Handler>
  }
}
 800030e:	bf00      	nop
 8000310:	3750      	adds	r7, #80	@ 0x50
 8000312:	46bd      	mov	sp, r7
 8000314:	bd80      	pop	{r7, pc}
	...

08000318 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000318:	b580      	push	{r7, lr}
 800031a:	b084      	sub	sp, #16
 800031c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800031e:	1d3b      	adds	r3, r7, #4
 8000320:	2200      	movs	r2, #0
 8000322:	601a      	str	r2, [r3, #0]
 8000324:	605a      	str	r2, [r3, #4]
 8000326:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000328:	4b27      	ldr	r3, [pc, #156]	@ (80003c8 <MX_ADC1_Init+0xb0>)
 800032a:	4a28      	ldr	r2, [pc, #160]	@ (80003cc <MX_ADC1_Init+0xb4>)
 800032c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800032e:	4b26      	ldr	r3, [pc, #152]	@ (80003c8 <MX_ADC1_Init+0xb0>)
 8000330:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000334:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000336:	4b24      	ldr	r3, [pc, #144]	@ (80003c8 <MX_ADC1_Init+0xb0>)
 8000338:	2201      	movs	r2, #1
 800033a:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800033c:	4b22      	ldr	r3, [pc, #136]	@ (80003c8 <MX_ADC1_Init+0xb0>)
 800033e:	2200      	movs	r2, #0
 8000340:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000342:	4b21      	ldr	r3, [pc, #132]	@ (80003c8 <MX_ADC1_Init+0xb0>)
 8000344:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8000348:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800034a:	4b1f      	ldr	r3, [pc, #124]	@ (80003c8 <MX_ADC1_Init+0xb0>)
 800034c:	2200      	movs	r2, #0
 800034e:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 3;
 8000350:	4b1d      	ldr	r3, [pc, #116]	@ (80003c8 <MX_ADC1_Init+0xb0>)
 8000352:	2203      	movs	r2, #3
 8000354:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000356:	481c      	ldr	r0, [pc, #112]	@ (80003c8 <MX_ADC1_Init+0xb0>)
 8000358:	f000 fc0a 	bl	8000b70 <HAL_ADC_Init>
 800035c:	4603      	mov	r3, r0
 800035e:	2b00      	cmp	r3, #0
 8000360:	d001      	beq.n	8000366 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8000362:	f000 f931 	bl	80005c8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000366:	2300      	movs	r3, #0
 8000368:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800036a:	2301      	movs	r3, #1
 800036c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 800036e:	2307      	movs	r3, #7
 8000370:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000372:	1d3b      	adds	r3, r7, #4
 8000374:	4619      	mov	r1, r3
 8000376:	4814      	ldr	r0, [pc, #80]	@ (80003c8 <MX_ADC1_Init+0xb0>)
 8000378:	f000 fdcc 	bl	8000f14 <HAL_ADC_ConfigChannel>
 800037c:	4603      	mov	r3, r0
 800037e:	2b00      	cmp	r3, #0
 8000380:	d001      	beq.n	8000386 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000382:	f000 f921 	bl	80005c8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000386:	2304      	movs	r3, #4
 8000388:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800038a:	2302      	movs	r3, #2
 800038c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800038e:	1d3b      	adds	r3, r7, #4
 8000390:	4619      	mov	r1, r3
 8000392:	480d      	ldr	r0, [pc, #52]	@ (80003c8 <MX_ADC1_Init+0xb0>)
 8000394:	f000 fdbe 	bl	8000f14 <HAL_ADC_ConfigChannel>
 8000398:	4603      	mov	r3, r0
 800039a:	2b00      	cmp	r3, #0
 800039c:	d001      	beq.n	80003a2 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 800039e:	f000 f913 	bl	80005c8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80003a2:	2305      	movs	r3, #5
 80003a4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80003a6:	2303      	movs	r3, #3
 80003a8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80003aa:	1d3b      	adds	r3, r7, #4
 80003ac:	4619      	mov	r1, r3
 80003ae:	4806      	ldr	r0, [pc, #24]	@ (80003c8 <MX_ADC1_Init+0xb0>)
 80003b0:	f000 fdb0 	bl	8000f14 <HAL_ADC_ConfigChannel>
 80003b4:	4603      	mov	r3, r0
 80003b6:	2b00      	cmp	r3, #0
 80003b8:	d001      	beq.n	80003be <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 80003ba:	f000 f905 	bl	80005c8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80003be:	bf00      	nop
 80003c0:	3710      	adds	r7, #16
 80003c2:	46bd      	mov	sp, r7
 80003c4:	bd80      	pop	{r7, pc}
 80003c6:	bf00      	nop
 80003c8:	20000084 	.word	0x20000084
 80003cc:	40012400 	.word	0x40012400

080003d0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80003d0:	b580      	push	{r7, lr}
 80003d2:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80003d4:	4b0a      	ldr	r3, [pc, #40]	@ (8000400 <MX_RTC_Init+0x30>)
 80003d6:	4a0b      	ldr	r2, [pc, #44]	@ (8000404 <MX_RTC_Init+0x34>)
 80003d8:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 80003da:	4b09      	ldr	r3, [pc, #36]	@ (8000400 <MX_RTC_Init+0x30>)
 80003dc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80003e0:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 80003e2:	4b07      	ldr	r3, [pc, #28]	@ (8000400 <MX_RTC_Init+0x30>)
 80003e4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80003e8:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80003ea:	4805      	ldr	r0, [pc, #20]	@ (8000400 <MX_RTC_Init+0x30>)
 80003ec:	f002 fa42 	bl	8002874 <HAL_RTC_Init>
 80003f0:	4603      	mov	r3, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d001      	beq.n	80003fa <MX_RTC_Init+0x2a>
  {
    Error_Handler();
 80003f6:	f000 f8e7 	bl	80005c8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80003fa:	bf00      	nop
 80003fc:	bd80      	pop	{r7, pc}
 80003fe:	bf00      	nop
 8000400:	200000f8 	.word	0x200000f8
 8000404:	40002800 	.word	0x40002800

08000408 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000408:	b580      	push	{r7, lr}
 800040a:	b08e      	sub	sp, #56	@ 0x38
 800040c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800040e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000412:	2200      	movs	r2, #0
 8000414:	601a      	str	r2, [r3, #0]
 8000416:	605a      	str	r2, [r3, #4]
 8000418:	609a      	str	r2, [r3, #8]
 800041a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800041c:	f107 0320 	add.w	r3, r7, #32
 8000420:	2200      	movs	r2, #0
 8000422:	601a      	str	r2, [r3, #0]
 8000424:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000426:	1d3b      	adds	r3, r7, #4
 8000428:	2200      	movs	r2, #0
 800042a:	601a      	str	r2, [r3, #0]
 800042c:	605a      	str	r2, [r3, #4]
 800042e:	609a      	str	r2, [r3, #8]
 8000430:	60da      	str	r2, [r3, #12]
 8000432:	611a      	str	r2, [r3, #16]
 8000434:	615a      	str	r2, [r3, #20]
 8000436:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000438:	4b32      	ldr	r3, [pc, #200]	@ (8000504 <MX_TIM3_Init+0xfc>)
 800043a:	4a33      	ldr	r2, [pc, #204]	@ (8000508 <MX_TIM3_Init+0x100>)
 800043c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7;
 800043e:	4b31      	ldr	r3, [pc, #196]	@ (8000504 <MX_TIM3_Init+0xfc>)
 8000440:	2207      	movs	r2, #7
 8000442:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000444:	4b2f      	ldr	r3, [pc, #188]	@ (8000504 <MX_TIM3_Init+0xfc>)
 8000446:	2200      	movs	r2, #0
 8000448:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 800044a:	4b2e      	ldr	r3, [pc, #184]	@ (8000504 <MX_TIM3_Init+0xfc>)
 800044c:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000450:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000452:	4b2c      	ldr	r3, [pc, #176]	@ (8000504 <MX_TIM3_Init+0xfc>)
 8000454:	2200      	movs	r2, #0
 8000456:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000458:	4b2a      	ldr	r3, [pc, #168]	@ (8000504 <MX_TIM3_Init+0xfc>)
 800045a:	2200      	movs	r2, #0
 800045c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800045e:	4829      	ldr	r0, [pc, #164]	@ (8000504 <MX_TIM3_Init+0xfc>)
 8000460:	f002 fb11 	bl	8002a86 <HAL_TIM_Base_Init>
 8000464:	4603      	mov	r3, r0
 8000466:	2b00      	cmp	r3, #0
 8000468:	d001      	beq.n	800046e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800046a:	f000 f8ad 	bl	80005c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800046e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000472:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000474:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000478:	4619      	mov	r1, r3
 800047a:	4822      	ldr	r0, [pc, #136]	@ (8000504 <MX_TIM3_Init+0xfc>)
 800047c:	f002 fe50 	bl	8003120 <HAL_TIM_ConfigClockSource>
 8000480:	4603      	mov	r3, r0
 8000482:	2b00      	cmp	r3, #0
 8000484:	d001      	beq.n	800048a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000486:	f000 f89f 	bl	80005c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800048a:	481e      	ldr	r0, [pc, #120]	@ (8000504 <MX_TIM3_Init+0xfc>)
 800048c:	f002 fb9c 	bl	8002bc8 <HAL_TIM_PWM_Init>
 8000490:	4603      	mov	r3, r0
 8000492:	2b00      	cmp	r3, #0
 8000494:	d001      	beq.n	800049a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000496:	f000 f897 	bl	80005c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800049a:	2300      	movs	r3, #0
 800049c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800049e:	2300      	movs	r3, #0
 80004a0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80004a2:	f107 0320 	add.w	r3, r7, #32
 80004a6:	4619      	mov	r1, r3
 80004a8:	4816      	ldr	r0, [pc, #88]	@ (8000504 <MX_TIM3_Init+0xfc>)
 80004aa:	f003 f9dd 	bl	8003868 <HAL_TIMEx_MasterConfigSynchronization>
 80004ae:	4603      	mov	r3, r0
 80004b0:	2b00      	cmp	r3, #0
 80004b2:	d001      	beq.n	80004b8 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80004b4:	f000 f888 	bl	80005c8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80004b8:	2360      	movs	r3, #96	@ 0x60
 80004ba:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 50;
 80004bc:	2332      	movs	r3, #50	@ 0x32
 80004be:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80004c0:	2300      	movs	r3, #0
 80004c2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80004c4:	2300      	movs	r3, #0
 80004c6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80004c8:	1d3b      	adds	r3, r7, #4
 80004ca:	2200      	movs	r2, #0
 80004cc:	4619      	mov	r1, r3
 80004ce:	480d      	ldr	r0, [pc, #52]	@ (8000504 <MX_TIM3_Init+0xfc>)
 80004d0:	f002 fd64 	bl	8002f9c <HAL_TIM_PWM_ConfigChannel>
 80004d4:	4603      	mov	r3, r0
 80004d6:	2b00      	cmp	r3, #0
 80004d8:	d001      	beq.n	80004de <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80004da:	f000 f875 	bl	80005c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80004de:	1d3b      	adds	r3, r7, #4
 80004e0:	2204      	movs	r2, #4
 80004e2:	4619      	mov	r1, r3
 80004e4:	4807      	ldr	r0, [pc, #28]	@ (8000504 <MX_TIM3_Init+0xfc>)
 80004e6:	f002 fd59 	bl	8002f9c <HAL_TIM_PWM_ConfigChannel>
 80004ea:	4603      	mov	r3, r0
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	d001      	beq.n	80004f4 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 80004f0:	f000 f86a 	bl	80005c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80004f4:	4803      	ldr	r0, [pc, #12]	@ (8000504 <MX_TIM3_Init+0xfc>)
 80004f6:	f000 f951 	bl	800079c <HAL_TIM_MspPostInit>

}
 80004fa:	bf00      	nop
 80004fc:	3738      	adds	r7, #56	@ 0x38
 80004fe:	46bd      	mov	sp, r7
 8000500:	bd80      	pop	{r7, pc}
 8000502:	bf00      	nop
 8000504:	2000010c 	.word	0x2000010c
 8000508:	40000400 	.word	0x40000400

0800050c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000510:	4b11      	ldr	r3, [pc, #68]	@ (8000558 <MX_USART2_UART_Init+0x4c>)
 8000512:	4a12      	ldr	r2, [pc, #72]	@ (800055c <MX_USART2_UART_Init+0x50>)
 8000514:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000516:	4b10      	ldr	r3, [pc, #64]	@ (8000558 <MX_USART2_UART_Init+0x4c>)
 8000518:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800051c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800051e:	4b0e      	ldr	r3, [pc, #56]	@ (8000558 <MX_USART2_UART_Init+0x4c>)
 8000520:	2200      	movs	r2, #0
 8000522:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000524:	4b0c      	ldr	r3, [pc, #48]	@ (8000558 <MX_USART2_UART_Init+0x4c>)
 8000526:	2200      	movs	r2, #0
 8000528:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800052a:	4b0b      	ldr	r3, [pc, #44]	@ (8000558 <MX_USART2_UART_Init+0x4c>)
 800052c:	2200      	movs	r2, #0
 800052e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000530:	4b09      	ldr	r3, [pc, #36]	@ (8000558 <MX_USART2_UART_Init+0x4c>)
 8000532:	220c      	movs	r2, #12
 8000534:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000536:	4b08      	ldr	r3, [pc, #32]	@ (8000558 <MX_USART2_UART_Init+0x4c>)
 8000538:	2200      	movs	r2, #0
 800053a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800053c:	4b06      	ldr	r3, [pc, #24]	@ (8000558 <MX_USART2_UART_Init+0x4c>)
 800053e:	2200      	movs	r2, #0
 8000540:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000542:	4805      	ldr	r0, [pc, #20]	@ (8000558 <MX_USART2_UART_Init+0x4c>)
 8000544:	f003 fa00 	bl	8003948 <HAL_UART_Init>
 8000548:	4603      	mov	r3, r0
 800054a:	2b00      	cmp	r3, #0
 800054c:	d001      	beq.n	8000552 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800054e:	f000 f83b 	bl	80005c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000552:	bf00      	nop
 8000554:	bd80      	pop	{r7, pc}
 8000556:	bf00      	nop
 8000558:	20000154 	.word	0x20000154
 800055c:	40004400 	.word	0x40004400

08000560 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b082      	sub	sp, #8
 8000564:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000566:	4b0c      	ldr	r3, [pc, #48]	@ (8000598 <MX_DMA_Init+0x38>)
 8000568:	695b      	ldr	r3, [r3, #20]
 800056a:	4a0b      	ldr	r2, [pc, #44]	@ (8000598 <MX_DMA_Init+0x38>)
 800056c:	f043 0301 	orr.w	r3, r3, #1
 8000570:	6153      	str	r3, [r2, #20]
 8000572:	4b09      	ldr	r3, [pc, #36]	@ (8000598 <MX_DMA_Init+0x38>)
 8000574:	695b      	ldr	r3, [r3, #20]
 8000576:	f003 0301 	and.w	r3, r3, #1
 800057a:	607b      	str	r3, [r7, #4]
 800057c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800057e:	2200      	movs	r2, #0
 8000580:	2100      	movs	r1, #0
 8000582:	200b      	movs	r0, #11
 8000584:	f001 f845 	bl	8001612 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000588:	200b      	movs	r0, #11
 800058a:	f001 f85e 	bl	800164a <HAL_NVIC_EnableIRQ>

}
 800058e:	bf00      	nop
 8000590:	3708      	adds	r7, #8
 8000592:	46bd      	mov	sp, r7
 8000594:	bd80      	pop	{r7, pc}
 8000596:	bf00      	nop
 8000598:	40021000 	.word	0x40021000

0800059c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800059c:	b480      	push	{r7}
 800059e:	b083      	sub	sp, #12
 80005a0:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005a2:	4b08      	ldr	r3, [pc, #32]	@ (80005c4 <MX_GPIO_Init+0x28>)
 80005a4:	699b      	ldr	r3, [r3, #24]
 80005a6:	4a07      	ldr	r2, [pc, #28]	@ (80005c4 <MX_GPIO_Init+0x28>)
 80005a8:	f043 0304 	orr.w	r3, r3, #4
 80005ac:	6193      	str	r3, [r2, #24]
 80005ae:	4b05      	ldr	r3, [pc, #20]	@ (80005c4 <MX_GPIO_Init+0x28>)
 80005b0:	699b      	ldr	r3, [r3, #24]
 80005b2:	f003 0304 	and.w	r3, r3, #4
 80005b6:	607b      	str	r3, [r7, #4]
 80005b8:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80005ba:	bf00      	nop
 80005bc:	370c      	adds	r7, #12
 80005be:	46bd      	mov	sp, r7
 80005c0:	bc80      	pop	{r7}
 80005c2:	4770      	bx	lr
 80005c4:	40021000 	.word	0x40021000

080005c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005c8:	b480      	push	{r7}
 80005ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005cc:	b672      	cpsid	i
}
 80005ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005d0:	bf00      	nop
 80005d2:	e7fd      	b.n	80005d0 <Error_Handler+0x8>

080005d4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005d4:	b480      	push	{r7}
 80005d6:	b085      	sub	sp, #20
 80005d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80005da:	4b15      	ldr	r3, [pc, #84]	@ (8000630 <HAL_MspInit+0x5c>)
 80005dc:	699b      	ldr	r3, [r3, #24]
 80005de:	4a14      	ldr	r2, [pc, #80]	@ (8000630 <HAL_MspInit+0x5c>)
 80005e0:	f043 0301 	orr.w	r3, r3, #1
 80005e4:	6193      	str	r3, [r2, #24]
 80005e6:	4b12      	ldr	r3, [pc, #72]	@ (8000630 <HAL_MspInit+0x5c>)
 80005e8:	699b      	ldr	r3, [r3, #24]
 80005ea:	f003 0301 	and.w	r3, r3, #1
 80005ee:	60bb      	str	r3, [r7, #8]
 80005f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005f2:	4b0f      	ldr	r3, [pc, #60]	@ (8000630 <HAL_MspInit+0x5c>)
 80005f4:	69db      	ldr	r3, [r3, #28]
 80005f6:	4a0e      	ldr	r2, [pc, #56]	@ (8000630 <HAL_MspInit+0x5c>)
 80005f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005fc:	61d3      	str	r3, [r2, #28]
 80005fe:	4b0c      	ldr	r3, [pc, #48]	@ (8000630 <HAL_MspInit+0x5c>)
 8000600:	69db      	ldr	r3, [r3, #28]
 8000602:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000606:	607b      	str	r3, [r7, #4]
 8000608:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800060a:	4b0a      	ldr	r3, [pc, #40]	@ (8000634 <HAL_MspInit+0x60>)
 800060c:	685b      	ldr	r3, [r3, #4]
 800060e:	60fb      	str	r3, [r7, #12]
 8000610:	68fb      	ldr	r3, [r7, #12]
 8000612:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000616:	60fb      	str	r3, [r7, #12]
 8000618:	68fb      	ldr	r3, [r7, #12]
 800061a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800061e:	60fb      	str	r3, [r7, #12]
 8000620:	4a04      	ldr	r2, [pc, #16]	@ (8000634 <HAL_MspInit+0x60>)
 8000622:	68fb      	ldr	r3, [r7, #12]
 8000624:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000626:	bf00      	nop
 8000628:	3714      	adds	r7, #20
 800062a:	46bd      	mov	sp, r7
 800062c:	bc80      	pop	{r7}
 800062e:	4770      	bx	lr
 8000630:	40021000 	.word	0x40021000
 8000634:	40010000 	.word	0x40010000

08000638 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b088      	sub	sp, #32
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000640:	f107 0310 	add.w	r3, r7, #16
 8000644:	2200      	movs	r2, #0
 8000646:	601a      	str	r2, [r3, #0]
 8000648:	605a      	str	r2, [r3, #4]
 800064a:	609a      	str	r2, [r3, #8]
 800064c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	4a28      	ldr	r2, [pc, #160]	@ (80006f4 <HAL_ADC_MspInit+0xbc>)
 8000654:	4293      	cmp	r3, r2
 8000656:	d149      	bne.n	80006ec <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000658:	4b27      	ldr	r3, [pc, #156]	@ (80006f8 <HAL_ADC_MspInit+0xc0>)
 800065a:	699b      	ldr	r3, [r3, #24]
 800065c:	4a26      	ldr	r2, [pc, #152]	@ (80006f8 <HAL_ADC_MspInit+0xc0>)
 800065e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000662:	6193      	str	r3, [r2, #24]
 8000664:	4b24      	ldr	r3, [pc, #144]	@ (80006f8 <HAL_ADC_MspInit+0xc0>)
 8000666:	699b      	ldr	r3, [r3, #24]
 8000668:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800066c:	60fb      	str	r3, [r7, #12]
 800066e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000670:	4b21      	ldr	r3, [pc, #132]	@ (80006f8 <HAL_ADC_MspInit+0xc0>)
 8000672:	699b      	ldr	r3, [r3, #24]
 8000674:	4a20      	ldr	r2, [pc, #128]	@ (80006f8 <HAL_ADC_MspInit+0xc0>)
 8000676:	f043 0304 	orr.w	r3, r3, #4
 800067a:	6193      	str	r3, [r2, #24]
 800067c:	4b1e      	ldr	r3, [pc, #120]	@ (80006f8 <HAL_ADC_MspInit+0xc0>)
 800067e:	699b      	ldr	r3, [r3, #24]
 8000680:	f003 0304 	and.w	r3, r3, #4
 8000684:	60bb      	str	r3, [r7, #8]
 8000686:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4|GPIO_PIN_5;
 8000688:	2331      	movs	r3, #49	@ 0x31
 800068a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800068c:	2303      	movs	r3, #3
 800068e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000690:	f107 0310 	add.w	r3, r7, #16
 8000694:	4619      	mov	r1, r3
 8000696:	4819      	ldr	r0, [pc, #100]	@ (80006fc <HAL_ADC_MspInit+0xc4>)
 8000698:	f001 f9e0 	bl	8001a5c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800069c:	4b18      	ldr	r3, [pc, #96]	@ (8000700 <HAL_ADC_MspInit+0xc8>)
 800069e:	4a19      	ldr	r2, [pc, #100]	@ (8000704 <HAL_ADC_MspInit+0xcc>)
 80006a0:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80006a2:	4b17      	ldr	r3, [pc, #92]	@ (8000700 <HAL_ADC_MspInit+0xc8>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80006a8:	4b15      	ldr	r3, [pc, #84]	@ (8000700 <HAL_ADC_MspInit+0xc8>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80006ae:	4b14      	ldr	r3, [pc, #80]	@ (8000700 <HAL_ADC_MspInit+0xc8>)
 80006b0:	2280      	movs	r2, #128	@ 0x80
 80006b2:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80006b4:	4b12      	ldr	r3, [pc, #72]	@ (8000700 <HAL_ADC_MspInit+0xc8>)
 80006b6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80006ba:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80006bc:	4b10      	ldr	r3, [pc, #64]	@ (8000700 <HAL_ADC_MspInit+0xc8>)
 80006be:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80006c2:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80006c4:	4b0e      	ldr	r3, [pc, #56]	@ (8000700 <HAL_ADC_MspInit+0xc8>)
 80006c6:	2220      	movs	r2, #32
 80006c8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80006ca:	4b0d      	ldr	r3, [pc, #52]	@ (8000700 <HAL_ADC_MspInit+0xc8>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80006d0:	480b      	ldr	r0, [pc, #44]	@ (8000700 <HAL_ADC_MspInit+0xc8>)
 80006d2:	f000 ffd5 	bl	8001680 <HAL_DMA_Init>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 80006dc:	f7ff ff74 	bl	80005c8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	4a07      	ldr	r2, [pc, #28]	@ (8000700 <HAL_ADC_MspInit+0xc8>)
 80006e4:	621a      	str	r2, [r3, #32]
 80006e6:	4a06      	ldr	r2, [pc, #24]	@ (8000700 <HAL_ADC_MspInit+0xc8>)
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	6253      	str	r3, [r2, #36]	@ 0x24

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 80006ec:	bf00      	nop
 80006ee:	3720      	adds	r7, #32
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	40012400 	.word	0x40012400
 80006f8:	40021000 	.word	0x40021000
 80006fc:	40010800 	.word	0x40010800
 8000700:	200000b4 	.word	0x200000b4
 8000704:	40020008 	.word	0x40020008

08000708 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b084      	sub	sp, #16
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	4a0b      	ldr	r2, [pc, #44]	@ (8000744 <HAL_RTC_MspInit+0x3c>)
 8000716:	4293      	cmp	r3, r2
 8000718:	d110      	bne.n	800073c <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 800071a:	f001 fb23 	bl	8001d64 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 800071e:	4b0a      	ldr	r3, [pc, #40]	@ (8000748 <HAL_RTC_MspInit+0x40>)
 8000720:	69db      	ldr	r3, [r3, #28]
 8000722:	4a09      	ldr	r2, [pc, #36]	@ (8000748 <HAL_RTC_MspInit+0x40>)
 8000724:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8000728:	61d3      	str	r3, [r2, #28]
 800072a:	4b07      	ldr	r3, [pc, #28]	@ (8000748 <HAL_RTC_MspInit+0x40>)
 800072c:	69db      	ldr	r3, [r3, #28]
 800072e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8000732:	60fb      	str	r3, [r7, #12]
 8000734:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000736:	4b05      	ldr	r3, [pc, #20]	@ (800074c <HAL_RTC_MspInit+0x44>)
 8000738:	2201      	movs	r2, #1
 800073a:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTC_MspInit 1 */

  }

}
 800073c:	bf00      	nop
 800073e:	3710      	adds	r7, #16
 8000740:	46bd      	mov	sp, r7
 8000742:	bd80      	pop	{r7, pc}
 8000744:	40002800 	.word	0x40002800
 8000748:	40021000 	.word	0x40021000
 800074c:	4242043c 	.word	0x4242043c

08000750 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b084      	sub	sp, #16
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	4a0d      	ldr	r2, [pc, #52]	@ (8000794 <HAL_TIM_Base_MspInit+0x44>)
 800075e:	4293      	cmp	r3, r2
 8000760:	d113      	bne.n	800078a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000762:	4b0d      	ldr	r3, [pc, #52]	@ (8000798 <HAL_TIM_Base_MspInit+0x48>)
 8000764:	69db      	ldr	r3, [r3, #28]
 8000766:	4a0c      	ldr	r2, [pc, #48]	@ (8000798 <HAL_TIM_Base_MspInit+0x48>)
 8000768:	f043 0302 	orr.w	r3, r3, #2
 800076c:	61d3      	str	r3, [r2, #28]
 800076e:	4b0a      	ldr	r3, [pc, #40]	@ (8000798 <HAL_TIM_Base_MspInit+0x48>)
 8000770:	69db      	ldr	r3, [r3, #28]
 8000772:	f003 0302 	and.w	r3, r3, #2
 8000776:	60fb      	str	r3, [r7, #12]
 8000778:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 6, 0);
 800077a:	2200      	movs	r2, #0
 800077c:	2106      	movs	r1, #6
 800077e:	201d      	movs	r0, #29
 8000780:	f000 ff47 	bl	8001612 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000784:	201d      	movs	r0, #29
 8000786:	f000 ff60 	bl	800164a <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 800078a:	bf00      	nop
 800078c:	3710      	adds	r7, #16
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	40000400 	.word	0x40000400
 8000798:	40021000 	.word	0x40021000

0800079c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b088      	sub	sp, #32
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007a4:	f107 0310 	add.w	r3, r7, #16
 80007a8:	2200      	movs	r2, #0
 80007aa:	601a      	str	r2, [r3, #0]
 80007ac:	605a      	str	r2, [r3, #4]
 80007ae:	609a      	str	r2, [r3, #8]
 80007b0:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	4a0f      	ldr	r2, [pc, #60]	@ (80007f4 <HAL_TIM_MspPostInit+0x58>)
 80007b8:	4293      	cmp	r3, r2
 80007ba:	d117      	bne.n	80007ec <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007bc:	4b0e      	ldr	r3, [pc, #56]	@ (80007f8 <HAL_TIM_MspPostInit+0x5c>)
 80007be:	699b      	ldr	r3, [r3, #24]
 80007c0:	4a0d      	ldr	r2, [pc, #52]	@ (80007f8 <HAL_TIM_MspPostInit+0x5c>)
 80007c2:	f043 0304 	orr.w	r3, r3, #4
 80007c6:	6193      	str	r3, [r2, #24]
 80007c8:	4b0b      	ldr	r3, [pc, #44]	@ (80007f8 <HAL_TIM_MspPostInit+0x5c>)
 80007ca:	699b      	ldr	r3, [r3, #24]
 80007cc:	f003 0304 	and.w	r3, r3, #4
 80007d0:	60fb      	str	r3, [r7, #12]
 80007d2:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80007d4:	23c0      	movs	r3, #192	@ 0xc0
 80007d6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007d8:	2302      	movs	r3, #2
 80007da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007dc:	2302      	movs	r3, #2
 80007de:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007e0:	f107 0310 	add.w	r3, r7, #16
 80007e4:	4619      	mov	r1, r3
 80007e6:	4805      	ldr	r0, [pc, #20]	@ (80007fc <HAL_TIM_MspPostInit+0x60>)
 80007e8:	f001 f938 	bl	8001a5c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80007ec:	bf00      	nop
 80007ee:	3720      	adds	r7, #32
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bd80      	pop	{r7, pc}
 80007f4:	40000400 	.word	0x40000400
 80007f8:	40021000 	.word	0x40021000
 80007fc:	40010800 	.word	0x40010800

08000800 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b088      	sub	sp, #32
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000808:	f107 0310 	add.w	r3, r7, #16
 800080c:	2200      	movs	r2, #0
 800080e:	601a      	str	r2, [r3, #0]
 8000810:	605a      	str	r2, [r3, #4]
 8000812:	609a      	str	r2, [r3, #8]
 8000814:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	4a1b      	ldr	r2, [pc, #108]	@ (8000888 <HAL_UART_MspInit+0x88>)
 800081c:	4293      	cmp	r3, r2
 800081e:	d12f      	bne.n	8000880 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000820:	4b1a      	ldr	r3, [pc, #104]	@ (800088c <HAL_UART_MspInit+0x8c>)
 8000822:	69db      	ldr	r3, [r3, #28]
 8000824:	4a19      	ldr	r2, [pc, #100]	@ (800088c <HAL_UART_MspInit+0x8c>)
 8000826:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800082a:	61d3      	str	r3, [r2, #28]
 800082c:	4b17      	ldr	r3, [pc, #92]	@ (800088c <HAL_UART_MspInit+0x8c>)
 800082e:	69db      	ldr	r3, [r3, #28]
 8000830:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000834:	60fb      	str	r3, [r7, #12]
 8000836:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000838:	4b14      	ldr	r3, [pc, #80]	@ (800088c <HAL_UART_MspInit+0x8c>)
 800083a:	699b      	ldr	r3, [r3, #24]
 800083c:	4a13      	ldr	r2, [pc, #76]	@ (800088c <HAL_UART_MspInit+0x8c>)
 800083e:	f043 0304 	orr.w	r3, r3, #4
 8000842:	6193      	str	r3, [r2, #24]
 8000844:	4b11      	ldr	r3, [pc, #68]	@ (800088c <HAL_UART_MspInit+0x8c>)
 8000846:	699b      	ldr	r3, [r3, #24]
 8000848:	f003 0304 	and.w	r3, r3, #4
 800084c:	60bb      	str	r3, [r7, #8]
 800084e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000850:	2304      	movs	r3, #4
 8000852:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000854:	2302      	movs	r3, #2
 8000856:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000858:	2303      	movs	r3, #3
 800085a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800085c:	f107 0310 	add.w	r3, r7, #16
 8000860:	4619      	mov	r1, r3
 8000862:	480b      	ldr	r0, [pc, #44]	@ (8000890 <HAL_UART_MspInit+0x90>)
 8000864:	f001 f8fa 	bl	8001a5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000868:	2308      	movs	r3, #8
 800086a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800086c:	2300      	movs	r3, #0
 800086e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000870:	2300      	movs	r3, #0
 8000872:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000874:	f107 0310 	add.w	r3, r7, #16
 8000878:	4619      	mov	r1, r3
 800087a:	4805      	ldr	r0, [pc, #20]	@ (8000890 <HAL_UART_MspInit+0x90>)
 800087c:	f001 f8ee 	bl	8001a5c <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000880:	bf00      	nop
 8000882:	3720      	adds	r7, #32
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}
 8000888:	40004400 	.word	0x40004400
 800088c:	40021000 	.word	0x40021000
 8000890:	40010800 	.word	0x40010800

08000894 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000894:	b480      	push	{r7}
 8000896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000898:	bf00      	nop
 800089a:	e7fd      	b.n	8000898 <NMI_Handler+0x4>

0800089c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008a0:	bf00      	nop
 80008a2:	e7fd      	b.n	80008a0 <HardFault_Handler+0x4>

080008a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008a8:	bf00      	nop
 80008aa:	e7fd      	b.n	80008a8 <MemManage_Handler+0x4>

080008ac <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008ac:	b480      	push	{r7}
 80008ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008b0:	bf00      	nop
 80008b2:	e7fd      	b.n	80008b0 <BusFault_Handler+0x4>

080008b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008b4:	b480      	push	{r7}
 80008b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008b8:	bf00      	nop
 80008ba:	e7fd      	b.n	80008b8 <UsageFault_Handler+0x4>

080008bc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008c0:	bf00      	nop
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bc80      	pop	{r7}
 80008c6:	4770      	bx	lr

080008c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008c8:	b480      	push	{r7}
 80008ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008cc:	bf00      	nop
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bc80      	pop	{r7}
 80008d2:	4770      	bx	lr

080008d4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008d8:	bf00      	nop
 80008da:	46bd      	mov	sp, r7
 80008dc:	bc80      	pop	{r7}
 80008de:	4770      	bx	lr

080008e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008e4:	f000 f928 	bl	8000b38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008e8:	bf00      	nop
 80008ea:	bd80      	pop	{r7, pc}

080008ec <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80008f0:	4802      	ldr	r0, [pc, #8]	@ (80008fc <DMA1_Channel1_IRQHandler+0x10>)
 80008f2:	f000 ff7f 	bl	80017f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80008f6:	bf00      	nop
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	200000b4 	.word	0x200000b4

08000900 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000904:	4802      	ldr	r0, [pc, #8]	@ (8000910 <TIM3_IRQHandler+0x10>)
 8000906:	f002 fa59 	bl	8002dbc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800090a:	bf00      	nop
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	2000010c 	.word	0x2000010c

08000914 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b086      	sub	sp, #24
 8000918:	af00      	add	r7, sp, #0
 800091a:	60f8      	str	r0, [r7, #12]
 800091c:	60b9      	str	r1, [r7, #8]
 800091e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000920:	2300      	movs	r3, #0
 8000922:	617b      	str	r3, [r7, #20]
 8000924:	e00a      	b.n	800093c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000926:	f3af 8000 	nop.w
 800092a:	4601      	mov	r1, r0
 800092c:	68bb      	ldr	r3, [r7, #8]
 800092e:	1c5a      	adds	r2, r3, #1
 8000930:	60ba      	str	r2, [r7, #8]
 8000932:	b2ca      	uxtb	r2, r1
 8000934:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000936:	697b      	ldr	r3, [r7, #20]
 8000938:	3301      	adds	r3, #1
 800093a:	617b      	str	r3, [r7, #20]
 800093c:	697a      	ldr	r2, [r7, #20]
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	429a      	cmp	r2, r3
 8000942:	dbf0      	blt.n	8000926 <_read+0x12>
  }

  return len;
 8000944:	687b      	ldr	r3, [r7, #4]
}
 8000946:	4618      	mov	r0, r3
 8000948:	3718      	adds	r7, #24
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}

0800094e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800094e:	b580      	push	{r7, lr}
 8000950:	b086      	sub	sp, #24
 8000952:	af00      	add	r7, sp, #0
 8000954:	60f8      	str	r0, [r7, #12]
 8000956:	60b9      	str	r1, [r7, #8]
 8000958:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800095a:	2300      	movs	r3, #0
 800095c:	617b      	str	r3, [r7, #20]
 800095e:	e009      	b.n	8000974 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000960:	68bb      	ldr	r3, [r7, #8]
 8000962:	1c5a      	adds	r2, r3, #1
 8000964:	60ba      	str	r2, [r7, #8]
 8000966:	781b      	ldrb	r3, [r3, #0]
 8000968:	4618      	mov	r0, r3
 800096a:	f7ff fbef 	bl	800014c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800096e:	697b      	ldr	r3, [r7, #20]
 8000970:	3301      	adds	r3, #1
 8000972:	617b      	str	r3, [r7, #20]
 8000974:	697a      	ldr	r2, [r7, #20]
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	429a      	cmp	r2, r3
 800097a:	dbf1      	blt.n	8000960 <_write+0x12>
  }
  return len;
 800097c:	687b      	ldr	r3, [r7, #4]
}
 800097e:	4618      	mov	r0, r3
 8000980:	3718      	adds	r7, #24
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}

08000986 <_close>:

int _close(int file)
{
 8000986:	b480      	push	{r7}
 8000988:	b083      	sub	sp, #12
 800098a:	af00      	add	r7, sp, #0
 800098c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800098e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000992:	4618      	mov	r0, r3
 8000994:	370c      	adds	r7, #12
 8000996:	46bd      	mov	sp, r7
 8000998:	bc80      	pop	{r7}
 800099a:	4770      	bx	lr

0800099c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800099c:	b480      	push	{r7}
 800099e:	b083      	sub	sp, #12
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
 80009a4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80009a6:	683b      	ldr	r3, [r7, #0]
 80009a8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80009ac:	605a      	str	r2, [r3, #4]
  return 0;
 80009ae:	2300      	movs	r3, #0
}
 80009b0:	4618      	mov	r0, r3
 80009b2:	370c      	adds	r7, #12
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bc80      	pop	{r7}
 80009b8:	4770      	bx	lr

080009ba <_isatty>:

int _isatty(int file)
{
 80009ba:	b480      	push	{r7}
 80009bc:	b083      	sub	sp, #12
 80009be:	af00      	add	r7, sp, #0
 80009c0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80009c2:	2301      	movs	r3, #1
}
 80009c4:	4618      	mov	r0, r3
 80009c6:	370c      	adds	r7, #12
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bc80      	pop	{r7}
 80009cc:	4770      	bx	lr

080009ce <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80009ce:	b480      	push	{r7}
 80009d0:	b085      	sub	sp, #20
 80009d2:	af00      	add	r7, sp, #0
 80009d4:	60f8      	str	r0, [r7, #12]
 80009d6:	60b9      	str	r1, [r7, #8]
 80009d8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80009da:	2300      	movs	r3, #0
}
 80009dc:	4618      	mov	r0, r3
 80009de:	3714      	adds	r7, #20
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bc80      	pop	{r7}
 80009e4:	4770      	bx	lr
	...

080009e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b086      	sub	sp, #24
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009f0:	4a14      	ldr	r2, [pc, #80]	@ (8000a44 <_sbrk+0x5c>)
 80009f2:	4b15      	ldr	r3, [pc, #84]	@ (8000a48 <_sbrk+0x60>)
 80009f4:	1ad3      	subs	r3, r2, r3
 80009f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009f8:	697b      	ldr	r3, [r7, #20]
 80009fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009fc:	4b13      	ldr	r3, [pc, #76]	@ (8000a4c <_sbrk+0x64>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d102      	bne.n	8000a0a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a04:	4b11      	ldr	r3, [pc, #68]	@ (8000a4c <_sbrk+0x64>)
 8000a06:	4a12      	ldr	r2, [pc, #72]	@ (8000a50 <_sbrk+0x68>)
 8000a08:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a0a:	4b10      	ldr	r3, [pc, #64]	@ (8000a4c <_sbrk+0x64>)
 8000a0c:	681a      	ldr	r2, [r3, #0]
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	4413      	add	r3, r2
 8000a12:	693a      	ldr	r2, [r7, #16]
 8000a14:	429a      	cmp	r2, r3
 8000a16:	d207      	bcs.n	8000a28 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a18:	f003 fb20 	bl	800405c <__errno>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	220c      	movs	r2, #12
 8000a20:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a22:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000a26:	e009      	b.n	8000a3c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a28:	4b08      	ldr	r3, [pc, #32]	@ (8000a4c <_sbrk+0x64>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a2e:	4b07      	ldr	r3, [pc, #28]	@ (8000a4c <_sbrk+0x64>)
 8000a30:	681a      	ldr	r2, [r3, #0]
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	4413      	add	r3, r2
 8000a36:	4a05      	ldr	r2, [pc, #20]	@ (8000a4c <_sbrk+0x64>)
 8000a38:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a3a:	68fb      	ldr	r3, [r7, #12]
}
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	3718      	adds	r7, #24
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	20005000 	.word	0x20005000
 8000a48:	00000400 	.word	0x00000400
 8000a4c:	200001a4 	.word	0x200001a4
 8000a50:	200002f8 	.word	0x200002f8

08000a54 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a58:	bf00      	nop
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bc80      	pop	{r7}
 8000a5e:	4770      	bx	lr

08000a60 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a60:	f7ff fff8 	bl	8000a54 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a64:	480b      	ldr	r0, [pc, #44]	@ (8000a94 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000a66:	490c      	ldr	r1, [pc, #48]	@ (8000a98 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000a68:	4a0c      	ldr	r2, [pc, #48]	@ (8000a9c <LoopFillZerobss+0x16>)
  movs r3, #0
 8000a6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a6c:	e002      	b.n	8000a74 <LoopCopyDataInit>

08000a6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a72:	3304      	adds	r3, #4

08000a74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a78:	d3f9      	bcc.n	8000a6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a7a:	4a09      	ldr	r2, [pc, #36]	@ (8000aa0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000a7c:	4c09      	ldr	r4, [pc, #36]	@ (8000aa4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a80:	e001      	b.n	8000a86 <LoopFillZerobss>

08000a82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a84:	3204      	adds	r2, #4

08000a86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a88:	d3fb      	bcc.n	8000a82 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a8a:	f003 faed 	bl	8004068 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a8e:	f7ff fb75 	bl	800017c <main>
  bx lr
 8000a92:	4770      	bx	lr
  ldr r0, =_sdata
 8000a94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a98:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000a9c:	08004ca8 	.word	0x08004ca8
  ldr r2, =_sbss
 8000aa0:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000aa4:	200002f8 	.word	0x200002f8

08000aa8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000aa8:	e7fe      	b.n	8000aa8 <ADC1_2_IRQHandler>
	...

08000aac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ab0:	4b08      	ldr	r3, [pc, #32]	@ (8000ad4 <HAL_Init+0x28>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	4a07      	ldr	r2, [pc, #28]	@ (8000ad4 <HAL_Init+0x28>)
 8000ab6:	f043 0310 	orr.w	r3, r3, #16
 8000aba:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000abc:	2003      	movs	r0, #3
 8000abe:	f000 fd9d 	bl	80015fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ac2:	200f      	movs	r0, #15
 8000ac4:	f000 f808 	bl	8000ad8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ac8:	f7ff fd84 	bl	80005d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000acc:	2300      	movs	r3, #0
}
 8000ace:	4618      	mov	r0, r3
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	40022000 	.word	0x40022000

08000ad8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b082      	sub	sp, #8
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ae0:	4b12      	ldr	r3, [pc, #72]	@ (8000b2c <HAL_InitTick+0x54>)
 8000ae2:	681a      	ldr	r2, [r3, #0]
 8000ae4:	4b12      	ldr	r3, [pc, #72]	@ (8000b30 <HAL_InitTick+0x58>)
 8000ae6:	781b      	ldrb	r3, [r3, #0]
 8000ae8:	4619      	mov	r1, r3
 8000aea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000aee:	fbb3 f3f1 	udiv	r3, r3, r1
 8000af2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000af6:	4618      	mov	r0, r3
 8000af8:	f000 fdb5 	bl	8001666 <HAL_SYSTICK_Config>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d001      	beq.n	8000b06 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b02:	2301      	movs	r3, #1
 8000b04:	e00e      	b.n	8000b24 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	2b0f      	cmp	r3, #15
 8000b0a:	d80a      	bhi.n	8000b22 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	6879      	ldr	r1, [r7, #4]
 8000b10:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000b14:	f000 fd7d 	bl	8001612 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b18:	4a06      	ldr	r2, [pc, #24]	@ (8000b34 <HAL_InitTick+0x5c>)
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	e000      	b.n	8000b24 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b22:	2301      	movs	r3, #1
}
 8000b24:	4618      	mov	r0, r3
 8000b26:	3708      	adds	r7, #8
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}
 8000b2c:	20000000 	.word	0x20000000
 8000b30:	20000008 	.word	0x20000008
 8000b34:	20000004 	.word	0x20000004

08000b38 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b3c:	4b05      	ldr	r3, [pc, #20]	@ (8000b54 <HAL_IncTick+0x1c>)
 8000b3e:	781b      	ldrb	r3, [r3, #0]
 8000b40:	461a      	mov	r2, r3
 8000b42:	4b05      	ldr	r3, [pc, #20]	@ (8000b58 <HAL_IncTick+0x20>)
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	4413      	add	r3, r2
 8000b48:	4a03      	ldr	r2, [pc, #12]	@ (8000b58 <HAL_IncTick+0x20>)
 8000b4a:	6013      	str	r3, [r2, #0]
}
 8000b4c:	bf00      	nop
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bc80      	pop	{r7}
 8000b52:	4770      	bx	lr
 8000b54:	20000008 	.word	0x20000008
 8000b58:	200001a8 	.word	0x200001a8

08000b5c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
  return uwTick;
 8000b60:	4b02      	ldr	r3, [pc, #8]	@ (8000b6c <HAL_GetTick+0x10>)
 8000b62:	681b      	ldr	r3, [r3, #0]
}
 8000b64:	4618      	mov	r0, r3
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bc80      	pop	{r7}
 8000b6a:	4770      	bx	lr
 8000b6c:	200001a8 	.word	0x200001a8

08000b70 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b086      	sub	sp, #24
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000b80:	2300      	movs	r3, #0
 8000b82:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000b84:	2300      	movs	r3, #0
 8000b86:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d101      	bne.n	8000b92 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000b8e:	2301      	movs	r3, #1
 8000b90:	e0be      	b.n	8000d10 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	689b      	ldr	r3, [r3, #8]
 8000b96:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d109      	bne.n	8000bb4 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	2200      	movs	r2, #0
 8000baa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000bae:	6878      	ldr	r0, [r7, #4]
 8000bb0:	f7ff fd42 	bl	8000638 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000bb4:	6878      	ldr	r0, [r7, #4]
 8000bb6:	f000 faff 	bl	80011b8 <ADC_ConversionStop_Disable>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000bc2:	f003 0310 	and.w	r3, r3, #16
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	f040 8099 	bne.w	8000cfe <HAL_ADC_Init+0x18e>
 8000bcc:	7dfb      	ldrb	r3, [r7, #23]
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	f040 8095 	bne.w	8000cfe <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000bd8:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000bdc:	f023 0302 	bic.w	r3, r3, #2
 8000be0:	f043 0202 	orr.w	r2, r3, #2
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000bf0:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	7b1b      	ldrb	r3, [r3, #12]
 8000bf6:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000bf8:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000bfa:	68ba      	ldr	r2, [r7, #8]
 8000bfc:	4313      	orrs	r3, r2
 8000bfe:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	689b      	ldr	r3, [r3, #8]
 8000c04:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000c08:	d003      	beq.n	8000c12 <HAL_ADC_Init+0xa2>
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	689b      	ldr	r3, [r3, #8]
 8000c0e:	2b01      	cmp	r3, #1
 8000c10:	d102      	bne.n	8000c18 <HAL_ADC_Init+0xa8>
 8000c12:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000c16:	e000      	b.n	8000c1a <HAL_ADC_Init+0xaa>
 8000c18:	2300      	movs	r3, #0
 8000c1a:	693a      	ldr	r2, [r7, #16]
 8000c1c:	4313      	orrs	r3, r2
 8000c1e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	7d1b      	ldrb	r3, [r3, #20]
 8000c24:	2b01      	cmp	r3, #1
 8000c26:	d119      	bne.n	8000c5c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	7b1b      	ldrb	r3, [r3, #12]
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d109      	bne.n	8000c44 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	699b      	ldr	r3, [r3, #24]
 8000c34:	3b01      	subs	r3, #1
 8000c36:	035a      	lsls	r2, r3, #13
 8000c38:	693b      	ldr	r3, [r7, #16]
 8000c3a:	4313      	orrs	r3, r2
 8000c3c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000c40:	613b      	str	r3, [r7, #16]
 8000c42:	e00b      	b.n	8000c5c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c48:	f043 0220 	orr.w	r2, r3, #32
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c54:	f043 0201 	orr.w	r2, r3, #1
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	685b      	ldr	r3, [r3, #4]
 8000c62:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	693a      	ldr	r2, [r7, #16]
 8000c6c:	430a      	orrs	r2, r1
 8000c6e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	689a      	ldr	r2, [r3, #8]
 8000c76:	4b28      	ldr	r3, [pc, #160]	@ (8000d18 <HAL_ADC_Init+0x1a8>)
 8000c78:	4013      	ands	r3, r2
 8000c7a:	687a      	ldr	r2, [r7, #4]
 8000c7c:	6812      	ldr	r2, [r2, #0]
 8000c7e:	68b9      	ldr	r1, [r7, #8]
 8000c80:	430b      	orrs	r3, r1
 8000c82:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	689b      	ldr	r3, [r3, #8]
 8000c88:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000c8c:	d003      	beq.n	8000c96 <HAL_ADC_Init+0x126>
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	689b      	ldr	r3, [r3, #8]
 8000c92:	2b01      	cmp	r3, #1
 8000c94:	d104      	bne.n	8000ca0 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	691b      	ldr	r3, [r3, #16]
 8000c9a:	3b01      	subs	r3, #1
 8000c9c:	051b      	lsls	r3, r3, #20
 8000c9e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ca6:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	68fa      	ldr	r2, [r7, #12]
 8000cb0:	430a      	orrs	r2, r1
 8000cb2:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	689a      	ldr	r2, [r3, #8]
 8000cba:	4b18      	ldr	r3, [pc, #96]	@ (8000d1c <HAL_ADC_Init+0x1ac>)
 8000cbc:	4013      	ands	r3, r2
 8000cbe:	68ba      	ldr	r2, [r7, #8]
 8000cc0:	429a      	cmp	r2, r3
 8000cc2:	d10b      	bne.n	8000cdc <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000cce:	f023 0303 	bic.w	r3, r3, #3
 8000cd2:	f043 0201 	orr.w	r2, r3, #1
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000cda:	e018      	b.n	8000d0e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ce0:	f023 0312 	bic.w	r3, r3, #18
 8000ce4:	f043 0210 	orr.w	r2, r3, #16
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000cf0:	f043 0201 	orr.w	r2, r3, #1
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000cf8:	2301      	movs	r3, #1
 8000cfa:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000cfc:	e007      	b.n	8000d0e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d02:	f043 0210 	orr.w	r2, r3, #16
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000d0a:	2301      	movs	r3, #1
 8000d0c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000d0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8000d10:	4618      	mov	r0, r3
 8000d12:	3718      	adds	r7, #24
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	ffe1f7fd 	.word	0xffe1f7fd
 8000d1c:	ff1f0efe 	.word	0xff1f0efe

08000d20 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b086      	sub	sp, #24
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	60f8      	str	r0, [r7, #12]
 8000d28:	60b9      	str	r1, [r7, #8]
 8000d2a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	4a64      	ldr	r2, [pc, #400]	@ (8000ec8 <HAL_ADC_Start_DMA+0x1a8>)
 8000d36:	4293      	cmp	r3, r2
 8000d38:	d004      	beq.n	8000d44 <HAL_ADC_Start_DMA+0x24>
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	4a63      	ldr	r2, [pc, #396]	@ (8000ecc <HAL_ADC_Start_DMA+0x1ac>)
 8000d40:	4293      	cmp	r3, r2
 8000d42:	d106      	bne.n	8000d52 <HAL_ADC_Start_DMA+0x32>
 8000d44:	4b60      	ldr	r3, [pc, #384]	@ (8000ec8 <HAL_ADC_Start_DMA+0x1a8>)
 8000d46:	685b      	ldr	r3, [r3, #4]
 8000d48:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	f040 80b3 	bne.w	8000eb8 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000d58:	2b01      	cmp	r3, #1
 8000d5a:	d101      	bne.n	8000d60 <HAL_ADC_Start_DMA+0x40>
 8000d5c:	2302      	movs	r3, #2
 8000d5e:	e0ae      	b.n	8000ebe <HAL_ADC_Start_DMA+0x19e>
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	2201      	movs	r2, #1
 8000d64:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8000d68:	68f8      	ldr	r0, [r7, #12]
 8000d6a:	f000 f9cb 	bl	8001104 <ADC_Enable>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000d72:	7dfb      	ldrb	r3, [r7, #23]
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	f040 809a 	bne.w	8000eae <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000d7a:	68fb      	ldr	r3, [r7, #12]
 8000d7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d7e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8000d82:	f023 0301 	bic.w	r3, r3, #1
 8000d86:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000d8a:	68fb      	ldr	r3, [r7, #12]
 8000d8c:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	4a4e      	ldr	r2, [pc, #312]	@ (8000ecc <HAL_ADC_Start_DMA+0x1ac>)
 8000d94:	4293      	cmp	r3, r2
 8000d96:	d105      	bne.n	8000da4 <HAL_ADC_Start_DMA+0x84>
 8000d98:	4b4b      	ldr	r3, [pc, #300]	@ (8000ec8 <HAL_ADC_Start_DMA+0x1a8>)
 8000d9a:	685b      	ldr	r3, [r3, #4]
 8000d9c:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d115      	bne.n	8000dd0 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000da8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	685b      	ldr	r3, [r3, #4]
 8000db6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d026      	beq.n	8000e0c <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000dc2:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000dc6:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8000dca:	68fb      	ldr	r3, [r7, #12]
 8000dcc:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000dce:	e01d      	b.n	8000e0c <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000dd4:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	4a39      	ldr	r2, [pc, #228]	@ (8000ec8 <HAL_ADC_Start_DMA+0x1a8>)
 8000de2:	4293      	cmp	r3, r2
 8000de4:	d004      	beq.n	8000df0 <HAL_ADC_Start_DMA+0xd0>
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	4a38      	ldr	r2, [pc, #224]	@ (8000ecc <HAL_ADC_Start_DMA+0x1ac>)
 8000dec:	4293      	cmp	r3, r2
 8000dee:	d10d      	bne.n	8000e0c <HAL_ADC_Start_DMA+0xec>
 8000df0:	4b35      	ldr	r3, [pc, #212]	@ (8000ec8 <HAL_ADC_Start_DMA+0x1a8>)
 8000df2:	685b      	ldr	r3, [r3, #4]
 8000df4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d007      	beq.n	8000e0c <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e00:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000e04:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e10:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d006      	beq.n	8000e26 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e1c:	f023 0206 	bic.w	r2, r3, #6
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000e24:	e002      	b.n	8000e2c <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	2200      	movs	r2, #0
 8000e2a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	2200      	movs	r2, #0
 8000e30:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	6a1b      	ldr	r3, [r3, #32]
 8000e38:	4a25      	ldr	r2, [pc, #148]	@ (8000ed0 <HAL_ADC_Start_DMA+0x1b0>)
 8000e3a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	6a1b      	ldr	r3, [r3, #32]
 8000e40:	4a24      	ldr	r2, [pc, #144]	@ (8000ed4 <HAL_ADC_Start_DMA+0x1b4>)
 8000e42:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	6a1b      	ldr	r3, [r3, #32]
 8000e48:	4a23      	ldr	r2, [pc, #140]	@ (8000ed8 <HAL_ADC_Start_DMA+0x1b8>)
 8000e4a:	631a      	str	r2, [r3, #48]	@ 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	f06f 0202 	mvn.w	r2, #2
 8000e54:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	689a      	ldr	r2, [r3, #8]
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8000e64:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	6a18      	ldr	r0, [r3, #32]
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	334c      	adds	r3, #76	@ 0x4c
 8000e70:	4619      	mov	r1, r3
 8000e72:	68ba      	ldr	r2, [r7, #8]
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	f000 fc5d 	bl	8001734 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	689b      	ldr	r3, [r3, #8]
 8000e80:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8000e84:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8000e88:	d108      	bne.n	8000e9c <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	689a      	ldr	r2, [r3, #8]
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8000e98:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8000e9a:	e00f      	b.n	8000ebc <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	689a      	ldr	r2, [r3, #8]
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8000eaa:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8000eac:	e006      	b.n	8000ebc <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    if (tmp_hal_status == HAL_OK)
 8000eb6:	e001      	b.n	8000ebc <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000eb8:	2301      	movs	r3, #1
 8000eba:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000ebc:	7dfb      	ldrb	r3, [r7, #23]
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	3718      	adds	r7, #24
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	40012400 	.word	0x40012400
 8000ecc:	40012800 	.word	0x40012800
 8000ed0:	0800123b 	.word	0x0800123b
 8000ed4:	080012b7 	.word	0x080012b7
 8000ed8:	080012d3 	.word	0x080012d3

08000edc <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000edc:	b480      	push	{r7}
 8000ede:	b083      	sub	sp, #12
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8000ee4:	bf00      	nop
 8000ee6:	370c      	adds	r7, #12
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bc80      	pop	{r7}
 8000eec:	4770      	bx	lr

08000eee <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000eee:	b480      	push	{r7}
 8000ef0:	b083      	sub	sp, #12
 8000ef2:	af00      	add	r7, sp, #0
 8000ef4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8000ef6:	bf00      	nop
 8000ef8:	370c      	adds	r7, #12
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bc80      	pop	{r7}
 8000efe:	4770      	bx	lr

08000f00 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b083      	sub	sp, #12
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8000f08:	bf00      	nop
 8000f0a:	370c      	adds	r7, #12
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bc80      	pop	{r7}
 8000f10:	4770      	bx	lr
	...

08000f14 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000f14:	b480      	push	{r7}
 8000f16:	b085      	sub	sp, #20
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
 8000f1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000f22:	2300      	movs	r3, #0
 8000f24:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000f2c:	2b01      	cmp	r3, #1
 8000f2e:	d101      	bne.n	8000f34 <HAL_ADC_ConfigChannel+0x20>
 8000f30:	2302      	movs	r3, #2
 8000f32:	e0dc      	b.n	80010ee <HAL_ADC_ConfigChannel+0x1da>
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	2201      	movs	r2, #1
 8000f38:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	685b      	ldr	r3, [r3, #4]
 8000f40:	2b06      	cmp	r3, #6
 8000f42:	d81c      	bhi.n	8000f7e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	685a      	ldr	r2, [r3, #4]
 8000f4e:	4613      	mov	r3, r2
 8000f50:	009b      	lsls	r3, r3, #2
 8000f52:	4413      	add	r3, r2
 8000f54:	3b05      	subs	r3, #5
 8000f56:	221f      	movs	r2, #31
 8000f58:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5c:	43db      	mvns	r3, r3
 8000f5e:	4019      	ands	r1, r3
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	6818      	ldr	r0, [r3, #0]
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	685a      	ldr	r2, [r3, #4]
 8000f68:	4613      	mov	r3, r2
 8000f6a:	009b      	lsls	r3, r3, #2
 8000f6c:	4413      	add	r3, r2
 8000f6e:	3b05      	subs	r3, #5
 8000f70:	fa00 f203 	lsl.w	r2, r0, r3
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	430a      	orrs	r2, r1
 8000f7a:	635a      	str	r2, [r3, #52]	@ 0x34
 8000f7c:	e03c      	b.n	8000ff8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	685b      	ldr	r3, [r3, #4]
 8000f82:	2b0c      	cmp	r3, #12
 8000f84:	d81c      	bhi.n	8000fc0 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	685a      	ldr	r2, [r3, #4]
 8000f90:	4613      	mov	r3, r2
 8000f92:	009b      	lsls	r3, r3, #2
 8000f94:	4413      	add	r3, r2
 8000f96:	3b23      	subs	r3, #35	@ 0x23
 8000f98:	221f      	movs	r2, #31
 8000f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9e:	43db      	mvns	r3, r3
 8000fa0:	4019      	ands	r1, r3
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	6818      	ldr	r0, [r3, #0]
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	685a      	ldr	r2, [r3, #4]
 8000faa:	4613      	mov	r3, r2
 8000fac:	009b      	lsls	r3, r3, #2
 8000fae:	4413      	add	r3, r2
 8000fb0:	3b23      	subs	r3, #35	@ 0x23
 8000fb2:	fa00 f203 	lsl.w	r2, r0, r3
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	430a      	orrs	r2, r1
 8000fbc:	631a      	str	r2, [r3, #48]	@ 0x30
 8000fbe:	e01b      	b.n	8000ff8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	685a      	ldr	r2, [r3, #4]
 8000fca:	4613      	mov	r3, r2
 8000fcc:	009b      	lsls	r3, r3, #2
 8000fce:	4413      	add	r3, r2
 8000fd0:	3b41      	subs	r3, #65	@ 0x41
 8000fd2:	221f      	movs	r2, #31
 8000fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd8:	43db      	mvns	r3, r3
 8000fda:	4019      	ands	r1, r3
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	6818      	ldr	r0, [r3, #0]
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	685a      	ldr	r2, [r3, #4]
 8000fe4:	4613      	mov	r3, r2
 8000fe6:	009b      	lsls	r3, r3, #2
 8000fe8:	4413      	add	r3, r2
 8000fea:	3b41      	subs	r3, #65	@ 0x41
 8000fec:	fa00 f203 	lsl.w	r2, r0, r3
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	430a      	orrs	r2, r1
 8000ff6:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	2b09      	cmp	r3, #9
 8000ffe:	d91c      	bls.n	800103a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	68d9      	ldr	r1, [r3, #12]
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	681a      	ldr	r2, [r3, #0]
 800100a:	4613      	mov	r3, r2
 800100c:	005b      	lsls	r3, r3, #1
 800100e:	4413      	add	r3, r2
 8001010:	3b1e      	subs	r3, #30
 8001012:	2207      	movs	r2, #7
 8001014:	fa02 f303 	lsl.w	r3, r2, r3
 8001018:	43db      	mvns	r3, r3
 800101a:	4019      	ands	r1, r3
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	6898      	ldr	r0, [r3, #8]
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	681a      	ldr	r2, [r3, #0]
 8001024:	4613      	mov	r3, r2
 8001026:	005b      	lsls	r3, r3, #1
 8001028:	4413      	add	r3, r2
 800102a:	3b1e      	subs	r3, #30
 800102c:	fa00 f203 	lsl.w	r2, r0, r3
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	430a      	orrs	r2, r1
 8001036:	60da      	str	r2, [r3, #12]
 8001038:	e019      	b.n	800106e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	6919      	ldr	r1, [r3, #16]
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	681a      	ldr	r2, [r3, #0]
 8001044:	4613      	mov	r3, r2
 8001046:	005b      	lsls	r3, r3, #1
 8001048:	4413      	add	r3, r2
 800104a:	2207      	movs	r2, #7
 800104c:	fa02 f303 	lsl.w	r3, r2, r3
 8001050:	43db      	mvns	r3, r3
 8001052:	4019      	ands	r1, r3
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	6898      	ldr	r0, [r3, #8]
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	681a      	ldr	r2, [r3, #0]
 800105c:	4613      	mov	r3, r2
 800105e:	005b      	lsls	r3, r3, #1
 8001060:	4413      	add	r3, r2
 8001062:	fa00 f203 	lsl.w	r2, r0, r3
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	430a      	orrs	r2, r1
 800106c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	2b10      	cmp	r3, #16
 8001074:	d003      	beq.n	800107e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800107a:	2b11      	cmp	r3, #17
 800107c:	d132      	bne.n	80010e4 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	4a1d      	ldr	r2, [pc, #116]	@ (80010f8 <HAL_ADC_ConfigChannel+0x1e4>)
 8001084:	4293      	cmp	r3, r2
 8001086:	d125      	bne.n	80010d4 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	689b      	ldr	r3, [r3, #8]
 800108e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001092:	2b00      	cmp	r3, #0
 8001094:	d126      	bne.n	80010e4 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	689a      	ldr	r2, [r3, #8]
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 80010a4:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	2b10      	cmp	r3, #16
 80010ac:	d11a      	bne.n	80010e4 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80010ae:	4b13      	ldr	r3, [pc, #76]	@ (80010fc <HAL_ADC_ConfigChannel+0x1e8>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	4a13      	ldr	r2, [pc, #76]	@ (8001100 <HAL_ADC_ConfigChannel+0x1ec>)
 80010b4:	fba2 2303 	umull	r2, r3, r2, r3
 80010b8:	0c9a      	lsrs	r2, r3, #18
 80010ba:	4613      	mov	r3, r2
 80010bc:	009b      	lsls	r3, r3, #2
 80010be:	4413      	add	r3, r2
 80010c0:	005b      	lsls	r3, r3, #1
 80010c2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80010c4:	e002      	b.n	80010cc <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80010c6:	68bb      	ldr	r3, [r7, #8]
 80010c8:	3b01      	subs	r3, #1
 80010ca:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80010cc:	68bb      	ldr	r3, [r7, #8]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d1f9      	bne.n	80010c6 <HAL_ADC_ConfigChannel+0x1b2>
 80010d2:	e007      	b.n	80010e4 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80010d8:	f043 0220 	orr.w	r2, r3, #32
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 80010e0:	2301      	movs	r3, #1
 80010e2:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	2200      	movs	r2, #0
 80010e8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80010ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	3714      	adds	r7, #20
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bc80      	pop	{r7}
 80010f6:	4770      	bx	lr
 80010f8:	40012400 	.word	0x40012400
 80010fc:	20000000 	.word	0x20000000
 8001100:	431bde83 	.word	0x431bde83

08001104 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b084      	sub	sp, #16
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800110c:	2300      	movs	r3, #0
 800110e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001110:	2300      	movs	r3, #0
 8001112:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	689b      	ldr	r3, [r3, #8]
 800111a:	f003 0301 	and.w	r3, r3, #1
 800111e:	2b01      	cmp	r3, #1
 8001120:	d040      	beq.n	80011a4 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	689a      	ldr	r2, [r3, #8]
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	f042 0201 	orr.w	r2, r2, #1
 8001130:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001132:	4b1f      	ldr	r3, [pc, #124]	@ (80011b0 <ADC_Enable+0xac>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	4a1f      	ldr	r2, [pc, #124]	@ (80011b4 <ADC_Enable+0xb0>)
 8001138:	fba2 2303 	umull	r2, r3, r2, r3
 800113c:	0c9b      	lsrs	r3, r3, #18
 800113e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001140:	e002      	b.n	8001148 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001142:	68bb      	ldr	r3, [r7, #8]
 8001144:	3b01      	subs	r3, #1
 8001146:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001148:	68bb      	ldr	r3, [r7, #8]
 800114a:	2b00      	cmp	r3, #0
 800114c:	d1f9      	bne.n	8001142 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800114e:	f7ff fd05 	bl	8000b5c <HAL_GetTick>
 8001152:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001154:	e01f      	b.n	8001196 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001156:	f7ff fd01 	bl	8000b5c <HAL_GetTick>
 800115a:	4602      	mov	r2, r0
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	1ad3      	subs	r3, r2, r3
 8001160:	2b02      	cmp	r3, #2
 8001162:	d918      	bls.n	8001196 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	689b      	ldr	r3, [r3, #8]
 800116a:	f003 0301 	and.w	r3, r3, #1
 800116e:	2b01      	cmp	r3, #1
 8001170:	d011      	beq.n	8001196 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001176:	f043 0210 	orr.w	r2, r3, #16
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001182:	f043 0201 	orr.w	r2, r3, #1
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	2200      	movs	r2, #0
 800118e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8001192:	2301      	movs	r3, #1
 8001194:	e007      	b.n	80011a6 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	689b      	ldr	r3, [r3, #8]
 800119c:	f003 0301 	and.w	r3, r3, #1
 80011a0:	2b01      	cmp	r3, #1
 80011a2:	d1d8      	bne.n	8001156 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80011a4:	2300      	movs	r3, #0
}
 80011a6:	4618      	mov	r0, r3
 80011a8:	3710      	adds	r7, #16
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	20000000 	.word	0x20000000
 80011b4:	431bde83 	.word	0x431bde83

080011b8 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b084      	sub	sp, #16
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80011c0:	2300      	movs	r3, #0
 80011c2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	689b      	ldr	r3, [r3, #8]
 80011ca:	f003 0301 	and.w	r3, r3, #1
 80011ce:	2b01      	cmp	r3, #1
 80011d0:	d12e      	bne.n	8001230 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	689a      	ldr	r2, [r3, #8]
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f022 0201 	bic.w	r2, r2, #1
 80011e0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80011e2:	f7ff fcbb 	bl	8000b5c <HAL_GetTick>
 80011e6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80011e8:	e01b      	b.n	8001222 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80011ea:	f7ff fcb7 	bl	8000b5c <HAL_GetTick>
 80011ee:	4602      	mov	r2, r0
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	1ad3      	subs	r3, r2, r3
 80011f4:	2b02      	cmp	r3, #2
 80011f6:	d914      	bls.n	8001222 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	689b      	ldr	r3, [r3, #8]
 80011fe:	f003 0301 	and.w	r3, r3, #1
 8001202:	2b01      	cmp	r3, #1
 8001204:	d10d      	bne.n	8001222 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800120a:	f043 0210 	orr.w	r2, r3, #16
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001216:	f043 0201 	orr.w	r2, r3, #1
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 800121e:	2301      	movs	r3, #1
 8001220:	e007      	b.n	8001232 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	689b      	ldr	r3, [r3, #8]
 8001228:	f003 0301 	and.w	r3, r3, #1
 800122c:	2b01      	cmp	r3, #1
 800122e:	d0dc      	beq.n	80011ea <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001230:	2300      	movs	r3, #0
}
 8001232:	4618      	mov	r0, r3
 8001234:	3710      	adds	r7, #16
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}

0800123a <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800123a:	b580      	push	{r7, lr}
 800123c:	b084      	sub	sp, #16
 800123e:	af00      	add	r7, sp, #0
 8001240:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001246:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800124c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8001250:	2b00      	cmp	r3, #0
 8001252:	d127      	bne.n	80012a4 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001258:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	629a      	str	r2, [r3, #40]	@ 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	689b      	ldr	r3, [r3, #8]
 8001266:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800126a:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 800126e:	d115      	bne.n	800129c <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001274:	2b00      	cmp	r3, #0
 8001276:	d111      	bne.n	800129c <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800127c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	629a      	str	r2, [r3, #40]	@ 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001288:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800128c:	2b00      	cmp	r3, #0
 800128e:	d105      	bne.n	800129c <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001294:	f043 0201 	orr.w	r2, r3, #1
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800129c:	68f8      	ldr	r0, [r7, #12]
 800129e:	f7ff fe1d 	bl	8000edc <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80012a2:	e004      	b.n	80012ae <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	6a1b      	ldr	r3, [r3, #32]
 80012a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012aa:	6878      	ldr	r0, [r7, #4]
 80012ac:	4798      	blx	r3
}
 80012ae:	bf00      	nop
 80012b0:	3710      	adds	r7, #16
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}

080012b6 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80012b6:	b580      	push	{r7, lr}
 80012b8:	b084      	sub	sp, #16
 80012ba:	af00      	add	r7, sp, #0
 80012bc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012c2:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80012c4:	68f8      	ldr	r0, [r7, #12]
 80012c6:	f7ff fe12 	bl	8000eee <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80012ca:	bf00      	nop
 80012cc:	3710      	adds	r7, #16
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}

080012d2 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80012d2:	b580      	push	{r7, lr}
 80012d4:	b084      	sub	sp, #16
 80012d6:	af00      	add	r7, sp, #0
 80012d8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012de:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012e4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	629a      	str	r2, [r3, #40]	@ 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012f0:	f043 0204 	orr.w	r2, r3, #4
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80012f8:	68f8      	ldr	r0, [r7, #12]
 80012fa:	f7ff fe01 	bl	8000f00 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80012fe:	bf00      	nop
 8001300:	3710      	adds	r7, #16
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
	...

08001308 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8001308:	b590      	push	{r4, r7, lr}
 800130a:	b087      	sub	sp, #28
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001310:	2300      	movs	r3, #0
 8001312:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8001314:	2300      	movs	r3, #0
 8001316:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800131e:	2b01      	cmp	r3, #1
 8001320:	d101      	bne.n	8001326 <HAL_ADCEx_Calibration_Start+0x1e>
 8001322:	2302      	movs	r3, #2
 8001324:	e097      	b.n	8001456 <HAL_ADCEx_Calibration_Start+0x14e>
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	2201      	movs	r2, #1
 800132a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800132e:	6878      	ldr	r0, [r7, #4]
 8001330:	f7ff ff42 	bl	80011b8 <ADC_ConversionStop_Disable>
 8001334:	4603      	mov	r3, r0
 8001336:	75fb      	strb	r3, [r7, #23]
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 8001338:	6878      	ldr	r0, [r7, #4]
 800133a:	f7ff fee3 	bl	8001104 <ADC_Enable>
 800133e:	4603      	mov	r3, r0
 8001340:	75fb      	strb	r3, [r7, #23]

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 8001342:	7dfb      	ldrb	r3, [r7, #23]
 8001344:	2b00      	cmp	r3, #0
 8001346:	f040 8081 	bne.w	800144c <HAL_ADCEx_Calibration_Start+0x144>
   {
     /* Set ADC state */
     ADC_STATE_CLR_SET(hadc->State,
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800134e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001352:	f023 0302 	bic.w	r3, r3, #2
 8001356:	f043 0202 	orr.w	r2, r3, #2
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 800135e:	4b40      	ldr	r3, [pc, #256]	@ (8001460 <HAL_ADCEx_Calibration_Start+0x158>)
 8001360:	681c      	ldr	r4, [r3, #0]
 8001362:	2002      	movs	r0, #2
 8001364:	f001 f9d0 	bl	8002708 <HAL_RCCEx_GetPeriphCLKFreq>
 8001368:	4603      	mov	r3, r0
 800136a:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 800136e:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8001370:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8001372:	e002      	b.n	800137a <HAL_ADCEx_Calibration_Start+0x72>
    {
      wait_loop_index--;
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	3b01      	subs	r3, #1
 8001378:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d1f9      	bne.n	8001374 <HAL_ADCEx_Calibration_Start+0x6c>
    }

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	689a      	ldr	r2, [r3, #8]
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f042 0208 	orr.w	r2, r2, #8
 800138e:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8001390:	f7ff fbe4 	bl	8000b5c <HAL_GetTick>
 8001394:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001396:	e01b      	b.n	80013d0 <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001398:	f7ff fbe0 	bl	8000b5c <HAL_GetTick>
 800139c:	4602      	mov	r2, r0
 800139e:	693b      	ldr	r3, [r7, #16]
 80013a0:	1ad3      	subs	r3, r2, r3
 80013a2:	2b0a      	cmp	r3, #10
 80013a4:	d914      	bls.n	80013d0 <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	689b      	ldr	r3, [r3, #8]
 80013ac:	f003 0308 	and.w	r3, r3, #8
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d00d      	beq.n	80013d0 <HAL_ADCEx_Calibration_Start+0xc8>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013b8:	f023 0312 	bic.w	r3, r3, #18
 80013bc:	f043 0210 	orr.w	r2, r3, #16
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	2200      	movs	r2, #0
 80013c8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 80013cc:	2301      	movs	r3, #1
 80013ce:	e042      	b.n	8001456 <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	689b      	ldr	r3, [r3, #8]
 80013d6:	f003 0308 	and.w	r3, r3, #8
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d1dc      	bne.n	8001398 <HAL_ADCEx_Calibration_Start+0x90>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	689a      	ldr	r2, [r3, #8]
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f042 0204 	orr.w	r2, r2, #4
 80013ec:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 80013ee:	f7ff fbb5 	bl	8000b5c <HAL_GetTick>
 80013f2:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80013f4:	e01b      	b.n	800142e <HAL_ADCEx_Calibration_Start+0x126>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80013f6:	f7ff fbb1 	bl	8000b5c <HAL_GetTick>
 80013fa:	4602      	mov	r2, r0
 80013fc:	693b      	ldr	r3, [r7, #16]
 80013fe:	1ad3      	subs	r3, r2, r3
 8001400:	2b0a      	cmp	r3, #10
 8001402:	d914      	bls.n	800142e <HAL_ADCEx_Calibration_Start+0x126>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	689b      	ldr	r3, [r3, #8]
 800140a:	f003 0304 	and.w	r3, r3, #4
 800140e:	2b00      	cmp	r3, #0
 8001410:	d00d      	beq.n	800142e <HAL_ADCEx_Calibration_Start+0x126>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001416:	f023 0312 	bic.w	r3, r3, #18
 800141a:	f043 0210 	orr.w	r2, r3, #16
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	2200      	movs	r2, #0
 8001426:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 800142a:	2301      	movs	r3, #1
 800142c:	e013      	b.n	8001456 <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	689b      	ldr	r3, [r3, #8]
 8001434:	f003 0304 	and.w	r3, r3, #4
 8001438:	2b00      	cmp	r3, #0
 800143a:	d1dc      	bne.n	80013f6 <HAL_ADCEx_Calibration_Start+0xee>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001440:	f023 0303 	bic.w	r3, r3, #3
 8001444:	f043 0201 	orr.w	r2, r3, #1
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	2200      	movs	r2, #0
 8001450:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001454:	7dfb      	ldrb	r3, [r7, #23]
}
 8001456:	4618      	mov	r0, r3
 8001458:	371c      	adds	r7, #28
 800145a:	46bd      	mov	sp, r7
 800145c:	bd90      	pop	{r4, r7, pc}
 800145e:	bf00      	nop
 8001460:	20000000 	.word	0x20000000

08001464 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001464:	b480      	push	{r7}
 8001466:	b085      	sub	sp, #20
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	f003 0307 	and.w	r3, r3, #7
 8001472:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001474:	4b0c      	ldr	r3, [pc, #48]	@ (80014a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001476:	68db      	ldr	r3, [r3, #12]
 8001478:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800147a:	68ba      	ldr	r2, [r7, #8]
 800147c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001480:	4013      	ands	r3, r2
 8001482:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001488:	68bb      	ldr	r3, [r7, #8]
 800148a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800148c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001490:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001494:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001496:	4a04      	ldr	r2, [pc, #16]	@ (80014a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001498:	68bb      	ldr	r3, [r7, #8]
 800149a:	60d3      	str	r3, [r2, #12]
}
 800149c:	bf00      	nop
 800149e:	3714      	adds	r7, #20
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bc80      	pop	{r7}
 80014a4:	4770      	bx	lr
 80014a6:	bf00      	nop
 80014a8:	e000ed00 	.word	0xe000ed00

080014ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014b0:	4b04      	ldr	r3, [pc, #16]	@ (80014c4 <__NVIC_GetPriorityGrouping+0x18>)
 80014b2:	68db      	ldr	r3, [r3, #12]
 80014b4:	0a1b      	lsrs	r3, r3, #8
 80014b6:	f003 0307 	and.w	r3, r3, #7
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	46bd      	mov	sp, r7
 80014be:	bc80      	pop	{r7}
 80014c0:	4770      	bx	lr
 80014c2:	bf00      	nop
 80014c4:	e000ed00 	.word	0xe000ed00

080014c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014c8:	b480      	push	{r7}
 80014ca:	b083      	sub	sp, #12
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	4603      	mov	r3, r0
 80014d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	db0b      	blt.n	80014f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014da:	79fb      	ldrb	r3, [r7, #7]
 80014dc:	f003 021f 	and.w	r2, r3, #31
 80014e0:	4906      	ldr	r1, [pc, #24]	@ (80014fc <__NVIC_EnableIRQ+0x34>)
 80014e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014e6:	095b      	lsrs	r3, r3, #5
 80014e8:	2001      	movs	r0, #1
 80014ea:	fa00 f202 	lsl.w	r2, r0, r2
 80014ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80014f2:	bf00      	nop
 80014f4:	370c      	adds	r7, #12
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bc80      	pop	{r7}
 80014fa:	4770      	bx	lr
 80014fc:	e000e100 	.word	0xe000e100

08001500 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001500:	b480      	push	{r7}
 8001502:	b083      	sub	sp, #12
 8001504:	af00      	add	r7, sp, #0
 8001506:	4603      	mov	r3, r0
 8001508:	6039      	str	r1, [r7, #0]
 800150a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800150c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001510:	2b00      	cmp	r3, #0
 8001512:	db0a      	blt.n	800152a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	b2da      	uxtb	r2, r3
 8001518:	490c      	ldr	r1, [pc, #48]	@ (800154c <__NVIC_SetPriority+0x4c>)
 800151a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800151e:	0112      	lsls	r2, r2, #4
 8001520:	b2d2      	uxtb	r2, r2
 8001522:	440b      	add	r3, r1
 8001524:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001528:	e00a      	b.n	8001540 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	b2da      	uxtb	r2, r3
 800152e:	4908      	ldr	r1, [pc, #32]	@ (8001550 <__NVIC_SetPriority+0x50>)
 8001530:	79fb      	ldrb	r3, [r7, #7]
 8001532:	f003 030f 	and.w	r3, r3, #15
 8001536:	3b04      	subs	r3, #4
 8001538:	0112      	lsls	r2, r2, #4
 800153a:	b2d2      	uxtb	r2, r2
 800153c:	440b      	add	r3, r1
 800153e:	761a      	strb	r2, [r3, #24]
}
 8001540:	bf00      	nop
 8001542:	370c      	adds	r7, #12
 8001544:	46bd      	mov	sp, r7
 8001546:	bc80      	pop	{r7}
 8001548:	4770      	bx	lr
 800154a:	bf00      	nop
 800154c:	e000e100 	.word	0xe000e100
 8001550:	e000ed00 	.word	0xe000ed00

08001554 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001554:	b480      	push	{r7}
 8001556:	b089      	sub	sp, #36	@ 0x24
 8001558:	af00      	add	r7, sp, #0
 800155a:	60f8      	str	r0, [r7, #12]
 800155c:	60b9      	str	r1, [r7, #8]
 800155e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	f003 0307 	and.w	r3, r3, #7
 8001566:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001568:	69fb      	ldr	r3, [r7, #28]
 800156a:	f1c3 0307 	rsb	r3, r3, #7
 800156e:	2b04      	cmp	r3, #4
 8001570:	bf28      	it	cs
 8001572:	2304      	movcs	r3, #4
 8001574:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001576:	69fb      	ldr	r3, [r7, #28]
 8001578:	3304      	adds	r3, #4
 800157a:	2b06      	cmp	r3, #6
 800157c:	d902      	bls.n	8001584 <NVIC_EncodePriority+0x30>
 800157e:	69fb      	ldr	r3, [r7, #28]
 8001580:	3b03      	subs	r3, #3
 8001582:	e000      	b.n	8001586 <NVIC_EncodePriority+0x32>
 8001584:	2300      	movs	r3, #0
 8001586:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001588:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800158c:	69bb      	ldr	r3, [r7, #24]
 800158e:	fa02 f303 	lsl.w	r3, r2, r3
 8001592:	43da      	mvns	r2, r3
 8001594:	68bb      	ldr	r3, [r7, #8]
 8001596:	401a      	ands	r2, r3
 8001598:	697b      	ldr	r3, [r7, #20]
 800159a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800159c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80015a0:	697b      	ldr	r3, [r7, #20]
 80015a2:	fa01 f303 	lsl.w	r3, r1, r3
 80015a6:	43d9      	mvns	r1, r3
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015ac:	4313      	orrs	r3, r2
         );
}
 80015ae:	4618      	mov	r0, r3
 80015b0:	3724      	adds	r7, #36	@ 0x24
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bc80      	pop	{r7}
 80015b6:	4770      	bx	lr

080015b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b082      	sub	sp, #8
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	3b01      	subs	r3, #1
 80015c4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80015c8:	d301      	bcc.n	80015ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015ca:	2301      	movs	r3, #1
 80015cc:	e00f      	b.n	80015ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015ce:	4a0a      	ldr	r2, [pc, #40]	@ (80015f8 <SysTick_Config+0x40>)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	3b01      	subs	r3, #1
 80015d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015d6:	210f      	movs	r1, #15
 80015d8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80015dc:	f7ff ff90 	bl	8001500 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015e0:	4b05      	ldr	r3, [pc, #20]	@ (80015f8 <SysTick_Config+0x40>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015e6:	4b04      	ldr	r3, [pc, #16]	@ (80015f8 <SysTick_Config+0x40>)
 80015e8:	2207      	movs	r2, #7
 80015ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015ec:	2300      	movs	r3, #0
}
 80015ee:	4618      	mov	r0, r3
 80015f0:	3708      	adds	r7, #8
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	e000e010 	.word	0xe000e010

080015fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b082      	sub	sp, #8
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001604:	6878      	ldr	r0, [r7, #4]
 8001606:	f7ff ff2d 	bl	8001464 <__NVIC_SetPriorityGrouping>
}
 800160a:	bf00      	nop
 800160c:	3708      	adds	r7, #8
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}

08001612 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001612:	b580      	push	{r7, lr}
 8001614:	b086      	sub	sp, #24
 8001616:	af00      	add	r7, sp, #0
 8001618:	4603      	mov	r3, r0
 800161a:	60b9      	str	r1, [r7, #8]
 800161c:	607a      	str	r2, [r7, #4]
 800161e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001620:	2300      	movs	r3, #0
 8001622:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001624:	f7ff ff42 	bl	80014ac <__NVIC_GetPriorityGrouping>
 8001628:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800162a:	687a      	ldr	r2, [r7, #4]
 800162c:	68b9      	ldr	r1, [r7, #8]
 800162e:	6978      	ldr	r0, [r7, #20]
 8001630:	f7ff ff90 	bl	8001554 <NVIC_EncodePriority>
 8001634:	4602      	mov	r2, r0
 8001636:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800163a:	4611      	mov	r1, r2
 800163c:	4618      	mov	r0, r3
 800163e:	f7ff ff5f 	bl	8001500 <__NVIC_SetPriority>
}
 8001642:	bf00      	nop
 8001644:	3718      	adds	r7, #24
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}

0800164a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800164a:	b580      	push	{r7, lr}
 800164c:	b082      	sub	sp, #8
 800164e:	af00      	add	r7, sp, #0
 8001650:	4603      	mov	r3, r0
 8001652:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001654:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001658:	4618      	mov	r0, r3
 800165a:	f7ff ff35 	bl	80014c8 <__NVIC_EnableIRQ>
}
 800165e:	bf00      	nop
 8001660:	3708      	adds	r7, #8
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}

08001666 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001666:	b580      	push	{r7, lr}
 8001668:	b082      	sub	sp, #8
 800166a:	af00      	add	r7, sp, #0
 800166c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800166e:	6878      	ldr	r0, [r7, #4]
 8001670:	f7ff ffa2 	bl	80015b8 <SysTick_Config>
 8001674:	4603      	mov	r3, r0
}
 8001676:	4618      	mov	r0, r3
 8001678:	3708      	adds	r7, #8
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}
	...

08001680 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001680:	b480      	push	{r7}
 8001682:	b085      	sub	sp, #20
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001688:	2300      	movs	r3, #0
 800168a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2b00      	cmp	r3, #0
 8001690:	d101      	bne.n	8001696 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001692:	2301      	movs	r3, #1
 8001694:	e043      	b.n	800171e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	461a      	mov	r2, r3
 800169c:	4b22      	ldr	r3, [pc, #136]	@ (8001728 <HAL_DMA_Init+0xa8>)
 800169e:	4413      	add	r3, r2
 80016a0:	4a22      	ldr	r2, [pc, #136]	@ (800172c <HAL_DMA_Init+0xac>)
 80016a2:	fba2 2303 	umull	r2, r3, r2, r3
 80016a6:	091b      	lsrs	r3, r3, #4
 80016a8:	009a      	lsls	r2, r3, #2
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	4a1f      	ldr	r2, [pc, #124]	@ (8001730 <HAL_DMA_Init+0xb0>)
 80016b2:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	2202      	movs	r2, #2
 80016b8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80016ca:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80016ce:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80016d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	68db      	ldr	r3, [r3, #12]
 80016de:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	695b      	ldr	r3, [r3, #20]
 80016ea:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016f0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	69db      	ldr	r3, [r3, #28]
 80016f6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80016f8:	68fa      	ldr	r2, [r7, #12]
 80016fa:	4313      	orrs	r3, r2
 80016fc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	68fa      	ldr	r2, [r7, #12]
 8001704:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	2200      	movs	r2, #0
 800170a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	2201      	movs	r2, #1
 8001710:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	2200      	movs	r2, #0
 8001718:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800171c:	2300      	movs	r3, #0
}
 800171e:	4618      	mov	r0, r3
 8001720:	3714      	adds	r7, #20
 8001722:	46bd      	mov	sp, r7
 8001724:	bc80      	pop	{r7}
 8001726:	4770      	bx	lr
 8001728:	bffdfff8 	.word	0xbffdfff8
 800172c:	cccccccd 	.word	0xcccccccd
 8001730:	40020000 	.word	0x40020000

08001734 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b086      	sub	sp, #24
 8001738:	af00      	add	r7, sp, #0
 800173a:	60f8      	str	r0, [r7, #12]
 800173c:	60b9      	str	r1, [r7, #8]
 800173e:	607a      	str	r2, [r7, #4]
 8001740:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001742:	2300      	movs	r3, #0
 8001744:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	f893 3020 	ldrb.w	r3, [r3, #32]
 800174c:	2b01      	cmp	r3, #1
 800174e:	d101      	bne.n	8001754 <HAL_DMA_Start_IT+0x20>
 8001750:	2302      	movs	r3, #2
 8001752:	e04b      	b.n	80017ec <HAL_DMA_Start_IT+0xb8>
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	2201      	movs	r2, #1
 8001758:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001762:	b2db      	uxtb	r3, r3
 8001764:	2b01      	cmp	r3, #1
 8001766:	d13a      	bne.n	80017de <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	2202      	movs	r2, #2
 800176c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	2200      	movs	r2, #0
 8001774:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	681a      	ldr	r2, [r3, #0]
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f022 0201 	bic.w	r2, r2, #1
 8001784:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	687a      	ldr	r2, [r7, #4]
 800178a:	68b9      	ldr	r1, [r7, #8]
 800178c:	68f8      	ldr	r0, [r7, #12]
 800178e:	f000 f937 	bl	8001a00 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001796:	2b00      	cmp	r3, #0
 8001798:	d008      	beq.n	80017ac <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	681a      	ldr	r2, [r3, #0]
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f042 020e 	orr.w	r2, r2, #14
 80017a8:	601a      	str	r2, [r3, #0]
 80017aa:	e00f      	b.n	80017cc <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	681a      	ldr	r2, [r3, #0]
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f022 0204 	bic.w	r2, r2, #4
 80017ba:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	681a      	ldr	r2, [r3, #0]
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f042 020a 	orr.w	r2, r2, #10
 80017ca:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	681a      	ldr	r2, [r3, #0]
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f042 0201 	orr.w	r2, r2, #1
 80017da:	601a      	str	r2, [r3, #0]
 80017dc:	e005      	b.n	80017ea <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	2200      	movs	r2, #0
 80017e2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80017e6:	2302      	movs	r3, #2
 80017e8:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80017ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80017ec:	4618      	mov	r0, r3
 80017ee:	3718      	adds	r7, #24
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd80      	pop	{r7, pc}

080017f4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b084      	sub	sp, #16
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001810:	2204      	movs	r2, #4
 8001812:	409a      	lsls	r2, r3
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	4013      	ands	r3, r2
 8001818:	2b00      	cmp	r3, #0
 800181a:	d04f      	beq.n	80018bc <HAL_DMA_IRQHandler+0xc8>
 800181c:	68bb      	ldr	r3, [r7, #8]
 800181e:	f003 0304 	and.w	r3, r3, #4
 8001822:	2b00      	cmp	r3, #0
 8001824:	d04a      	beq.n	80018bc <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f003 0320 	and.w	r3, r3, #32
 8001830:	2b00      	cmp	r3, #0
 8001832:	d107      	bne.n	8001844 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	681a      	ldr	r2, [r3, #0]
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f022 0204 	bic.w	r2, r2, #4
 8001842:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a66      	ldr	r2, [pc, #408]	@ (80019e4 <HAL_DMA_IRQHandler+0x1f0>)
 800184a:	4293      	cmp	r3, r2
 800184c:	d029      	beq.n	80018a2 <HAL_DMA_IRQHandler+0xae>
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	4a65      	ldr	r2, [pc, #404]	@ (80019e8 <HAL_DMA_IRQHandler+0x1f4>)
 8001854:	4293      	cmp	r3, r2
 8001856:	d022      	beq.n	800189e <HAL_DMA_IRQHandler+0xaa>
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4a63      	ldr	r2, [pc, #396]	@ (80019ec <HAL_DMA_IRQHandler+0x1f8>)
 800185e:	4293      	cmp	r3, r2
 8001860:	d01a      	beq.n	8001898 <HAL_DMA_IRQHandler+0xa4>
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4a62      	ldr	r2, [pc, #392]	@ (80019f0 <HAL_DMA_IRQHandler+0x1fc>)
 8001868:	4293      	cmp	r3, r2
 800186a:	d012      	beq.n	8001892 <HAL_DMA_IRQHandler+0x9e>
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4a60      	ldr	r2, [pc, #384]	@ (80019f4 <HAL_DMA_IRQHandler+0x200>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d00a      	beq.n	800188c <HAL_DMA_IRQHandler+0x98>
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4a5f      	ldr	r2, [pc, #380]	@ (80019f8 <HAL_DMA_IRQHandler+0x204>)
 800187c:	4293      	cmp	r3, r2
 800187e:	d102      	bne.n	8001886 <HAL_DMA_IRQHandler+0x92>
 8001880:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001884:	e00e      	b.n	80018a4 <HAL_DMA_IRQHandler+0xb0>
 8001886:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800188a:	e00b      	b.n	80018a4 <HAL_DMA_IRQHandler+0xb0>
 800188c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8001890:	e008      	b.n	80018a4 <HAL_DMA_IRQHandler+0xb0>
 8001892:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001896:	e005      	b.n	80018a4 <HAL_DMA_IRQHandler+0xb0>
 8001898:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800189c:	e002      	b.n	80018a4 <HAL_DMA_IRQHandler+0xb0>
 800189e:	2340      	movs	r3, #64	@ 0x40
 80018a0:	e000      	b.n	80018a4 <HAL_DMA_IRQHandler+0xb0>
 80018a2:	2304      	movs	r3, #4
 80018a4:	4a55      	ldr	r2, [pc, #340]	@ (80019fc <HAL_DMA_IRQHandler+0x208>)
 80018a6:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	f000 8094 	beq.w	80019da <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018b6:	6878      	ldr	r0, [r7, #4]
 80018b8:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80018ba:	e08e      	b.n	80019da <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018c0:	2202      	movs	r2, #2
 80018c2:	409a      	lsls	r2, r3
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	4013      	ands	r3, r2
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d056      	beq.n	800197a <HAL_DMA_IRQHandler+0x186>
 80018cc:	68bb      	ldr	r3, [r7, #8]
 80018ce:	f003 0302 	and.w	r3, r3, #2
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d051      	beq.n	800197a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f003 0320 	and.w	r3, r3, #32
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d10b      	bne.n	80018fc <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	681a      	ldr	r2, [r3, #0]
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f022 020a 	bic.w	r2, r2, #10
 80018f2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	2201      	movs	r2, #1
 80018f8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4a38      	ldr	r2, [pc, #224]	@ (80019e4 <HAL_DMA_IRQHandler+0x1f0>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d029      	beq.n	800195a <HAL_DMA_IRQHandler+0x166>
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4a37      	ldr	r2, [pc, #220]	@ (80019e8 <HAL_DMA_IRQHandler+0x1f4>)
 800190c:	4293      	cmp	r3, r2
 800190e:	d022      	beq.n	8001956 <HAL_DMA_IRQHandler+0x162>
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4a35      	ldr	r2, [pc, #212]	@ (80019ec <HAL_DMA_IRQHandler+0x1f8>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d01a      	beq.n	8001950 <HAL_DMA_IRQHandler+0x15c>
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4a34      	ldr	r2, [pc, #208]	@ (80019f0 <HAL_DMA_IRQHandler+0x1fc>)
 8001920:	4293      	cmp	r3, r2
 8001922:	d012      	beq.n	800194a <HAL_DMA_IRQHandler+0x156>
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4a32      	ldr	r2, [pc, #200]	@ (80019f4 <HAL_DMA_IRQHandler+0x200>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d00a      	beq.n	8001944 <HAL_DMA_IRQHandler+0x150>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4a31      	ldr	r2, [pc, #196]	@ (80019f8 <HAL_DMA_IRQHandler+0x204>)
 8001934:	4293      	cmp	r3, r2
 8001936:	d102      	bne.n	800193e <HAL_DMA_IRQHandler+0x14a>
 8001938:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800193c:	e00e      	b.n	800195c <HAL_DMA_IRQHandler+0x168>
 800193e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001942:	e00b      	b.n	800195c <HAL_DMA_IRQHandler+0x168>
 8001944:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001948:	e008      	b.n	800195c <HAL_DMA_IRQHandler+0x168>
 800194a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800194e:	e005      	b.n	800195c <HAL_DMA_IRQHandler+0x168>
 8001950:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001954:	e002      	b.n	800195c <HAL_DMA_IRQHandler+0x168>
 8001956:	2320      	movs	r3, #32
 8001958:	e000      	b.n	800195c <HAL_DMA_IRQHandler+0x168>
 800195a:	2302      	movs	r3, #2
 800195c:	4a27      	ldr	r2, [pc, #156]	@ (80019fc <HAL_DMA_IRQHandler+0x208>)
 800195e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	2200      	movs	r2, #0
 8001964:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800196c:	2b00      	cmp	r3, #0
 800196e:	d034      	beq.n	80019da <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001974:	6878      	ldr	r0, [r7, #4]
 8001976:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001978:	e02f      	b.n	80019da <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800197e:	2208      	movs	r2, #8
 8001980:	409a      	lsls	r2, r3
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	4013      	ands	r3, r2
 8001986:	2b00      	cmp	r3, #0
 8001988:	d028      	beq.n	80019dc <HAL_DMA_IRQHandler+0x1e8>
 800198a:	68bb      	ldr	r3, [r7, #8]
 800198c:	f003 0308 	and.w	r3, r3, #8
 8001990:	2b00      	cmp	r3, #0
 8001992:	d023      	beq.n	80019dc <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	681a      	ldr	r2, [r3, #0]
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f022 020e 	bic.w	r2, r2, #14
 80019a2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80019ac:	2101      	movs	r1, #1
 80019ae:	fa01 f202 	lsl.w	r2, r1, r2
 80019b2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2201      	movs	r2, #1
 80019b8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	2201      	movs	r2, #1
 80019be:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	2200      	movs	r2, #0
 80019c6:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d004      	beq.n	80019dc <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019d6:	6878      	ldr	r0, [r7, #4]
 80019d8:	4798      	blx	r3
    }
  }
  return;
 80019da:	bf00      	nop
 80019dc:	bf00      	nop
}
 80019de:	3710      	adds	r7, #16
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}
 80019e4:	40020008 	.word	0x40020008
 80019e8:	4002001c 	.word	0x4002001c
 80019ec:	40020030 	.word	0x40020030
 80019f0:	40020044 	.word	0x40020044
 80019f4:	40020058 	.word	0x40020058
 80019f8:	4002006c 	.word	0x4002006c
 80019fc:	40020000 	.word	0x40020000

08001a00 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001a00:	b480      	push	{r7}
 8001a02:	b085      	sub	sp, #20
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	60f8      	str	r0, [r7, #12]
 8001a08:	60b9      	str	r1, [r7, #8]
 8001a0a:	607a      	str	r2, [r7, #4]
 8001a0c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a16:	2101      	movs	r1, #1
 8001a18:	fa01 f202 	lsl.w	r2, r1, r2
 8001a1c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	683a      	ldr	r2, [r7, #0]
 8001a24:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	2b10      	cmp	r3, #16
 8001a2c:	d108      	bne.n	8001a40 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	687a      	ldr	r2, [r7, #4]
 8001a34:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	68ba      	ldr	r2, [r7, #8]
 8001a3c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001a3e:	e007      	b.n	8001a50 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	68ba      	ldr	r2, [r7, #8]
 8001a46:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	687a      	ldr	r2, [r7, #4]
 8001a4e:	60da      	str	r2, [r3, #12]
}
 8001a50:	bf00      	nop
 8001a52:	3714      	adds	r7, #20
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bc80      	pop	{r7}
 8001a58:	4770      	bx	lr
	...

08001a5c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b08b      	sub	sp, #44	@ 0x2c
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
 8001a64:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a66:	2300      	movs	r3, #0
 8001a68:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a6e:	e169      	b.n	8001d44 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001a70:	2201      	movs	r2, #1
 8001a72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a74:	fa02 f303 	lsl.w	r3, r2, r3
 8001a78:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	69fa      	ldr	r2, [r7, #28]
 8001a80:	4013      	ands	r3, r2
 8001a82:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001a84:	69ba      	ldr	r2, [r7, #24]
 8001a86:	69fb      	ldr	r3, [r7, #28]
 8001a88:	429a      	cmp	r2, r3
 8001a8a:	f040 8158 	bne.w	8001d3e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	4a9a      	ldr	r2, [pc, #616]	@ (8001cfc <HAL_GPIO_Init+0x2a0>)
 8001a94:	4293      	cmp	r3, r2
 8001a96:	d05e      	beq.n	8001b56 <HAL_GPIO_Init+0xfa>
 8001a98:	4a98      	ldr	r2, [pc, #608]	@ (8001cfc <HAL_GPIO_Init+0x2a0>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d875      	bhi.n	8001b8a <HAL_GPIO_Init+0x12e>
 8001a9e:	4a98      	ldr	r2, [pc, #608]	@ (8001d00 <HAL_GPIO_Init+0x2a4>)
 8001aa0:	4293      	cmp	r3, r2
 8001aa2:	d058      	beq.n	8001b56 <HAL_GPIO_Init+0xfa>
 8001aa4:	4a96      	ldr	r2, [pc, #600]	@ (8001d00 <HAL_GPIO_Init+0x2a4>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d86f      	bhi.n	8001b8a <HAL_GPIO_Init+0x12e>
 8001aaa:	4a96      	ldr	r2, [pc, #600]	@ (8001d04 <HAL_GPIO_Init+0x2a8>)
 8001aac:	4293      	cmp	r3, r2
 8001aae:	d052      	beq.n	8001b56 <HAL_GPIO_Init+0xfa>
 8001ab0:	4a94      	ldr	r2, [pc, #592]	@ (8001d04 <HAL_GPIO_Init+0x2a8>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d869      	bhi.n	8001b8a <HAL_GPIO_Init+0x12e>
 8001ab6:	4a94      	ldr	r2, [pc, #592]	@ (8001d08 <HAL_GPIO_Init+0x2ac>)
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	d04c      	beq.n	8001b56 <HAL_GPIO_Init+0xfa>
 8001abc:	4a92      	ldr	r2, [pc, #584]	@ (8001d08 <HAL_GPIO_Init+0x2ac>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d863      	bhi.n	8001b8a <HAL_GPIO_Init+0x12e>
 8001ac2:	4a92      	ldr	r2, [pc, #584]	@ (8001d0c <HAL_GPIO_Init+0x2b0>)
 8001ac4:	4293      	cmp	r3, r2
 8001ac6:	d046      	beq.n	8001b56 <HAL_GPIO_Init+0xfa>
 8001ac8:	4a90      	ldr	r2, [pc, #576]	@ (8001d0c <HAL_GPIO_Init+0x2b0>)
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d85d      	bhi.n	8001b8a <HAL_GPIO_Init+0x12e>
 8001ace:	2b12      	cmp	r3, #18
 8001ad0:	d82a      	bhi.n	8001b28 <HAL_GPIO_Init+0xcc>
 8001ad2:	2b12      	cmp	r3, #18
 8001ad4:	d859      	bhi.n	8001b8a <HAL_GPIO_Init+0x12e>
 8001ad6:	a201      	add	r2, pc, #4	@ (adr r2, 8001adc <HAL_GPIO_Init+0x80>)
 8001ad8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001adc:	08001b57 	.word	0x08001b57
 8001ae0:	08001b31 	.word	0x08001b31
 8001ae4:	08001b43 	.word	0x08001b43
 8001ae8:	08001b85 	.word	0x08001b85
 8001aec:	08001b8b 	.word	0x08001b8b
 8001af0:	08001b8b 	.word	0x08001b8b
 8001af4:	08001b8b 	.word	0x08001b8b
 8001af8:	08001b8b 	.word	0x08001b8b
 8001afc:	08001b8b 	.word	0x08001b8b
 8001b00:	08001b8b 	.word	0x08001b8b
 8001b04:	08001b8b 	.word	0x08001b8b
 8001b08:	08001b8b 	.word	0x08001b8b
 8001b0c:	08001b8b 	.word	0x08001b8b
 8001b10:	08001b8b 	.word	0x08001b8b
 8001b14:	08001b8b 	.word	0x08001b8b
 8001b18:	08001b8b 	.word	0x08001b8b
 8001b1c:	08001b8b 	.word	0x08001b8b
 8001b20:	08001b39 	.word	0x08001b39
 8001b24:	08001b4d 	.word	0x08001b4d
 8001b28:	4a79      	ldr	r2, [pc, #484]	@ (8001d10 <HAL_GPIO_Init+0x2b4>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d013      	beq.n	8001b56 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001b2e:	e02c      	b.n	8001b8a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	68db      	ldr	r3, [r3, #12]
 8001b34:	623b      	str	r3, [r7, #32]
          break;
 8001b36:	e029      	b.n	8001b8c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	68db      	ldr	r3, [r3, #12]
 8001b3c:	3304      	adds	r3, #4
 8001b3e:	623b      	str	r3, [r7, #32]
          break;
 8001b40:	e024      	b.n	8001b8c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	68db      	ldr	r3, [r3, #12]
 8001b46:	3308      	adds	r3, #8
 8001b48:	623b      	str	r3, [r7, #32]
          break;
 8001b4a:	e01f      	b.n	8001b8c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	68db      	ldr	r3, [r3, #12]
 8001b50:	330c      	adds	r3, #12
 8001b52:	623b      	str	r3, [r7, #32]
          break;
 8001b54:	e01a      	b.n	8001b8c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	689b      	ldr	r3, [r3, #8]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d102      	bne.n	8001b64 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001b5e:	2304      	movs	r3, #4
 8001b60:	623b      	str	r3, [r7, #32]
          break;
 8001b62:	e013      	b.n	8001b8c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	689b      	ldr	r3, [r3, #8]
 8001b68:	2b01      	cmp	r3, #1
 8001b6a:	d105      	bne.n	8001b78 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b6c:	2308      	movs	r3, #8
 8001b6e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	69fa      	ldr	r2, [r7, #28]
 8001b74:	611a      	str	r2, [r3, #16]
          break;
 8001b76:	e009      	b.n	8001b8c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b78:	2308      	movs	r3, #8
 8001b7a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	69fa      	ldr	r2, [r7, #28]
 8001b80:	615a      	str	r2, [r3, #20]
          break;
 8001b82:	e003      	b.n	8001b8c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001b84:	2300      	movs	r3, #0
 8001b86:	623b      	str	r3, [r7, #32]
          break;
 8001b88:	e000      	b.n	8001b8c <HAL_GPIO_Init+0x130>
          break;
 8001b8a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001b8c:	69bb      	ldr	r3, [r7, #24]
 8001b8e:	2bff      	cmp	r3, #255	@ 0xff
 8001b90:	d801      	bhi.n	8001b96 <HAL_GPIO_Init+0x13a>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	e001      	b.n	8001b9a <HAL_GPIO_Init+0x13e>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	3304      	adds	r3, #4
 8001b9a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001b9c:	69bb      	ldr	r3, [r7, #24]
 8001b9e:	2bff      	cmp	r3, #255	@ 0xff
 8001ba0:	d802      	bhi.n	8001ba8 <HAL_GPIO_Init+0x14c>
 8001ba2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ba4:	009b      	lsls	r3, r3, #2
 8001ba6:	e002      	b.n	8001bae <HAL_GPIO_Init+0x152>
 8001ba8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001baa:	3b08      	subs	r3, #8
 8001bac:	009b      	lsls	r3, r3, #2
 8001bae:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	681a      	ldr	r2, [r3, #0]
 8001bb4:	210f      	movs	r1, #15
 8001bb6:	693b      	ldr	r3, [r7, #16]
 8001bb8:	fa01 f303 	lsl.w	r3, r1, r3
 8001bbc:	43db      	mvns	r3, r3
 8001bbe:	401a      	ands	r2, r3
 8001bc0:	6a39      	ldr	r1, [r7, #32]
 8001bc2:	693b      	ldr	r3, [r7, #16]
 8001bc4:	fa01 f303 	lsl.w	r3, r1, r3
 8001bc8:	431a      	orrs	r2, r3
 8001bca:	697b      	ldr	r3, [r7, #20]
 8001bcc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	f000 80b1 	beq.w	8001d3e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001bdc:	4b4d      	ldr	r3, [pc, #308]	@ (8001d14 <HAL_GPIO_Init+0x2b8>)
 8001bde:	699b      	ldr	r3, [r3, #24]
 8001be0:	4a4c      	ldr	r2, [pc, #304]	@ (8001d14 <HAL_GPIO_Init+0x2b8>)
 8001be2:	f043 0301 	orr.w	r3, r3, #1
 8001be6:	6193      	str	r3, [r2, #24]
 8001be8:	4b4a      	ldr	r3, [pc, #296]	@ (8001d14 <HAL_GPIO_Init+0x2b8>)
 8001bea:	699b      	ldr	r3, [r3, #24]
 8001bec:	f003 0301 	and.w	r3, r3, #1
 8001bf0:	60bb      	str	r3, [r7, #8]
 8001bf2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001bf4:	4a48      	ldr	r2, [pc, #288]	@ (8001d18 <HAL_GPIO_Init+0x2bc>)
 8001bf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bf8:	089b      	lsrs	r3, r3, #2
 8001bfa:	3302      	adds	r3, #2
 8001bfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c00:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001c02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c04:	f003 0303 	and.w	r3, r3, #3
 8001c08:	009b      	lsls	r3, r3, #2
 8001c0a:	220f      	movs	r2, #15
 8001c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c10:	43db      	mvns	r3, r3
 8001c12:	68fa      	ldr	r2, [r7, #12]
 8001c14:	4013      	ands	r3, r2
 8001c16:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	4a40      	ldr	r2, [pc, #256]	@ (8001d1c <HAL_GPIO_Init+0x2c0>)
 8001c1c:	4293      	cmp	r3, r2
 8001c1e:	d013      	beq.n	8001c48 <HAL_GPIO_Init+0x1ec>
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	4a3f      	ldr	r2, [pc, #252]	@ (8001d20 <HAL_GPIO_Init+0x2c4>)
 8001c24:	4293      	cmp	r3, r2
 8001c26:	d00d      	beq.n	8001c44 <HAL_GPIO_Init+0x1e8>
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	4a3e      	ldr	r2, [pc, #248]	@ (8001d24 <HAL_GPIO_Init+0x2c8>)
 8001c2c:	4293      	cmp	r3, r2
 8001c2e:	d007      	beq.n	8001c40 <HAL_GPIO_Init+0x1e4>
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	4a3d      	ldr	r2, [pc, #244]	@ (8001d28 <HAL_GPIO_Init+0x2cc>)
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d101      	bne.n	8001c3c <HAL_GPIO_Init+0x1e0>
 8001c38:	2303      	movs	r3, #3
 8001c3a:	e006      	b.n	8001c4a <HAL_GPIO_Init+0x1ee>
 8001c3c:	2304      	movs	r3, #4
 8001c3e:	e004      	b.n	8001c4a <HAL_GPIO_Init+0x1ee>
 8001c40:	2302      	movs	r3, #2
 8001c42:	e002      	b.n	8001c4a <HAL_GPIO_Init+0x1ee>
 8001c44:	2301      	movs	r3, #1
 8001c46:	e000      	b.n	8001c4a <HAL_GPIO_Init+0x1ee>
 8001c48:	2300      	movs	r3, #0
 8001c4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c4c:	f002 0203 	and.w	r2, r2, #3
 8001c50:	0092      	lsls	r2, r2, #2
 8001c52:	4093      	lsls	r3, r2
 8001c54:	68fa      	ldr	r2, [r7, #12]
 8001c56:	4313      	orrs	r3, r2
 8001c58:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001c5a:	492f      	ldr	r1, [pc, #188]	@ (8001d18 <HAL_GPIO_Init+0x2bc>)
 8001c5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c5e:	089b      	lsrs	r3, r3, #2
 8001c60:	3302      	adds	r3, #2
 8001c62:	68fa      	ldr	r2, [r7, #12]
 8001c64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d006      	beq.n	8001c82 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001c74:	4b2d      	ldr	r3, [pc, #180]	@ (8001d2c <HAL_GPIO_Init+0x2d0>)
 8001c76:	689a      	ldr	r2, [r3, #8]
 8001c78:	492c      	ldr	r1, [pc, #176]	@ (8001d2c <HAL_GPIO_Init+0x2d0>)
 8001c7a:	69bb      	ldr	r3, [r7, #24]
 8001c7c:	4313      	orrs	r3, r2
 8001c7e:	608b      	str	r3, [r1, #8]
 8001c80:	e006      	b.n	8001c90 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001c82:	4b2a      	ldr	r3, [pc, #168]	@ (8001d2c <HAL_GPIO_Init+0x2d0>)
 8001c84:	689a      	ldr	r2, [r3, #8]
 8001c86:	69bb      	ldr	r3, [r7, #24]
 8001c88:	43db      	mvns	r3, r3
 8001c8a:	4928      	ldr	r1, [pc, #160]	@ (8001d2c <HAL_GPIO_Init+0x2d0>)
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d006      	beq.n	8001caa <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001c9c:	4b23      	ldr	r3, [pc, #140]	@ (8001d2c <HAL_GPIO_Init+0x2d0>)
 8001c9e:	68da      	ldr	r2, [r3, #12]
 8001ca0:	4922      	ldr	r1, [pc, #136]	@ (8001d2c <HAL_GPIO_Init+0x2d0>)
 8001ca2:	69bb      	ldr	r3, [r7, #24]
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	60cb      	str	r3, [r1, #12]
 8001ca8:	e006      	b.n	8001cb8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001caa:	4b20      	ldr	r3, [pc, #128]	@ (8001d2c <HAL_GPIO_Init+0x2d0>)
 8001cac:	68da      	ldr	r2, [r3, #12]
 8001cae:	69bb      	ldr	r3, [r7, #24]
 8001cb0:	43db      	mvns	r3, r3
 8001cb2:	491e      	ldr	r1, [pc, #120]	@ (8001d2c <HAL_GPIO_Init+0x2d0>)
 8001cb4:	4013      	ands	r3, r2
 8001cb6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d006      	beq.n	8001cd2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001cc4:	4b19      	ldr	r3, [pc, #100]	@ (8001d2c <HAL_GPIO_Init+0x2d0>)
 8001cc6:	685a      	ldr	r2, [r3, #4]
 8001cc8:	4918      	ldr	r1, [pc, #96]	@ (8001d2c <HAL_GPIO_Init+0x2d0>)
 8001cca:	69bb      	ldr	r3, [r7, #24]
 8001ccc:	4313      	orrs	r3, r2
 8001cce:	604b      	str	r3, [r1, #4]
 8001cd0:	e006      	b.n	8001ce0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001cd2:	4b16      	ldr	r3, [pc, #88]	@ (8001d2c <HAL_GPIO_Init+0x2d0>)
 8001cd4:	685a      	ldr	r2, [r3, #4]
 8001cd6:	69bb      	ldr	r3, [r7, #24]
 8001cd8:	43db      	mvns	r3, r3
 8001cda:	4914      	ldr	r1, [pc, #80]	@ (8001d2c <HAL_GPIO_Init+0x2d0>)
 8001cdc:	4013      	ands	r3, r2
 8001cde:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d021      	beq.n	8001d30 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001cec:	4b0f      	ldr	r3, [pc, #60]	@ (8001d2c <HAL_GPIO_Init+0x2d0>)
 8001cee:	681a      	ldr	r2, [r3, #0]
 8001cf0:	490e      	ldr	r1, [pc, #56]	@ (8001d2c <HAL_GPIO_Init+0x2d0>)
 8001cf2:	69bb      	ldr	r3, [r7, #24]
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	600b      	str	r3, [r1, #0]
 8001cf8:	e021      	b.n	8001d3e <HAL_GPIO_Init+0x2e2>
 8001cfa:	bf00      	nop
 8001cfc:	10320000 	.word	0x10320000
 8001d00:	10310000 	.word	0x10310000
 8001d04:	10220000 	.word	0x10220000
 8001d08:	10210000 	.word	0x10210000
 8001d0c:	10120000 	.word	0x10120000
 8001d10:	10110000 	.word	0x10110000
 8001d14:	40021000 	.word	0x40021000
 8001d18:	40010000 	.word	0x40010000
 8001d1c:	40010800 	.word	0x40010800
 8001d20:	40010c00 	.word	0x40010c00
 8001d24:	40011000 	.word	0x40011000
 8001d28:	40011400 	.word	0x40011400
 8001d2c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001d30:	4b0b      	ldr	r3, [pc, #44]	@ (8001d60 <HAL_GPIO_Init+0x304>)
 8001d32:	681a      	ldr	r2, [r3, #0]
 8001d34:	69bb      	ldr	r3, [r7, #24]
 8001d36:	43db      	mvns	r3, r3
 8001d38:	4909      	ldr	r1, [pc, #36]	@ (8001d60 <HAL_GPIO_Init+0x304>)
 8001d3a:	4013      	ands	r3, r2
 8001d3c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001d3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d40:	3301      	adds	r3, #1
 8001d42:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	681a      	ldr	r2, [r3, #0]
 8001d48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d4a:	fa22 f303 	lsr.w	r3, r2, r3
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	f47f ae8e 	bne.w	8001a70 <HAL_GPIO_Init+0x14>
  }
}
 8001d54:	bf00      	nop
 8001d56:	bf00      	nop
 8001d58:	372c      	adds	r7, #44	@ 0x2c
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bc80      	pop	{r7}
 8001d5e:	4770      	bx	lr
 8001d60:	40010400 	.word	0x40010400

08001d64 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001d64:	b480      	push	{r7}
 8001d66:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8001d68:	4b03      	ldr	r3, [pc, #12]	@ (8001d78 <HAL_PWR_EnableBkUpAccess+0x14>)
 8001d6a:	2201      	movs	r2, #1
 8001d6c:	601a      	str	r2, [r3, #0]
}
 8001d6e:	bf00      	nop
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bc80      	pop	{r7}
 8001d74:	4770      	bx	lr
 8001d76:	bf00      	nop
 8001d78:	420e0020 	.word	0x420e0020

08001d7c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b086      	sub	sp, #24
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d101      	bne.n	8001d8e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	e272      	b.n	8002274 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f003 0301 	and.w	r3, r3, #1
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	f000 8087 	beq.w	8001eaa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001d9c:	4b92      	ldr	r3, [pc, #584]	@ (8001fe8 <HAL_RCC_OscConfig+0x26c>)
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	f003 030c 	and.w	r3, r3, #12
 8001da4:	2b04      	cmp	r3, #4
 8001da6:	d00c      	beq.n	8001dc2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001da8:	4b8f      	ldr	r3, [pc, #572]	@ (8001fe8 <HAL_RCC_OscConfig+0x26c>)
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	f003 030c 	and.w	r3, r3, #12
 8001db0:	2b08      	cmp	r3, #8
 8001db2:	d112      	bne.n	8001dda <HAL_RCC_OscConfig+0x5e>
 8001db4:	4b8c      	ldr	r3, [pc, #560]	@ (8001fe8 <HAL_RCC_OscConfig+0x26c>)
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001dbc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001dc0:	d10b      	bne.n	8001dda <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dc2:	4b89      	ldr	r3, [pc, #548]	@ (8001fe8 <HAL_RCC_OscConfig+0x26c>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d06c      	beq.n	8001ea8 <HAL_RCC_OscConfig+0x12c>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d168      	bne.n	8001ea8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	e24c      	b.n	8002274 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001de2:	d106      	bne.n	8001df2 <HAL_RCC_OscConfig+0x76>
 8001de4:	4b80      	ldr	r3, [pc, #512]	@ (8001fe8 <HAL_RCC_OscConfig+0x26c>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a7f      	ldr	r2, [pc, #508]	@ (8001fe8 <HAL_RCC_OscConfig+0x26c>)
 8001dea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001dee:	6013      	str	r3, [r2, #0]
 8001df0:	e02e      	b.n	8001e50 <HAL_RCC_OscConfig+0xd4>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d10c      	bne.n	8001e14 <HAL_RCC_OscConfig+0x98>
 8001dfa:	4b7b      	ldr	r3, [pc, #492]	@ (8001fe8 <HAL_RCC_OscConfig+0x26c>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4a7a      	ldr	r2, [pc, #488]	@ (8001fe8 <HAL_RCC_OscConfig+0x26c>)
 8001e00:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001e04:	6013      	str	r3, [r2, #0]
 8001e06:	4b78      	ldr	r3, [pc, #480]	@ (8001fe8 <HAL_RCC_OscConfig+0x26c>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4a77      	ldr	r2, [pc, #476]	@ (8001fe8 <HAL_RCC_OscConfig+0x26c>)
 8001e0c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001e10:	6013      	str	r3, [r2, #0]
 8001e12:	e01d      	b.n	8001e50 <HAL_RCC_OscConfig+0xd4>
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001e1c:	d10c      	bne.n	8001e38 <HAL_RCC_OscConfig+0xbc>
 8001e1e:	4b72      	ldr	r3, [pc, #456]	@ (8001fe8 <HAL_RCC_OscConfig+0x26c>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4a71      	ldr	r2, [pc, #452]	@ (8001fe8 <HAL_RCC_OscConfig+0x26c>)
 8001e24:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001e28:	6013      	str	r3, [r2, #0]
 8001e2a:	4b6f      	ldr	r3, [pc, #444]	@ (8001fe8 <HAL_RCC_OscConfig+0x26c>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4a6e      	ldr	r2, [pc, #440]	@ (8001fe8 <HAL_RCC_OscConfig+0x26c>)
 8001e30:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e34:	6013      	str	r3, [r2, #0]
 8001e36:	e00b      	b.n	8001e50 <HAL_RCC_OscConfig+0xd4>
 8001e38:	4b6b      	ldr	r3, [pc, #428]	@ (8001fe8 <HAL_RCC_OscConfig+0x26c>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4a6a      	ldr	r2, [pc, #424]	@ (8001fe8 <HAL_RCC_OscConfig+0x26c>)
 8001e3e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001e42:	6013      	str	r3, [r2, #0]
 8001e44:	4b68      	ldr	r3, [pc, #416]	@ (8001fe8 <HAL_RCC_OscConfig+0x26c>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a67      	ldr	r2, [pc, #412]	@ (8001fe8 <HAL_RCC_OscConfig+0x26c>)
 8001e4a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001e4e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d013      	beq.n	8001e80 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e58:	f7fe fe80 	bl	8000b5c <HAL_GetTick>
 8001e5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e5e:	e008      	b.n	8001e72 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e60:	f7fe fe7c 	bl	8000b5c <HAL_GetTick>
 8001e64:	4602      	mov	r2, r0
 8001e66:	693b      	ldr	r3, [r7, #16]
 8001e68:	1ad3      	subs	r3, r2, r3
 8001e6a:	2b64      	cmp	r3, #100	@ 0x64
 8001e6c:	d901      	bls.n	8001e72 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001e6e:	2303      	movs	r3, #3
 8001e70:	e200      	b.n	8002274 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e72:	4b5d      	ldr	r3, [pc, #372]	@ (8001fe8 <HAL_RCC_OscConfig+0x26c>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d0f0      	beq.n	8001e60 <HAL_RCC_OscConfig+0xe4>
 8001e7e:	e014      	b.n	8001eaa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e80:	f7fe fe6c 	bl	8000b5c <HAL_GetTick>
 8001e84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e86:	e008      	b.n	8001e9a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e88:	f7fe fe68 	bl	8000b5c <HAL_GetTick>
 8001e8c:	4602      	mov	r2, r0
 8001e8e:	693b      	ldr	r3, [r7, #16]
 8001e90:	1ad3      	subs	r3, r2, r3
 8001e92:	2b64      	cmp	r3, #100	@ 0x64
 8001e94:	d901      	bls.n	8001e9a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001e96:	2303      	movs	r3, #3
 8001e98:	e1ec      	b.n	8002274 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e9a:	4b53      	ldr	r3, [pc, #332]	@ (8001fe8 <HAL_RCC_OscConfig+0x26c>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d1f0      	bne.n	8001e88 <HAL_RCC_OscConfig+0x10c>
 8001ea6:	e000      	b.n	8001eaa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ea8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f003 0302 	and.w	r3, r3, #2
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d063      	beq.n	8001f7e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001eb6:	4b4c      	ldr	r3, [pc, #304]	@ (8001fe8 <HAL_RCC_OscConfig+0x26c>)
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	f003 030c 	and.w	r3, r3, #12
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d00b      	beq.n	8001eda <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001ec2:	4b49      	ldr	r3, [pc, #292]	@ (8001fe8 <HAL_RCC_OscConfig+0x26c>)
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	f003 030c 	and.w	r3, r3, #12
 8001eca:	2b08      	cmp	r3, #8
 8001ecc:	d11c      	bne.n	8001f08 <HAL_RCC_OscConfig+0x18c>
 8001ece:	4b46      	ldr	r3, [pc, #280]	@ (8001fe8 <HAL_RCC_OscConfig+0x26c>)
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d116      	bne.n	8001f08 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001eda:	4b43      	ldr	r3, [pc, #268]	@ (8001fe8 <HAL_RCC_OscConfig+0x26c>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f003 0302 	and.w	r3, r3, #2
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d005      	beq.n	8001ef2 <HAL_RCC_OscConfig+0x176>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	691b      	ldr	r3, [r3, #16]
 8001eea:	2b01      	cmp	r3, #1
 8001eec:	d001      	beq.n	8001ef2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	e1c0      	b.n	8002274 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ef2:	4b3d      	ldr	r3, [pc, #244]	@ (8001fe8 <HAL_RCC_OscConfig+0x26c>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	695b      	ldr	r3, [r3, #20]
 8001efe:	00db      	lsls	r3, r3, #3
 8001f00:	4939      	ldr	r1, [pc, #228]	@ (8001fe8 <HAL_RCC_OscConfig+0x26c>)
 8001f02:	4313      	orrs	r3, r2
 8001f04:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f06:	e03a      	b.n	8001f7e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	691b      	ldr	r3, [r3, #16]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d020      	beq.n	8001f52 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f10:	4b36      	ldr	r3, [pc, #216]	@ (8001fec <HAL_RCC_OscConfig+0x270>)
 8001f12:	2201      	movs	r2, #1
 8001f14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f16:	f7fe fe21 	bl	8000b5c <HAL_GetTick>
 8001f1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f1c:	e008      	b.n	8001f30 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f1e:	f7fe fe1d 	bl	8000b5c <HAL_GetTick>
 8001f22:	4602      	mov	r2, r0
 8001f24:	693b      	ldr	r3, [r7, #16]
 8001f26:	1ad3      	subs	r3, r2, r3
 8001f28:	2b02      	cmp	r3, #2
 8001f2a:	d901      	bls.n	8001f30 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001f2c:	2303      	movs	r3, #3
 8001f2e:	e1a1      	b.n	8002274 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f30:	4b2d      	ldr	r3, [pc, #180]	@ (8001fe8 <HAL_RCC_OscConfig+0x26c>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f003 0302 	and.w	r3, r3, #2
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d0f0      	beq.n	8001f1e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f3c:	4b2a      	ldr	r3, [pc, #168]	@ (8001fe8 <HAL_RCC_OscConfig+0x26c>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	695b      	ldr	r3, [r3, #20]
 8001f48:	00db      	lsls	r3, r3, #3
 8001f4a:	4927      	ldr	r1, [pc, #156]	@ (8001fe8 <HAL_RCC_OscConfig+0x26c>)
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	600b      	str	r3, [r1, #0]
 8001f50:	e015      	b.n	8001f7e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f52:	4b26      	ldr	r3, [pc, #152]	@ (8001fec <HAL_RCC_OscConfig+0x270>)
 8001f54:	2200      	movs	r2, #0
 8001f56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f58:	f7fe fe00 	bl	8000b5c <HAL_GetTick>
 8001f5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f5e:	e008      	b.n	8001f72 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f60:	f7fe fdfc 	bl	8000b5c <HAL_GetTick>
 8001f64:	4602      	mov	r2, r0
 8001f66:	693b      	ldr	r3, [r7, #16]
 8001f68:	1ad3      	subs	r3, r2, r3
 8001f6a:	2b02      	cmp	r3, #2
 8001f6c:	d901      	bls.n	8001f72 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001f6e:	2303      	movs	r3, #3
 8001f70:	e180      	b.n	8002274 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f72:	4b1d      	ldr	r3, [pc, #116]	@ (8001fe8 <HAL_RCC_OscConfig+0x26c>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f003 0302 	and.w	r3, r3, #2
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d1f0      	bne.n	8001f60 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f003 0308 	and.w	r3, r3, #8
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d03a      	beq.n	8002000 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	699b      	ldr	r3, [r3, #24]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d019      	beq.n	8001fc6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f92:	4b17      	ldr	r3, [pc, #92]	@ (8001ff0 <HAL_RCC_OscConfig+0x274>)
 8001f94:	2201      	movs	r2, #1
 8001f96:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f98:	f7fe fde0 	bl	8000b5c <HAL_GetTick>
 8001f9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f9e:	e008      	b.n	8001fb2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fa0:	f7fe fddc 	bl	8000b5c <HAL_GetTick>
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	693b      	ldr	r3, [r7, #16]
 8001fa8:	1ad3      	subs	r3, r2, r3
 8001faa:	2b02      	cmp	r3, #2
 8001fac:	d901      	bls.n	8001fb2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001fae:	2303      	movs	r3, #3
 8001fb0:	e160      	b.n	8002274 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fb2:	4b0d      	ldr	r3, [pc, #52]	@ (8001fe8 <HAL_RCC_OscConfig+0x26c>)
 8001fb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fb6:	f003 0302 	and.w	r3, r3, #2
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d0f0      	beq.n	8001fa0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001fbe:	2001      	movs	r0, #1
 8001fc0:	f000 face 	bl	8002560 <RCC_Delay>
 8001fc4:	e01c      	b.n	8002000 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001fc6:	4b0a      	ldr	r3, [pc, #40]	@ (8001ff0 <HAL_RCC_OscConfig+0x274>)
 8001fc8:	2200      	movs	r2, #0
 8001fca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fcc:	f7fe fdc6 	bl	8000b5c <HAL_GetTick>
 8001fd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fd2:	e00f      	b.n	8001ff4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fd4:	f7fe fdc2 	bl	8000b5c <HAL_GetTick>
 8001fd8:	4602      	mov	r2, r0
 8001fda:	693b      	ldr	r3, [r7, #16]
 8001fdc:	1ad3      	subs	r3, r2, r3
 8001fde:	2b02      	cmp	r3, #2
 8001fe0:	d908      	bls.n	8001ff4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001fe2:	2303      	movs	r3, #3
 8001fe4:	e146      	b.n	8002274 <HAL_RCC_OscConfig+0x4f8>
 8001fe6:	bf00      	nop
 8001fe8:	40021000 	.word	0x40021000
 8001fec:	42420000 	.word	0x42420000
 8001ff0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ff4:	4b92      	ldr	r3, [pc, #584]	@ (8002240 <HAL_RCC_OscConfig+0x4c4>)
 8001ff6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ff8:	f003 0302 	and.w	r3, r3, #2
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d1e9      	bne.n	8001fd4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f003 0304 	and.w	r3, r3, #4
 8002008:	2b00      	cmp	r3, #0
 800200a:	f000 80a6 	beq.w	800215a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800200e:	2300      	movs	r3, #0
 8002010:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002012:	4b8b      	ldr	r3, [pc, #556]	@ (8002240 <HAL_RCC_OscConfig+0x4c4>)
 8002014:	69db      	ldr	r3, [r3, #28]
 8002016:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800201a:	2b00      	cmp	r3, #0
 800201c:	d10d      	bne.n	800203a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800201e:	4b88      	ldr	r3, [pc, #544]	@ (8002240 <HAL_RCC_OscConfig+0x4c4>)
 8002020:	69db      	ldr	r3, [r3, #28]
 8002022:	4a87      	ldr	r2, [pc, #540]	@ (8002240 <HAL_RCC_OscConfig+0x4c4>)
 8002024:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002028:	61d3      	str	r3, [r2, #28]
 800202a:	4b85      	ldr	r3, [pc, #532]	@ (8002240 <HAL_RCC_OscConfig+0x4c4>)
 800202c:	69db      	ldr	r3, [r3, #28]
 800202e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002032:	60bb      	str	r3, [r7, #8]
 8002034:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002036:	2301      	movs	r3, #1
 8002038:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800203a:	4b82      	ldr	r3, [pc, #520]	@ (8002244 <HAL_RCC_OscConfig+0x4c8>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002042:	2b00      	cmp	r3, #0
 8002044:	d118      	bne.n	8002078 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002046:	4b7f      	ldr	r3, [pc, #508]	@ (8002244 <HAL_RCC_OscConfig+0x4c8>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4a7e      	ldr	r2, [pc, #504]	@ (8002244 <HAL_RCC_OscConfig+0x4c8>)
 800204c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002050:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002052:	f7fe fd83 	bl	8000b5c <HAL_GetTick>
 8002056:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002058:	e008      	b.n	800206c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800205a:	f7fe fd7f 	bl	8000b5c <HAL_GetTick>
 800205e:	4602      	mov	r2, r0
 8002060:	693b      	ldr	r3, [r7, #16]
 8002062:	1ad3      	subs	r3, r2, r3
 8002064:	2b64      	cmp	r3, #100	@ 0x64
 8002066:	d901      	bls.n	800206c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002068:	2303      	movs	r3, #3
 800206a:	e103      	b.n	8002274 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800206c:	4b75      	ldr	r3, [pc, #468]	@ (8002244 <HAL_RCC_OscConfig+0x4c8>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002074:	2b00      	cmp	r3, #0
 8002076:	d0f0      	beq.n	800205a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	68db      	ldr	r3, [r3, #12]
 800207c:	2b01      	cmp	r3, #1
 800207e:	d106      	bne.n	800208e <HAL_RCC_OscConfig+0x312>
 8002080:	4b6f      	ldr	r3, [pc, #444]	@ (8002240 <HAL_RCC_OscConfig+0x4c4>)
 8002082:	6a1b      	ldr	r3, [r3, #32]
 8002084:	4a6e      	ldr	r2, [pc, #440]	@ (8002240 <HAL_RCC_OscConfig+0x4c4>)
 8002086:	f043 0301 	orr.w	r3, r3, #1
 800208a:	6213      	str	r3, [r2, #32]
 800208c:	e02d      	b.n	80020ea <HAL_RCC_OscConfig+0x36e>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	68db      	ldr	r3, [r3, #12]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d10c      	bne.n	80020b0 <HAL_RCC_OscConfig+0x334>
 8002096:	4b6a      	ldr	r3, [pc, #424]	@ (8002240 <HAL_RCC_OscConfig+0x4c4>)
 8002098:	6a1b      	ldr	r3, [r3, #32]
 800209a:	4a69      	ldr	r2, [pc, #420]	@ (8002240 <HAL_RCC_OscConfig+0x4c4>)
 800209c:	f023 0301 	bic.w	r3, r3, #1
 80020a0:	6213      	str	r3, [r2, #32]
 80020a2:	4b67      	ldr	r3, [pc, #412]	@ (8002240 <HAL_RCC_OscConfig+0x4c4>)
 80020a4:	6a1b      	ldr	r3, [r3, #32]
 80020a6:	4a66      	ldr	r2, [pc, #408]	@ (8002240 <HAL_RCC_OscConfig+0x4c4>)
 80020a8:	f023 0304 	bic.w	r3, r3, #4
 80020ac:	6213      	str	r3, [r2, #32]
 80020ae:	e01c      	b.n	80020ea <HAL_RCC_OscConfig+0x36e>
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	68db      	ldr	r3, [r3, #12]
 80020b4:	2b05      	cmp	r3, #5
 80020b6:	d10c      	bne.n	80020d2 <HAL_RCC_OscConfig+0x356>
 80020b8:	4b61      	ldr	r3, [pc, #388]	@ (8002240 <HAL_RCC_OscConfig+0x4c4>)
 80020ba:	6a1b      	ldr	r3, [r3, #32]
 80020bc:	4a60      	ldr	r2, [pc, #384]	@ (8002240 <HAL_RCC_OscConfig+0x4c4>)
 80020be:	f043 0304 	orr.w	r3, r3, #4
 80020c2:	6213      	str	r3, [r2, #32]
 80020c4:	4b5e      	ldr	r3, [pc, #376]	@ (8002240 <HAL_RCC_OscConfig+0x4c4>)
 80020c6:	6a1b      	ldr	r3, [r3, #32]
 80020c8:	4a5d      	ldr	r2, [pc, #372]	@ (8002240 <HAL_RCC_OscConfig+0x4c4>)
 80020ca:	f043 0301 	orr.w	r3, r3, #1
 80020ce:	6213      	str	r3, [r2, #32]
 80020d0:	e00b      	b.n	80020ea <HAL_RCC_OscConfig+0x36e>
 80020d2:	4b5b      	ldr	r3, [pc, #364]	@ (8002240 <HAL_RCC_OscConfig+0x4c4>)
 80020d4:	6a1b      	ldr	r3, [r3, #32]
 80020d6:	4a5a      	ldr	r2, [pc, #360]	@ (8002240 <HAL_RCC_OscConfig+0x4c4>)
 80020d8:	f023 0301 	bic.w	r3, r3, #1
 80020dc:	6213      	str	r3, [r2, #32]
 80020de:	4b58      	ldr	r3, [pc, #352]	@ (8002240 <HAL_RCC_OscConfig+0x4c4>)
 80020e0:	6a1b      	ldr	r3, [r3, #32]
 80020e2:	4a57      	ldr	r2, [pc, #348]	@ (8002240 <HAL_RCC_OscConfig+0x4c4>)
 80020e4:	f023 0304 	bic.w	r3, r3, #4
 80020e8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	68db      	ldr	r3, [r3, #12]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d015      	beq.n	800211e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020f2:	f7fe fd33 	bl	8000b5c <HAL_GetTick>
 80020f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020f8:	e00a      	b.n	8002110 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020fa:	f7fe fd2f 	bl	8000b5c <HAL_GetTick>
 80020fe:	4602      	mov	r2, r0
 8002100:	693b      	ldr	r3, [r7, #16]
 8002102:	1ad3      	subs	r3, r2, r3
 8002104:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002108:	4293      	cmp	r3, r2
 800210a:	d901      	bls.n	8002110 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800210c:	2303      	movs	r3, #3
 800210e:	e0b1      	b.n	8002274 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002110:	4b4b      	ldr	r3, [pc, #300]	@ (8002240 <HAL_RCC_OscConfig+0x4c4>)
 8002112:	6a1b      	ldr	r3, [r3, #32]
 8002114:	f003 0302 	and.w	r3, r3, #2
 8002118:	2b00      	cmp	r3, #0
 800211a:	d0ee      	beq.n	80020fa <HAL_RCC_OscConfig+0x37e>
 800211c:	e014      	b.n	8002148 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800211e:	f7fe fd1d 	bl	8000b5c <HAL_GetTick>
 8002122:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002124:	e00a      	b.n	800213c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002126:	f7fe fd19 	bl	8000b5c <HAL_GetTick>
 800212a:	4602      	mov	r2, r0
 800212c:	693b      	ldr	r3, [r7, #16]
 800212e:	1ad3      	subs	r3, r2, r3
 8002130:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002134:	4293      	cmp	r3, r2
 8002136:	d901      	bls.n	800213c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002138:	2303      	movs	r3, #3
 800213a:	e09b      	b.n	8002274 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800213c:	4b40      	ldr	r3, [pc, #256]	@ (8002240 <HAL_RCC_OscConfig+0x4c4>)
 800213e:	6a1b      	ldr	r3, [r3, #32]
 8002140:	f003 0302 	and.w	r3, r3, #2
 8002144:	2b00      	cmp	r3, #0
 8002146:	d1ee      	bne.n	8002126 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002148:	7dfb      	ldrb	r3, [r7, #23]
 800214a:	2b01      	cmp	r3, #1
 800214c:	d105      	bne.n	800215a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800214e:	4b3c      	ldr	r3, [pc, #240]	@ (8002240 <HAL_RCC_OscConfig+0x4c4>)
 8002150:	69db      	ldr	r3, [r3, #28]
 8002152:	4a3b      	ldr	r2, [pc, #236]	@ (8002240 <HAL_RCC_OscConfig+0x4c4>)
 8002154:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002158:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	69db      	ldr	r3, [r3, #28]
 800215e:	2b00      	cmp	r3, #0
 8002160:	f000 8087 	beq.w	8002272 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002164:	4b36      	ldr	r3, [pc, #216]	@ (8002240 <HAL_RCC_OscConfig+0x4c4>)
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	f003 030c 	and.w	r3, r3, #12
 800216c:	2b08      	cmp	r3, #8
 800216e:	d061      	beq.n	8002234 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	69db      	ldr	r3, [r3, #28]
 8002174:	2b02      	cmp	r3, #2
 8002176:	d146      	bne.n	8002206 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002178:	4b33      	ldr	r3, [pc, #204]	@ (8002248 <HAL_RCC_OscConfig+0x4cc>)
 800217a:	2200      	movs	r2, #0
 800217c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800217e:	f7fe fced 	bl	8000b5c <HAL_GetTick>
 8002182:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002184:	e008      	b.n	8002198 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002186:	f7fe fce9 	bl	8000b5c <HAL_GetTick>
 800218a:	4602      	mov	r2, r0
 800218c:	693b      	ldr	r3, [r7, #16]
 800218e:	1ad3      	subs	r3, r2, r3
 8002190:	2b02      	cmp	r3, #2
 8002192:	d901      	bls.n	8002198 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002194:	2303      	movs	r3, #3
 8002196:	e06d      	b.n	8002274 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002198:	4b29      	ldr	r3, [pc, #164]	@ (8002240 <HAL_RCC_OscConfig+0x4c4>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d1f0      	bne.n	8002186 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6a1b      	ldr	r3, [r3, #32]
 80021a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80021ac:	d108      	bne.n	80021c0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80021ae:	4b24      	ldr	r3, [pc, #144]	@ (8002240 <HAL_RCC_OscConfig+0x4c4>)
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	689b      	ldr	r3, [r3, #8]
 80021ba:	4921      	ldr	r1, [pc, #132]	@ (8002240 <HAL_RCC_OscConfig+0x4c4>)
 80021bc:	4313      	orrs	r3, r2
 80021be:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80021c0:	4b1f      	ldr	r3, [pc, #124]	@ (8002240 <HAL_RCC_OscConfig+0x4c4>)
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6a19      	ldr	r1, [r3, #32]
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021d0:	430b      	orrs	r3, r1
 80021d2:	491b      	ldr	r1, [pc, #108]	@ (8002240 <HAL_RCC_OscConfig+0x4c4>)
 80021d4:	4313      	orrs	r3, r2
 80021d6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021d8:	4b1b      	ldr	r3, [pc, #108]	@ (8002248 <HAL_RCC_OscConfig+0x4cc>)
 80021da:	2201      	movs	r2, #1
 80021dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021de:	f7fe fcbd 	bl	8000b5c <HAL_GetTick>
 80021e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80021e4:	e008      	b.n	80021f8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021e6:	f7fe fcb9 	bl	8000b5c <HAL_GetTick>
 80021ea:	4602      	mov	r2, r0
 80021ec:	693b      	ldr	r3, [r7, #16]
 80021ee:	1ad3      	subs	r3, r2, r3
 80021f0:	2b02      	cmp	r3, #2
 80021f2:	d901      	bls.n	80021f8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80021f4:	2303      	movs	r3, #3
 80021f6:	e03d      	b.n	8002274 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80021f8:	4b11      	ldr	r3, [pc, #68]	@ (8002240 <HAL_RCC_OscConfig+0x4c4>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002200:	2b00      	cmp	r3, #0
 8002202:	d0f0      	beq.n	80021e6 <HAL_RCC_OscConfig+0x46a>
 8002204:	e035      	b.n	8002272 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002206:	4b10      	ldr	r3, [pc, #64]	@ (8002248 <HAL_RCC_OscConfig+0x4cc>)
 8002208:	2200      	movs	r2, #0
 800220a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800220c:	f7fe fca6 	bl	8000b5c <HAL_GetTick>
 8002210:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002212:	e008      	b.n	8002226 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002214:	f7fe fca2 	bl	8000b5c <HAL_GetTick>
 8002218:	4602      	mov	r2, r0
 800221a:	693b      	ldr	r3, [r7, #16]
 800221c:	1ad3      	subs	r3, r2, r3
 800221e:	2b02      	cmp	r3, #2
 8002220:	d901      	bls.n	8002226 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002222:	2303      	movs	r3, #3
 8002224:	e026      	b.n	8002274 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002226:	4b06      	ldr	r3, [pc, #24]	@ (8002240 <HAL_RCC_OscConfig+0x4c4>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800222e:	2b00      	cmp	r3, #0
 8002230:	d1f0      	bne.n	8002214 <HAL_RCC_OscConfig+0x498>
 8002232:	e01e      	b.n	8002272 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	69db      	ldr	r3, [r3, #28]
 8002238:	2b01      	cmp	r3, #1
 800223a:	d107      	bne.n	800224c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800223c:	2301      	movs	r3, #1
 800223e:	e019      	b.n	8002274 <HAL_RCC_OscConfig+0x4f8>
 8002240:	40021000 	.word	0x40021000
 8002244:	40007000 	.word	0x40007000
 8002248:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800224c:	4b0b      	ldr	r3, [pc, #44]	@ (800227c <HAL_RCC_OscConfig+0x500>)
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6a1b      	ldr	r3, [r3, #32]
 800225c:	429a      	cmp	r2, r3
 800225e:	d106      	bne.n	800226e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800226a:	429a      	cmp	r2, r3
 800226c:	d001      	beq.n	8002272 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800226e:	2301      	movs	r3, #1
 8002270:	e000      	b.n	8002274 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002272:	2300      	movs	r3, #0
}
 8002274:	4618      	mov	r0, r3
 8002276:	3718      	adds	r7, #24
 8002278:	46bd      	mov	sp, r7
 800227a:	bd80      	pop	{r7, pc}
 800227c:	40021000 	.word	0x40021000

08002280 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b084      	sub	sp, #16
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
 8002288:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d101      	bne.n	8002294 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002290:	2301      	movs	r3, #1
 8002292:	e0d0      	b.n	8002436 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002294:	4b6a      	ldr	r3, [pc, #424]	@ (8002440 <HAL_RCC_ClockConfig+0x1c0>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f003 0307 	and.w	r3, r3, #7
 800229c:	683a      	ldr	r2, [r7, #0]
 800229e:	429a      	cmp	r2, r3
 80022a0:	d910      	bls.n	80022c4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022a2:	4b67      	ldr	r3, [pc, #412]	@ (8002440 <HAL_RCC_ClockConfig+0x1c0>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f023 0207 	bic.w	r2, r3, #7
 80022aa:	4965      	ldr	r1, [pc, #404]	@ (8002440 <HAL_RCC_ClockConfig+0x1c0>)
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	4313      	orrs	r3, r2
 80022b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022b2:	4b63      	ldr	r3, [pc, #396]	@ (8002440 <HAL_RCC_ClockConfig+0x1c0>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f003 0307 	and.w	r3, r3, #7
 80022ba:	683a      	ldr	r2, [r7, #0]
 80022bc:	429a      	cmp	r2, r3
 80022be:	d001      	beq.n	80022c4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80022c0:	2301      	movs	r3, #1
 80022c2:	e0b8      	b.n	8002436 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f003 0302 	and.w	r3, r3, #2
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d020      	beq.n	8002312 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f003 0304 	and.w	r3, r3, #4
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d005      	beq.n	80022e8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80022dc:	4b59      	ldr	r3, [pc, #356]	@ (8002444 <HAL_RCC_ClockConfig+0x1c4>)
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	4a58      	ldr	r2, [pc, #352]	@ (8002444 <HAL_RCC_ClockConfig+0x1c4>)
 80022e2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80022e6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f003 0308 	and.w	r3, r3, #8
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d005      	beq.n	8002300 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80022f4:	4b53      	ldr	r3, [pc, #332]	@ (8002444 <HAL_RCC_ClockConfig+0x1c4>)
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	4a52      	ldr	r2, [pc, #328]	@ (8002444 <HAL_RCC_ClockConfig+0x1c4>)
 80022fa:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80022fe:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002300:	4b50      	ldr	r3, [pc, #320]	@ (8002444 <HAL_RCC_ClockConfig+0x1c4>)
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	689b      	ldr	r3, [r3, #8]
 800230c:	494d      	ldr	r1, [pc, #308]	@ (8002444 <HAL_RCC_ClockConfig+0x1c4>)
 800230e:	4313      	orrs	r3, r2
 8002310:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f003 0301 	and.w	r3, r3, #1
 800231a:	2b00      	cmp	r3, #0
 800231c:	d040      	beq.n	80023a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	2b01      	cmp	r3, #1
 8002324:	d107      	bne.n	8002336 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002326:	4b47      	ldr	r3, [pc, #284]	@ (8002444 <HAL_RCC_ClockConfig+0x1c4>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800232e:	2b00      	cmp	r3, #0
 8002330:	d115      	bne.n	800235e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002332:	2301      	movs	r3, #1
 8002334:	e07f      	b.n	8002436 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	2b02      	cmp	r3, #2
 800233c:	d107      	bne.n	800234e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800233e:	4b41      	ldr	r3, [pc, #260]	@ (8002444 <HAL_RCC_ClockConfig+0x1c4>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002346:	2b00      	cmp	r3, #0
 8002348:	d109      	bne.n	800235e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800234a:	2301      	movs	r3, #1
 800234c:	e073      	b.n	8002436 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800234e:	4b3d      	ldr	r3, [pc, #244]	@ (8002444 <HAL_RCC_ClockConfig+0x1c4>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f003 0302 	and.w	r3, r3, #2
 8002356:	2b00      	cmp	r3, #0
 8002358:	d101      	bne.n	800235e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800235a:	2301      	movs	r3, #1
 800235c:	e06b      	b.n	8002436 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800235e:	4b39      	ldr	r3, [pc, #228]	@ (8002444 <HAL_RCC_ClockConfig+0x1c4>)
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	f023 0203 	bic.w	r2, r3, #3
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	4936      	ldr	r1, [pc, #216]	@ (8002444 <HAL_RCC_ClockConfig+0x1c4>)
 800236c:	4313      	orrs	r3, r2
 800236e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002370:	f7fe fbf4 	bl	8000b5c <HAL_GetTick>
 8002374:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002376:	e00a      	b.n	800238e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002378:	f7fe fbf0 	bl	8000b5c <HAL_GetTick>
 800237c:	4602      	mov	r2, r0
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	1ad3      	subs	r3, r2, r3
 8002382:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002386:	4293      	cmp	r3, r2
 8002388:	d901      	bls.n	800238e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800238a:	2303      	movs	r3, #3
 800238c:	e053      	b.n	8002436 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800238e:	4b2d      	ldr	r3, [pc, #180]	@ (8002444 <HAL_RCC_ClockConfig+0x1c4>)
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	f003 020c 	and.w	r2, r3, #12
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	009b      	lsls	r3, r3, #2
 800239c:	429a      	cmp	r2, r3
 800239e:	d1eb      	bne.n	8002378 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80023a0:	4b27      	ldr	r3, [pc, #156]	@ (8002440 <HAL_RCC_ClockConfig+0x1c0>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f003 0307 	and.w	r3, r3, #7
 80023a8:	683a      	ldr	r2, [r7, #0]
 80023aa:	429a      	cmp	r2, r3
 80023ac:	d210      	bcs.n	80023d0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023ae:	4b24      	ldr	r3, [pc, #144]	@ (8002440 <HAL_RCC_ClockConfig+0x1c0>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f023 0207 	bic.w	r2, r3, #7
 80023b6:	4922      	ldr	r1, [pc, #136]	@ (8002440 <HAL_RCC_ClockConfig+0x1c0>)
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	4313      	orrs	r3, r2
 80023bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023be:	4b20      	ldr	r3, [pc, #128]	@ (8002440 <HAL_RCC_ClockConfig+0x1c0>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f003 0307 	and.w	r3, r3, #7
 80023c6:	683a      	ldr	r2, [r7, #0]
 80023c8:	429a      	cmp	r2, r3
 80023ca:	d001      	beq.n	80023d0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80023cc:	2301      	movs	r3, #1
 80023ce:	e032      	b.n	8002436 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f003 0304 	and.w	r3, r3, #4
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d008      	beq.n	80023ee <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023dc:	4b19      	ldr	r3, [pc, #100]	@ (8002444 <HAL_RCC_ClockConfig+0x1c4>)
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	68db      	ldr	r3, [r3, #12]
 80023e8:	4916      	ldr	r1, [pc, #88]	@ (8002444 <HAL_RCC_ClockConfig+0x1c4>)
 80023ea:	4313      	orrs	r3, r2
 80023ec:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f003 0308 	and.w	r3, r3, #8
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d009      	beq.n	800240e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80023fa:	4b12      	ldr	r3, [pc, #72]	@ (8002444 <HAL_RCC_ClockConfig+0x1c4>)
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	691b      	ldr	r3, [r3, #16]
 8002406:	00db      	lsls	r3, r3, #3
 8002408:	490e      	ldr	r1, [pc, #56]	@ (8002444 <HAL_RCC_ClockConfig+0x1c4>)
 800240a:	4313      	orrs	r3, r2
 800240c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800240e:	f000 f821 	bl	8002454 <HAL_RCC_GetSysClockFreq>
 8002412:	4602      	mov	r2, r0
 8002414:	4b0b      	ldr	r3, [pc, #44]	@ (8002444 <HAL_RCC_ClockConfig+0x1c4>)
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	091b      	lsrs	r3, r3, #4
 800241a:	f003 030f 	and.w	r3, r3, #15
 800241e:	490a      	ldr	r1, [pc, #40]	@ (8002448 <HAL_RCC_ClockConfig+0x1c8>)
 8002420:	5ccb      	ldrb	r3, [r1, r3]
 8002422:	fa22 f303 	lsr.w	r3, r2, r3
 8002426:	4a09      	ldr	r2, [pc, #36]	@ (800244c <HAL_RCC_ClockConfig+0x1cc>)
 8002428:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800242a:	4b09      	ldr	r3, [pc, #36]	@ (8002450 <HAL_RCC_ClockConfig+0x1d0>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4618      	mov	r0, r3
 8002430:	f7fe fb52 	bl	8000ad8 <HAL_InitTick>

  return HAL_OK;
 8002434:	2300      	movs	r3, #0
}
 8002436:	4618      	mov	r0, r3
 8002438:	3710      	adds	r7, #16
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}
 800243e:	bf00      	nop
 8002440:	40022000 	.word	0x40022000
 8002444:	40021000 	.word	0x40021000
 8002448:	08004c2c 	.word	0x08004c2c
 800244c:	20000000 	.word	0x20000000
 8002450:	20000004 	.word	0x20000004

08002454 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002454:	b480      	push	{r7}
 8002456:	b087      	sub	sp, #28
 8002458:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800245a:	2300      	movs	r3, #0
 800245c:	60fb      	str	r3, [r7, #12]
 800245e:	2300      	movs	r3, #0
 8002460:	60bb      	str	r3, [r7, #8]
 8002462:	2300      	movs	r3, #0
 8002464:	617b      	str	r3, [r7, #20]
 8002466:	2300      	movs	r3, #0
 8002468:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800246a:	2300      	movs	r3, #0
 800246c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800246e:	4b1e      	ldr	r3, [pc, #120]	@ (80024e8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	f003 030c 	and.w	r3, r3, #12
 800247a:	2b04      	cmp	r3, #4
 800247c:	d002      	beq.n	8002484 <HAL_RCC_GetSysClockFreq+0x30>
 800247e:	2b08      	cmp	r3, #8
 8002480:	d003      	beq.n	800248a <HAL_RCC_GetSysClockFreq+0x36>
 8002482:	e027      	b.n	80024d4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002484:	4b19      	ldr	r3, [pc, #100]	@ (80024ec <HAL_RCC_GetSysClockFreq+0x98>)
 8002486:	613b      	str	r3, [r7, #16]
      break;
 8002488:	e027      	b.n	80024da <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	0c9b      	lsrs	r3, r3, #18
 800248e:	f003 030f 	and.w	r3, r3, #15
 8002492:	4a17      	ldr	r2, [pc, #92]	@ (80024f0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002494:	5cd3      	ldrb	r3, [r2, r3]
 8002496:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d010      	beq.n	80024c4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80024a2:	4b11      	ldr	r3, [pc, #68]	@ (80024e8 <HAL_RCC_GetSysClockFreq+0x94>)
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	0c5b      	lsrs	r3, r3, #17
 80024a8:	f003 0301 	and.w	r3, r3, #1
 80024ac:	4a11      	ldr	r2, [pc, #68]	@ (80024f4 <HAL_RCC_GetSysClockFreq+0xa0>)
 80024ae:	5cd3      	ldrb	r3, [r2, r3]
 80024b0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	4a0d      	ldr	r2, [pc, #52]	@ (80024ec <HAL_RCC_GetSysClockFreq+0x98>)
 80024b6:	fb03 f202 	mul.w	r2, r3, r2
 80024ba:	68bb      	ldr	r3, [r7, #8]
 80024bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80024c0:	617b      	str	r3, [r7, #20]
 80024c2:	e004      	b.n	80024ce <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	4a0c      	ldr	r2, [pc, #48]	@ (80024f8 <HAL_RCC_GetSysClockFreq+0xa4>)
 80024c8:	fb02 f303 	mul.w	r3, r2, r3
 80024cc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80024ce:	697b      	ldr	r3, [r7, #20]
 80024d0:	613b      	str	r3, [r7, #16]
      break;
 80024d2:	e002      	b.n	80024da <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80024d4:	4b05      	ldr	r3, [pc, #20]	@ (80024ec <HAL_RCC_GetSysClockFreq+0x98>)
 80024d6:	613b      	str	r3, [r7, #16]
      break;
 80024d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80024da:	693b      	ldr	r3, [r7, #16]
}
 80024dc:	4618      	mov	r0, r3
 80024de:	371c      	adds	r7, #28
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bc80      	pop	{r7}
 80024e4:	4770      	bx	lr
 80024e6:	bf00      	nop
 80024e8:	40021000 	.word	0x40021000
 80024ec:	007a1200 	.word	0x007a1200
 80024f0:	08004c44 	.word	0x08004c44
 80024f4:	08004c54 	.word	0x08004c54
 80024f8:	003d0900 	.word	0x003d0900

080024fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80024fc:	b480      	push	{r7}
 80024fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002500:	4b02      	ldr	r3, [pc, #8]	@ (800250c <HAL_RCC_GetHCLKFreq+0x10>)
 8002502:	681b      	ldr	r3, [r3, #0]
}
 8002504:	4618      	mov	r0, r3
 8002506:	46bd      	mov	sp, r7
 8002508:	bc80      	pop	{r7}
 800250a:	4770      	bx	lr
 800250c:	20000000 	.word	0x20000000

08002510 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002514:	f7ff fff2 	bl	80024fc <HAL_RCC_GetHCLKFreq>
 8002518:	4602      	mov	r2, r0
 800251a:	4b05      	ldr	r3, [pc, #20]	@ (8002530 <HAL_RCC_GetPCLK1Freq+0x20>)
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	0a1b      	lsrs	r3, r3, #8
 8002520:	f003 0307 	and.w	r3, r3, #7
 8002524:	4903      	ldr	r1, [pc, #12]	@ (8002534 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002526:	5ccb      	ldrb	r3, [r1, r3]
 8002528:	fa22 f303 	lsr.w	r3, r2, r3
}
 800252c:	4618      	mov	r0, r3
 800252e:	bd80      	pop	{r7, pc}
 8002530:	40021000 	.word	0x40021000
 8002534:	08004c3c 	.word	0x08004c3c

08002538 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800253c:	f7ff ffde 	bl	80024fc <HAL_RCC_GetHCLKFreq>
 8002540:	4602      	mov	r2, r0
 8002542:	4b05      	ldr	r3, [pc, #20]	@ (8002558 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	0adb      	lsrs	r3, r3, #11
 8002548:	f003 0307 	and.w	r3, r3, #7
 800254c:	4903      	ldr	r1, [pc, #12]	@ (800255c <HAL_RCC_GetPCLK2Freq+0x24>)
 800254e:	5ccb      	ldrb	r3, [r1, r3]
 8002550:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002554:	4618      	mov	r0, r3
 8002556:	bd80      	pop	{r7, pc}
 8002558:	40021000 	.word	0x40021000
 800255c:	08004c3c 	.word	0x08004c3c

08002560 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002560:	b480      	push	{r7}
 8002562:	b085      	sub	sp, #20
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002568:	4b0a      	ldr	r3, [pc, #40]	@ (8002594 <RCC_Delay+0x34>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4a0a      	ldr	r2, [pc, #40]	@ (8002598 <RCC_Delay+0x38>)
 800256e:	fba2 2303 	umull	r2, r3, r2, r3
 8002572:	0a5b      	lsrs	r3, r3, #9
 8002574:	687a      	ldr	r2, [r7, #4]
 8002576:	fb02 f303 	mul.w	r3, r2, r3
 800257a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800257c:	bf00      	nop
  }
  while (Delay --);
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	1e5a      	subs	r2, r3, #1
 8002582:	60fa      	str	r2, [r7, #12]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d1f9      	bne.n	800257c <RCC_Delay+0x1c>
}
 8002588:	bf00      	nop
 800258a:	bf00      	nop
 800258c:	3714      	adds	r7, #20
 800258e:	46bd      	mov	sp, r7
 8002590:	bc80      	pop	{r7}
 8002592:	4770      	bx	lr
 8002594:	20000000 	.word	0x20000000
 8002598:	10624dd3 	.word	0x10624dd3

0800259c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b086      	sub	sp, #24
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80025a4:	2300      	movs	r3, #0
 80025a6:	613b      	str	r3, [r7, #16]
 80025a8:	2300      	movs	r3, #0
 80025aa:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f003 0301 	and.w	r3, r3, #1
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d07d      	beq.n	80026b4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80025b8:	2300      	movs	r3, #0
 80025ba:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025bc:	4b4f      	ldr	r3, [pc, #316]	@ (80026fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025be:	69db      	ldr	r3, [r3, #28]
 80025c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d10d      	bne.n	80025e4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025c8:	4b4c      	ldr	r3, [pc, #304]	@ (80026fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025ca:	69db      	ldr	r3, [r3, #28]
 80025cc:	4a4b      	ldr	r2, [pc, #300]	@ (80026fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025ce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80025d2:	61d3      	str	r3, [r2, #28]
 80025d4:	4b49      	ldr	r3, [pc, #292]	@ (80026fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025d6:	69db      	ldr	r3, [r3, #28]
 80025d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025dc:	60bb      	str	r3, [r7, #8]
 80025de:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025e0:	2301      	movs	r3, #1
 80025e2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025e4:	4b46      	ldr	r3, [pc, #280]	@ (8002700 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d118      	bne.n	8002622 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025f0:	4b43      	ldr	r3, [pc, #268]	@ (8002700 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a42      	ldr	r2, [pc, #264]	@ (8002700 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80025f6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80025fa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025fc:	f7fe faae 	bl	8000b5c <HAL_GetTick>
 8002600:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002602:	e008      	b.n	8002616 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002604:	f7fe faaa 	bl	8000b5c <HAL_GetTick>
 8002608:	4602      	mov	r2, r0
 800260a:	693b      	ldr	r3, [r7, #16]
 800260c:	1ad3      	subs	r3, r2, r3
 800260e:	2b64      	cmp	r3, #100	@ 0x64
 8002610:	d901      	bls.n	8002616 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002612:	2303      	movs	r3, #3
 8002614:	e06d      	b.n	80026f2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002616:	4b3a      	ldr	r3, [pc, #232]	@ (8002700 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800261e:	2b00      	cmp	r3, #0
 8002620:	d0f0      	beq.n	8002604 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002622:	4b36      	ldr	r3, [pc, #216]	@ (80026fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002624:	6a1b      	ldr	r3, [r3, #32]
 8002626:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800262a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d02e      	beq.n	8002690 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800263a:	68fa      	ldr	r2, [r7, #12]
 800263c:	429a      	cmp	r2, r3
 800263e:	d027      	beq.n	8002690 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002640:	4b2e      	ldr	r3, [pc, #184]	@ (80026fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002642:	6a1b      	ldr	r3, [r3, #32]
 8002644:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002648:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800264a:	4b2e      	ldr	r3, [pc, #184]	@ (8002704 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800264c:	2201      	movs	r2, #1
 800264e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002650:	4b2c      	ldr	r3, [pc, #176]	@ (8002704 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002652:	2200      	movs	r2, #0
 8002654:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002656:	4a29      	ldr	r2, [pc, #164]	@ (80026fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	f003 0301 	and.w	r3, r3, #1
 8002662:	2b00      	cmp	r3, #0
 8002664:	d014      	beq.n	8002690 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002666:	f7fe fa79 	bl	8000b5c <HAL_GetTick>
 800266a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800266c:	e00a      	b.n	8002684 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800266e:	f7fe fa75 	bl	8000b5c <HAL_GetTick>
 8002672:	4602      	mov	r2, r0
 8002674:	693b      	ldr	r3, [r7, #16]
 8002676:	1ad3      	subs	r3, r2, r3
 8002678:	f241 3288 	movw	r2, #5000	@ 0x1388
 800267c:	4293      	cmp	r3, r2
 800267e:	d901      	bls.n	8002684 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002680:	2303      	movs	r3, #3
 8002682:	e036      	b.n	80026f2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002684:	4b1d      	ldr	r3, [pc, #116]	@ (80026fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002686:	6a1b      	ldr	r3, [r3, #32]
 8002688:	f003 0302 	and.w	r3, r3, #2
 800268c:	2b00      	cmp	r3, #0
 800268e:	d0ee      	beq.n	800266e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002690:	4b1a      	ldr	r3, [pc, #104]	@ (80026fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002692:	6a1b      	ldr	r3, [r3, #32]
 8002694:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	4917      	ldr	r1, [pc, #92]	@ (80026fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800269e:	4313      	orrs	r3, r2
 80026a0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80026a2:	7dfb      	ldrb	r3, [r7, #23]
 80026a4:	2b01      	cmp	r3, #1
 80026a6:	d105      	bne.n	80026b4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026a8:	4b14      	ldr	r3, [pc, #80]	@ (80026fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026aa:	69db      	ldr	r3, [r3, #28]
 80026ac:	4a13      	ldr	r2, [pc, #76]	@ (80026fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026ae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80026b2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f003 0302 	and.w	r3, r3, #2
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d008      	beq.n	80026d2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80026c0:	4b0e      	ldr	r3, [pc, #56]	@ (80026fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	689b      	ldr	r3, [r3, #8]
 80026cc:	490b      	ldr	r1, [pc, #44]	@ (80026fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026ce:	4313      	orrs	r3, r2
 80026d0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f003 0310 	and.w	r3, r3, #16
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d008      	beq.n	80026f0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80026de:	4b07      	ldr	r3, [pc, #28]	@ (80026fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	68db      	ldr	r3, [r3, #12]
 80026ea:	4904      	ldr	r1, [pc, #16]	@ (80026fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026ec:	4313      	orrs	r3, r2
 80026ee:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80026f0:	2300      	movs	r3, #0
}
 80026f2:	4618      	mov	r0, r3
 80026f4:	3718      	adds	r7, #24
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bd80      	pop	{r7, pc}
 80026fa:	bf00      	nop
 80026fc:	40021000 	.word	0x40021000
 8002700:	40007000 	.word	0x40007000
 8002704:	42420440 	.word	0x42420440

08002708 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b088      	sub	sp, #32
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8002710:	2300      	movs	r3, #0
 8002712:	617b      	str	r3, [r7, #20]
 8002714:	2300      	movs	r3, #0
 8002716:	61fb      	str	r3, [r7, #28]
 8002718:	2300      	movs	r3, #0
 800271a:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 800271c:	2300      	movs	r3, #0
 800271e:	60fb      	str	r3, [r7, #12]
 8002720:	2300      	movs	r3, #0
 8002722:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2b10      	cmp	r3, #16
 8002728:	d00a      	beq.n	8002740 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2b10      	cmp	r3, #16
 800272e:	f200 808a 	bhi.w	8002846 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2b01      	cmp	r3, #1
 8002736:	d045      	beq.n	80027c4 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2b02      	cmp	r3, #2
 800273c:	d075      	beq.n	800282a <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 800273e:	e082      	b.n	8002846 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8002740:	4b46      	ldr	r3, [pc, #280]	@ (800285c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8002746:	4b45      	ldr	r3, [pc, #276]	@ (800285c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800274e:	2b00      	cmp	r3, #0
 8002750:	d07b      	beq.n	800284a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	0c9b      	lsrs	r3, r3, #18
 8002756:	f003 030f 	and.w	r3, r3, #15
 800275a:	4a41      	ldr	r2, [pc, #260]	@ (8002860 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 800275c:	5cd3      	ldrb	r3, [r2, r3]
 800275e:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002766:	2b00      	cmp	r3, #0
 8002768:	d015      	beq.n	8002796 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800276a:	4b3c      	ldr	r3, [pc, #240]	@ (800285c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	0c5b      	lsrs	r3, r3, #17
 8002770:	f003 0301 	and.w	r3, r3, #1
 8002774:	4a3b      	ldr	r2, [pc, #236]	@ (8002864 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8002776:	5cd3      	ldrb	r3, [r2, r3]
 8002778:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002780:	2b00      	cmp	r3, #0
 8002782:	d00d      	beq.n	80027a0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8002784:	4a38      	ldr	r2, [pc, #224]	@ (8002868 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8002786:	697b      	ldr	r3, [r7, #20]
 8002788:	fbb2 f2f3 	udiv	r2, r2, r3
 800278c:	693b      	ldr	r3, [r7, #16]
 800278e:	fb02 f303 	mul.w	r3, r2, r3
 8002792:	61fb      	str	r3, [r7, #28]
 8002794:	e004      	b.n	80027a0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002796:	693b      	ldr	r3, [r7, #16]
 8002798:	4a34      	ldr	r2, [pc, #208]	@ (800286c <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 800279a:	fb02 f303 	mul.w	r3, r2, r3
 800279e:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80027a0:	4b2e      	ldr	r3, [pc, #184]	@ (800285c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80027a8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80027ac:	d102      	bne.n	80027b4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 80027ae:	69fb      	ldr	r3, [r7, #28]
 80027b0:	61bb      	str	r3, [r7, #24]
      break;
 80027b2:	e04a      	b.n	800284a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 80027b4:	69fb      	ldr	r3, [r7, #28]
 80027b6:	005b      	lsls	r3, r3, #1
 80027b8:	4a2d      	ldr	r2, [pc, #180]	@ (8002870 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80027ba:	fba2 2303 	umull	r2, r3, r2, r3
 80027be:	085b      	lsrs	r3, r3, #1
 80027c0:	61bb      	str	r3, [r7, #24]
      break;
 80027c2:	e042      	b.n	800284a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 80027c4:	4b25      	ldr	r3, [pc, #148]	@ (800285c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80027c6:	6a1b      	ldr	r3, [r3, #32]
 80027c8:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80027d0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80027d4:	d108      	bne.n	80027e8 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	f003 0302 	and.w	r3, r3, #2
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d003      	beq.n	80027e8 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 80027e0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80027e4:	61bb      	str	r3, [r7, #24]
 80027e6:	e01f      	b.n	8002828 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80027ee:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80027f2:	d109      	bne.n	8002808 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 80027f4:	4b19      	ldr	r3, [pc, #100]	@ (800285c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80027f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027f8:	f003 0302 	and.w	r3, r3, #2
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d003      	beq.n	8002808 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8002800:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8002804:	61bb      	str	r3, [r7, #24]
 8002806:	e00f      	b.n	8002828 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800280e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002812:	d11c      	bne.n	800284e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8002814:	4b11      	ldr	r3, [pc, #68]	@ (800285c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800281c:	2b00      	cmp	r3, #0
 800281e:	d016      	beq.n	800284e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8002820:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8002824:	61bb      	str	r3, [r7, #24]
      break;
 8002826:	e012      	b.n	800284e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8002828:	e011      	b.n	800284e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800282a:	f7ff fe85 	bl	8002538 <HAL_RCC_GetPCLK2Freq>
 800282e:	4602      	mov	r2, r0
 8002830:	4b0a      	ldr	r3, [pc, #40]	@ (800285c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	0b9b      	lsrs	r3, r3, #14
 8002836:	f003 0303 	and.w	r3, r3, #3
 800283a:	3301      	adds	r3, #1
 800283c:	005b      	lsls	r3, r3, #1
 800283e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002842:	61bb      	str	r3, [r7, #24]
      break;
 8002844:	e004      	b.n	8002850 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002846:	bf00      	nop
 8002848:	e002      	b.n	8002850 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800284a:	bf00      	nop
 800284c:	e000      	b.n	8002850 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800284e:	bf00      	nop
    }
  }
  return (frequency);
 8002850:	69bb      	ldr	r3, [r7, #24]
}
 8002852:	4618      	mov	r0, r3
 8002854:	3720      	adds	r7, #32
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}
 800285a:	bf00      	nop
 800285c:	40021000 	.word	0x40021000
 8002860:	08004c58 	.word	0x08004c58
 8002864:	08004c68 	.word	0x08004c68
 8002868:	007a1200 	.word	0x007a1200
 800286c:	003d0900 	.word	0x003d0900
 8002870:	aaaaaaab 	.word	0xaaaaaaab

08002874 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b084      	sub	sp, #16
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 800287c:	2300      	movs	r3, #0
 800287e:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d101      	bne.n	800288a <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8002886:	2301      	movs	r3, #1
 8002888:	e07a      	b.n	8002980 <HAL_RTC_Init+0x10c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	7c5b      	ldrb	r3, [r3, #17]
 800288e:	b2db      	uxtb	r3, r3
 8002890:	2b00      	cmp	r3, #0
 8002892:	d105      	bne.n	80028a0 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2200      	movs	r2, #0
 8002898:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800289a:	6878      	ldr	r0, [r7, #4]
 800289c:	f7fd ff34 	bl	8000708 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2202      	movs	r2, #2
 80028a4:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80028a6:	6878      	ldr	r0, [r7, #4]
 80028a8:	f000 f870 	bl	800298c <HAL_RTC_WaitForSynchro>
 80028ac:	4603      	mov	r3, r0
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d004      	beq.n	80028bc <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2204      	movs	r2, #4
 80028b6:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 80028b8:	2301      	movs	r3, #1
 80028ba:	e061      	b.n	8002980 <HAL_RTC_Init+0x10c>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80028bc:	6878      	ldr	r0, [r7, #4]
 80028be:	f000 f892 	bl	80029e6 <RTC_EnterInitMode>
 80028c2:	4603      	mov	r3, r0
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d004      	beq.n	80028d2 <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2204      	movs	r2, #4
 80028cc:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 80028ce:	2301      	movs	r3, #1
 80028d0:	e056      	b.n	8002980 <HAL_RTC_Init+0x10c>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	685a      	ldr	r2, [r3, #4]
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f022 0207 	bic.w	r2, r2, #7
 80028e0:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	689b      	ldr	r3, [r3, #8]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d005      	beq.n	80028f6 <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 80028ea:	4b27      	ldr	r3, [pc, #156]	@ (8002988 <HAL_RTC_Init+0x114>)
 80028ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028ee:	4a26      	ldr	r2, [pc, #152]	@ (8002988 <HAL_RTC_Init+0x114>)
 80028f0:	f023 0301 	bic.w	r3, r3, #1
 80028f4:	6313      	str	r3, [r2, #48]	@ 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 80028f6:	4b24      	ldr	r3, [pc, #144]	@ (8002988 <HAL_RTC_Init+0x114>)
 80028f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028fa:	f423 7260 	bic.w	r2, r3, #896	@ 0x380
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	689b      	ldr	r3, [r3, #8]
 8002902:	4921      	ldr	r1, [pc, #132]	@ (8002988 <HAL_RTC_Init+0x114>)
 8002904:	4313      	orrs	r3, r2
 8002906:	62cb      	str	r3, [r1, #44]	@ 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002910:	d003      	beq.n	800291a <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	60fb      	str	r3, [r7, #12]
 8002918:	e00e      	b.n	8002938 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 800291a:	2001      	movs	r0, #1
 800291c:	f7ff fef4 	bl	8002708 <HAL_RCCEx_GetPeriphCLKFreq>
 8002920:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d104      	bne.n	8002932 <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2204      	movs	r2, #4
 800292c:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 800292e:	2301      	movs	r3, #1
 8002930:	e026      	b.n	8002980 <HAL_RTC_Init+0x10c>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	3b01      	subs	r3, #1
 8002936:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    WRITE_REG(hrtc->Instance->PRLH, ((prescaler >> 16U) & RTC_PRLH_PRL));
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	0c1a      	lsrs	r2, r3, #16
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f002 020f 	and.w	r2, r2, #15
 8002944:	609a      	str	r2, [r3, #8]
    WRITE_REG(hrtc->Instance->PRLL, (prescaler & RTC_PRLL_PRL));
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	68fa      	ldr	r2, [r7, #12]
 800294c:	b292      	uxth	r2, r2
 800294e:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8002950:	6878      	ldr	r0, [r7, #4]
 8002952:	f000 f870 	bl	8002a36 <RTC_ExitInitMode>
 8002956:	4603      	mov	r3, r0
 8002958:	2b00      	cmp	r3, #0
 800295a:	d004      	beq.n	8002966 <HAL_RTC_Init+0xf2>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2204      	movs	r2, #4
 8002960:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 8002962:	2301      	movs	r3, #1
 8002964:	e00c      	b.n	8002980 <HAL_RTC_Init+0x10c>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2200      	movs	r2, #0
 800296a:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2201      	movs	r2, #1
 8002970:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2201      	movs	r2, #1
 8002976:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2201      	movs	r2, #1
 800297c:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 800297e:	2300      	movs	r3, #0
  }
}
 8002980:	4618      	mov	r0, r3
 8002982:	3710      	adds	r7, #16
 8002984:	46bd      	mov	sp, r7
 8002986:	bd80      	pop	{r7, pc}
 8002988:	40006c00 	.word	0x40006c00

0800298c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b084      	sub	sp, #16
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002994:	2300      	movs	r3, #0
 8002996:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d101      	bne.n	80029a2 <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 800299e:	2301      	movs	r3, #1
 80029a0:	e01d      	b.n	80029de <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	685a      	ldr	r2, [r3, #4]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f022 0208 	bic.w	r2, r2, #8
 80029b0:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 80029b2:	f7fe f8d3 	bl	8000b5c <HAL_GetTick>
 80029b6:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 80029b8:	e009      	b.n	80029ce <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80029ba:	f7fe f8cf 	bl	8000b5c <HAL_GetTick>
 80029be:	4602      	mov	r2, r0
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	1ad3      	subs	r3, r2, r3
 80029c4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80029c8:	d901      	bls.n	80029ce <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 80029ca:	2303      	movs	r3, #3
 80029cc:	e007      	b.n	80029de <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	f003 0308 	and.w	r3, r3, #8
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d0ee      	beq.n	80029ba <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 80029dc:	2300      	movs	r3, #0
}
 80029de:	4618      	mov	r0, r3
 80029e0:	3710      	adds	r7, #16
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}

080029e6 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80029e6:	b580      	push	{r7, lr}
 80029e8:	b084      	sub	sp, #16
 80029ea:	af00      	add	r7, sp, #0
 80029ec:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80029ee:	2300      	movs	r3, #0
 80029f0:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 80029f2:	f7fe f8b3 	bl	8000b5c <HAL_GetTick>
 80029f6:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80029f8:	e009      	b.n	8002a0e <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80029fa:	f7fe f8af 	bl	8000b5c <HAL_GetTick>
 80029fe:	4602      	mov	r2, r0
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	1ad3      	subs	r3, r2, r3
 8002a04:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002a08:	d901      	bls.n	8002a0e <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8002a0a:	2303      	movs	r3, #3
 8002a0c:	e00f      	b.n	8002a2e <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	f003 0320 	and.w	r3, r3, #32
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d0ee      	beq.n	80029fa <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	685a      	ldr	r2, [r3, #4]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f042 0210 	orr.w	r2, r2, #16
 8002a2a:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 8002a2c:	2300      	movs	r3, #0
}
 8002a2e:	4618      	mov	r0, r3
 8002a30:	3710      	adds	r7, #16
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd80      	pop	{r7, pc}

08002a36 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002a36:	b580      	push	{r7, lr}
 8002a38:	b084      	sub	sp, #16
 8002a3a:	af00      	add	r7, sp, #0
 8002a3c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	685a      	ldr	r2, [r3, #4]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f022 0210 	bic.w	r2, r2, #16
 8002a50:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8002a52:	f7fe f883 	bl	8000b5c <HAL_GetTick>
 8002a56:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8002a58:	e009      	b.n	8002a6e <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8002a5a:	f7fe f87f 	bl	8000b5c <HAL_GetTick>
 8002a5e:	4602      	mov	r2, r0
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	1ad3      	subs	r3, r2, r3
 8002a64:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002a68:	d901      	bls.n	8002a6e <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8002a6a:	2303      	movs	r3, #3
 8002a6c:	e007      	b.n	8002a7e <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	f003 0320 	and.w	r3, r3, #32
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d0ee      	beq.n	8002a5a <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8002a7c:	2300      	movs	r3, #0
}
 8002a7e:	4618      	mov	r0, r3
 8002a80:	3710      	adds	r7, #16
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bd80      	pop	{r7, pc}

08002a86 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002a86:	b580      	push	{r7, lr}
 8002a88:	b082      	sub	sp, #8
 8002a8a:	af00      	add	r7, sp, #0
 8002a8c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d101      	bne.n	8002a98 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002a94:	2301      	movs	r3, #1
 8002a96:	e041      	b.n	8002b1c <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a9e:	b2db      	uxtb	r3, r3
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d106      	bne.n	8002ab2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002aac:	6878      	ldr	r0, [r7, #4]
 8002aae:	f7fd fe4f 	bl	8000750 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2202      	movs	r2, #2
 8002ab6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681a      	ldr	r2, [r3, #0]
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	3304      	adds	r3, #4
 8002ac2:	4619      	mov	r1, r3
 8002ac4:	4610      	mov	r0, r2
 8002ac6:	f000 fc1f 	bl	8003308 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2201      	movs	r2, #1
 8002ace:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2201      	movs	r2, #1
 8002ad6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2201      	movs	r2, #1
 8002ade:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2201      	movs	r2, #1
 8002ae6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2201      	movs	r2, #1
 8002aee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2201      	movs	r2, #1
 8002af6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2201      	movs	r2, #1
 8002afe:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2201      	movs	r2, #1
 8002b06:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2201      	movs	r2, #1
 8002b0e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2201      	movs	r2, #1
 8002b16:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002b1a:	2300      	movs	r3, #0
}
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	3708      	adds	r7, #8
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bd80      	pop	{r7, pc}

08002b24 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002b24:	b480      	push	{r7}
 8002b26:	b085      	sub	sp, #20
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b32:	b2db      	uxtb	r3, r3
 8002b34:	2b01      	cmp	r3, #1
 8002b36:	d001      	beq.n	8002b3c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002b38:	2301      	movs	r3, #1
 8002b3a:	e03a      	b.n	8002bb2 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2202      	movs	r2, #2
 8002b40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	68da      	ldr	r2, [r3, #12]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f042 0201 	orr.w	r2, r2, #1
 8002b52:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4a18      	ldr	r2, [pc, #96]	@ (8002bbc <HAL_TIM_Base_Start_IT+0x98>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d00e      	beq.n	8002b7c <HAL_TIM_Base_Start_IT+0x58>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b66:	d009      	beq.n	8002b7c <HAL_TIM_Base_Start_IT+0x58>
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a14      	ldr	r2, [pc, #80]	@ (8002bc0 <HAL_TIM_Base_Start_IT+0x9c>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d004      	beq.n	8002b7c <HAL_TIM_Base_Start_IT+0x58>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4a13      	ldr	r2, [pc, #76]	@ (8002bc4 <HAL_TIM_Base_Start_IT+0xa0>)
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d111      	bne.n	8002ba0 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	689b      	ldr	r3, [r3, #8]
 8002b82:	f003 0307 	and.w	r3, r3, #7
 8002b86:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	2b06      	cmp	r3, #6
 8002b8c:	d010      	beq.n	8002bb0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	681a      	ldr	r2, [r3, #0]
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f042 0201 	orr.w	r2, r2, #1
 8002b9c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b9e:	e007      	b.n	8002bb0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	681a      	ldr	r2, [r3, #0]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f042 0201 	orr.w	r2, r2, #1
 8002bae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002bb0:	2300      	movs	r3, #0
}
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	3714      	adds	r7, #20
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bc80      	pop	{r7}
 8002bba:	4770      	bx	lr
 8002bbc:	40012c00 	.word	0x40012c00
 8002bc0:	40000400 	.word	0x40000400
 8002bc4:	40000800 	.word	0x40000800

08002bc8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b082      	sub	sp, #8
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d101      	bne.n	8002bda <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	e041      	b.n	8002c5e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002be0:	b2db      	uxtb	r3, r3
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d106      	bne.n	8002bf4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2200      	movs	r2, #0
 8002bea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002bee:	6878      	ldr	r0, [r7, #4]
 8002bf0:	f000 f839 	bl	8002c66 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2202      	movs	r2, #2
 8002bf8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681a      	ldr	r2, [r3, #0]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	3304      	adds	r3, #4
 8002c04:	4619      	mov	r1, r3
 8002c06:	4610      	mov	r0, r2
 8002c08:	f000 fb7e 	bl	8003308 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2201      	movs	r2, #1
 8002c10:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2201      	movs	r2, #1
 8002c18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2201      	movs	r2, #1
 8002c20:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2201      	movs	r2, #1
 8002c28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2201      	movs	r2, #1
 8002c30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2201      	movs	r2, #1
 8002c38:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2201      	movs	r2, #1
 8002c40:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2201      	movs	r2, #1
 8002c48:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2201      	movs	r2, #1
 8002c50:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2201      	movs	r2, #1
 8002c58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002c5c:	2300      	movs	r3, #0
}
 8002c5e:	4618      	mov	r0, r3
 8002c60:	3708      	adds	r7, #8
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bd80      	pop	{r7, pc}

08002c66 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002c66:	b480      	push	{r7}
 8002c68:	b083      	sub	sp, #12
 8002c6a:	af00      	add	r7, sp, #0
 8002c6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002c6e:	bf00      	nop
 8002c70:	370c      	adds	r7, #12
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bc80      	pop	{r7}
 8002c76:	4770      	bx	lr

08002c78 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b084      	sub	sp, #16
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
 8002c80:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d109      	bne.n	8002c9c <HAL_TIM_PWM_Start+0x24>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002c8e:	b2db      	uxtb	r3, r3
 8002c90:	2b01      	cmp	r3, #1
 8002c92:	bf14      	ite	ne
 8002c94:	2301      	movne	r3, #1
 8002c96:	2300      	moveq	r3, #0
 8002c98:	b2db      	uxtb	r3, r3
 8002c9a:	e022      	b.n	8002ce2 <HAL_TIM_PWM_Start+0x6a>
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	2b04      	cmp	r3, #4
 8002ca0:	d109      	bne.n	8002cb6 <HAL_TIM_PWM_Start+0x3e>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002ca8:	b2db      	uxtb	r3, r3
 8002caa:	2b01      	cmp	r3, #1
 8002cac:	bf14      	ite	ne
 8002cae:	2301      	movne	r3, #1
 8002cb0:	2300      	moveq	r3, #0
 8002cb2:	b2db      	uxtb	r3, r3
 8002cb4:	e015      	b.n	8002ce2 <HAL_TIM_PWM_Start+0x6a>
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	2b08      	cmp	r3, #8
 8002cba:	d109      	bne.n	8002cd0 <HAL_TIM_PWM_Start+0x58>
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002cc2:	b2db      	uxtb	r3, r3
 8002cc4:	2b01      	cmp	r3, #1
 8002cc6:	bf14      	ite	ne
 8002cc8:	2301      	movne	r3, #1
 8002cca:	2300      	moveq	r3, #0
 8002ccc:	b2db      	uxtb	r3, r3
 8002cce:	e008      	b.n	8002ce2 <HAL_TIM_PWM_Start+0x6a>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002cd6:	b2db      	uxtb	r3, r3
 8002cd8:	2b01      	cmp	r3, #1
 8002cda:	bf14      	ite	ne
 8002cdc:	2301      	movne	r3, #1
 8002cde:	2300      	moveq	r3, #0
 8002ce0:	b2db      	uxtb	r3, r3
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d001      	beq.n	8002cea <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	e05e      	b.n	8002da8 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d104      	bne.n	8002cfa <HAL_TIM_PWM_Start+0x82>
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2202      	movs	r2, #2
 8002cf4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002cf8:	e013      	b.n	8002d22 <HAL_TIM_PWM_Start+0xaa>
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	2b04      	cmp	r3, #4
 8002cfe:	d104      	bne.n	8002d0a <HAL_TIM_PWM_Start+0x92>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2202      	movs	r2, #2
 8002d04:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002d08:	e00b      	b.n	8002d22 <HAL_TIM_PWM_Start+0xaa>
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	2b08      	cmp	r3, #8
 8002d0e:	d104      	bne.n	8002d1a <HAL_TIM_PWM_Start+0xa2>
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2202      	movs	r2, #2
 8002d14:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002d18:	e003      	b.n	8002d22 <HAL_TIM_PWM_Start+0xaa>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2202      	movs	r2, #2
 8002d1e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	2201      	movs	r2, #1
 8002d28:	6839      	ldr	r1, [r7, #0]
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	f000 fd78 	bl	8003820 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a1e      	ldr	r2, [pc, #120]	@ (8002db0 <HAL_TIM_PWM_Start+0x138>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d107      	bne.n	8002d4a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002d48:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a18      	ldr	r2, [pc, #96]	@ (8002db0 <HAL_TIM_PWM_Start+0x138>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d00e      	beq.n	8002d72 <HAL_TIM_PWM_Start+0xfa>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d5c:	d009      	beq.n	8002d72 <HAL_TIM_PWM_Start+0xfa>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4a14      	ldr	r2, [pc, #80]	@ (8002db4 <HAL_TIM_PWM_Start+0x13c>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d004      	beq.n	8002d72 <HAL_TIM_PWM_Start+0xfa>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a12      	ldr	r2, [pc, #72]	@ (8002db8 <HAL_TIM_PWM_Start+0x140>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d111      	bne.n	8002d96 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	689b      	ldr	r3, [r3, #8]
 8002d78:	f003 0307 	and.w	r3, r3, #7
 8002d7c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	2b06      	cmp	r3, #6
 8002d82:	d010      	beq.n	8002da6 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	681a      	ldr	r2, [r3, #0]
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f042 0201 	orr.w	r2, r2, #1
 8002d92:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d94:	e007      	b.n	8002da6 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	681a      	ldr	r2, [r3, #0]
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f042 0201 	orr.w	r2, r2, #1
 8002da4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002da6:	2300      	movs	r3, #0
}
 8002da8:	4618      	mov	r0, r3
 8002daa:	3710      	adds	r7, #16
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bd80      	pop	{r7, pc}
 8002db0:	40012c00 	.word	0x40012c00
 8002db4:	40000400 	.word	0x40000400
 8002db8:	40000800 	.word	0x40000800

08002dbc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b084      	sub	sp, #16
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	68db      	ldr	r3, [r3, #12]
 8002dca:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	691b      	ldr	r3, [r3, #16]
 8002dd2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002dd4:	68bb      	ldr	r3, [r7, #8]
 8002dd6:	f003 0302 	and.w	r3, r3, #2
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d020      	beq.n	8002e20 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	f003 0302 	and.w	r3, r3, #2
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d01b      	beq.n	8002e20 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f06f 0202 	mvn.w	r2, #2
 8002df0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2201      	movs	r2, #1
 8002df6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	699b      	ldr	r3, [r3, #24]
 8002dfe:	f003 0303 	and.w	r3, r3, #3
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d003      	beq.n	8002e0e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002e06:	6878      	ldr	r0, [r7, #4]
 8002e08:	f000 fa63 	bl	80032d2 <HAL_TIM_IC_CaptureCallback>
 8002e0c:	e005      	b.n	8002e1a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e0e:	6878      	ldr	r0, [r7, #4]
 8002e10:	f000 fa56 	bl	80032c0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e14:	6878      	ldr	r0, [r7, #4]
 8002e16:	f000 fa65 	bl	80032e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002e20:	68bb      	ldr	r3, [r7, #8]
 8002e22:	f003 0304 	and.w	r3, r3, #4
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d020      	beq.n	8002e6c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	f003 0304 	and.w	r3, r3, #4
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d01b      	beq.n	8002e6c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f06f 0204 	mvn.w	r2, #4
 8002e3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2202      	movs	r2, #2
 8002e42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	699b      	ldr	r3, [r3, #24]
 8002e4a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d003      	beq.n	8002e5a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e52:	6878      	ldr	r0, [r7, #4]
 8002e54:	f000 fa3d 	bl	80032d2 <HAL_TIM_IC_CaptureCallback>
 8002e58:	e005      	b.n	8002e66 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e5a:	6878      	ldr	r0, [r7, #4]
 8002e5c:	f000 fa30 	bl	80032c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e60:	6878      	ldr	r0, [r7, #4]
 8002e62:	f000 fa3f 	bl	80032e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2200      	movs	r2, #0
 8002e6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002e6c:	68bb      	ldr	r3, [r7, #8]
 8002e6e:	f003 0308 	and.w	r3, r3, #8
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d020      	beq.n	8002eb8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	f003 0308 	and.w	r3, r3, #8
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d01b      	beq.n	8002eb8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f06f 0208 	mvn.w	r2, #8
 8002e88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2204      	movs	r2, #4
 8002e8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	69db      	ldr	r3, [r3, #28]
 8002e96:	f003 0303 	and.w	r3, r3, #3
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d003      	beq.n	8002ea6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e9e:	6878      	ldr	r0, [r7, #4]
 8002ea0:	f000 fa17 	bl	80032d2 <HAL_TIM_IC_CaptureCallback>
 8002ea4:	e005      	b.n	8002eb2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ea6:	6878      	ldr	r0, [r7, #4]
 8002ea8:	f000 fa0a 	bl	80032c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002eac:	6878      	ldr	r0, [r7, #4]
 8002eae:	f000 fa19 	bl	80032e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002eb8:	68bb      	ldr	r3, [r7, #8]
 8002eba:	f003 0310 	and.w	r3, r3, #16
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d020      	beq.n	8002f04 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	f003 0310 	and.w	r3, r3, #16
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d01b      	beq.n	8002f04 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f06f 0210 	mvn.w	r2, #16
 8002ed4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2208      	movs	r2, #8
 8002eda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	69db      	ldr	r3, [r3, #28]
 8002ee2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d003      	beq.n	8002ef2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002eea:	6878      	ldr	r0, [r7, #4]
 8002eec:	f000 f9f1 	bl	80032d2 <HAL_TIM_IC_CaptureCallback>
 8002ef0:	e005      	b.n	8002efe <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ef2:	6878      	ldr	r0, [r7, #4]
 8002ef4:	f000 f9e4 	bl	80032c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ef8:	6878      	ldr	r0, [r7, #4]
 8002efa:	f000 f9f3 	bl	80032e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2200      	movs	r2, #0
 8002f02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002f04:	68bb      	ldr	r3, [r7, #8]
 8002f06:	f003 0301 	and.w	r3, r3, #1
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d00c      	beq.n	8002f28 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	f003 0301 	and.w	r3, r3, #1
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d007      	beq.n	8002f28 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f06f 0201 	mvn.w	r2, #1
 8002f20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002f22:	6878      	ldr	r0, [r7, #4]
 8002f24:	f000 f9c3 	bl	80032ae <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002f28:	68bb      	ldr	r3, [r7, #8]
 8002f2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d00c      	beq.n	8002f4c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d007      	beq.n	8002f4c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002f44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002f46:	6878      	ldr	r0, [r7, #4]
 8002f48:	f000 fcf5 	bl	8003936 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002f4c:	68bb      	ldr	r3, [r7, #8]
 8002f4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d00c      	beq.n	8002f70 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d007      	beq.n	8002f70 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002f68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002f6a:	6878      	ldr	r0, [r7, #4]
 8002f6c:	f000 f9c3 	bl	80032f6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002f70:	68bb      	ldr	r3, [r7, #8]
 8002f72:	f003 0320 	and.w	r3, r3, #32
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d00c      	beq.n	8002f94 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	f003 0320 	and.w	r3, r3, #32
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d007      	beq.n	8002f94 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f06f 0220 	mvn.w	r2, #32
 8002f8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002f8e:	6878      	ldr	r0, [r7, #4]
 8002f90:	f000 fcc8 	bl	8003924 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002f94:	bf00      	nop
 8002f96:	3710      	adds	r7, #16
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bd80      	pop	{r7, pc}

08002f9c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b086      	sub	sp, #24
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	60f8      	str	r0, [r7, #12]
 8002fa4:	60b9      	str	r1, [r7, #8]
 8002fa6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002fa8:	2300      	movs	r3, #0
 8002faa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002fb2:	2b01      	cmp	r3, #1
 8002fb4:	d101      	bne.n	8002fba <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002fb6:	2302      	movs	r3, #2
 8002fb8:	e0ae      	b.n	8003118 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	2201      	movs	r2, #1
 8002fbe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2b0c      	cmp	r3, #12
 8002fc6:	f200 809f 	bhi.w	8003108 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002fca:	a201      	add	r2, pc, #4	@ (adr r2, 8002fd0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002fcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fd0:	08003005 	.word	0x08003005
 8002fd4:	08003109 	.word	0x08003109
 8002fd8:	08003109 	.word	0x08003109
 8002fdc:	08003109 	.word	0x08003109
 8002fe0:	08003045 	.word	0x08003045
 8002fe4:	08003109 	.word	0x08003109
 8002fe8:	08003109 	.word	0x08003109
 8002fec:	08003109 	.word	0x08003109
 8002ff0:	08003087 	.word	0x08003087
 8002ff4:	08003109 	.word	0x08003109
 8002ff8:	08003109 	.word	0x08003109
 8002ffc:	08003109 	.word	0x08003109
 8003000:	080030c7 	.word	0x080030c7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	68b9      	ldr	r1, [r7, #8]
 800300a:	4618      	mov	r0, r3
 800300c:	f000 f9ea 	bl	80033e4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	699a      	ldr	r2, [r3, #24]
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f042 0208 	orr.w	r2, r2, #8
 800301e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	699a      	ldr	r2, [r3, #24]
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f022 0204 	bic.w	r2, r2, #4
 800302e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	6999      	ldr	r1, [r3, #24]
 8003036:	68bb      	ldr	r3, [r7, #8]
 8003038:	691a      	ldr	r2, [r3, #16]
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	430a      	orrs	r2, r1
 8003040:	619a      	str	r2, [r3, #24]
      break;
 8003042:	e064      	b.n	800310e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	68b9      	ldr	r1, [r7, #8]
 800304a:	4618      	mov	r0, r3
 800304c:	f000 fa30 	bl	80034b0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	699a      	ldr	r2, [r3, #24]
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800305e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	699a      	ldr	r2, [r3, #24]
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800306e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	6999      	ldr	r1, [r3, #24]
 8003076:	68bb      	ldr	r3, [r7, #8]
 8003078:	691b      	ldr	r3, [r3, #16]
 800307a:	021a      	lsls	r2, r3, #8
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	430a      	orrs	r2, r1
 8003082:	619a      	str	r2, [r3, #24]
      break;
 8003084:	e043      	b.n	800310e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	68b9      	ldr	r1, [r7, #8]
 800308c:	4618      	mov	r0, r3
 800308e:	f000 fa79 	bl	8003584 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	69da      	ldr	r2, [r3, #28]
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f042 0208 	orr.w	r2, r2, #8
 80030a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	69da      	ldr	r2, [r3, #28]
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f022 0204 	bic.w	r2, r2, #4
 80030b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	69d9      	ldr	r1, [r3, #28]
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	691a      	ldr	r2, [r3, #16]
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	430a      	orrs	r2, r1
 80030c2:	61da      	str	r2, [r3, #28]
      break;
 80030c4:	e023      	b.n	800310e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	68b9      	ldr	r1, [r7, #8]
 80030cc:	4618      	mov	r0, r3
 80030ce:	f000 fac3 	bl	8003658 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	69da      	ldr	r2, [r3, #28]
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80030e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	69da      	ldr	r2, [r3, #28]
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80030f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	69d9      	ldr	r1, [r3, #28]
 80030f8:	68bb      	ldr	r3, [r7, #8]
 80030fa:	691b      	ldr	r3, [r3, #16]
 80030fc:	021a      	lsls	r2, r3, #8
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	430a      	orrs	r2, r1
 8003104:	61da      	str	r2, [r3, #28]
      break;
 8003106:	e002      	b.n	800310e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003108:	2301      	movs	r3, #1
 800310a:	75fb      	strb	r3, [r7, #23]
      break;
 800310c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	2200      	movs	r2, #0
 8003112:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003116:	7dfb      	ldrb	r3, [r7, #23]
}
 8003118:	4618      	mov	r0, r3
 800311a:	3718      	adds	r7, #24
 800311c:	46bd      	mov	sp, r7
 800311e:	bd80      	pop	{r7, pc}

08003120 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b084      	sub	sp, #16
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
 8003128:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800312a:	2300      	movs	r3, #0
 800312c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003134:	2b01      	cmp	r3, #1
 8003136:	d101      	bne.n	800313c <HAL_TIM_ConfigClockSource+0x1c>
 8003138:	2302      	movs	r3, #2
 800313a:	e0b4      	b.n	80032a6 <HAL_TIM_ConfigClockSource+0x186>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2201      	movs	r2, #1
 8003140:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2202      	movs	r2, #2
 8003148:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	689b      	ldr	r3, [r3, #8]
 8003152:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003154:	68bb      	ldr	r3, [r7, #8]
 8003156:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800315a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800315c:	68bb      	ldr	r3, [r7, #8]
 800315e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003162:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	68ba      	ldr	r2, [r7, #8]
 800316a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003174:	d03e      	beq.n	80031f4 <HAL_TIM_ConfigClockSource+0xd4>
 8003176:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800317a:	f200 8087 	bhi.w	800328c <HAL_TIM_ConfigClockSource+0x16c>
 800317e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003182:	f000 8086 	beq.w	8003292 <HAL_TIM_ConfigClockSource+0x172>
 8003186:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800318a:	d87f      	bhi.n	800328c <HAL_TIM_ConfigClockSource+0x16c>
 800318c:	2b70      	cmp	r3, #112	@ 0x70
 800318e:	d01a      	beq.n	80031c6 <HAL_TIM_ConfigClockSource+0xa6>
 8003190:	2b70      	cmp	r3, #112	@ 0x70
 8003192:	d87b      	bhi.n	800328c <HAL_TIM_ConfigClockSource+0x16c>
 8003194:	2b60      	cmp	r3, #96	@ 0x60
 8003196:	d050      	beq.n	800323a <HAL_TIM_ConfigClockSource+0x11a>
 8003198:	2b60      	cmp	r3, #96	@ 0x60
 800319a:	d877      	bhi.n	800328c <HAL_TIM_ConfigClockSource+0x16c>
 800319c:	2b50      	cmp	r3, #80	@ 0x50
 800319e:	d03c      	beq.n	800321a <HAL_TIM_ConfigClockSource+0xfa>
 80031a0:	2b50      	cmp	r3, #80	@ 0x50
 80031a2:	d873      	bhi.n	800328c <HAL_TIM_ConfigClockSource+0x16c>
 80031a4:	2b40      	cmp	r3, #64	@ 0x40
 80031a6:	d058      	beq.n	800325a <HAL_TIM_ConfigClockSource+0x13a>
 80031a8:	2b40      	cmp	r3, #64	@ 0x40
 80031aa:	d86f      	bhi.n	800328c <HAL_TIM_ConfigClockSource+0x16c>
 80031ac:	2b30      	cmp	r3, #48	@ 0x30
 80031ae:	d064      	beq.n	800327a <HAL_TIM_ConfigClockSource+0x15a>
 80031b0:	2b30      	cmp	r3, #48	@ 0x30
 80031b2:	d86b      	bhi.n	800328c <HAL_TIM_ConfigClockSource+0x16c>
 80031b4:	2b20      	cmp	r3, #32
 80031b6:	d060      	beq.n	800327a <HAL_TIM_ConfigClockSource+0x15a>
 80031b8:	2b20      	cmp	r3, #32
 80031ba:	d867      	bhi.n	800328c <HAL_TIM_ConfigClockSource+0x16c>
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d05c      	beq.n	800327a <HAL_TIM_ConfigClockSource+0x15a>
 80031c0:	2b10      	cmp	r3, #16
 80031c2:	d05a      	beq.n	800327a <HAL_TIM_ConfigClockSource+0x15a>
 80031c4:	e062      	b.n	800328c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80031d6:	f000 fb04 	bl	80037e2 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	689b      	ldr	r3, [r3, #8]
 80031e0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80031e2:	68bb      	ldr	r3, [r7, #8]
 80031e4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80031e8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	68ba      	ldr	r2, [r7, #8]
 80031f0:	609a      	str	r2, [r3, #8]
      break;
 80031f2:	e04f      	b.n	8003294 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003204:	f000 faed 	bl	80037e2 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	689a      	ldr	r2, [r3, #8]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003216:	609a      	str	r2, [r3, #8]
      break;
 8003218:	e03c      	b.n	8003294 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003226:	461a      	mov	r2, r3
 8003228:	f000 fa64 	bl	80036f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	2150      	movs	r1, #80	@ 0x50
 8003232:	4618      	mov	r0, r3
 8003234:	f000 fabb 	bl	80037ae <TIM_ITRx_SetConfig>
      break;
 8003238:	e02c      	b.n	8003294 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003246:	461a      	mov	r2, r3
 8003248:	f000 fa82 	bl	8003750 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	2160      	movs	r1, #96	@ 0x60
 8003252:	4618      	mov	r0, r3
 8003254:	f000 faab 	bl	80037ae <TIM_ITRx_SetConfig>
      break;
 8003258:	e01c      	b.n	8003294 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003266:	461a      	mov	r2, r3
 8003268:	f000 fa44 	bl	80036f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	2140      	movs	r1, #64	@ 0x40
 8003272:	4618      	mov	r0, r3
 8003274:	f000 fa9b 	bl	80037ae <TIM_ITRx_SetConfig>
      break;
 8003278:	e00c      	b.n	8003294 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681a      	ldr	r2, [r3, #0]
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4619      	mov	r1, r3
 8003284:	4610      	mov	r0, r2
 8003286:	f000 fa92 	bl	80037ae <TIM_ITRx_SetConfig>
      break;
 800328a:	e003      	b.n	8003294 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800328c:	2301      	movs	r3, #1
 800328e:	73fb      	strb	r3, [r7, #15]
      break;
 8003290:	e000      	b.n	8003294 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003292:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2201      	movs	r2, #1
 8003298:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2200      	movs	r2, #0
 80032a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80032a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80032a6:	4618      	mov	r0, r3
 80032a8:	3710      	adds	r7, #16
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bd80      	pop	{r7, pc}

080032ae <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80032ae:	b480      	push	{r7}
 80032b0:	b083      	sub	sp, #12
 80032b2:	af00      	add	r7, sp, #0
 80032b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80032b6:	bf00      	nop
 80032b8:	370c      	adds	r7, #12
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bc80      	pop	{r7}
 80032be:	4770      	bx	lr

080032c0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80032c0:	b480      	push	{r7}
 80032c2:	b083      	sub	sp, #12
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80032c8:	bf00      	nop
 80032ca:	370c      	adds	r7, #12
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bc80      	pop	{r7}
 80032d0:	4770      	bx	lr

080032d2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80032d2:	b480      	push	{r7}
 80032d4:	b083      	sub	sp, #12
 80032d6:	af00      	add	r7, sp, #0
 80032d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80032da:	bf00      	nop
 80032dc:	370c      	adds	r7, #12
 80032de:	46bd      	mov	sp, r7
 80032e0:	bc80      	pop	{r7}
 80032e2:	4770      	bx	lr

080032e4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80032e4:	b480      	push	{r7}
 80032e6:	b083      	sub	sp, #12
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80032ec:	bf00      	nop
 80032ee:	370c      	adds	r7, #12
 80032f0:	46bd      	mov	sp, r7
 80032f2:	bc80      	pop	{r7}
 80032f4:	4770      	bx	lr

080032f6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80032f6:	b480      	push	{r7}
 80032f8:	b083      	sub	sp, #12
 80032fa:	af00      	add	r7, sp, #0
 80032fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80032fe:	bf00      	nop
 8003300:	370c      	adds	r7, #12
 8003302:	46bd      	mov	sp, r7
 8003304:	bc80      	pop	{r7}
 8003306:	4770      	bx	lr

08003308 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003308:	b480      	push	{r7}
 800330a:	b085      	sub	sp, #20
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
 8003310:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	4a2f      	ldr	r2, [pc, #188]	@ (80033d8 <TIM_Base_SetConfig+0xd0>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d00b      	beq.n	8003338 <TIM_Base_SetConfig+0x30>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003326:	d007      	beq.n	8003338 <TIM_Base_SetConfig+0x30>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	4a2c      	ldr	r2, [pc, #176]	@ (80033dc <TIM_Base_SetConfig+0xd4>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d003      	beq.n	8003338 <TIM_Base_SetConfig+0x30>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	4a2b      	ldr	r2, [pc, #172]	@ (80033e0 <TIM_Base_SetConfig+0xd8>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d108      	bne.n	800334a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800333e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	68fa      	ldr	r2, [r7, #12]
 8003346:	4313      	orrs	r3, r2
 8003348:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	4a22      	ldr	r2, [pc, #136]	@ (80033d8 <TIM_Base_SetConfig+0xd0>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d00b      	beq.n	800336a <TIM_Base_SetConfig+0x62>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003358:	d007      	beq.n	800336a <TIM_Base_SetConfig+0x62>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	4a1f      	ldr	r2, [pc, #124]	@ (80033dc <TIM_Base_SetConfig+0xd4>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d003      	beq.n	800336a <TIM_Base_SetConfig+0x62>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	4a1e      	ldr	r2, [pc, #120]	@ (80033e0 <TIM_Base_SetConfig+0xd8>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d108      	bne.n	800337c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003370:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	68db      	ldr	r3, [r3, #12]
 8003376:	68fa      	ldr	r2, [r7, #12]
 8003378:	4313      	orrs	r3, r2
 800337a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	695b      	ldr	r3, [r3, #20]
 8003386:	4313      	orrs	r3, r2
 8003388:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	68fa      	ldr	r2, [r7, #12]
 800338e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	689a      	ldr	r2, [r3, #8]
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	681a      	ldr	r2, [r3, #0]
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	4a0d      	ldr	r2, [pc, #52]	@ (80033d8 <TIM_Base_SetConfig+0xd0>)
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d103      	bne.n	80033b0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	691a      	ldr	r2, [r3, #16]
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2201      	movs	r2, #1
 80033b4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	691b      	ldr	r3, [r3, #16]
 80033ba:	f003 0301 	and.w	r3, r3, #1
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d005      	beq.n	80033ce <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	691b      	ldr	r3, [r3, #16]
 80033c6:	f023 0201 	bic.w	r2, r3, #1
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	611a      	str	r2, [r3, #16]
  }
}
 80033ce:	bf00      	nop
 80033d0:	3714      	adds	r7, #20
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bc80      	pop	{r7}
 80033d6:	4770      	bx	lr
 80033d8:	40012c00 	.word	0x40012c00
 80033dc:	40000400 	.word	0x40000400
 80033e0:	40000800 	.word	0x40000800

080033e4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80033e4:	b480      	push	{r7}
 80033e6:	b087      	sub	sp, #28
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
 80033ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6a1b      	ldr	r3, [r3, #32]
 80033f2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6a1b      	ldr	r3, [r3, #32]
 80033f8:	f023 0201 	bic.w	r2, r3, #1
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	699b      	ldr	r3, [r3, #24]
 800340a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003412:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	f023 0303 	bic.w	r3, r3, #3
 800341a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	68fa      	ldr	r2, [r7, #12]
 8003422:	4313      	orrs	r3, r2
 8003424:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003426:	697b      	ldr	r3, [r7, #20]
 8003428:	f023 0302 	bic.w	r3, r3, #2
 800342c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	689b      	ldr	r3, [r3, #8]
 8003432:	697a      	ldr	r2, [r7, #20]
 8003434:	4313      	orrs	r3, r2
 8003436:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	4a1c      	ldr	r2, [pc, #112]	@ (80034ac <TIM_OC1_SetConfig+0xc8>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d10c      	bne.n	800345a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003440:	697b      	ldr	r3, [r7, #20]
 8003442:	f023 0308 	bic.w	r3, r3, #8
 8003446:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	68db      	ldr	r3, [r3, #12]
 800344c:	697a      	ldr	r2, [r7, #20]
 800344e:	4313      	orrs	r3, r2
 8003450:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003452:	697b      	ldr	r3, [r7, #20]
 8003454:	f023 0304 	bic.w	r3, r3, #4
 8003458:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	4a13      	ldr	r2, [pc, #76]	@ (80034ac <TIM_OC1_SetConfig+0xc8>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d111      	bne.n	8003486 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003462:	693b      	ldr	r3, [r7, #16]
 8003464:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003468:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800346a:	693b      	ldr	r3, [r7, #16]
 800346c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003470:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	695b      	ldr	r3, [r3, #20]
 8003476:	693a      	ldr	r2, [r7, #16]
 8003478:	4313      	orrs	r3, r2
 800347a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	699b      	ldr	r3, [r3, #24]
 8003480:	693a      	ldr	r2, [r7, #16]
 8003482:	4313      	orrs	r3, r2
 8003484:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	693a      	ldr	r2, [r7, #16]
 800348a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	68fa      	ldr	r2, [r7, #12]
 8003490:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	685a      	ldr	r2, [r3, #4]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	697a      	ldr	r2, [r7, #20]
 800349e:	621a      	str	r2, [r3, #32]
}
 80034a0:	bf00      	nop
 80034a2:	371c      	adds	r7, #28
 80034a4:	46bd      	mov	sp, r7
 80034a6:	bc80      	pop	{r7}
 80034a8:	4770      	bx	lr
 80034aa:	bf00      	nop
 80034ac:	40012c00 	.word	0x40012c00

080034b0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80034b0:	b480      	push	{r7}
 80034b2:	b087      	sub	sp, #28
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
 80034b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6a1b      	ldr	r3, [r3, #32]
 80034be:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6a1b      	ldr	r3, [r3, #32]
 80034c4:	f023 0210 	bic.w	r2, r3, #16
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	699b      	ldr	r3, [r3, #24]
 80034d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80034de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80034e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	021b      	lsls	r3, r3, #8
 80034ee:	68fa      	ldr	r2, [r7, #12]
 80034f0:	4313      	orrs	r3, r2
 80034f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80034f4:	697b      	ldr	r3, [r7, #20]
 80034f6:	f023 0320 	bic.w	r3, r3, #32
 80034fa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	689b      	ldr	r3, [r3, #8]
 8003500:	011b      	lsls	r3, r3, #4
 8003502:	697a      	ldr	r2, [r7, #20]
 8003504:	4313      	orrs	r3, r2
 8003506:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	4a1d      	ldr	r2, [pc, #116]	@ (8003580 <TIM_OC2_SetConfig+0xd0>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d10d      	bne.n	800352c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003510:	697b      	ldr	r3, [r7, #20]
 8003512:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003516:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	68db      	ldr	r3, [r3, #12]
 800351c:	011b      	lsls	r3, r3, #4
 800351e:	697a      	ldr	r2, [r7, #20]
 8003520:	4313      	orrs	r3, r2
 8003522:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003524:	697b      	ldr	r3, [r7, #20]
 8003526:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800352a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	4a14      	ldr	r2, [pc, #80]	@ (8003580 <TIM_OC2_SetConfig+0xd0>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d113      	bne.n	800355c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003534:	693b      	ldr	r3, [r7, #16]
 8003536:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800353a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800353c:	693b      	ldr	r3, [r7, #16]
 800353e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003542:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	695b      	ldr	r3, [r3, #20]
 8003548:	009b      	lsls	r3, r3, #2
 800354a:	693a      	ldr	r2, [r7, #16]
 800354c:	4313      	orrs	r3, r2
 800354e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	699b      	ldr	r3, [r3, #24]
 8003554:	009b      	lsls	r3, r3, #2
 8003556:	693a      	ldr	r2, [r7, #16]
 8003558:	4313      	orrs	r3, r2
 800355a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	693a      	ldr	r2, [r7, #16]
 8003560:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	68fa      	ldr	r2, [r7, #12]
 8003566:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	685a      	ldr	r2, [r3, #4]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	697a      	ldr	r2, [r7, #20]
 8003574:	621a      	str	r2, [r3, #32]
}
 8003576:	bf00      	nop
 8003578:	371c      	adds	r7, #28
 800357a:	46bd      	mov	sp, r7
 800357c:	bc80      	pop	{r7}
 800357e:	4770      	bx	lr
 8003580:	40012c00 	.word	0x40012c00

08003584 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003584:	b480      	push	{r7}
 8003586:	b087      	sub	sp, #28
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
 800358c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6a1b      	ldr	r3, [r3, #32]
 8003592:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6a1b      	ldr	r3, [r3, #32]
 8003598:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	69db      	ldr	r3, [r3, #28]
 80035aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80035b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	f023 0303 	bic.w	r3, r3, #3
 80035ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	68fa      	ldr	r2, [r7, #12]
 80035c2:	4313      	orrs	r3, r2
 80035c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80035c6:	697b      	ldr	r3, [r7, #20]
 80035c8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80035cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	689b      	ldr	r3, [r3, #8]
 80035d2:	021b      	lsls	r3, r3, #8
 80035d4:	697a      	ldr	r2, [r7, #20]
 80035d6:	4313      	orrs	r3, r2
 80035d8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	4a1d      	ldr	r2, [pc, #116]	@ (8003654 <TIM_OC3_SetConfig+0xd0>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d10d      	bne.n	80035fe <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80035e2:	697b      	ldr	r3, [r7, #20]
 80035e4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80035e8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	68db      	ldr	r3, [r3, #12]
 80035ee:	021b      	lsls	r3, r3, #8
 80035f0:	697a      	ldr	r2, [r7, #20]
 80035f2:	4313      	orrs	r3, r2
 80035f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80035f6:	697b      	ldr	r3, [r7, #20]
 80035f8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80035fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	4a14      	ldr	r2, [pc, #80]	@ (8003654 <TIM_OC3_SetConfig+0xd0>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d113      	bne.n	800362e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003606:	693b      	ldr	r3, [r7, #16]
 8003608:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800360c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800360e:	693b      	ldr	r3, [r7, #16]
 8003610:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003614:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	695b      	ldr	r3, [r3, #20]
 800361a:	011b      	lsls	r3, r3, #4
 800361c:	693a      	ldr	r2, [r7, #16]
 800361e:	4313      	orrs	r3, r2
 8003620:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	699b      	ldr	r3, [r3, #24]
 8003626:	011b      	lsls	r3, r3, #4
 8003628:	693a      	ldr	r2, [r7, #16]
 800362a:	4313      	orrs	r3, r2
 800362c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	693a      	ldr	r2, [r7, #16]
 8003632:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	68fa      	ldr	r2, [r7, #12]
 8003638:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	685a      	ldr	r2, [r3, #4]
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	697a      	ldr	r2, [r7, #20]
 8003646:	621a      	str	r2, [r3, #32]
}
 8003648:	bf00      	nop
 800364a:	371c      	adds	r7, #28
 800364c:	46bd      	mov	sp, r7
 800364e:	bc80      	pop	{r7}
 8003650:	4770      	bx	lr
 8003652:	bf00      	nop
 8003654:	40012c00 	.word	0x40012c00

08003658 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003658:	b480      	push	{r7}
 800365a:	b087      	sub	sp, #28
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
 8003660:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6a1b      	ldr	r3, [r3, #32]
 8003666:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6a1b      	ldr	r3, [r3, #32]
 800366c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	69db      	ldr	r3, [r3, #28]
 800367e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003686:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800368e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	021b      	lsls	r3, r3, #8
 8003696:	68fa      	ldr	r2, [r7, #12]
 8003698:	4313      	orrs	r3, r2
 800369a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800369c:	693b      	ldr	r3, [r7, #16]
 800369e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80036a2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	689b      	ldr	r3, [r3, #8]
 80036a8:	031b      	lsls	r3, r3, #12
 80036aa:	693a      	ldr	r2, [r7, #16]
 80036ac:	4313      	orrs	r3, r2
 80036ae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	4a0f      	ldr	r2, [pc, #60]	@ (80036f0 <TIM_OC4_SetConfig+0x98>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d109      	bne.n	80036cc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80036b8:	697b      	ldr	r3, [r7, #20]
 80036ba:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80036be:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	695b      	ldr	r3, [r3, #20]
 80036c4:	019b      	lsls	r3, r3, #6
 80036c6:	697a      	ldr	r2, [r7, #20]
 80036c8:	4313      	orrs	r3, r2
 80036ca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	697a      	ldr	r2, [r7, #20]
 80036d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	68fa      	ldr	r2, [r7, #12]
 80036d6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	685a      	ldr	r2, [r3, #4]
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	693a      	ldr	r2, [r7, #16]
 80036e4:	621a      	str	r2, [r3, #32]
}
 80036e6:	bf00      	nop
 80036e8:	371c      	adds	r7, #28
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bc80      	pop	{r7}
 80036ee:	4770      	bx	lr
 80036f0:	40012c00 	.word	0x40012c00

080036f4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80036f4:	b480      	push	{r7}
 80036f6:	b087      	sub	sp, #28
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	60f8      	str	r0, [r7, #12]
 80036fc:	60b9      	str	r1, [r7, #8]
 80036fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	6a1b      	ldr	r3, [r3, #32]
 8003704:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	6a1b      	ldr	r3, [r3, #32]
 800370a:	f023 0201 	bic.w	r2, r3, #1
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	699b      	ldr	r3, [r3, #24]
 8003716:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003718:	693b      	ldr	r3, [r7, #16]
 800371a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800371e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	011b      	lsls	r3, r3, #4
 8003724:	693a      	ldr	r2, [r7, #16]
 8003726:	4313      	orrs	r3, r2
 8003728:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800372a:	697b      	ldr	r3, [r7, #20]
 800372c:	f023 030a 	bic.w	r3, r3, #10
 8003730:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003732:	697a      	ldr	r2, [r7, #20]
 8003734:	68bb      	ldr	r3, [r7, #8]
 8003736:	4313      	orrs	r3, r2
 8003738:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	693a      	ldr	r2, [r7, #16]
 800373e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	697a      	ldr	r2, [r7, #20]
 8003744:	621a      	str	r2, [r3, #32]
}
 8003746:	bf00      	nop
 8003748:	371c      	adds	r7, #28
 800374a:	46bd      	mov	sp, r7
 800374c:	bc80      	pop	{r7}
 800374e:	4770      	bx	lr

08003750 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003750:	b480      	push	{r7}
 8003752:	b087      	sub	sp, #28
 8003754:	af00      	add	r7, sp, #0
 8003756:	60f8      	str	r0, [r7, #12]
 8003758:	60b9      	str	r1, [r7, #8]
 800375a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	6a1b      	ldr	r3, [r3, #32]
 8003760:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	6a1b      	ldr	r3, [r3, #32]
 8003766:	f023 0210 	bic.w	r2, r3, #16
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	699b      	ldr	r3, [r3, #24]
 8003772:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003774:	693b      	ldr	r3, [r7, #16]
 8003776:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800377a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	031b      	lsls	r3, r3, #12
 8003780:	693a      	ldr	r2, [r7, #16]
 8003782:	4313      	orrs	r3, r2
 8003784:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003786:	697b      	ldr	r3, [r7, #20]
 8003788:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800378c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800378e:	68bb      	ldr	r3, [r7, #8]
 8003790:	011b      	lsls	r3, r3, #4
 8003792:	697a      	ldr	r2, [r7, #20]
 8003794:	4313      	orrs	r3, r2
 8003796:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	693a      	ldr	r2, [r7, #16]
 800379c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	697a      	ldr	r2, [r7, #20]
 80037a2:	621a      	str	r2, [r3, #32]
}
 80037a4:	bf00      	nop
 80037a6:	371c      	adds	r7, #28
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bc80      	pop	{r7}
 80037ac:	4770      	bx	lr

080037ae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80037ae:	b480      	push	{r7}
 80037b0:	b085      	sub	sp, #20
 80037b2:	af00      	add	r7, sp, #0
 80037b4:	6078      	str	r0, [r7, #4]
 80037b6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	689b      	ldr	r3, [r3, #8]
 80037bc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80037c4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80037c6:	683a      	ldr	r2, [r7, #0]
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	4313      	orrs	r3, r2
 80037cc:	f043 0307 	orr.w	r3, r3, #7
 80037d0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	68fa      	ldr	r2, [r7, #12]
 80037d6:	609a      	str	r2, [r3, #8]
}
 80037d8:	bf00      	nop
 80037da:	3714      	adds	r7, #20
 80037dc:	46bd      	mov	sp, r7
 80037de:	bc80      	pop	{r7}
 80037e0:	4770      	bx	lr

080037e2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80037e2:	b480      	push	{r7}
 80037e4:	b087      	sub	sp, #28
 80037e6:	af00      	add	r7, sp, #0
 80037e8:	60f8      	str	r0, [r7, #12]
 80037ea:	60b9      	str	r1, [r7, #8]
 80037ec:	607a      	str	r2, [r7, #4]
 80037ee:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	689b      	ldr	r3, [r3, #8]
 80037f4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80037f6:	697b      	ldr	r3, [r7, #20]
 80037f8:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80037fc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	021a      	lsls	r2, r3, #8
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	431a      	orrs	r2, r3
 8003806:	68bb      	ldr	r3, [r7, #8]
 8003808:	4313      	orrs	r3, r2
 800380a:	697a      	ldr	r2, [r7, #20]
 800380c:	4313      	orrs	r3, r2
 800380e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	697a      	ldr	r2, [r7, #20]
 8003814:	609a      	str	r2, [r3, #8]
}
 8003816:	bf00      	nop
 8003818:	371c      	adds	r7, #28
 800381a:	46bd      	mov	sp, r7
 800381c:	bc80      	pop	{r7}
 800381e:	4770      	bx	lr

08003820 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003820:	b480      	push	{r7}
 8003822:	b087      	sub	sp, #28
 8003824:	af00      	add	r7, sp, #0
 8003826:	60f8      	str	r0, [r7, #12]
 8003828:	60b9      	str	r1, [r7, #8]
 800382a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800382c:	68bb      	ldr	r3, [r7, #8]
 800382e:	f003 031f 	and.w	r3, r3, #31
 8003832:	2201      	movs	r2, #1
 8003834:	fa02 f303 	lsl.w	r3, r2, r3
 8003838:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	6a1a      	ldr	r2, [r3, #32]
 800383e:	697b      	ldr	r3, [r7, #20]
 8003840:	43db      	mvns	r3, r3
 8003842:	401a      	ands	r2, r3
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	6a1a      	ldr	r2, [r3, #32]
 800384c:	68bb      	ldr	r3, [r7, #8]
 800384e:	f003 031f 	and.w	r3, r3, #31
 8003852:	6879      	ldr	r1, [r7, #4]
 8003854:	fa01 f303 	lsl.w	r3, r1, r3
 8003858:	431a      	orrs	r2, r3
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	621a      	str	r2, [r3, #32]
}
 800385e:	bf00      	nop
 8003860:	371c      	adds	r7, #28
 8003862:	46bd      	mov	sp, r7
 8003864:	bc80      	pop	{r7}
 8003866:	4770      	bx	lr

08003868 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003868:	b480      	push	{r7}
 800386a:	b085      	sub	sp, #20
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
 8003870:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003878:	2b01      	cmp	r3, #1
 800387a:	d101      	bne.n	8003880 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800387c:	2302      	movs	r3, #2
 800387e:	e046      	b.n	800390e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2201      	movs	r2, #1
 8003884:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2202      	movs	r2, #2
 800388c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	689b      	ldr	r3, [r3, #8]
 800389e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80038a6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	68fa      	ldr	r2, [r7, #12]
 80038ae:	4313      	orrs	r3, r2
 80038b0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	68fa      	ldr	r2, [r7, #12]
 80038b8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4a16      	ldr	r2, [pc, #88]	@ (8003918 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d00e      	beq.n	80038e2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038cc:	d009      	beq.n	80038e2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4a12      	ldr	r2, [pc, #72]	@ (800391c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d004      	beq.n	80038e2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a10      	ldr	r2, [pc, #64]	@ (8003920 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d10c      	bne.n	80038fc <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80038e2:	68bb      	ldr	r3, [r7, #8]
 80038e4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80038e8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	68ba      	ldr	r2, [r7, #8]
 80038f0:	4313      	orrs	r3, r2
 80038f2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	68ba      	ldr	r2, [r7, #8]
 80038fa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2201      	movs	r2, #1
 8003900:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2200      	movs	r2, #0
 8003908:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800390c:	2300      	movs	r3, #0
}
 800390e:	4618      	mov	r0, r3
 8003910:	3714      	adds	r7, #20
 8003912:	46bd      	mov	sp, r7
 8003914:	bc80      	pop	{r7}
 8003916:	4770      	bx	lr
 8003918:	40012c00 	.word	0x40012c00
 800391c:	40000400 	.word	0x40000400
 8003920:	40000800 	.word	0x40000800

08003924 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003924:	b480      	push	{r7}
 8003926:	b083      	sub	sp, #12
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800392c:	bf00      	nop
 800392e:	370c      	adds	r7, #12
 8003930:	46bd      	mov	sp, r7
 8003932:	bc80      	pop	{r7}
 8003934:	4770      	bx	lr

08003936 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003936:	b480      	push	{r7}
 8003938:	b083      	sub	sp, #12
 800393a:	af00      	add	r7, sp, #0
 800393c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800393e:	bf00      	nop
 8003940:	370c      	adds	r7, #12
 8003942:	46bd      	mov	sp, r7
 8003944:	bc80      	pop	{r7}
 8003946:	4770      	bx	lr

08003948 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b082      	sub	sp, #8
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d101      	bne.n	800395a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003956:	2301      	movs	r3, #1
 8003958:	e042      	b.n	80039e0 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003960:	b2db      	uxtb	r3, r3
 8003962:	2b00      	cmp	r3, #0
 8003964:	d106      	bne.n	8003974 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2200      	movs	r2, #0
 800396a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800396e:	6878      	ldr	r0, [r7, #4]
 8003970:	f7fc ff46 	bl	8000800 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2224      	movs	r2, #36	@ 0x24
 8003978:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	68da      	ldr	r2, [r3, #12]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800398a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800398c:	6878      	ldr	r0, [r7, #4]
 800398e:	f000 f971 	bl	8003c74 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	691a      	ldr	r2, [r3, #16]
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80039a0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	695a      	ldr	r2, [r3, #20]
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80039b0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	68da      	ldr	r2, [r3, #12]
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80039c0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2200      	movs	r2, #0
 80039c6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2220      	movs	r2, #32
 80039cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2220      	movs	r2, #32
 80039d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2200      	movs	r2, #0
 80039dc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80039de:	2300      	movs	r3, #0
}
 80039e0:	4618      	mov	r0, r3
 80039e2:	3708      	adds	r7, #8
 80039e4:	46bd      	mov	sp, r7
 80039e6:	bd80      	pop	{r7, pc}

080039e8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b08a      	sub	sp, #40	@ 0x28
 80039ec:	af02      	add	r7, sp, #8
 80039ee:	60f8      	str	r0, [r7, #12]
 80039f0:	60b9      	str	r1, [r7, #8]
 80039f2:	603b      	str	r3, [r7, #0]
 80039f4:	4613      	mov	r3, r2
 80039f6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80039f8:	2300      	movs	r3, #0
 80039fa:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a02:	b2db      	uxtb	r3, r3
 8003a04:	2b20      	cmp	r3, #32
 8003a06:	d175      	bne.n	8003af4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d002      	beq.n	8003a14 <HAL_UART_Transmit+0x2c>
 8003a0e:	88fb      	ldrh	r3, [r7, #6]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d101      	bne.n	8003a18 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003a14:	2301      	movs	r3, #1
 8003a16:	e06e      	b.n	8003af6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	2221      	movs	r2, #33	@ 0x21
 8003a22:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003a26:	f7fd f899 	bl	8000b5c <HAL_GetTick>
 8003a2a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	88fa      	ldrh	r2, [r7, #6]
 8003a30:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	88fa      	ldrh	r2, [r7, #6]
 8003a36:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	689b      	ldr	r3, [r3, #8]
 8003a3c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a40:	d108      	bne.n	8003a54 <HAL_UART_Transmit+0x6c>
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	691b      	ldr	r3, [r3, #16]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d104      	bne.n	8003a54 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003a4e:	68bb      	ldr	r3, [r7, #8]
 8003a50:	61bb      	str	r3, [r7, #24]
 8003a52:	e003      	b.n	8003a5c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003a54:	68bb      	ldr	r3, [r7, #8]
 8003a56:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003a58:	2300      	movs	r3, #0
 8003a5a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003a5c:	e02e      	b.n	8003abc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	9300      	str	r3, [sp, #0]
 8003a62:	697b      	ldr	r3, [r7, #20]
 8003a64:	2200      	movs	r2, #0
 8003a66:	2180      	movs	r1, #128	@ 0x80
 8003a68:	68f8      	ldr	r0, [r7, #12]
 8003a6a:	f000 f848 	bl	8003afe <UART_WaitOnFlagUntilTimeout>
 8003a6e:	4603      	mov	r3, r0
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d005      	beq.n	8003a80 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	2220      	movs	r2, #32
 8003a78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003a7c:	2303      	movs	r3, #3
 8003a7e:	e03a      	b.n	8003af6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003a80:	69fb      	ldr	r3, [r7, #28]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d10b      	bne.n	8003a9e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003a86:	69bb      	ldr	r3, [r7, #24]
 8003a88:	881b      	ldrh	r3, [r3, #0]
 8003a8a:	461a      	mov	r2, r3
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003a94:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003a96:	69bb      	ldr	r3, [r7, #24]
 8003a98:	3302      	adds	r3, #2
 8003a9a:	61bb      	str	r3, [r7, #24]
 8003a9c:	e007      	b.n	8003aae <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003a9e:	69fb      	ldr	r3, [r7, #28]
 8003aa0:	781a      	ldrb	r2, [r3, #0]
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003aa8:	69fb      	ldr	r3, [r7, #28]
 8003aaa:	3301      	adds	r3, #1
 8003aac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003ab2:	b29b      	uxth	r3, r3
 8003ab4:	3b01      	subs	r3, #1
 8003ab6:	b29a      	uxth	r2, r3
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003ac0:	b29b      	uxth	r3, r3
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d1cb      	bne.n	8003a5e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	9300      	str	r3, [sp, #0]
 8003aca:	697b      	ldr	r3, [r7, #20]
 8003acc:	2200      	movs	r2, #0
 8003ace:	2140      	movs	r1, #64	@ 0x40
 8003ad0:	68f8      	ldr	r0, [r7, #12]
 8003ad2:	f000 f814 	bl	8003afe <UART_WaitOnFlagUntilTimeout>
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d005      	beq.n	8003ae8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	2220      	movs	r2, #32
 8003ae0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003ae4:	2303      	movs	r3, #3
 8003ae6:	e006      	b.n	8003af6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	2220      	movs	r2, #32
 8003aec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003af0:	2300      	movs	r3, #0
 8003af2:	e000      	b.n	8003af6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003af4:	2302      	movs	r3, #2
  }
}
 8003af6:	4618      	mov	r0, r3
 8003af8:	3720      	adds	r7, #32
 8003afa:	46bd      	mov	sp, r7
 8003afc:	bd80      	pop	{r7, pc}

08003afe <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003afe:	b580      	push	{r7, lr}
 8003b00:	b086      	sub	sp, #24
 8003b02:	af00      	add	r7, sp, #0
 8003b04:	60f8      	str	r0, [r7, #12]
 8003b06:	60b9      	str	r1, [r7, #8]
 8003b08:	603b      	str	r3, [r7, #0]
 8003b0a:	4613      	mov	r3, r2
 8003b0c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b0e:	e03b      	b.n	8003b88 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b10:	6a3b      	ldr	r3, [r7, #32]
 8003b12:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003b16:	d037      	beq.n	8003b88 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b18:	f7fd f820 	bl	8000b5c <HAL_GetTick>
 8003b1c:	4602      	mov	r2, r0
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	1ad3      	subs	r3, r2, r3
 8003b22:	6a3a      	ldr	r2, [r7, #32]
 8003b24:	429a      	cmp	r2, r3
 8003b26:	d302      	bcc.n	8003b2e <UART_WaitOnFlagUntilTimeout+0x30>
 8003b28:	6a3b      	ldr	r3, [r7, #32]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d101      	bne.n	8003b32 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003b2e:	2303      	movs	r3, #3
 8003b30:	e03a      	b.n	8003ba8 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	68db      	ldr	r3, [r3, #12]
 8003b38:	f003 0304 	and.w	r3, r3, #4
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d023      	beq.n	8003b88 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003b40:	68bb      	ldr	r3, [r7, #8]
 8003b42:	2b80      	cmp	r3, #128	@ 0x80
 8003b44:	d020      	beq.n	8003b88 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003b46:	68bb      	ldr	r3, [r7, #8]
 8003b48:	2b40      	cmp	r3, #64	@ 0x40
 8003b4a:	d01d      	beq.n	8003b88 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f003 0308 	and.w	r3, r3, #8
 8003b56:	2b08      	cmp	r3, #8
 8003b58:	d116      	bne.n	8003b88 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	617b      	str	r3, [r7, #20]
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	617b      	str	r3, [r7, #20]
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	617b      	str	r3, [r7, #20]
 8003b6e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003b70:	68f8      	ldr	r0, [r7, #12]
 8003b72:	f000 f81d 	bl	8003bb0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	2208      	movs	r2, #8
 8003b7a:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	2200      	movs	r2, #0
 8003b80:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003b84:	2301      	movs	r3, #1
 8003b86:	e00f      	b.n	8003ba8 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	681a      	ldr	r2, [r3, #0]
 8003b8e:	68bb      	ldr	r3, [r7, #8]
 8003b90:	4013      	ands	r3, r2
 8003b92:	68ba      	ldr	r2, [r7, #8]
 8003b94:	429a      	cmp	r2, r3
 8003b96:	bf0c      	ite	eq
 8003b98:	2301      	moveq	r3, #1
 8003b9a:	2300      	movne	r3, #0
 8003b9c:	b2db      	uxtb	r3, r3
 8003b9e:	461a      	mov	r2, r3
 8003ba0:	79fb      	ldrb	r3, [r7, #7]
 8003ba2:	429a      	cmp	r2, r3
 8003ba4:	d0b4      	beq.n	8003b10 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003ba6:	2300      	movs	r3, #0
}
 8003ba8:	4618      	mov	r0, r3
 8003baa:	3718      	adds	r7, #24
 8003bac:	46bd      	mov	sp, r7
 8003bae:	bd80      	pop	{r7, pc}

08003bb0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	b095      	sub	sp, #84	@ 0x54
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	330c      	adds	r3, #12
 8003bbe:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bc0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003bc2:	e853 3f00 	ldrex	r3, [r3]
 8003bc6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003bc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bca:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003bce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	330c      	adds	r3, #12
 8003bd6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003bd8:	643a      	str	r2, [r7, #64]	@ 0x40
 8003bda:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bdc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003bde:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003be0:	e841 2300 	strex	r3, r2, [r1]
 8003be4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003be6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d1e5      	bne.n	8003bb8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	3314      	adds	r3, #20
 8003bf2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bf4:	6a3b      	ldr	r3, [r7, #32]
 8003bf6:	e853 3f00 	ldrex	r3, [r3]
 8003bfa:	61fb      	str	r3, [r7, #28]
   return(result);
 8003bfc:	69fb      	ldr	r3, [r7, #28]
 8003bfe:	f023 0301 	bic.w	r3, r3, #1
 8003c02:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	3314      	adds	r3, #20
 8003c0a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003c0c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003c0e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c10:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003c12:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003c14:	e841 2300 	strex	r3, r2, [r1]
 8003c18:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003c1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d1e5      	bne.n	8003bec <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c24:	2b01      	cmp	r3, #1
 8003c26:	d119      	bne.n	8003c5c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	330c      	adds	r3, #12
 8003c2e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	e853 3f00 	ldrex	r3, [r3]
 8003c36:	60bb      	str	r3, [r7, #8]
   return(result);
 8003c38:	68bb      	ldr	r3, [r7, #8]
 8003c3a:	f023 0310 	bic.w	r3, r3, #16
 8003c3e:	647b      	str	r3, [r7, #68]	@ 0x44
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	330c      	adds	r3, #12
 8003c46:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003c48:	61ba      	str	r2, [r7, #24]
 8003c4a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c4c:	6979      	ldr	r1, [r7, #20]
 8003c4e:	69ba      	ldr	r2, [r7, #24]
 8003c50:	e841 2300 	strex	r3, r2, [r1]
 8003c54:	613b      	str	r3, [r7, #16]
   return(result);
 8003c56:	693b      	ldr	r3, [r7, #16]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d1e5      	bne.n	8003c28 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2220      	movs	r2, #32
 8003c60:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2200      	movs	r2, #0
 8003c68:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003c6a:	bf00      	nop
 8003c6c:	3754      	adds	r7, #84	@ 0x54
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bc80      	pop	{r7}
 8003c72:	4770      	bx	lr

08003c74 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b084      	sub	sp, #16
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	691b      	ldr	r3, [r3, #16]
 8003c82:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	68da      	ldr	r2, [r3, #12]
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	430a      	orrs	r2, r1
 8003c90:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	689a      	ldr	r2, [r3, #8]
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	691b      	ldr	r3, [r3, #16]
 8003c9a:	431a      	orrs	r2, r3
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	695b      	ldr	r3, [r3, #20]
 8003ca0:	4313      	orrs	r3, r2
 8003ca2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	68db      	ldr	r3, [r3, #12]
 8003caa:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8003cae:	f023 030c 	bic.w	r3, r3, #12
 8003cb2:	687a      	ldr	r2, [r7, #4]
 8003cb4:	6812      	ldr	r2, [r2, #0]
 8003cb6:	68b9      	ldr	r1, [r7, #8]
 8003cb8:	430b      	orrs	r3, r1
 8003cba:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	695b      	ldr	r3, [r3, #20]
 8003cc2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	699a      	ldr	r2, [r3, #24]
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	430a      	orrs	r2, r1
 8003cd0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4a2c      	ldr	r2, [pc, #176]	@ (8003d88 <UART_SetConfig+0x114>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d103      	bne.n	8003ce4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003cdc:	f7fe fc2c 	bl	8002538 <HAL_RCC_GetPCLK2Freq>
 8003ce0:	60f8      	str	r0, [r7, #12]
 8003ce2:	e002      	b.n	8003cea <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003ce4:	f7fe fc14 	bl	8002510 <HAL_RCC_GetPCLK1Freq>
 8003ce8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003cea:	68fa      	ldr	r2, [r7, #12]
 8003cec:	4613      	mov	r3, r2
 8003cee:	009b      	lsls	r3, r3, #2
 8003cf0:	4413      	add	r3, r2
 8003cf2:	009a      	lsls	r2, r3, #2
 8003cf4:	441a      	add	r2, r3
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	685b      	ldr	r3, [r3, #4]
 8003cfa:	009b      	lsls	r3, r3, #2
 8003cfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d00:	4a22      	ldr	r2, [pc, #136]	@ (8003d8c <UART_SetConfig+0x118>)
 8003d02:	fba2 2303 	umull	r2, r3, r2, r3
 8003d06:	095b      	lsrs	r3, r3, #5
 8003d08:	0119      	lsls	r1, r3, #4
 8003d0a:	68fa      	ldr	r2, [r7, #12]
 8003d0c:	4613      	mov	r3, r2
 8003d0e:	009b      	lsls	r3, r3, #2
 8003d10:	4413      	add	r3, r2
 8003d12:	009a      	lsls	r2, r3, #2
 8003d14:	441a      	add	r2, r3
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	009b      	lsls	r3, r3, #2
 8003d1c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003d20:	4b1a      	ldr	r3, [pc, #104]	@ (8003d8c <UART_SetConfig+0x118>)
 8003d22:	fba3 0302 	umull	r0, r3, r3, r2
 8003d26:	095b      	lsrs	r3, r3, #5
 8003d28:	2064      	movs	r0, #100	@ 0x64
 8003d2a:	fb00 f303 	mul.w	r3, r0, r3
 8003d2e:	1ad3      	subs	r3, r2, r3
 8003d30:	011b      	lsls	r3, r3, #4
 8003d32:	3332      	adds	r3, #50	@ 0x32
 8003d34:	4a15      	ldr	r2, [pc, #84]	@ (8003d8c <UART_SetConfig+0x118>)
 8003d36:	fba2 2303 	umull	r2, r3, r2, r3
 8003d3a:	095b      	lsrs	r3, r3, #5
 8003d3c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003d40:	4419      	add	r1, r3
 8003d42:	68fa      	ldr	r2, [r7, #12]
 8003d44:	4613      	mov	r3, r2
 8003d46:	009b      	lsls	r3, r3, #2
 8003d48:	4413      	add	r3, r2
 8003d4a:	009a      	lsls	r2, r3, #2
 8003d4c:	441a      	add	r2, r3
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	009b      	lsls	r3, r3, #2
 8003d54:	fbb2 f2f3 	udiv	r2, r2, r3
 8003d58:	4b0c      	ldr	r3, [pc, #48]	@ (8003d8c <UART_SetConfig+0x118>)
 8003d5a:	fba3 0302 	umull	r0, r3, r3, r2
 8003d5e:	095b      	lsrs	r3, r3, #5
 8003d60:	2064      	movs	r0, #100	@ 0x64
 8003d62:	fb00 f303 	mul.w	r3, r0, r3
 8003d66:	1ad3      	subs	r3, r2, r3
 8003d68:	011b      	lsls	r3, r3, #4
 8003d6a:	3332      	adds	r3, #50	@ 0x32
 8003d6c:	4a07      	ldr	r2, [pc, #28]	@ (8003d8c <UART_SetConfig+0x118>)
 8003d6e:	fba2 2303 	umull	r2, r3, r2, r3
 8003d72:	095b      	lsrs	r3, r3, #5
 8003d74:	f003 020f 	and.w	r2, r3, #15
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	440a      	add	r2, r1
 8003d7e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003d80:	bf00      	nop
 8003d82:	3710      	adds	r7, #16
 8003d84:	46bd      	mov	sp, r7
 8003d86:	bd80      	pop	{r7, pc}
 8003d88:	40013800 	.word	0x40013800
 8003d8c:	51eb851f 	.word	0x51eb851f

08003d90 <std>:
 8003d90:	2300      	movs	r3, #0
 8003d92:	b510      	push	{r4, lr}
 8003d94:	4604      	mov	r4, r0
 8003d96:	e9c0 3300 	strd	r3, r3, [r0]
 8003d9a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003d9e:	6083      	str	r3, [r0, #8]
 8003da0:	8181      	strh	r1, [r0, #12]
 8003da2:	6643      	str	r3, [r0, #100]	@ 0x64
 8003da4:	81c2      	strh	r2, [r0, #14]
 8003da6:	6183      	str	r3, [r0, #24]
 8003da8:	4619      	mov	r1, r3
 8003daa:	2208      	movs	r2, #8
 8003dac:	305c      	adds	r0, #92	@ 0x5c
 8003dae:	f000 f906 	bl	8003fbe <memset>
 8003db2:	4b0d      	ldr	r3, [pc, #52]	@ (8003de8 <std+0x58>)
 8003db4:	6224      	str	r4, [r4, #32]
 8003db6:	6263      	str	r3, [r4, #36]	@ 0x24
 8003db8:	4b0c      	ldr	r3, [pc, #48]	@ (8003dec <std+0x5c>)
 8003dba:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003dbc:	4b0c      	ldr	r3, [pc, #48]	@ (8003df0 <std+0x60>)
 8003dbe:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003dc0:	4b0c      	ldr	r3, [pc, #48]	@ (8003df4 <std+0x64>)
 8003dc2:	6323      	str	r3, [r4, #48]	@ 0x30
 8003dc4:	4b0c      	ldr	r3, [pc, #48]	@ (8003df8 <std+0x68>)
 8003dc6:	429c      	cmp	r4, r3
 8003dc8:	d006      	beq.n	8003dd8 <std+0x48>
 8003dca:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003dce:	4294      	cmp	r4, r2
 8003dd0:	d002      	beq.n	8003dd8 <std+0x48>
 8003dd2:	33d0      	adds	r3, #208	@ 0xd0
 8003dd4:	429c      	cmp	r4, r3
 8003dd6:	d105      	bne.n	8003de4 <std+0x54>
 8003dd8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003ddc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003de0:	f000 b966 	b.w	80040b0 <__retarget_lock_init_recursive>
 8003de4:	bd10      	pop	{r4, pc}
 8003de6:	bf00      	nop
 8003de8:	08003f39 	.word	0x08003f39
 8003dec:	08003f5b 	.word	0x08003f5b
 8003df0:	08003f93 	.word	0x08003f93
 8003df4:	08003fb7 	.word	0x08003fb7
 8003df8:	200001ac 	.word	0x200001ac

08003dfc <stdio_exit_handler>:
 8003dfc:	4a02      	ldr	r2, [pc, #8]	@ (8003e08 <stdio_exit_handler+0xc>)
 8003dfe:	4903      	ldr	r1, [pc, #12]	@ (8003e0c <stdio_exit_handler+0x10>)
 8003e00:	4803      	ldr	r0, [pc, #12]	@ (8003e10 <stdio_exit_handler+0x14>)
 8003e02:	f000 b869 	b.w	8003ed8 <_fwalk_sglue>
 8003e06:	bf00      	nop
 8003e08:	2000000c 	.word	0x2000000c
 8003e0c:	08004949 	.word	0x08004949
 8003e10:	2000001c 	.word	0x2000001c

08003e14 <cleanup_stdio>:
 8003e14:	6841      	ldr	r1, [r0, #4]
 8003e16:	4b0c      	ldr	r3, [pc, #48]	@ (8003e48 <cleanup_stdio+0x34>)
 8003e18:	b510      	push	{r4, lr}
 8003e1a:	4299      	cmp	r1, r3
 8003e1c:	4604      	mov	r4, r0
 8003e1e:	d001      	beq.n	8003e24 <cleanup_stdio+0x10>
 8003e20:	f000 fd92 	bl	8004948 <_fflush_r>
 8003e24:	68a1      	ldr	r1, [r4, #8]
 8003e26:	4b09      	ldr	r3, [pc, #36]	@ (8003e4c <cleanup_stdio+0x38>)
 8003e28:	4299      	cmp	r1, r3
 8003e2a:	d002      	beq.n	8003e32 <cleanup_stdio+0x1e>
 8003e2c:	4620      	mov	r0, r4
 8003e2e:	f000 fd8b 	bl	8004948 <_fflush_r>
 8003e32:	68e1      	ldr	r1, [r4, #12]
 8003e34:	4b06      	ldr	r3, [pc, #24]	@ (8003e50 <cleanup_stdio+0x3c>)
 8003e36:	4299      	cmp	r1, r3
 8003e38:	d004      	beq.n	8003e44 <cleanup_stdio+0x30>
 8003e3a:	4620      	mov	r0, r4
 8003e3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003e40:	f000 bd82 	b.w	8004948 <_fflush_r>
 8003e44:	bd10      	pop	{r4, pc}
 8003e46:	bf00      	nop
 8003e48:	200001ac 	.word	0x200001ac
 8003e4c:	20000214 	.word	0x20000214
 8003e50:	2000027c 	.word	0x2000027c

08003e54 <global_stdio_init.part.0>:
 8003e54:	b510      	push	{r4, lr}
 8003e56:	4b0b      	ldr	r3, [pc, #44]	@ (8003e84 <global_stdio_init.part.0+0x30>)
 8003e58:	4c0b      	ldr	r4, [pc, #44]	@ (8003e88 <global_stdio_init.part.0+0x34>)
 8003e5a:	4a0c      	ldr	r2, [pc, #48]	@ (8003e8c <global_stdio_init.part.0+0x38>)
 8003e5c:	4620      	mov	r0, r4
 8003e5e:	601a      	str	r2, [r3, #0]
 8003e60:	2104      	movs	r1, #4
 8003e62:	2200      	movs	r2, #0
 8003e64:	f7ff ff94 	bl	8003d90 <std>
 8003e68:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003e6c:	2201      	movs	r2, #1
 8003e6e:	2109      	movs	r1, #9
 8003e70:	f7ff ff8e 	bl	8003d90 <std>
 8003e74:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003e78:	2202      	movs	r2, #2
 8003e7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003e7e:	2112      	movs	r1, #18
 8003e80:	f7ff bf86 	b.w	8003d90 <std>
 8003e84:	200002e4 	.word	0x200002e4
 8003e88:	200001ac 	.word	0x200001ac
 8003e8c:	08003dfd 	.word	0x08003dfd

08003e90 <__sfp_lock_acquire>:
 8003e90:	4801      	ldr	r0, [pc, #4]	@ (8003e98 <__sfp_lock_acquire+0x8>)
 8003e92:	f000 b90e 	b.w	80040b2 <__retarget_lock_acquire_recursive>
 8003e96:	bf00      	nop
 8003e98:	200002ed 	.word	0x200002ed

08003e9c <__sfp_lock_release>:
 8003e9c:	4801      	ldr	r0, [pc, #4]	@ (8003ea4 <__sfp_lock_release+0x8>)
 8003e9e:	f000 b909 	b.w	80040b4 <__retarget_lock_release_recursive>
 8003ea2:	bf00      	nop
 8003ea4:	200002ed 	.word	0x200002ed

08003ea8 <__sinit>:
 8003ea8:	b510      	push	{r4, lr}
 8003eaa:	4604      	mov	r4, r0
 8003eac:	f7ff fff0 	bl	8003e90 <__sfp_lock_acquire>
 8003eb0:	6a23      	ldr	r3, [r4, #32]
 8003eb2:	b11b      	cbz	r3, 8003ebc <__sinit+0x14>
 8003eb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003eb8:	f7ff bff0 	b.w	8003e9c <__sfp_lock_release>
 8003ebc:	4b04      	ldr	r3, [pc, #16]	@ (8003ed0 <__sinit+0x28>)
 8003ebe:	6223      	str	r3, [r4, #32]
 8003ec0:	4b04      	ldr	r3, [pc, #16]	@ (8003ed4 <__sinit+0x2c>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d1f5      	bne.n	8003eb4 <__sinit+0xc>
 8003ec8:	f7ff ffc4 	bl	8003e54 <global_stdio_init.part.0>
 8003ecc:	e7f2      	b.n	8003eb4 <__sinit+0xc>
 8003ece:	bf00      	nop
 8003ed0:	08003e15 	.word	0x08003e15
 8003ed4:	200002e4 	.word	0x200002e4

08003ed8 <_fwalk_sglue>:
 8003ed8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003edc:	4607      	mov	r7, r0
 8003ede:	4688      	mov	r8, r1
 8003ee0:	4614      	mov	r4, r2
 8003ee2:	2600      	movs	r6, #0
 8003ee4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003ee8:	f1b9 0901 	subs.w	r9, r9, #1
 8003eec:	d505      	bpl.n	8003efa <_fwalk_sglue+0x22>
 8003eee:	6824      	ldr	r4, [r4, #0]
 8003ef0:	2c00      	cmp	r4, #0
 8003ef2:	d1f7      	bne.n	8003ee4 <_fwalk_sglue+0xc>
 8003ef4:	4630      	mov	r0, r6
 8003ef6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003efa:	89ab      	ldrh	r3, [r5, #12]
 8003efc:	2b01      	cmp	r3, #1
 8003efe:	d907      	bls.n	8003f10 <_fwalk_sglue+0x38>
 8003f00:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003f04:	3301      	adds	r3, #1
 8003f06:	d003      	beq.n	8003f10 <_fwalk_sglue+0x38>
 8003f08:	4629      	mov	r1, r5
 8003f0a:	4638      	mov	r0, r7
 8003f0c:	47c0      	blx	r8
 8003f0e:	4306      	orrs	r6, r0
 8003f10:	3568      	adds	r5, #104	@ 0x68
 8003f12:	e7e9      	b.n	8003ee8 <_fwalk_sglue+0x10>

08003f14 <iprintf>:
 8003f14:	b40f      	push	{r0, r1, r2, r3}
 8003f16:	b507      	push	{r0, r1, r2, lr}
 8003f18:	4906      	ldr	r1, [pc, #24]	@ (8003f34 <iprintf+0x20>)
 8003f1a:	ab04      	add	r3, sp, #16
 8003f1c:	6808      	ldr	r0, [r1, #0]
 8003f1e:	f853 2b04 	ldr.w	r2, [r3], #4
 8003f22:	6881      	ldr	r1, [r0, #8]
 8003f24:	9301      	str	r3, [sp, #4]
 8003f26:	f000 f9e5 	bl	80042f4 <_vfiprintf_r>
 8003f2a:	b003      	add	sp, #12
 8003f2c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003f30:	b004      	add	sp, #16
 8003f32:	4770      	bx	lr
 8003f34:	20000018 	.word	0x20000018

08003f38 <__sread>:
 8003f38:	b510      	push	{r4, lr}
 8003f3a:	460c      	mov	r4, r1
 8003f3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f40:	f000 f868 	bl	8004014 <_read_r>
 8003f44:	2800      	cmp	r0, #0
 8003f46:	bfab      	itete	ge
 8003f48:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003f4a:	89a3      	ldrhlt	r3, [r4, #12]
 8003f4c:	181b      	addge	r3, r3, r0
 8003f4e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003f52:	bfac      	ite	ge
 8003f54:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003f56:	81a3      	strhlt	r3, [r4, #12]
 8003f58:	bd10      	pop	{r4, pc}

08003f5a <__swrite>:
 8003f5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f5e:	461f      	mov	r7, r3
 8003f60:	898b      	ldrh	r3, [r1, #12]
 8003f62:	4605      	mov	r5, r0
 8003f64:	05db      	lsls	r3, r3, #23
 8003f66:	460c      	mov	r4, r1
 8003f68:	4616      	mov	r6, r2
 8003f6a:	d505      	bpl.n	8003f78 <__swrite+0x1e>
 8003f6c:	2302      	movs	r3, #2
 8003f6e:	2200      	movs	r2, #0
 8003f70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f74:	f000 f83c 	bl	8003ff0 <_lseek_r>
 8003f78:	89a3      	ldrh	r3, [r4, #12]
 8003f7a:	4632      	mov	r2, r6
 8003f7c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003f80:	81a3      	strh	r3, [r4, #12]
 8003f82:	4628      	mov	r0, r5
 8003f84:	463b      	mov	r3, r7
 8003f86:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003f8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003f8e:	f000 b853 	b.w	8004038 <_write_r>

08003f92 <__sseek>:
 8003f92:	b510      	push	{r4, lr}
 8003f94:	460c      	mov	r4, r1
 8003f96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f9a:	f000 f829 	bl	8003ff0 <_lseek_r>
 8003f9e:	1c43      	adds	r3, r0, #1
 8003fa0:	89a3      	ldrh	r3, [r4, #12]
 8003fa2:	bf15      	itete	ne
 8003fa4:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003fa6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8003faa:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8003fae:	81a3      	strheq	r3, [r4, #12]
 8003fb0:	bf18      	it	ne
 8003fb2:	81a3      	strhne	r3, [r4, #12]
 8003fb4:	bd10      	pop	{r4, pc}

08003fb6 <__sclose>:
 8003fb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003fba:	f000 b809 	b.w	8003fd0 <_close_r>

08003fbe <memset>:
 8003fbe:	4603      	mov	r3, r0
 8003fc0:	4402      	add	r2, r0
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d100      	bne.n	8003fc8 <memset+0xa>
 8003fc6:	4770      	bx	lr
 8003fc8:	f803 1b01 	strb.w	r1, [r3], #1
 8003fcc:	e7f9      	b.n	8003fc2 <memset+0x4>
	...

08003fd0 <_close_r>:
 8003fd0:	b538      	push	{r3, r4, r5, lr}
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	4d05      	ldr	r5, [pc, #20]	@ (8003fec <_close_r+0x1c>)
 8003fd6:	4604      	mov	r4, r0
 8003fd8:	4608      	mov	r0, r1
 8003fda:	602b      	str	r3, [r5, #0]
 8003fdc:	f7fc fcd3 	bl	8000986 <_close>
 8003fe0:	1c43      	adds	r3, r0, #1
 8003fe2:	d102      	bne.n	8003fea <_close_r+0x1a>
 8003fe4:	682b      	ldr	r3, [r5, #0]
 8003fe6:	b103      	cbz	r3, 8003fea <_close_r+0x1a>
 8003fe8:	6023      	str	r3, [r4, #0]
 8003fea:	bd38      	pop	{r3, r4, r5, pc}
 8003fec:	200002e8 	.word	0x200002e8

08003ff0 <_lseek_r>:
 8003ff0:	b538      	push	{r3, r4, r5, lr}
 8003ff2:	4604      	mov	r4, r0
 8003ff4:	4608      	mov	r0, r1
 8003ff6:	4611      	mov	r1, r2
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	4d05      	ldr	r5, [pc, #20]	@ (8004010 <_lseek_r+0x20>)
 8003ffc:	602a      	str	r2, [r5, #0]
 8003ffe:	461a      	mov	r2, r3
 8004000:	f7fc fce5 	bl	80009ce <_lseek>
 8004004:	1c43      	adds	r3, r0, #1
 8004006:	d102      	bne.n	800400e <_lseek_r+0x1e>
 8004008:	682b      	ldr	r3, [r5, #0]
 800400a:	b103      	cbz	r3, 800400e <_lseek_r+0x1e>
 800400c:	6023      	str	r3, [r4, #0]
 800400e:	bd38      	pop	{r3, r4, r5, pc}
 8004010:	200002e8 	.word	0x200002e8

08004014 <_read_r>:
 8004014:	b538      	push	{r3, r4, r5, lr}
 8004016:	4604      	mov	r4, r0
 8004018:	4608      	mov	r0, r1
 800401a:	4611      	mov	r1, r2
 800401c:	2200      	movs	r2, #0
 800401e:	4d05      	ldr	r5, [pc, #20]	@ (8004034 <_read_r+0x20>)
 8004020:	602a      	str	r2, [r5, #0]
 8004022:	461a      	mov	r2, r3
 8004024:	f7fc fc76 	bl	8000914 <_read>
 8004028:	1c43      	adds	r3, r0, #1
 800402a:	d102      	bne.n	8004032 <_read_r+0x1e>
 800402c:	682b      	ldr	r3, [r5, #0]
 800402e:	b103      	cbz	r3, 8004032 <_read_r+0x1e>
 8004030:	6023      	str	r3, [r4, #0]
 8004032:	bd38      	pop	{r3, r4, r5, pc}
 8004034:	200002e8 	.word	0x200002e8

08004038 <_write_r>:
 8004038:	b538      	push	{r3, r4, r5, lr}
 800403a:	4604      	mov	r4, r0
 800403c:	4608      	mov	r0, r1
 800403e:	4611      	mov	r1, r2
 8004040:	2200      	movs	r2, #0
 8004042:	4d05      	ldr	r5, [pc, #20]	@ (8004058 <_write_r+0x20>)
 8004044:	602a      	str	r2, [r5, #0]
 8004046:	461a      	mov	r2, r3
 8004048:	f7fc fc81 	bl	800094e <_write>
 800404c:	1c43      	adds	r3, r0, #1
 800404e:	d102      	bne.n	8004056 <_write_r+0x1e>
 8004050:	682b      	ldr	r3, [r5, #0]
 8004052:	b103      	cbz	r3, 8004056 <_write_r+0x1e>
 8004054:	6023      	str	r3, [r4, #0]
 8004056:	bd38      	pop	{r3, r4, r5, pc}
 8004058:	200002e8 	.word	0x200002e8

0800405c <__errno>:
 800405c:	4b01      	ldr	r3, [pc, #4]	@ (8004064 <__errno+0x8>)
 800405e:	6818      	ldr	r0, [r3, #0]
 8004060:	4770      	bx	lr
 8004062:	bf00      	nop
 8004064:	20000018 	.word	0x20000018

08004068 <__libc_init_array>:
 8004068:	b570      	push	{r4, r5, r6, lr}
 800406a:	2600      	movs	r6, #0
 800406c:	4d0c      	ldr	r5, [pc, #48]	@ (80040a0 <__libc_init_array+0x38>)
 800406e:	4c0d      	ldr	r4, [pc, #52]	@ (80040a4 <__libc_init_array+0x3c>)
 8004070:	1b64      	subs	r4, r4, r5
 8004072:	10a4      	asrs	r4, r4, #2
 8004074:	42a6      	cmp	r6, r4
 8004076:	d109      	bne.n	800408c <__libc_init_array+0x24>
 8004078:	f000 fdc4 	bl	8004c04 <_init>
 800407c:	2600      	movs	r6, #0
 800407e:	4d0a      	ldr	r5, [pc, #40]	@ (80040a8 <__libc_init_array+0x40>)
 8004080:	4c0a      	ldr	r4, [pc, #40]	@ (80040ac <__libc_init_array+0x44>)
 8004082:	1b64      	subs	r4, r4, r5
 8004084:	10a4      	asrs	r4, r4, #2
 8004086:	42a6      	cmp	r6, r4
 8004088:	d105      	bne.n	8004096 <__libc_init_array+0x2e>
 800408a:	bd70      	pop	{r4, r5, r6, pc}
 800408c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004090:	4798      	blx	r3
 8004092:	3601      	adds	r6, #1
 8004094:	e7ee      	b.n	8004074 <__libc_init_array+0xc>
 8004096:	f855 3b04 	ldr.w	r3, [r5], #4
 800409a:	4798      	blx	r3
 800409c:	3601      	adds	r6, #1
 800409e:	e7f2      	b.n	8004086 <__libc_init_array+0x1e>
 80040a0:	08004ca0 	.word	0x08004ca0
 80040a4:	08004ca0 	.word	0x08004ca0
 80040a8:	08004ca0 	.word	0x08004ca0
 80040ac:	08004ca4 	.word	0x08004ca4

080040b0 <__retarget_lock_init_recursive>:
 80040b0:	4770      	bx	lr

080040b2 <__retarget_lock_acquire_recursive>:
 80040b2:	4770      	bx	lr

080040b4 <__retarget_lock_release_recursive>:
 80040b4:	4770      	bx	lr
	...

080040b8 <_free_r>:
 80040b8:	b538      	push	{r3, r4, r5, lr}
 80040ba:	4605      	mov	r5, r0
 80040bc:	2900      	cmp	r1, #0
 80040be:	d040      	beq.n	8004142 <_free_r+0x8a>
 80040c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80040c4:	1f0c      	subs	r4, r1, #4
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	bfb8      	it	lt
 80040ca:	18e4      	addlt	r4, r4, r3
 80040cc:	f000 f8de 	bl	800428c <__malloc_lock>
 80040d0:	4a1c      	ldr	r2, [pc, #112]	@ (8004144 <_free_r+0x8c>)
 80040d2:	6813      	ldr	r3, [r2, #0]
 80040d4:	b933      	cbnz	r3, 80040e4 <_free_r+0x2c>
 80040d6:	6063      	str	r3, [r4, #4]
 80040d8:	6014      	str	r4, [r2, #0]
 80040da:	4628      	mov	r0, r5
 80040dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80040e0:	f000 b8da 	b.w	8004298 <__malloc_unlock>
 80040e4:	42a3      	cmp	r3, r4
 80040e6:	d908      	bls.n	80040fa <_free_r+0x42>
 80040e8:	6820      	ldr	r0, [r4, #0]
 80040ea:	1821      	adds	r1, r4, r0
 80040ec:	428b      	cmp	r3, r1
 80040ee:	bf01      	itttt	eq
 80040f0:	6819      	ldreq	r1, [r3, #0]
 80040f2:	685b      	ldreq	r3, [r3, #4]
 80040f4:	1809      	addeq	r1, r1, r0
 80040f6:	6021      	streq	r1, [r4, #0]
 80040f8:	e7ed      	b.n	80040d6 <_free_r+0x1e>
 80040fa:	461a      	mov	r2, r3
 80040fc:	685b      	ldr	r3, [r3, #4]
 80040fe:	b10b      	cbz	r3, 8004104 <_free_r+0x4c>
 8004100:	42a3      	cmp	r3, r4
 8004102:	d9fa      	bls.n	80040fa <_free_r+0x42>
 8004104:	6811      	ldr	r1, [r2, #0]
 8004106:	1850      	adds	r0, r2, r1
 8004108:	42a0      	cmp	r0, r4
 800410a:	d10b      	bne.n	8004124 <_free_r+0x6c>
 800410c:	6820      	ldr	r0, [r4, #0]
 800410e:	4401      	add	r1, r0
 8004110:	1850      	adds	r0, r2, r1
 8004112:	4283      	cmp	r3, r0
 8004114:	6011      	str	r1, [r2, #0]
 8004116:	d1e0      	bne.n	80040da <_free_r+0x22>
 8004118:	6818      	ldr	r0, [r3, #0]
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	4408      	add	r0, r1
 800411e:	6010      	str	r0, [r2, #0]
 8004120:	6053      	str	r3, [r2, #4]
 8004122:	e7da      	b.n	80040da <_free_r+0x22>
 8004124:	d902      	bls.n	800412c <_free_r+0x74>
 8004126:	230c      	movs	r3, #12
 8004128:	602b      	str	r3, [r5, #0]
 800412a:	e7d6      	b.n	80040da <_free_r+0x22>
 800412c:	6820      	ldr	r0, [r4, #0]
 800412e:	1821      	adds	r1, r4, r0
 8004130:	428b      	cmp	r3, r1
 8004132:	bf01      	itttt	eq
 8004134:	6819      	ldreq	r1, [r3, #0]
 8004136:	685b      	ldreq	r3, [r3, #4]
 8004138:	1809      	addeq	r1, r1, r0
 800413a:	6021      	streq	r1, [r4, #0]
 800413c:	6063      	str	r3, [r4, #4]
 800413e:	6054      	str	r4, [r2, #4]
 8004140:	e7cb      	b.n	80040da <_free_r+0x22>
 8004142:	bd38      	pop	{r3, r4, r5, pc}
 8004144:	200002f4 	.word	0x200002f4

08004148 <sbrk_aligned>:
 8004148:	b570      	push	{r4, r5, r6, lr}
 800414a:	4e0f      	ldr	r6, [pc, #60]	@ (8004188 <sbrk_aligned+0x40>)
 800414c:	460c      	mov	r4, r1
 800414e:	6831      	ldr	r1, [r6, #0]
 8004150:	4605      	mov	r5, r0
 8004152:	b911      	cbnz	r1, 800415a <sbrk_aligned+0x12>
 8004154:	f000 fcb4 	bl	8004ac0 <_sbrk_r>
 8004158:	6030      	str	r0, [r6, #0]
 800415a:	4621      	mov	r1, r4
 800415c:	4628      	mov	r0, r5
 800415e:	f000 fcaf 	bl	8004ac0 <_sbrk_r>
 8004162:	1c43      	adds	r3, r0, #1
 8004164:	d103      	bne.n	800416e <sbrk_aligned+0x26>
 8004166:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800416a:	4620      	mov	r0, r4
 800416c:	bd70      	pop	{r4, r5, r6, pc}
 800416e:	1cc4      	adds	r4, r0, #3
 8004170:	f024 0403 	bic.w	r4, r4, #3
 8004174:	42a0      	cmp	r0, r4
 8004176:	d0f8      	beq.n	800416a <sbrk_aligned+0x22>
 8004178:	1a21      	subs	r1, r4, r0
 800417a:	4628      	mov	r0, r5
 800417c:	f000 fca0 	bl	8004ac0 <_sbrk_r>
 8004180:	3001      	adds	r0, #1
 8004182:	d1f2      	bne.n	800416a <sbrk_aligned+0x22>
 8004184:	e7ef      	b.n	8004166 <sbrk_aligned+0x1e>
 8004186:	bf00      	nop
 8004188:	200002f0 	.word	0x200002f0

0800418c <_malloc_r>:
 800418c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004190:	1ccd      	adds	r5, r1, #3
 8004192:	f025 0503 	bic.w	r5, r5, #3
 8004196:	3508      	adds	r5, #8
 8004198:	2d0c      	cmp	r5, #12
 800419a:	bf38      	it	cc
 800419c:	250c      	movcc	r5, #12
 800419e:	2d00      	cmp	r5, #0
 80041a0:	4606      	mov	r6, r0
 80041a2:	db01      	blt.n	80041a8 <_malloc_r+0x1c>
 80041a4:	42a9      	cmp	r1, r5
 80041a6:	d904      	bls.n	80041b2 <_malloc_r+0x26>
 80041a8:	230c      	movs	r3, #12
 80041aa:	6033      	str	r3, [r6, #0]
 80041ac:	2000      	movs	r0, #0
 80041ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80041b2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004288 <_malloc_r+0xfc>
 80041b6:	f000 f869 	bl	800428c <__malloc_lock>
 80041ba:	f8d8 3000 	ldr.w	r3, [r8]
 80041be:	461c      	mov	r4, r3
 80041c0:	bb44      	cbnz	r4, 8004214 <_malloc_r+0x88>
 80041c2:	4629      	mov	r1, r5
 80041c4:	4630      	mov	r0, r6
 80041c6:	f7ff ffbf 	bl	8004148 <sbrk_aligned>
 80041ca:	1c43      	adds	r3, r0, #1
 80041cc:	4604      	mov	r4, r0
 80041ce:	d158      	bne.n	8004282 <_malloc_r+0xf6>
 80041d0:	f8d8 4000 	ldr.w	r4, [r8]
 80041d4:	4627      	mov	r7, r4
 80041d6:	2f00      	cmp	r7, #0
 80041d8:	d143      	bne.n	8004262 <_malloc_r+0xd6>
 80041da:	2c00      	cmp	r4, #0
 80041dc:	d04b      	beq.n	8004276 <_malloc_r+0xea>
 80041de:	6823      	ldr	r3, [r4, #0]
 80041e0:	4639      	mov	r1, r7
 80041e2:	4630      	mov	r0, r6
 80041e4:	eb04 0903 	add.w	r9, r4, r3
 80041e8:	f000 fc6a 	bl	8004ac0 <_sbrk_r>
 80041ec:	4581      	cmp	r9, r0
 80041ee:	d142      	bne.n	8004276 <_malloc_r+0xea>
 80041f0:	6821      	ldr	r1, [r4, #0]
 80041f2:	4630      	mov	r0, r6
 80041f4:	1a6d      	subs	r5, r5, r1
 80041f6:	4629      	mov	r1, r5
 80041f8:	f7ff ffa6 	bl	8004148 <sbrk_aligned>
 80041fc:	3001      	adds	r0, #1
 80041fe:	d03a      	beq.n	8004276 <_malloc_r+0xea>
 8004200:	6823      	ldr	r3, [r4, #0]
 8004202:	442b      	add	r3, r5
 8004204:	6023      	str	r3, [r4, #0]
 8004206:	f8d8 3000 	ldr.w	r3, [r8]
 800420a:	685a      	ldr	r2, [r3, #4]
 800420c:	bb62      	cbnz	r2, 8004268 <_malloc_r+0xdc>
 800420e:	f8c8 7000 	str.w	r7, [r8]
 8004212:	e00f      	b.n	8004234 <_malloc_r+0xa8>
 8004214:	6822      	ldr	r2, [r4, #0]
 8004216:	1b52      	subs	r2, r2, r5
 8004218:	d420      	bmi.n	800425c <_malloc_r+0xd0>
 800421a:	2a0b      	cmp	r2, #11
 800421c:	d917      	bls.n	800424e <_malloc_r+0xc2>
 800421e:	1961      	adds	r1, r4, r5
 8004220:	42a3      	cmp	r3, r4
 8004222:	6025      	str	r5, [r4, #0]
 8004224:	bf18      	it	ne
 8004226:	6059      	strne	r1, [r3, #4]
 8004228:	6863      	ldr	r3, [r4, #4]
 800422a:	bf08      	it	eq
 800422c:	f8c8 1000 	streq.w	r1, [r8]
 8004230:	5162      	str	r2, [r4, r5]
 8004232:	604b      	str	r3, [r1, #4]
 8004234:	4630      	mov	r0, r6
 8004236:	f000 f82f 	bl	8004298 <__malloc_unlock>
 800423a:	f104 000b 	add.w	r0, r4, #11
 800423e:	1d23      	adds	r3, r4, #4
 8004240:	f020 0007 	bic.w	r0, r0, #7
 8004244:	1ac2      	subs	r2, r0, r3
 8004246:	bf1c      	itt	ne
 8004248:	1a1b      	subne	r3, r3, r0
 800424a:	50a3      	strne	r3, [r4, r2]
 800424c:	e7af      	b.n	80041ae <_malloc_r+0x22>
 800424e:	6862      	ldr	r2, [r4, #4]
 8004250:	42a3      	cmp	r3, r4
 8004252:	bf0c      	ite	eq
 8004254:	f8c8 2000 	streq.w	r2, [r8]
 8004258:	605a      	strne	r2, [r3, #4]
 800425a:	e7eb      	b.n	8004234 <_malloc_r+0xa8>
 800425c:	4623      	mov	r3, r4
 800425e:	6864      	ldr	r4, [r4, #4]
 8004260:	e7ae      	b.n	80041c0 <_malloc_r+0x34>
 8004262:	463c      	mov	r4, r7
 8004264:	687f      	ldr	r7, [r7, #4]
 8004266:	e7b6      	b.n	80041d6 <_malloc_r+0x4a>
 8004268:	461a      	mov	r2, r3
 800426a:	685b      	ldr	r3, [r3, #4]
 800426c:	42a3      	cmp	r3, r4
 800426e:	d1fb      	bne.n	8004268 <_malloc_r+0xdc>
 8004270:	2300      	movs	r3, #0
 8004272:	6053      	str	r3, [r2, #4]
 8004274:	e7de      	b.n	8004234 <_malloc_r+0xa8>
 8004276:	230c      	movs	r3, #12
 8004278:	4630      	mov	r0, r6
 800427a:	6033      	str	r3, [r6, #0]
 800427c:	f000 f80c 	bl	8004298 <__malloc_unlock>
 8004280:	e794      	b.n	80041ac <_malloc_r+0x20>
 8004282:	6005      	str	r5, [r0, #0]
 8004284:	e7d6      	b.n	8004234 <_malloc_r+0xa8>
 8004286:	bf00      	nop
 8004288:	200002f4 	.word	0x200002f4

0800428c <__malloc_lock>:
 800428c:	4801      	ldr	r0, [pc, #4]	@ (8004294 <__malloc_lock+0x8>)
 800428e:	f7ff bf10 	b.w	80040b2 <__retarget_lock_acquire_recursive>
 8004292:	bf00      	nop
 8004294:	200002ec 	.word	0x200002ec

08004298 <__malloc_unlock>:
 8004298:	4801      	ldr	r0, [pc, #4]	@ (80042a0 <__malloc_unlock+0x8>)
 800429a:	f7ff bf0b 	b.w	80040b4 <__retarget_lock_release_recursive>
 800429e:	bf00      	nop
 80042a0:	200002ec 	.word	0x200002ec

080042a4 <__sfputc_r>:
 80042a4:	6893      	ldr	r3, [r2, #8]
 80042a6:	b410      	push	{r4}
 80042a8:	3b01      	subs	r3, #1
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	6093      	str	r3, [r2, #8]
 80042ae:	da07      	bge.n	80042c0 <__sfputc_r+0x1c>
 80042b0:	6994      	ldr	r4, [r2, #24]
 80042b2:	42a3      	cmp	r3, r4
 80042b4:	db01      	blt.n	80042ba <__sfputc_r+0x16>
 80042b6:	290a      	cmp	r1, #10
 80042b8:	d102      	bne.n	80042c0 <__sfputc_r+0x1c>
 80042ba:	bc10      	pop	{r4}
 80042bc:	f000 bb6c 	b.w	8004998 <__swbuf_r>
 80042c0:	6813      	ldr	r3, [r2, #0]
 80042c2:	1c58      	adds	r0, r3, #1
 80042c4:	6010      	str	r0, [r2, #0]
 80042c6:	7019      	strb	r1, [r3, #0]
 80042c8:	4608      	mov	r0, r1
 80042ca:	bc10      	pop	{r4}
 80042cc:	4770      	bx	lr

080042ce <__sfputs_r>:
 80042ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042d0:	4606      	mov	r6, r0
 80042d2:	460f      	mov	r7, r1
 80042d4:	4614      	mov	r4, r2
 80042d6:	18d5      	adds	r5, r2, r3
 80042d8:	42ac      	cmp	r4, r5
 80042da:	d101      	bne.n	80042e0 <__sfputs_r+0x12>
 80042dc:	2000      	movs	r0, #0
 80042de:	e007      	b.n	80042f0 <__sfputs_r+0x22>
 80042e0:	463a      	mov	r2, r7
 80042e2:	4630      	mov	r0, r6
 80042e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80042e8:	f7ff ffdc 	bl	80042a4 <__sfputc_r>
 80042ec:	1c43      	adds	r3, r0, #1
 80042ee:	d1f3      	bne.n	80042d8 <__sfputs_r+0xa>
 80042f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080042f4 <_vfiprintf_r>:
 80042f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042f8:	460d      	mov	r5, r1
 80042fa:	4614      	mov	r4, r2
 80042fc:	4698      	mov	r8, r3
 80042fe:	4606      	mov	r6, r0
 8004300:	b09d      	sub	sp, #116	@ 0x74
 8004302:	b118      	cbz	r0, 800430c <_vfiprintf_r+0x18>
 8004304:	6a03      	ldr	r3, [r0, #32]
 8004306:	b90b      	cbnz	r3, 800430c <_vfiprintf_r+0x18>
 8004308:	f7ff fdce 	bl	8003ea8 <__sinit>
 800430c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800430e:	07d9      	lsls	r1, r3, #31
 8004310:	d405      	bmi.n	800431e <_vfiprintf_r+0x2a>
 8004312:	89ab      	ldrh	r3, [r5, #12]
 8004314:	059a      	lsls	r2, r3, #22
 8004316:	d402      	bmi.n	800431e <_vfiprintf_r+0x2a>
 8004318:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800431a:	f7ff feca 	bl	80040b2 <__retarget_lock_acquire_recursive>
 800431e:	89ab      	ldrh	r3, [r5, #12]
 8004320:	071b      	lsls	r3, r3, #28
 8004322:	d501      	bpl.n	8004328 <_vfiprintf_r+0x34>
 8004324:	692b      	ldr	r3, [r5, #16]
 8004326:	b99b      	cbnz	r3, 8004350 <_vfiprintf_r+0x5c>
 8004328:	4629      	mov	r1, r5
 800432a:	4630      	mov	r0, r6
 800432c:	f000 fb72 	bl	8004a14 <__swsetup_r>
 8004330:	b170      	cbz	r0, 8004350 <_vfiprintf_r+0x5c>
 8004332:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004334:	07dc      	lsls	r4, r3, #31
 8004336:	d504      	bpl.n	8004342 <_vfiprintf_r+0x4e>
 8004338:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800433c:	b01d      	add	sp, #116	@ 0x74
 800433e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004342:	89ab      	ldrh	r3, [r5, #12]
 8004344:	0598      	lsls	r0, r3, #22
 8004346:	d4f7      	bmi.n	8004338 <_vfiprintf_r+0x44>
 8004348:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800434a:	f7ff feb3 	bl	80040b4 <__retarget_lock_release_recursive>
 800434e:	e7f3      	b.n	8004338 <_vfiprintf_r+0x44>
 8004350:	2300      	movs	r3, #0
 8004352:	9309      	str	r3, [sp, #36]	@ 0x24
 8004354:	2320      	movs	r3, #32
 8004356:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800435a:	2330      	movs	r3, #48	@ 0x30
 800435c:	f04f 0901 	mov.w	r9, #1
 8004360:	f8cd 800c 	str.w	r8, [sp, #12]
 8004364:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8004510 <_vfiprintf_r+0x21c>
 8004368:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800436c:	4623      	mov	r3, r4
 800436e:	469a      	mov	sl, r3
 8004370:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004374:	b10a      	cbz	r2, 800437a <_vfiprintf_r+0x86>
 8004376:	2a25      	cmp	r2, #37	@ 0x25
 8004378:	d1f9      	bne.n	800436e <_vfiprintf_r+0x7a>
 800437a:	ebba 0b04 	subs.w	fp, sl, r4
 800437e:	d00b      	beq.n	8004398 <_vfiprintf_r+0xa4>
 8004380:	465b      	mov	r3, fp
 8004382:	4622      	mov	r2, r4
 8004384:	4629      	mov	r1, r5
 8004386:	4630      	mov	r0, r6
 8004388:	f7ff ffa1 	bl	80042ce <__sfputs_r>
 800438c:	3001      	adds	r0, #1
 800438e:	f000 80a7 	beq.w	80044e0 <_vfiprintf_r+0x1ec>
 8004392:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004394:	445a      	add	r2, fp
 8004396:	9209      	str	r2, [sp, #36]	@ 0x24
 8004398:	f89a 3000 	ldrb.w	r3, [sl]
 800439c:	2b00      	cmp	r3, #0
 800439e:	f000 809f 	beq.w	80044e0 <_vfiprintf_r+0x1ec>
 80043a2:	2300      	movs	r3, #0
 80043a4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80043a8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80043ac:	f10a 0a01 	add.w	sl, sl, #1
 80043b0:	9304      	str	r3, [sp, #16]
 80043b2:	9307      	str	r3, [sp, #28]
 80043b4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80043b8:	931a      	str	r3, [sp, #104]	@ 0x68
 80043ba:	4654      	mov	r4, sl
 80043bc:	2205      	movs	r2, #5
 80043be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80043c2:	4853      	ldr	r0, [pc, #332]	@ (8004510 <_vfiprintf_r+0x21c>)
 80043c4:	f000 fb8c 	bl	8004ae0 <memchr>
 80043c8:	9a04      	ldr	r2, [sp, #16]
 80043ca:	b9d8      	cbnz	r0, 8004404 <_vfiprintf_r+0x110>
 80043cc:	06d1      	lsls	r1, r2, #27
 80043ce:	bf44      	itt	mi
 80043d0:	2320      	movmi	r3, #32
 80043d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80043d6:	0713      	lsls	r3, r2, #28
 80043d8:	bf44      	itt	mi
 80043da:	232b      	movmi	r3, #43	@ 0x2b
 80043dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80043e0:	f89a 3000 	ldrb.w	r3, [sl]
 80043e4:	2b2a      	cmp	r3, #42	@ 0x2a
 80043e6:	d015      	beq.n	8004414 <_vfiprintf_r+0x120>
 80043e8:	4654      	mov	r4, sl
 80043ea:	2000      	movs	r0, #0
 80043ec:	f04f 0c0a 	mov.w	ip, #10
 80043f0:	9a07      	ldr	r2, [sp, #28]
 80043f2:	4621      	mov	r1, r4
 80043f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80043f8:	3b30      	subs	r3, #48	@ 0x30
 80043fa:	2b09      	cmp	r3, #9
 80043fc:	d94b      	bls.n	8004496 <_vfiprintf_r+0x1a2>
 80043fe:	b1b0      	cbz	r0, 800442e <_vfiprintf_r+0x13a>
 8004400:	9207      	str	r2, [sp, #28]
 8004402:	e014      	b.n	800442e <_vfiprintf_r+0x13a>
 8004404:	eba0 0308 	sub.w	r3, r0, r8
 8004408:	fa09 f303 	lsl.w	r3, r9, r3
 800440c:	4313      	orrs	r3, r2
 800440e:	46a2      	mov	sl, r4
 8004410:	9304      	str	r3, [sp, #16]
 8004412:	e7d2      	b.n	80043ba <_vfiprintf_r+0xc6>
 8004414:	9b03      	ldr	r3, [sp, #12]
 8004416:	1d19      	adds	r1, r3, #4
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	9103      	str	r1, [sp, #12]
 800441c:	2b00      	cmp	r3, #0
 800441e:	bfbb      	ittet	lt
 8004420:	425b      	neglt	r3, r3
 8004422:	f042 0202 	orrlt.w	r2, r2, #2
 8004426:	9307      	strge	r3, [sp, #28]
 8004428:	9307      	strlt	r3, [sp, #28]
 800442a:	bfb8      	it	lt
 800442c:	9204      	strlt	r2, [sp, #16]
 800442e:	7823      	ldrb	r3, [r4, #0]
 8004430:	2b2e      	cmp	r3, #46	@ 0x2e
 8004432:	d10a      	bne.n	800444a <_vfiprintf_r+0x156>
 8004434:	7863      	ldrb	r3, [r4, #1]
 8004436:	2b2a      	cmp	r3, #42	@ 0x2a
 8004438:	d132      	bne.n	80044a0 <_vfiprintf_r+0x1ac>
 800443a:	9b03      	ldr	r3, [sp, #12]
 800443c:	3402      	adds	r4, #2
 800443e:	1d1a      	adds	r2, r3, #4
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	9203      	str	r2, [sp, #12]
 8004444:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004448:	9305      	str	r3, [sp, #20]
 800444a:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8004514 <_vfiprintf_r+0x220>
 800444e:	2203      	movs	r2, #3
 8004450:	4650      	mov	r0, sl
 8004452:	7821      	ldrb	r1, [r4, #0]
 8004454:	f000 fb44 	bl	8004ae0 <memchr>
 8004458:	b138      	cbz	r0, 800446a <_vfiprintf_r+0x176>
 800445a:	2240      	movs	r2, #64	@ 0x40
 800445c:	9b04      	ldr	r3, [sp, #16]
 800445e:	eba0 000a 	sub.w	r0, r0, sl
 8004462:	4082      	lsls	r2, r0
 8004464:	4313      	orrs	r3, r2
 8004466:	3401      	adds	r4, #1
 8004468:	9304      	str	r3, [sp, #16]
 800446a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800446e:	2206      	movs	r2, #6
 8004470:	4829      	ldr	r0, [pc, #164]	@ (8004518 <_vfiprintf_r+0x224>)
 8004472:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004476:	f000 fb33 	bl	8004ae0 <memchr>
 800447a:	2800      	cmp	r0, #0
 800447c:	d03f      	beq.n	80044fe <_vfiprintf_r+0x20a>
 800447e:	4b27      	ldr	r3, [pc, #156]	@ (800451c <_vfiprintf_r+0x228>)
 8004480:	bb1b      	cbnz	r3, 80044ca <_vfiprintf_r+0x1d6>
 8004482:	9b03      	ldr	r3, [sp, #12]
 8004484:	3307      	adds	r3, #7
 8004486:	f023 0307 	bic.w	r3, r3, #7
 800448a:	3308      	adds	r3, #8
 800448c:	9303      	str	r3, [sp, #12]
 800448e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004490:	443b      	add	r3, r7
 8004492:	9309      	str	r3, [sp, #36]	@ 0x24
 8004494:	e76a      	b.n	800436c <_vfiprintf_r+0x78>
 8004496:	460c      	mov	r4, r1
 8004498:	2001      	movs	r0, #1
 800449a:	fb0c 3202 	mla	r2, ip, r2, r3
 800449e:	e7a8      	b.n	80043f2 <_vfiprintf_r+0xfe>
 80044a0:	2300      	movs	r3, #0
 80044a2:	f04f 0c0a 	mov.w	ip, #10
 80044a6:	4619      	mov	r1, r3
 80044a8:	3401      	adds	r4, #1
 80044aa:	9305      	str	r3, [sp, #20]
 80044ac:	4620      	mov	r0, r4
 80044ae:	f810 2b01 	ldrb.w	r2, [r0], #1
 80044b2:	3a30      	subs	r2, #48	@ 0x30
 80044b4:	2a09      	cmp	r2, #9
 80044b6:	d903      	bls.n	80044c0 <_vfiprintf_r+0x1cc>
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d0c6      	beq.n	800444a <_vfiprintf_r+0x156>
 80044bc:	9105      	str	r1, [sp, #20]
 80044be:	e7c4      	b.n	800444a <_vfiprintf_r+0x156>
 80044c0:	4604      	mov	r4, r0
 80044c2:	2301      	movs	r3, #1
 80044c4:	fb0c 2101 	mla	r1, ip, r1, r2
 80044c8:	e7f0      	b.n	80044ac <_vfiprintf_r+0x1b8>
 80044ca:	ab03      	add	r3, sp, #12
 80044cc:	9300      	str	r3, [sp, #0]
 80044ce:	462a      	mov	r2, r5
 80044d0:	4630      	mov	r0, r6
 80044d2:	4b13      	ldr	r3, [pc, #76]	@ (8004520 <_vfiprintf_r+0x22c>)
 80044d4:	a904      	add	r1, sp, #16
 80044d6:	f3af 8000 	nop.w
 80044da:	4607      	mov	r7, r0
 80044dc:	1c78      	adds	r0, r7, #1
 80044de:	d1d6      	bne.n	800448e <_vfiprintf_r+0x19a>
 80044e0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80044e2:	07d9      	lsls	r1, r3, #31
 80044e4:	d405      	bmi.n	80044f2 <_vfiprintf_r+0x1fe>
 80044e6:	89ab      	ldrh	r3, [r5, #12]
 80044e8:	059a      	lsls	r2, r3, #22
 80044ea:	d402      	bmi.n	80044f2 <_vfiprintf_r+0x1fe>
 80044ec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80044ee:	f7ff fde1 	bl	80040b4 <__retarget_lock_release_recursive>
 80044f2:	89ab      	ldrh	r3, [r5, #12]
 80044f4:	065b      	lsls	r3, r3, #25
 80044f6:	f53f af1f 	bmi.w	8004338 <_vfiprintf_r+0x44>
 80044fa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80044fc:	e71e      	b.n	800433c <_vfiprintf_r+0x48>
 80044fe:	ab03      	add	r3, sp, #12
 8004500:	9300      	str	r3, [sp, #0]
 8004502:	462a      	mov	r2, r5
 8004504:	4630      	mov	r0, r6
 8004506:	4b06      	ldr	r3, [pc, #24]	@ (8004520 <_vfiprintf_r+0x22c>)
 8004508:	a904      	add	r1, sp, #16
 800450a:	f000 f87d 	bl	8004608 <_printf_i>
 800450e:	e7e4      	b.n	80044da <_vfiprintf_r+0x1e6>
 8004510:	08004c6a 	.word	0x08004c6a
 8004514:	08004c70 	.word	0x08004c70
 8004518:	08004c74 	.word	0x08004c74
 800451c:	00000000 	.word	0x00000000
 8004520:	080042cf 	.word	0x080042cf

08004524 <_printf_common>:
 8004524:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004528:	4616      	mov	r6, r2
 800452a:	4698      	mov	r8, r3
 800452c:	688a      	ldr	r2, [r1, #8]
 800452e:	690b      	ldr	r3, [r1, #16]
 8004530:	4607      	mov	r7, r0
 8004532:	4293      	cmp	r3, r2
 8004534:	bfb8      	it	lt
 8004536:	4613      	movlt	r3, r2
 8004538:	6033      	str	r3, [r6, #0]
 800453a:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800453e:	460c      	mov	r4, r1
 8004540:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004544:	b10a      	cbz	r2, 800454a <_printf_common+0x26>
 8004546:	3301      	adds	r3, #1
 8004548:	6033      	str	r3, [r6, #0]
 800454a:	6823      	ldr	r3, [r4, #0]
 800454c:	0699      	lsls	r1, r3, #26
 800454e:	bf42      	ittt	mi
 8004550:	6833      	ldrmi	r3, [r6, #0]
 8004552:	3302      	addmi	r3, #2
 8004554:	6033      	strmi	r3, [r6, #0]
 8004556:	6825      	ldr	r5, [r4, #0]
 8004558:	f015 0506 	ands.w	r5, r5, #6
 800455c:	d106      	bne.n	800456c <_printf_common+0x48>
 800455e:	f104 0a19 	add.w	sl, r4, #25
 8004562:	68e3      	ldr	r3, [r4, #12]
 8004564:	6832      	ldr	r2, [r6, #0]
 8004566:	1a9b      	subs	r3, r3, r2
 8004568:	42ab      	cmp	r3, r5
 800456a:	dc2b      	bgt.n	80045c4 <_printf_common+0xa0>
 800456c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004570:	6822      	ldr	r2, [r4, #0]
 8004572:	3b00      	subs	r3, #0
 8004574:	bf18      	it	ne
 8004576:	2301      	movne	r3, #1
 8004578:	0692      	lsls	r2, r2, #26
 800457a:	d430      	bmi.n	80045de <_printf_common+0xba>
 800457c:	4641      	mov	r1, r8
 800457e:	4638      	mov	r0, r7
 8004580:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004584:	47c8      	blx	r9
 8004586:	3001      	adds	r0, #1
 8004588:	d023      	beq.n	80045d2 <_printf_common+0xae>
 800458a:	6823      	ldr	r3, [r4, #0]
 800458c:	6922      	ldr	r2, [r4, #16]
 800458e:	f003 0306 	and.w	r3, r3, #6
 8004592:	2b04      	cmp	r3, #4
 8004594:	bf14      	ite	ne
 8004596:	2500      	movne	r5, #0
 8004598:	6833      	ldreq	r3, [r6, #0]
 800459a:	f04f 0600 	mov.w	r6, #0
 800459e:	bf08      	it	eq
 80045a0:	68e5      	ldreq	r5, [r4, #12]
 80045a2:	f104 041a 	add.w	r4, r4, #26
 80045a6:	bf08      	it	eq
 80045a8:	1aed      	subeq	r5, r5, r3
 80045aa:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80045ae:	bf08      	it	eq
 80045b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80045b4:	4293      	cmp	r3, r2
 80045b6:	bfc4      	itt	gt
 80045b8:	1a9b      	subgt	r3, r3, r2
 80045ba:	18ed      	addgt	r5, r5, r3
 80045bc:	42b5      	cmp	r5, r6
 80045be:	d11a      	bne.n	80045f6 <_printf_common+0xd2>
 80045c0:	2000      	movs	r0, #0
 80045c2:	e008      	b.n	80045d6 <_printf_common+0xb2>
 80045c4:	2301      	movs	r3, #1
 80045c6:	4652      	mov	r2, sl
 80045c8:	4641      	mov	r1, r8
 80045ca:	4638      	mov	r0, r7
 80045cc:	47c8      	blx	r9
 80045ce:	3001      	adds	r0, #1
 80045d0:	d103      	bne.n	80045da <_printf_common+0xb6>
 80045d2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80045d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80045da:	3501      	adds	r5, #1
 80045dc:	e7c1      	b.n	8004562 <_printf_common+0x3e>
 80045de:	2030      	movs	r0, #48	@ 0x30
 80045e0:	18e1      	adds	r1, r4, r3
 80045e2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80045e6:	1c5a      	adds	r2, r3, #1
 80045e8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80045ec:	4422      	add	r2, r4
 80045ee:	3302      	adds	r3, #2
 80045f0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80045f4:	e7c2      	b.n	800457c <_printf_common+0x58>
 80045f6:	2301      	movs	r3, #1
 80045f8:	4622      	mov	r2, r4
 80045fa:	4641      	mov	r1, r8
 80045fc:	4638      	mov	r0, r7
 80045fe:	47c8      	blx	r9
 8004600:	3001      	adds	r0, #1
 8004602:	d0e6      	beq.n	80045d2 <_printf_common+0xae>
 8004604:	3601      	adds	r6, #1
 8004606:	e7d9      	b.n	80045bc <_printf_common+0x98>

08004608 <_printf_i>:
 8004608:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800460c:	7e0f      	ldrb	r7, [r1, #24]
 800460e:	4691      	mov	r9, r2
 8004610:	2f78      	cmp	r7, #120	@ 0x78
 8004612:	4680      	mov	r8, r0
 8004614:	460c      	mov	r4, r1
 8004616:	469a      	mov	sl, r3
 8004618:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800461a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800461e:	d807      	bhi.n	8004630 <_printf_i+0x28>
 8004620:	2f62      	cmp	r7, #98	@ 0x62
 8004622:	d80a      	bhi.n	800463a <_printf_i+0x32>
 8004624:	2f00      	cmp	r7, #0
 8004626:	f000 80d3 	beq.w	80047d0 <_printf_i+0x1c8>
 800462a:	2f58      	cmp	r7, #88	@ 0x58
 800462c:	f000 80ba 	beq.w	80047a4 <_printf_i+0x19c>
 8004630:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004634:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004638:	e03a      	b.n	80046b0 <_printf_i+0xa8>
 800463a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800463e:	2b15      	cmp	r3, #21
 8004640:	d8f6      	bhi.n	8004630 <_printf_i+0x28>
 8004642:	a101      	add	r1, pc, #4	@ (adr r1, 8004648 <_printf_i+0x40>)
 8004644:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004648:	080046a1 	.word	0x080046a1
 800464c:	080046b5 	.word	0x080046b5
 8004650:	08004631 	.word	0x08004631
 8004654:	08004631 	.word	0x08004631
 8004658:	08004631 	.word	0x08004631
 800465c:	08004631 	.word	0x08004631
 8004660:	080046b5 	.word	0x080046b5
 8004664:	08004631 	.word	0x08004631
 8004668:	08004631 	.word	0x08004631
 800466c:	08004631 	.word	0x08004631
 8004670:	08004631 	.word	0x08004631
 8004674:	080047b7 	.word	0x080047b7
 8004678:	080046df 	.word	0x080046df
 800467c:	08004771 	.word	0x08004771
 8004680:	08004631 	.word	0x08004631
 8004684:	08004631 	.word	0x08004631
 8004688:	080047d9 	.word	0x080047d9
 800468c:	08004631 	.word	0x08004631
 8004690:	080046df 	.word	0x080046df
 8004694:	08004631 	.word	0x08004631
 8004698:	08004631 	.word	0x08004631
 800469c:	08004779 	.word	0x08004779
 80046a0:	6833      	ldr	r3, [r6, #0]
 80046a2:	1d1a      	adds	r2, r3, #4
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	6032      	str	r2, [r6, #0]
 80046a8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80046ac:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80046b0:	2301      	movs	r3, #1
 80046b2:	e09e      	b.n	80047f2 <_printf_i+0x1ea>
 80046b4:	6833      	ldr	r3, [r6, #0]
 80046b6:	6820      	ldr	r0, [r4, #0]
 80046b8:	1d19      	adds	r1, r3, #4
 80046ba:	6031      	str	r1, [r6, #0]
 80046bc:	0606      	lsls	r6, r0, #24
 80046be:	d501      	bpl.n	80046c4 <_printf_i+0xbc>
 80046c0:	681d      	ldr	r5, [r3, #0]
 80046c2:	e003      	b.n	80046cc <_printf_i+0xc4>
 80046c4:	0645      	lsls	r5, r0, #25
 80046c6:	d5fb      	bpl.n	80046c0 <_printf_i+0xb8>
 80046c8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80046cc:	2d00      	cmp	r5, #0
 80046ce:	da03      	bge.n	80046d8 <_printf_i+0xd0>
 80046d0:	232d      	movs	r3, #45	@ 0x2d
 80046d2:	426d      	negs	r5, r5
 80046d4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80046d8:	230a      	movs	r3, #10
 80046da:	4859      	ldr	r0, [pc, #356]	@ (8004840 <_printf_i+0x238>)
 80046dc:	e011      	b.n	8004702 <_printf_i+0xfa>
 80046de:	6821      	ldr	r1, [r4, #0]
 80046e0:	6833      	ldr	r3, [r6, #0]
 80046e2:	0608      	lsls	r0, r1, #24
 80046e4:	f853 5b04 	ldr.w	r5, [r3], #4
 80046e8:	d402      	bmi.n	80046f0 <_printf_i+0xe8>
 80046ea:	0649      	lsls	r1, r1, #25
 80046ec:	bf48      	it	mi
 80046ee:	b2ad      	uxthmi	r5, r5
 80046f0:	2f6f      	cmp	r7, #111	@ 0x6f
 80046f2:	6033      	str	r3, [r6, #0]
 80046f4:	bf14      	ite	ne
 80046f6:	230a      	movne	r3, #10
 80046f8:	2308      	moveq	r3, #8
 80046fa:	4851      	ldr	r0, [pc, #324]	@ (8004840 <_printf_i+0x238>)
 80046fc:	2100      	movs	r1, #0
 80046fe:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004702:	6866      	ldr	r6, [r4, #4]
 8004704:	2e00      	cmp	r6, #0
 8004706:	bfa8      	it	ge
 8004708:	6821      	ldrge	r1, [r4, #0]
 800470a:	60a6      	str	r6, [r4, #8]
 800470c:	bfa4      	itt	ge
 800470e:	f021 0104 	bicge.w	r1, r1, #4
 8004712:	6021      	strge	r1, [r4, #0]
 8004714:	b90d      	cbnz	r5, 800471a <_printf_i+0x112>
 8004716:	2e00      	cmp	r6, #0
 8004718:	d04b      	beq.n	80047b2 <_printf_i+0x1aa>
 800471a:	4616      	mov	r6, r2
 800471c:	fbb5 f1f3 	udiv	r1, r5, r3
 8004720:	fb03 5711 	mls	r7, r3, r1, r5
 8004724:	5dc7      	ldrb	r7, [r0, r7]
 8004726:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800472a:	462f      	mov	r7, r5
 800472c:	42bb      	cmp	r3, r7
 800472e:	460d      	mov	r5, r1
 8004730:	d9f4      	bls.n	800471c <_printf_i+0x114>
 8004732:	2b08      	cmp	r3, #8
 8004734:	d10b      	bne.n	800474e <_printf_i+0x146>
 8004736:	6823      	ldr	r3, [r4, #0]
 8004738:	07df      	lsls	r7, r3, #31
 800473a:	d508      	bpl.n	800474e <_printf_i+0x146>
 800473c:	6923      	ldr	r3, [r4, #16]
 800473e:	6861      	ldr	r1, [r4, #4]
 8004740:	4299      	cmp	r1, r3
 8004742:	bfde      	ittt	le
 8004744:	2330      	movle	r3, #48	@ 0x30
 8004746:	f806 3c01 	strble.w	r3, [r6, #-1]
 800474a:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800474e:	1b92      	subs	r2, r2, r6
 8004750:	6122      	str	r2, [r4, #16]
 8004752:	464b      	mov	r3, r9
 8004754:	4621      	mov	r1, r4
 8004756:	4640      	mov	r0, r8
 8004758:	f8cd a000 	str.w	sl, [sp]
 800475c:	aa03      	add	r2, sp, #12
 800475e:	f7ff fee1 	bl	8004524 <_printf_common>
 8004762:	3001      	adds	r0, #1
 8004764:	d14a      	bne.n	80047fc <_printf_i+0x1f4>
 8004766:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800476a:	b004      	add	sp, #16
 800476c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004770:	6823      	ldr	r3, [r4, #0]
 8004772:	f043 0320 	orr.w	r3, r3, #32
 8004776:	6023      	str	r3, [r4, #0]
 8004778:	2778      	movs	r7, #120	@ 0x78
 800477a:	4832      	ldr	r0, [pc, #200]	@ (8004844 <_printf_i+0x23c>)
 800477c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004780:	6823      	ldr	r3, [r4, #0]
 8004782:	6831      	ldr	r1, [r6, #0]
 8004784:	061f      	lsls	r7, r3, #24
 8004786:	f851 5b04 	ldr.w	r5, [r1], #4
 800478a:	d402      	bmi.n	8004792 <_printf_i+0x18a>
 800478c:	065f      	lsls	r7, r3, #25
 800478e:	bf48      	it	mi
 8004790:	b2ad      	uxthmi	r5, r5
 8004792:	6031      	str	r1, [r6, #0]
 8004794:	07d9      	lsls	r1, r3, #31
 8004796:	bf44      	itt	mi
 8004798:	f043 0320 	orrmi.w	r3, r3, #32
 800479c:	6023      	strmi	r3, [r4, #0]
 800479e:	b11d      	cbz	r5, 80047a8 <_printf_i+0x1a0>
 80047a0:	2310      	movs	r3, #16
 80047a2:	e7ab      	b.n	80046fc <_printf_i+0xf4>
 80047a4:	4826      	ldr	r0, [pc, #152]	@ (8004840 <_printf_i+0x238>)
 80047a6:	e7e9      	b.n	800477c <_printf_i+0x174>
 80047a8:	6823      	ldr	r3, [r4, #0]
 80047aa:	f023 0320 	bic.w	r3, r3, #32
 80047ae:	6023      	str	r3, [r4, #0]
 80047b0:	e7f6      	b.n	80047a0 <_printf_i+0x198>
 80047b2:	4616      	mov	r6, r2
 80047b4:	e7bd      	b.n	8004732 <_printf_i+0x12a>
 80047b6:	6833      	ldr	r3, [r6, #0]
 80047b8:	6825      	ldr	r5, [r4, #0]
 80047ba:	1d18      	adds	r0, r3, #4
 80047bc:	6961      	ldr	r1, [r4, #20]
 80047be:	6030      	str	r0, [r6, #0]
 80047c0:	062e      	lsls	r6, r5, #24
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	d501      	bpl.n	80047ca <_printf_i+0x1c2>
 80047c6:	6019      	str	r1, [r3, #0]
 80047c8:	e002      	b.n	80047d0 <_printf_i+0x1c8>
 80047ca:	0668      	lsls	r0, r5, #25
 80047cc:	d5fb      	bpl.n	80047c6 <_printf_i+0x1be>
 80047ce:	8019      	strh	r1, [r3, #0]
 80047d0:	2300      	movs	r3, #0
 80047d2:	4616      	mov	r6, r2
 80047d4:	6123      	str	r3, [r4, #16]
 80047d6:	e7bc      	b.n	8004752 <_printf_i+0x14a>
 80047d8:	6833      	ldr	r3, [r6, #0]
 80047da:	2100      	movs	r1, #0
 80047dc:	1d1a      	adds	r2, r3, #4
 80047de:	6032      	str	r2, [r6, #0]
 80047e0:	681e      	ldr	r6, [r3, #0]
 80047e2:	6862      	ldr	r2, [r4, #4]
 80047e4:	4630      	mov	r0, r6
 80047e6:	f000 f97b 	bl	8004ae0 <memchr>
 80047ea:	b108      	cbz	r0, 80047f0 <_printf_i+0x1e8>
 80047ec:	1b80      	subs	r0, r0, r6
 80047ee:	6060      	str	r0, [r4, #4]
 80047f0:	6863      	ldr	r3, [r4, #4]
 80047f2:	6123      	str	r3, [r4, #16]
 80047f4:	2300      	movs	r3, #0
 80047f6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80047fa:	e7aa      	b.n	8004752 <_printf_i+0x14a>
 80047fc:	4632      	mov	r2, r6
 80047fe:	4649      	mov	r1, r9
 8004800:	4640      	mov	r0, r8
 8004802:	6923      	ldr	r3, [r4, #16]
 8004804:	47d0      	blx	sl
 8004806:	3001      	adds	r0, #1
 8004808:	d0ad      	beq.n	8004766 <_printf_i+0x15e>
 800480a:	6823      	ldr	r3, [r4, #0]
 800480c:	079b      	lsls	r3, r3, #30
 800480e:	d413      	bmi.n	8004838 <_printf_i+0x230>
 8004810:	68e0      	ldr	r0, [r4, #12]
 8004812:	9b03      	ldr	r3, [sp, #12]
 8004814:	4298      	cmp	r0, r3
 8004816:	bfb8      	it	lt
 8004818:	4618      	movlt	r0, r3
 800481a:	e7a6      	b.n	800476a <_printf_i+0x162>
 800481c:	2301      	movs	r3, #1
 800481e:	4632      	mov	r2, r6
 8004820:	4649      	mov	r1, r9
 8004822:	4640      	mov	r0, r8
 8004824:	47d0      	blx	sl
 8004826:	3001      	adds	r0, #1
 8004828:	d09d      	beq.n	8004766 <_printf_i+0x15e>
 800482a:	3501      	adds	r5, #1
 800482c:	68e3      	ldr	r3, [r4, #12]
 800482e:	9903      	ldr	r1, [sp, #12]
 8004830:	1a5b      	subs	r3, r3, r1
 8004832:	42ab      	cmp	r3, r5
 8004834:	dcf2      	bgt.n	800481c <_printf_i+0x214>
 8004836:	e7eb      	b.n	8004810 <_printf_i+0x208>
 8004838:	2500      	movs	r5, #0
 800483a:	f104 0619 	add.w	r6, r4, #25
 800483e:	e7f5      	b.n	800482c <_printf_i+0x224>
 8004840:	08004c7b 	.word	0x08004c7b
 8004844:	08004c8c 	.word	0x08004c8c

08004848 <__sflush_r>:
 8004848:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800484c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800484e:	0716      	lsls	r6, r2, #28
 8004850:	4605      	mov	r5, r0
 8004852:	460c      	mov	r4, r1
 8004854:	d454      	bmi.n	8004900 <__sflush_r+0xb8>
 8004856:	684b      	ldr	r3, [r1, #4]
 8004858:	2b00      	cmp	r3, #0
 800485a:	dc02      	bgt.n	8004862 <__sflush_r+0x1a>
 800485c:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800485e:	2b00      	cmp	r3, #0
 8004860:	dd48      	ble.n	80048f4 <__sflush_r+0xac>
 8004862:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004864:	2e00      	cmp	r6, #0
 8004866:	d045      	beq.n	80048f4 <__sflush_r+0xac>
 8004868:	2300      	movs	r3, #0
 800486a:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800486e:	682f      	ldr	r7, [r5, #0]
 8004870:	6a21      	ldr	r1, [r4, #32]
 8004872:	602b      	str	r3, [r5, #0]
 8004874:	d030      	beq.n	80048d8 <__sflush_r+0x90>
 8004876:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004878:	89a3      	ldrh	r3, [r4, #12]
 800487a:	0759      	lsls	r1, r3, #29
 800487c:	d505      	bpl.n	800488a <__sflush_r+0x42>
 800487e:	6863      	ldr	r3, [r4, #4]
 8004880:	1ad2      	subs	r2, r2, r3
 8004882:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004884:	b10b      	cbz	r3, 800488a <__sflush_r+0x42>
 8004886:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004888:	1ad2      	subs	r2, r2, r3
 800488a:	2300      	movs	r3, #0
 800488c:	4628      	mov	r0, r5
 800488e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004890:	6a21      	ldr	r1, [r4, #32]
 8004892:	47b0      	blx	r6
 8004894:	1c43      	adds	r3, r0, #1
 8004896:	89a3      	ldrh	r3, [r4, #12]
 8004898:	d106      	bne.n	80048a8 <__sflush_r+0x60>
 800489a:	6829      	ldr	r1, [r5, #0]
 800489c:	291d      	cmp	r1, #29
 800489e:	d82b      	bhi.n	80048f8 <__sflush_r+0xb0>
 80048a0:	4a28      	ldr	r2, [pc, #160]	@ (8004944 <__sflush_r+0xfc>)
 80048a2:	410a      	asrs	r2, r1
 80048a4:	07d6      	lsls	r6, r2, #31
 80048a6:	d427      	bmi.n	80048f8 <__sflush_r+0xb0>
 80048a8:	2200      	movs	r2, #0
 80048aa:	6062      	str	r2, [r4, #4]
 80048ac:	6922      	ldr	r2, [r4, #16]
 80048ae:	04d9      	lsls	r1, r3, #19
 80048b0:	6022      	str	r2, [r4, #0]
 80048b2:	d504      	bpl.n	80048be <__sflush_r+0x76>
 80048b4:	1c42      	adds	r2, r0, #1
 80048b6:	d101      	bne.n	80048bc <__sflush_r+0x74>
 80048b8:	682b      	ldr	r3, [r5, #0]
 80048ba:	b903      	cbnz	r3, 80048be <__sflush_r+0x76>
 80048bc:	6560      	str	r0, [r4, #84]	@ 0x54
 80048be:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80048c0:	602f      	str	r7, [r5, #0]
 80048c2:	b1b9      	cbz	r1, 80048f4 <__sflush_r+0xac>
 80048c4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80048c8:	4299      	cmp	r1, r3
 80048ca:	d002      	beq.n	80048d2 <__sflush_r+0x8a>
 80048cc:	4628      	mov	r0, r5
 80048ce:	f7ff fbf3 	bl	80040b8 <_free_r>
 80048d2:	2300      	movs	r3, #0
 80048d4:	6363      	str	r3, [r4, #52]	@ 0x34
 80048d6:	e00d      	b.n	80048f4 <__sflush_r+0xac>
 80048d8:	2301      	movs	r3, #1
 80048da:	4628      	mov	r0, r5
 80048dc:	47b0      	blx	r6
 80048de:	4602      	mov	r2, r0
 80048e0:	1c50      	adds	r0, r2, #1
 80048e2:	d1c9      	bne.n	8004878 <__sflush_r+0x30>
 80048e4:	682b      	ldr	r3, [r5, #0]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d0c6      	beq.n	8004878 <__sflush_r+0x30>
 80048ea:	2b1d      	cmp	r3, #29
 80048ec:	d001      	beq.n	80048f2 <__sflush_r+0xaa>
 80048ee:	2b16      	cmp	r3, #22
 80048f0:	d11d      	bne.n	800492e <__sflush_r+0xe6>
 80048f2:	602f      	str	r7, [r5, #0]
 80048f4:	2000      	movs	r0, #0
 80048f6:	e021      	b.n	800493c <__sflush_r+0xf4>
 80048f8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80048fc:	b21b      	sxth	r3, r3
 80048fe:	e01a      	b.n	8004936 <__sflush_r+0xee>
 8004900:	690f      	ldr	r7, [r1, #16]
 8004902:	2f00      	cmp	r7, #0
 8004904:	d0f6      	beq.n	80048f4 <__sflush_r+0xac>
 8004906:	0793      	lsls	r3, r2, #30
 8004908:	bf18      	it	ne
 800490a:	2300      	movne	r3, #0
 800490c:	680e      	ldr	r6, [r1, #0]
 800490e:	bf08      	it	eq
 8004910:	694b      	ldreq	r3, [r1, #20]
 8004912:	1bf6      	subs	r6, r6, r7
 8004914:	600f      	str	r7, [r1, #0]
 8004916:	608b      	str	r3, [r1, #8]
 8004918:	2e00      	cmp	r6, #0
 800491a:	ddeb      	ble.n	80048f4 <__sflush_r+0xac>
 800491c:	4633      	mov	r3, r6
 800491e:	463a      	mov	r2, r7
 8004920:	4628      	mov	r0, r5
 8004922:	6a21      	ldr	r1, [r4, #32]
 8004924:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8004928:	47e0      	blx	ip
 800492a:	2800      	cmp	r0, #0
 800492c:	dc07      	bgt.n	800493e <__sflush_r+0xf6>
 800492e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004932:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004936:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800493a:	81a3      	strh	r3, [r4, #12]
 800493c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800493e:	4407      	add	r7, r0
 8004940:	1a36      	subs	r6, r6, r0
 8004942:	e7e9      	b.n	8004918 <__sflush_r+0xd0>
 8004944:	dfbffffe 	.word	0xdfbffffe

08004948 <_fflush_r>:
 8004948:	b538      	push	{r3, r4, r5, lr}
 800494a:	690b      	ldr	r3, [r1, #16]
 800494c:	4605      	mov	r5, r0
 800494e:	460c      	mov	r4, r1
 8004950:	b913      	cbnz	r3, 8004958 <_fflush_r+0x10>
 8004952:	2500      	movs	r5, #0
 8004954:	4628      	mov	r0, r5
 8004956:	bd38      	pop	{r3, r4, r5, pc}
 8004958:	b118      	cbz	r0, 8004962 <_fflush_r+0x1a>
 800495a:	6a03      	ldr	r3, [r0, #32]
 800495c:	b90b      	cbnz	r3, 8004962 <_fflush_r+0x1a>
 800495e:	f7ff faa3 	bl	8003ea8 <__sinit>
 8004962:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d0f3      	beq.n	8004952 <_fflush_r+0xa>
 800496a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800496c:	07d0      	lsls	r0, r2, #31
 800496e:	d404      	bmi.n	800497a <_fflush_r+0x32>
 8004970:	0599      	lsls	r1, r3, #22
 8004972:	d402      	bmi.n	800497a <_fflush_r+0x32>
 8004974:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004976:	f7ff fb9c 	bl	80040b2 <__retarget_lock_acquire_recursive>
 800497a:	4628      	mov	r0, r5
 800497c:	4621      	mov	r1, r4
 800497e:	f7ff ff63 	bl	8004848 <__sflush_r>
 8004982:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004984:	4605      	mov	r5, r0
 8004986:	07da      	lsls	r2, r3, #31
 8004988:	d4e4      	bmi.n	8004954 <_fflush_r+0xc>
 800498a:	89a3      	ldrh	r3, [r4, #12]
 800498c:	059b      	lsls	r3, r3, #22
 800498e:	d4e1      	bmi.n	8004954 <_fflush_r+0xc>
 8004990:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004992:	f7ff fb8f 	bl	80040b4 <__retarget_lock_release_recursive>
 8004996:	e7dd      	b.n	8004954 <_fflush_r+0xc>

08004998 <__swbuf_r>:
 8004998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800499a:	460e      	mov	r6, r1
 800499c:	4614      	mov	r4, r2
 800499e:	4605      	mov	r5, r0
 80049a0:	b118      	cbz	r0, 80049aa <__swbuf_r+0x12>
 80049a2:	6a03      	ldr	r3, [r0, #32]
 80049a4:	b90b      	cbnz	r3, 80049aa <__swbuf_r+0x12>
 80049a6:	f7ff fa7f 	bl	8003ea8 <__sinit>
 80049aa:	69a3      	ldr	r3, [r4, #24]
 80049ac:	60a3      	str	r3, [r4, #8]
 80049ae:	89a3      	ldrh	r3, [r4, #12]
 80049b0:	071a      	lsls	r2, r3, #28
 80049b2:	d501      	bpl.n	80049b8 <__swbuf_r+0x20>
 80049b4:	6923      	ldr	r3, [r4, #16]
 80049b6:	b943      	cbnz	r3, 80049ca <__swbuf_r+0x32>
 80049b8:	4621      	mov	r1, r4
 80049ba:	4628      	mov	r0, r5
 80049bc:	f000 f82a 	bl	8004a14 <__swsetup_r>
 80049c0:	b118      	cbz	r0, 80049ca <__swbuf_r+0x32>
 80049c2:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80049c6:	4638      	mov	r0, r7
 80049c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80049ca:	6823      	ldr	r3, [r4, #0]
 80049cc:	6922      	ldr	r2, [r4, #16]
 80049ce:	b2f6      	uxtb	r6, r6
 80049d0:	1a98      	subs	r0, r3, r2
 80049d2:	6963      	ldr	r3, [r4, #20]
 80049d4:	4637      	mov	r7, r6
 80049d6:	4283      	cmp	r3, r0
 80049d8:	dc05      	bgt.n	80049e6 <__swbuf_r+0x4e>
 80049da:	4621      	mov	r1, r4
 80049dc:	4628      	mov	r0, r5
 80049de:	f7ff ffb3 	bl	8004948 <_fflush_r>
 80049e2:	2800      	cmp	r0, #0
 80049e4:	d1ed      	bne.n	80049c2 <__swbuf_r+0x2a>
 80049e6:	68a3      	ldr	r3, [r4, #8]
 80049e8:	3b01      	subs	r3, #1
 80049ea:	60a3      	str	r3, [r4, #8]
 80049ec:	6823      	ldr	r3, [r4, #0]
 80049ee:	1c5a      	adds	r2, r3, #1
 80049f0:	6022      	str	r2, [r4, #0]
 80049f2:	701e      	strb	r6, [r3, #0]
 80049f4:	6962      	ldr	r2, [r4, #20]
 80049f6:	1c43      	adds	r3, r0, #1
 80049f8:	429a      	cmp	r2, r3
 80049fa:	d004      	beq.n	8004a06 <__swbuf_r+0x6e>
 80049fc:	89a3      	ldrh	r3, [r4, #12]
 80049fe:	07db      	lsls	r3, r3, #31
 8004a00:	d5e1      	bpl.n	80049c6 <__swbuf_r+0x2e>
 8004a02:	2e0a      	cmp	r6, #10
 8004a04:	d1df      	bne.n	80049c6 <__swbuf_r+0x2e>
 8004a06:	4621      	mov	r1, r4
 8004a08:	4628      	mov	r0, r5
 8004a0a:	f7ff ff9d 	bl	8004948 <_fflush_r>
 8004a0e:	2800      	cmp	r0, #0
 8004a10:	d0d9      	beq.n	80049c6 <__swbuf_r+0x2e>
 8004a12:	e7d6      	b.n	80049c2 <__swbuf_r+0x2a>

08004a14 <__swsetup_r>:
 8004a14:	b538      	push	{r3, r4, r5, lr}
 8004a16:	4b29      	ldr	r3, [pc, #164]	@ (8004abc <__swsetup_r+0xa8>)
 8004a18:	4605      	mov	r5, r0
 8004a1a:	6818      	ldr	r0, [r3, #0]
 8004a1c:	460c      	mov	r4, r1
 8004a1e:	b118      	cbz	r0, 8004a28 <__swsetup_r+0x14>
 8004a20:	6a03      	ldr	r3, [r0, #32]
 8004a22:	b90b      	cbnz	r3, 8004a28 <__swsetup_r+0x14>
 8004a24:	f7ff fa40 	bl	8003ea8 <__sinit>
 8004a28:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004a2c:	0719      	lsls	r1, r3, #28
 8004a2e:	d422      	bmi.n	8004a76 <__swsetup_r+0x62>
 8004a30:	06da      	lsls	r2, r3, #27
 8004a32:	d407      	bmi.n	8004a44 <__swsetup_r+0x30>
 8004a34:	2209      	movs	r2, #9
 8004a36:	602a      	str	r2, [r5, #0]
 8004a38:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004a3c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004a40:	81a3      	strh	r3, [r4, #12]
 8004a42:	e033      	b.n	8004aac <__swsetup_r+0x98>
 8004a44:	0758      	lsls	r0, r3, #29
 8004a46:	d512      	bpl.n	8004a6e <__swsetup_r+0x5a>
 8004a48:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004a4a:	b141      	cbz	r1, 8004a5e <__swsetup_r+0x4a>
 8004a4c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004a50:	4299      	cmp	r1, r3
 8004a52:	d002      	beq.n	8004a5a <__swsetup_r+0x46>
 8004a54:	4628      	mov	r0, r5
 8004a56:	f7ff fb2f 	bl	80040b8 <_free_r>
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	6363      	str	r3, [r4, #52]	@ 0x34
 8004a5e:	89a3      	ldrh	r3, [r4, #12]
 8004a60:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004a64:	81a3      	strh	r3, [r4, #12]
 8004a66:	2300      	movs	r3, #0
 8004a68:	6063      	str	r3, [r4, #4]
 8004a6a:	6923      	ldr	r3, [r4, #16]
 8004a6c:	6023      	str	r3, [r4, #0]
 8004a6e:	89a3      	ldrh	r3, [r4, #12]
 8004a70:	f043 0308 	orr.w	r3, r3, #8
 8004a74:	81a3      	strh	r3, [r4, #12]
 8004a76:	6923      	ldr	r3, [r4, #16]
 8004a78:	b94b      	cbnz	r3, 8004a8e <__swsetup_r+0x7a>
 8004a7a:	89a3      	ldrh	r3, [r4, #12]
 8004a7c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004a80:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004a84:	d003      	beq.n	8004a8e <__swsetup_r+0x7a>
 8004a86:	4621      	mov	r1, r4
 8004a88:	4628      	mov	r0, r5
 8004a8a:	f000 f85c 	bl	8004b46 <__smakebuf_r>
 8004a8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004a92:	f013 0201 	ands.w	r2, r3, #1
 8004a96:	d00a      	beq.n	8004aae <__swsetup_r+0x9a>
 8004a98:	2200      	movs	r2, #0
 8004a9a:	60a2      	str	r2, [r4, #8]
 8004a9c:	6962      	ldr	r2, [r4, #20]
 8004a9e:	4252      	negs	r2, r2
 8004aa0:	61a2      	str	r2, [r4, #24]
 8004aa2:	6922      	ldr	r2, [r4, #16]
 8004aa4:	b942      	cbnz	r2, 8004ab8 <__swsetup_r+0xa4>
 8004aa6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004aaa:	d1c5      	bne.n	8004a38 <__swsetup_r+0x24>
 8004aac:	bd38      	pop	{r3, r4, r5, pc}
 8004aae:	0799      	lsls	r1, r3, #30
 8004ab0:	bf58      	it	pl
 8004ab2:	6962      	ldrpl	r2, [r4, #20]
 8004ab4:	60a2      	str	r2, [r4, #8]
 8004ab6:	e7f4      	b.n	8004aa2 <__swsetup_r+0x8e>
 8004ab8:	2000      	movs	r0, #0
 8004aba:	e7f7      	b.n	8004aac <__swsetup_r+0x98>
 8004abc:	20000018 	.word	0x20000018

08004ac0 <_sbrk_r>:
 8004ac0:	b538      	push	{r3, r4, r5, lr}
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	4d05      	ldr	r5, [pc, #20]	@ (8004adc <_sbrk_r+0x1c>)
 8004ac6:	4604      	mov	r4, r0
 8004ac8:	4608      	mov	r0, r1
 8004aca:	602b      	str	r3, [r5, #0]
 8004acc:	f7fb ff8c 	bl	80009e8 <_sbrk>
 8004ad0:	1c43      	adds	r3, r0, #1
 8004ad2:	d102      	bne.n	8004ada <_sbrk_r+0x1a>
 8004ad4:	682b      	ldr	r3, [r5, #0]
 8004ad6:	b103      	cbz	r3, 8004ada <_sbrk_r+0x1a>
 8004ad8:	6023      	str	r3, [r4, #0]
 8004ada:	bd38      	pop	{r3, r4, r5, pc}
 8004adc:	200002e8 	.word	0x200002e8

08004ae0 <memchr>:
 8004ae0:	4603      	mov	r3, r0
 8004ae2:	b510      	push	{r4, lr}
 8004ae4:	b2c9      	uxtb	r1, r1
 8004ae6:	4402      	add	r2, r0
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	4618      	mov	r0, r3
 8004aec:	d101      	bne.n	8004af2 <memchr+0x12>
 8004aee:	2000      	movs	r0, #0
 8004af0:	e003      	b.n	8004afa <memchr+0x1a>
 8004af2:	7804      	ldrb	r4, [r0, #0]
 8004af4:	3301      	adds	r3, #1
 8004af6:	428c      	cmp	r4, r1
 8004af8:	d1f6      	bne.n	8004ae8 <memchr+0x8>
 8004afa:	bd10      	pop	{r4, pc}

08004afc <__swhatbuf_r>:
 8004afc:	b570      	push	{r4, r5, r6, lr}
 8004afe:	460c      	mov	r4, r1
 8004b00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b04:	4615      	mov	r5, r2
 8004b06:	2900      	cmp	r1, #0
 8004b08:	461e      	mov	r6, r3
 8004b0a:	b096      	sub	sp, #88	@ 0x58
 8004b0c:	da0c      	bge.n	8004b28 <__swhatbuf_r+0x2c>
 8004b0e:	89a3      	ldrh	r3, [r4, #12]
 8004b10:	2100      	movs	r1, #0
 8004b12:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004b16:	bf14      	ite	ne
 8004b18:	2340      	movne	r3, #64	@ 0x40
 8004b1a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004b1e:	2000      	movs	r0, #0
 8004b20:	6031      	str	r1, [r6, #0]
 8004b22:	602b      	str	r3, [r5, #0]
 8004b24:	b016      	add	sp, #88	@ 0x58
 8004b26:	bd70      	pop	{r4, r5, r6, pc}
 8004b28:	466a      	mov	r2, sp
 8004b2a:	f000 f849 	bl	8004bc0 <_fstat_r>
 8004b2e:	2800      	cmp	r0, #0
 8004b30:	dbed      	blt.n	8004b0e <__swhatbuf_r+0x12>
 8004b32:	9901      	ldr	r1, [sp, #4]
 8004b34:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8004b38:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8004b3c:	4259      	negs	r1, r3
 8004b3e:	4159      	adcs	r1, r3
 8004b40:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004b44:	e7eb      	b.n	8004b1e <__swhatbuf_r+0x22>

08004b46 <__smakebuf_r>:
 8004b46:	898b      	ldrh	r3, [r1, #12]
 8004b48:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004b4a:	079d      	lsls	r5, r3, #30
 8004b4c:	4606      	mov	r6, r0
 8004b4e:	460c      	mov	r4, r1
 8004b50:	d507      	bpl.n	8004b62 <__smakebuf_r+0x1c>
 8004b52:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004b56:	6023      	str	r3, [r4, #0]
 8004b58:	6123      	str	r3, [r4, #16]
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	6163      	str	r3, [r4, #20]
 8004b5e:	b003      	add	sp, #12
 8004b60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004b62:	466a      	mov	r2, sp
 8004b64:	ab01      	add	r3, sp, #4
 8004b66:	f7ff ffc9 	bl	8004afc <__swhatbuf_r>
 8004b6a:	9f00      	ldr	r7, [sp, #0]
 8004b6c:	4605      	mov	r5, r0
 8004b6e:	4639      	mov	r1, r7
 8004b70:	4630      	mov	r0, r6
 8004b72:	f7ff fb0b 	bl	800418c <_malloc_r>
 8004b76:	b948      	cbnz	r0, 8004b8c <__smakebuf_r+0x46>
 8004b78:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004b7c:	059a      	lsls	r2, r3, #22
 8004b7e:	d4ee      	bmi.n	8004b5e <__smakebuf_r+0x18>
 8004b80:	f023 0303 	bic.w	r3, r3, #3
 8004b84:	f043 0302 	orr.w	r3, r3, #2
 8004b88:	81a3      	strh	r3, [r4, #12]
 8004b8a:	e7e2      	b.n	8004b52 <__smakebuf_r+0xc>
 8004b8c:	89a3      	ldrh	r3, [r4, #12]
 8004b8e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8004b92:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004b96:	81a3      	strh	r3, [r4, #12]
 8004b98:	9b01      	ldr	r3, [sp, #4]
 8004b9a:	6020      	str	r0, [r4, #0]
 8004b9c:	b15b      	cbz	r3, 8004bb6 <__smakebuf_r+0x70>
 8004b9e:	4630      	mov	r0, r6
 8004ba0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004ba4:	f000 f81e 	bl	8004be4 <_isatty_r>
 8004ba8:	b128      	cbz	r0, 8004bb6 <__smakebuf_r+0x70>
 8004baa:	89a3      	ldrh	r3, [r4, #12]
 8004bac:	f023 0303 	bic.w	r3, r3, #3
 8004bb0:	f043 0301 	orr.w	r3, r3, #1
 8004bb4:	81a3      	strh	r3, [r4, #12]
 8004bb6:	89a3      	ldrh	r3, [r4, #12]
 8004bb8:	431d      	orrs	r5, r3
 8004bba:	81a5      	strh	r5, [r4, #12]
 8004bbc:	e7cf      	b.n	8004b5e <__smakebuf_r+0x18>
	...

08004bc0 <_fstat_r>:
 8004bc0:	b538      	push	{r3, r4, r5, lr}
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	4d06      	ldr	r5, [pc, #24]	@ (8004be0 <_fstat_r+0x20>)
 8004bc6:	4604      	mov	r4, r0
 8004bc8:	4608      	mov	r0, r1
 8004bca:	4611      	mov	r1, r2
 8004bcc:	602b      	str	r3, [r5, #0]
 8004bce:	f7fb fee5 	bl	800099c <_fstat>
 8004bd2:	1c43      	adds	r3, r0, #1
 8004bd4:	d102      	bne.n	8004bdc <_fstat_r+0x1c>
 8004bd6:	682b      	ldr	r3, [r5, #0]
 8004bd8:	b103      	cbz	r3, 8004bdc <_fstat_r+0x1c>
 8004bda:	6023      	str	r3, [r4, #0]
 8004bdc:	bd38      	pop	{r3, r4, r5, pc}
 8004bde:	bf00      	nop
 8004be0:	200002e8 	.word	0x200002e8

08004be4 <_isatty_r>:
 8004be4:	b538      	push	{r3, r4, r5, lr}
 8004be6:	2300      	movs	r3, #0
 8004be8:	4d05      	ldr	r5, [pc, #20]	@ (8004c00 <_isatty_r+0x1c>)
 8004bea:	4604      	mov	r4, r0
 8004bec:	4608      	mov	r0, r1
 8004bee:	602b      	str	r3, [r5, #0]
 8004bf0:	f7fb fee3 	bl	80009ba <_isatty>
 8004bf4:	1c43      	adds	r3, r0, #1
 8004bf6:	d102      	bne.n	8004bfe <_isatty_r+0x1a>
 8004bf8:	682b      	ldr	r3, [r5, #0]
 8004bfa:	b103      	cbz	r3, 8004bfe <_isatty_r+0x1a>
 8004bfc:	6023      	str	r3, [r4, #0]
 8004bfe:	bd38      	pop	{r3, r4, r5, pc}
 8004c00:	200002e8 	.word	0x200002e8

08004c04 <_init>:
 8004c04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c06:	bf00      	nop
 8004c08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c0a:	bc08      	pop	{r3}
 8004c0c:	469e      	mov	lr, r3
 8004c0e:	4770      	bx	lr

08004c10 <_fini>:
 8004c10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c12:	bf00      	nop
 8004c14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c16:	bc08      	pop	{r3}
 8004c18:	469e      	mov	lr, r3
 8004c1a:	4770      	bx	lr
