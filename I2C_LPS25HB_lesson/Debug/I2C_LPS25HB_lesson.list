
I2C_LPS25HB_lesson.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006754  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003e0  08006868  08006868  00007868  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006c48  08006c48  000081d4  2**0
                  CONTENTS
  4 .ARM          00000008  08006c48  08006c48  00007c48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006c50  08006c50  000081d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006c50  08006c50  00007c50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006c54  08006c54  00007c54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08006c58  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000020c  200001d4  08006e2c  000081d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003e0  08006e2c  000083e0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000081d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a0f4  00000000  00000000  000081fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d32  00000000  00000000  000122f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a10  00000000  00000000  00014028  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007bf  00000000  00000000  00014a38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000185c6  00000000  00000000  000151f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d0d9  00000000  00000000  0002d7bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086c51  00000000  00000000  0003a896  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c14e7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000039c8  00000000  00000000  000c152c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  000c4ef4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d4 	.word	0x200001d4
 800012c:	00000000 	.word	0x00000000
 8000130:	0800684c 	.word	0x0800684c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001d8 	.word	0x200001d8
 800014c:	0800684c 	.word	0x0800684c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	@ 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	3a01      	subs	r2, #1
 8000be2:	bf28      	it	cs
 8000be4:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000be8:	d2ed      	bcs.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_fmul>:
 8000d44:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d52:	ea92 0f0c 	teqne	r2, ip
 8000d56:	ea93 0f0c 	teqne	r3, ip
 8000d5a:	d06f      	beq.n	8000e3c <__aeabi_fmul+0xf8>
 8000d5c:	441a      	add	r2, r3
 8000d5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d62:	0240      	lsls	r0, r0, #9
 8000d64:	bf18      	it	ne
 8000d66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6a:	d01e      	beq.n	8000daa <__aeabi_fmul+0x66>
 8000d6c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000d70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d78:	fba0 3101 	umull	r3, r1, r0, r1
 8000d7c:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000d80:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000d84:	bf3e      	ittt	cc
 8000d86:	0049      	lslcc	r1, r1, #1
 8000d88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	ea40 0001 	orr.w	r0, r0, r1
 8000d92:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000d96:	2afd      	cmp	r2, #253	@ 0xfd
 8000d98:	d81d      	bhi.n	8000dd6 <__aeabi_fmul+0x92>
 8000d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000d9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da2:	bf08      	it	eq
 8000da4:	f020 0001 	biceq.w	r0, r0, #1
 8000da8:	4770      	bx	lr
 8000daa:	f090 0f00 	teq	r0, #0
 8000dae:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000db2:	bf08      	it	eq
 8000db4:	0249      	lsleq	r1, r1, #9
 8000db6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dbe:	3a7f      	subs	r2, #127	@ 0x7f
 8000dc0:	bfc2      	ittt	gt
 8000dc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000dc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dca:	4770      	bxgt	lr
 8000dcc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	3a01      	subs	r2, #1
 8000dd6:	dc5d      	bgt.n	8000e94 <__aeabi_fmul+0x150>
 8000dd8:	f112 0f19 	cmn.w	r2, #25
 8000ddc:	bfdc      	itt	le
 8000dde:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000de2:	4770      	bxle	lr
 8000de4:	f1c2 0200 	rsb	r2, r2, #0
 8000de8:	0041      	lsls	r1, r0, #1
 8000dea:	fa21 f102 	lsr.w	r1, r1, r2
 8000dee:	f1c2 0220 	rsb	r2, r2, #32
 8000df2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfa:	f140 0000 	adc.w	r0, r0, #0
 8000dfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e02:	bf08      	it	eq
 8000e04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e08:	4770      	bx	lr
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fmul+0xce>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fmul+0xe6>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e78f      	b.n	8000d5c <__aeabi_fmul+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	bf18      	it	ne
 8000e46:	ea93 0f0c 	teqne	r3, ip
 8000e4a:	d00a      	beq.n	8000e62 <__aeabi_fmul+0x11e>
 8000e4c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e50:	bf18      	it	ne
 8000e52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e56:	d1d8      	bne.n	8000e0a <__aeabi_fmul+0xc6>
 8000e58:	ea80 0001 	eor.w	r0, r0, r1
 8000e5c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	bf17      	itett	ne
 8000e68:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000e6c:	4608      	moveq	r0, r1
 8000e6e:	f091 0f00 	teqne	r1, #0
 8000e72:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000e76:	d014      	beq.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	d101      	bne.n	8000e82 <__aeabi_fmul+0x13e>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	d10f      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e82:	ea93 0f0c 	teq	r3, ip
 8000e86:	d103      	bne.n	8000e90 <__aeabi_fmul+0x14c>
 8000e88:	024b      	lsls	r3, r1, #9
 8000e8a:	bf18      	it	ne
 8000e8c:	4608      	movne	r0, r1
 8000e8e:	d108      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e98:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ea0:	4770      	bx	lr
 8000ea2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ea6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000eaa:	4770      	bx	lr

08000eac <__aeabi_fdiv>:
 8000eac:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000eb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb4:	bf1e      	ittt	ne
 8000eb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eba:	ea92 0f0c 	teqne	r2, ip
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d069      	beq.n	8000f98 <__aeabi_fdiv+0xec>
 8000ec4:	eba2 0203 	sub.w	r2, r2, r3
 8000ec8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ecc:	0249      	lsls	r1, r1, #9
 8000ece:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed2:	d037      	beq.n	8000f44 <__aeabi_fdiv+0x98>
 8000ed4:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000ed8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000edc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	bf38      	it	cc
 8000ee8:	005b      	lslcc	r3, r3, #1
 8000eea:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000eee:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	bf24      	itt	cs
 8000ef6:	1a5b      	subcs	r3, r3, r1
 8000ef8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000efc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f00:	bf24      	itt	cs
 8000f02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0e:	bf24      	itt	cs
 8000f10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f1c:	bf24      	itt	cs
 8000f1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	bf18      	it	ne
 8000f2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2e:	d1e0      	bne.n	8000ef2 <__aeabi_fdiv+0x46>
 8000f30:	2afd      	cmp	r2, #253	@ 0xfd
 8000f32:	f63f af50 	bhi.w	8000dd6 <__aeabi_fmul+0x92>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f3c:	bf08      	it	eq
 8000f3e:	f020 0001 	biceq.w	r0, r0, #1
 8000f42:	4770      	bx	lr
 8000f44:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f4c:	327f      	adds	r2, #127	@ 0x7f
 8000f4e:	bfc2      	ittt	gt
 8000f50:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f58:	4770      	bxgt	lr
 8000f5a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	3a01      	subs	r2, #1
 8000f64:	e737      	b.n	8000dd6 <__aeabi_fmul+0x92>
 8000f66:	f092 0f00 	teq	r2, #0
 8000f6a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000f6e:	bf02      	ittt	eq
 8000f70:	0040      	lsleq	r0, r0, #1
 8000f72:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000f76:	3a01      	subeq	r2, #1
 8000f78:	d0f9      	beq.n	8000f6e <__aeabi_fdiv+0xc2>
 8000f7a:	ea40 000c 	orr.w	r0, r0, ip
 8000f7e:	f093 0f00 	teq	r3, #0
 8000f82:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000f86:	bf02      	ittt	eq
 8000f88:	0049      	lsleq	r1, r1, #1
 8000f8a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000f8e:	3b01      	subeq	r3, #1
 8000f90:	d0f9      	beq.n	8000f86 <__aeabi_fdiv+0xda>
 8000f92:	ea41 010c 	orr.w	r1, r1, ip
 8000f96:	e795      	b.n	8000ec4 <__aeabi_fdiv+0x18>
 8000f98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f9c:	ea92 0f0c 	teq	r2, ip
 8000fa0:	d108      	bne.n	8000fb4 <__aeabi_fdiv+0x108>
 8000fa2:	0242      	lsls	r2, r0, #9
 8000fa4:	f47f af7d 	bne.w	8000ea2 <__aeabi_fmul+0x15e>
 8000fa8:	ea93 0f0c 	teq	r3, ip
 8000fac:	f47f af70 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e776      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fb4:	ea93 0f0c 	teq	r3, ip
 8000fb8:	d104      	bne.n	8000fc4 <__aeabi_fdiv+0x118>
 8000fba:	024b      	lsls	r3, r1, #9
 8000fbc:	f43f af4c 	beq.w	8000e58 <__aeabi_fmul+0x114>
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	e76e      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fc4:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000fc8:	bf18      	it	ne
 8000fca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000fce:	d1ca      	bne.n	8000f66 <__aeabi_fdiv+0xba>
 8000fd0:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000fd4:	f47f af5c 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fd8:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000fdc:	f47f af3c 	bne.w	8000e58 <__aeabi_fmul+0x114>
 8000fe0:	e75f      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fe2:	bf00      	nop

08000fe4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b083      	sub	sp, #12
 8000fe8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fea:	4b0e      	ldr	r3, [pc, #56]	@ (8001024 <MX_GPIO_Init+0x40>)
 8000fec:	699b      	ldr	r3, [r3, #24]
 8000fee:	4a0d      	ldr	r2, [pc, #52]	@ (8001024 <MX_GPIO_Init+0x40>)
 8000ff0:	f043 0304 	orr.w	r3, r3, #4
 8000ff4:	6193      	str	r3, [r2, #24]
 8000ff6:	4b0b      	ldr	r3, [pc, #44]	@ (8001024 <MX_GPIO_Init+0x40>)
 8000ff8:	699b      	ldr	r3, [r3, #24]
 8000ffa:	f003 0304 	and.w	r3, r3, #4
 8000ffe:	607b      	str	r3, [r7, #4]
 8001000:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001002:	4b08      	ldr	r3, [pc, #32]	@ (8001024 <MX_GPIO_Init+0x40>)
 8001004:	699b      	ldr	r3, [r3, #24]
 8001006:	4a07      	ldr	r2, [pc, #28]	@ (8001024 <MX_GPIO_Init+0x40>)
 8001008:	f043 0308 	orr.w	r3, r3, #8
 800100c:	6193      	str	r3, [r2, #24]
 800100e:	4b05      	ldr	r3, [pc, #20]	@ (8001024 <MX_GPIO_Init+0x40>)
 8001010:	699b      	ldr	r3, [r3, #24]
 8001012:	f003 0308 	and.w	r3, r3, #8
 8001016:	603b      	str	r3, [r7, #0]
 8001018:	683b      	ldr	r3, [r7, #0]

}
 800101a:	bf00      	nop
 800101c:	370c      	adds	r7, #12
 800101e:	46bd      	mov	sp, r7
 8001020:	bc80      	pop	{r7}
 8001022:	4770      	bx	lr
 8001024:	40021000 	.word	0x40021000

08001028 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800102c:	4b12      	ldr	r3, [pc, #72]	@ (8001078 <MX_I2C1_Init+0x50>)
 800102e:	4a13      	ldr	r2, [pc, #76]	@ (800107c <MX_I2C1_Init+0x54>)
 8001030:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001032:	4b11      	ldr	r3, [pc, #68]	@ (8001078 <MX_I2C1_Init+0x50>)
 8001034:	4a12      	ldr	r2, [pc, #72]	@ (8001080 <MX_I2C1_Init+0x58>)
 8001036:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001038:	4b0f      	ldr	r3, [pc, #60]	@ (8001078 <MX_I2C1_Init+0x50>)
 800103a:	2200      	movs	r2, #0
 800103c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800103e:	4b0e      	ldr	r3, [pc, #56]	@ (8001078 <MX_I2C1_Init+0x50>)
 8001040:	2200      	movs	r2, #0
 8001042:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001044:	4b0c      	ldr	r3, [pc, #48]	@ (8001078 <MX_I2C1_Init+0x50>)
 8001046:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800104a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800104c:	4b0a      	ldr	r3, [pc, #40]	@ (8001078 <MX_I2C1_Init+0x50>)
 800104e:	2200      	movs	r2, #0
 8001050:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001052:	4b09      	ldr	r3, [pc, #36]	@ (8001078 <MX_I2C1_Init+0x50>)
 8001054:	2200      	movs	r2, #0
 8001056:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001058:	4b07      	ldr	r3, [pc, #28]	@ (8001078 <MX_I2C1_Init+0x50>)
 800105a:	2200      	movs	r2, #0
 800105c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800105e:	4b06      	ldr	r3, [pc, #24]	@ (8001078 <MX_I2C1_Init+0x50>)
 8001060:	2200      	movs	r2, #0
 8001062:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001064:	4804      	ldr	r0, [pc, #16]	@ (8001078 <MX_I2C1_Init+0x50>)
 8001066:	f000 fe71 	bl	8001d4c <HAL_I2C_Init>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d001      	beq.n	8001074 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001070:	f000 f9b7 	bl	80013e2 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001074:	bf00      	nop
 8001076:	bd80      	pop	{r7, pc}
 8001078:	200001f0 	.word	0x200001f0
 800107c:	40005400 	.word	0x40005400
 8001080:	000186a0 	.word	0x000186a0

08001084 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b088      	sub	sp, #32
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800108c:	f107 0310 	add.w	r3, r7, #16
 8001090:	2200      	movs	r2, #0
 8001092:	601a      	str	r2, [r3, #0]
 8001094:	605a      	str	r2, [r3, #4]
 8001096:	609a      	str	r2, [r3, #8]
 8001098:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	4a15      	ldr	r2, [pc, #84]	@ (80010f4 <HAL_I2C_MspInit+0x70>)
 80010a0:	4293      	cmp	r3, r2
 80010a2:	d123      	bne.n	80010ec <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010a4:	4b14      	ldr	r3, [pc, #80]	@ (80010f8 <HAL_I2C_MspInit+0x74>)
 80010a6:	699b      	ldr	r3, [r3, #24]
 80010a8:	4a13      	ldr	r2, [pc, #76]	@ (80010f8 <HAL_I2C_MspInit+0x74>)
 80010aa:	f043 0308 	orr.w	r3, r3, #8
 80010ae:	6193      	str	r3, [r2, #24]
 80010b0:	4b11      	ldr	r3, [pc, #68]	@ (80010f8 <HAL_I2C_MspInit+0x74>)
 80010b2:	699b      	ldr	r3, [r3, #24]
 80010b4:	f003 0308 	and.w	r3, r3, #8
 80010b8:	60fb      	str	r3, [r7, #12]
 80010ba:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80010bc:	23c0      	movs	r3, #192	@ 0xc0
 80010be:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010c0:	2312      	movs	r3, #18
 80010c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010c4:	2303      	movs	r3, #3
 80010c6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010c8:	f107 0310 	add.w	r3, r7, #16
 80010cc:	4619      	mov	r1, r3
 80010ce:	480b      	ldr	r0, [pc, #44]	@ (80010fc <HAL_I2C_MspInit+0x78>)
 80010d0:	f000 fcb8 	bl	8001a44 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80010d4:	4b08      	ldr	r3, [pc, #32]	@ (80010f8 <HAL_I2C_MspInit+0x74>)
 80010d6:	69db      	ldr	r3, [r3, #28]
 80010d8:	4a07      	ldr	r2, [pc, #28]	@ (80010f8 <HAL_I2C_MspInit+0x74>)
 80010da:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80010de:	61d3      	str	r3, [r2, #28]
 80010e0:	4b05      	ldr	r3, [pc, #20]	@ (80010f8 <HAL_I2C_MspInit+0x74>)
 80010e2:	69db      	ldr	r3, [r3, #28]
 80010e4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80010e8:	60bb      	str	r3, [r7, #8]
 80010ea:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80010ec:	bf00      	nop
 80010ee:	3720      	adds	r7, #32
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	40005400 	.word	0x40005400
 80010f8:	40021000 	.word	0x40021000
 80010fc:	40010c00 	.word	0x40010c00

08001100 <LPS25HB_Read_Register>:
#define LPS25HB_FIFO_CTRL		0x2E

#define TIMEOUT                 100

static uint8_t LPS25HB_Read_Register(uint8_t reg)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b088      	sub	sp, #32
 8001104:	af04      	add	r7, sp, #16
 8001106:	4603      	mov	r3, r0
 8001108:	71fb      	strb	r3, [r7, #7]
	uint8_t value;
	HAL_I2C_Mem_Read(&hi2c1, LPS25HB_ADDR, reg, 1, &value, sizeof(value), TIMEOUT);
 800110a:	79fb      	ldrb	r3, [r7, #7]
 800110c:	b29a      	uxth	r2, r3
 800110e:	2364      	movs	r3, #100	@ 0x64
 8001110:	9302      	str	r3, [sp, #8]
 8001112:	2301      	movs	r3, #1
 8001114:	9301      	str	r3, [sp, #4]
 8001116:	f107 030f 	add.w	r3, r7, #15
 800111a:	9300      	str	r3, [sp, #0]
 800111c:	2301      	movs	r3, #1
 800111e:	21ba      	movs	r1, #186	@ 0xba
 8001120:	4803      	ldr	r0, [pc, #12]	@ (8001130 <LPS25HB_Read_Register+0x30>)
 8001122:	f001 f851 	bl	80021c8 <HAL_I2C_Mem_Read>
	return value;
 8001126:	7bfb      	ldrb	r3, [r7, #15]
}
 8001128:	4618      	mov	r0, r3
 800112a:	3710      	adds	r7, #16
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}
 8001130:	200001f0 	.word	0x200001f0

08001134 <LPS25HB_Write_Register>:

static void LPS25HB_Write_Register(uint8_t reg, uint8_t value)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b086      	sub	sp, #24
 8001138:	af04      	add	r7, sp, #16
 800113a:	4603      	mov	r3, r0
 800113c:	460a      	mov	r2, r1
 800113e:	71fb      	strb	r3, [r7, #7]
 8001140:	4613      	mov	r3, r2
 8001142:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Mem_Write(&hi2c1, LPS25HB_ADDR, reg, 1, &value, sizeof(value), TIMEOUT);
 8001144:	79fb      	ldrb	r3, [r7, #7]
 8001146:	b29a      	uxth	r2, r3
 8001148:	2364      	movs	r3, #100	@ 0x64
 800114a:	9302      	str	r3, [sp, #8]
 800114c:	2301      	movs	r3, #1
 800114e:	9301      	str	r3, [sp, #4]
 8001150:	1dbb      	adds	r3, r7, #6
 8001152:	9300      	str	r3, [sp, #0]
 8001154:	2301      	movs	r3, #1
 8001156:	21ba      	movs	r1, #186	@ 0xba
 8001158:	4803      	ldr	r0, [pc, #12]	@ (8001168 <LPS25HB_Write_Register+0x34>)
 800115a:	f000 ff3b 	bl	8001fd4 <HAL_I2C_Mem_Write>
}
 800115e:	bf00      	nop
 8001160:	3708      	adds	r7, #8
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	200001f0 	.word	0x200001f0

0800116c <LPS25HB_Init>:

HAL_StatusTypeDef LPS25HB_Init(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	af00      	add	r7, sp, #0
	if (LPS25HB_Read_Register(0x0F) != 0xBD)
 8001170:	200f      	movs	r0, #15
 8001172:	f7ff ffc5 	bl	8001100 <LPS25HB_Read_Register>
 8001176:	4603      	mov	r3, r0
 8001178:	2bbd      	cmp	r3, #189	@ 0xbd
 800117a:	d001      	beq.n	8001180 <LPS25HB_Init+0x14>
		return HAL_ERROR;
 800117c:	2301      	movs	r3, #1
 800117e:	e00c      	b.n	800119a <LPS25HB_Init+0x2e>

	LPS25HB_Write_Register(LPS25HB_CTRL_REG1, 0xC0);
 8001180:	21c0      	movs	r1, #192	@ 0xc0
 8001182:	2020      	movs	r0, #32
 8001184:	f7ff ffd6 	bl	8001134 <LPS25HB_Write_Register>
	LPS25HB_Write_Register(LPS25HB_CTRL_REG2, 0x40);
 8001188:	2140      	movs	r1, #64	@ 0x40
 800118a:	2021      	movs	r0, #33	@ 0x21
 800118c:	f7ff ffd2 	bl	8001134 <LPS25HB_Write_Register>
	LPS25HB_Write_Register(LPS25HB_FIFO_CTRL, 0xDF);
 8001190:	21df      	movs	r1, #223	@ 0xdf
 8001192:	202e      	movs	r0, #46	@ 0x2e
 8001194:	f7ff ffce 	bl	8001134 <LPS25HB_Write_Register>

	return HAL_OK;
 8001198:	2300      	movs	r3, #0
}
 800119a:	4618      	mov	r0, r3
 800119c:	bd80      	pop	{r7, pc}
	...

080011a0 <LPS25HB_Read_Temp>:
	LPS25HB_Write_Register(LPS25HB_RPDS_L, value);
	LPS25HB_Write_Register(LPS25HB_RPDS_H, value >> 8);
}

float LPS25HB_Read_Temp(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b086      	sub	sp, #24
 80011a4:	af04      	add	r7, sp, #16
	int16_t temp = 0;
 80011a6:	2300      	movs	r3, #0
 80011a8:	80fb      	strh	r3, [r7, #6]

	if (HAL_I2C_Mem_Read(&hi2c1, LPS25HB_ADDR, LPS25HB_TEMP_OUT_L | 0x80, 1, (uint8_t*)&temp, sizeof(temp), TIMEOUT) != HAL_OK)
 80011aa:	2364      	movs	r3, #100	@ 0x64
 80011ac:	9302      	str	r3, [sp, #8]
 80011ae:	2302      	movs	r3, #2
 80011b0:	9301      	str	r3, [sp, #4]
 80011b2:	1dbb      	adds	r3, r7, #6
 80011b4:	9300      	str	r3, [sp, #0]
 80011b6:	2301      	movs	r3, #1
 80011b8:	22ab      	movs	r2, #171	@ 0xab
 80011ba:	21ba      	movs	r1, #186	@ 0xba
 80011bc:	480d      	ldr	r0, [pc, #52]	@ (80011f4 <LPS25HB_Read_Temp+0x54>)
 80011be:	f001 f803 	bl	80021c8 <HAL_I2C_Mem_Read>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d001      	beq.n	80011cc <LPS25HB_Read_Temp+0x2c>
		Error_Handler();
 80011c8:	f000 f90b 	bl	80013e2 <Error_Handler>

	return 42.5f + temp / 480.0f;
 80011cc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011d0:	4618      	mov	r0, r3
 80011d2:	f7ff fd63 	bl	8000c9c <__aeabi_i2f>
 80011d6:	4603      	mov	r3, r0
 80011d8:	4907      	ldr	r1, [pc, #28]	@ (80011f8 <LPS25HB_Read_Temp+0x58>)
 80011da:	4618      	mov	r0, r3
 80011dc:	f7ff fe66 	bl	8000eac <__aeabi_fdiv>
 80011e0:	4603      	mov	r3, r0
 80011e2:	4906      	ldr	r1, [pc, #24]	@ (80011fc <LPS25HB_Read_Temp+0x5c>)
 80011e4:	4618      	mov	r0, r3
 80011e6:	f7ff fca5 	bl	8000b34 <__addsf3>
 80011ea:	4603      	mov	r3, r0
}
 80011ec:	4618      	mov	r0, r3
 80011ee:	3708      	adds	r7, #8
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	200001f0 	.word	0x200001f0
 80011f8:	43f00000 	.word	0x43f00000
 80011fc:	422a0000 	.word	0x422a0000

08001200 <LPS25HB_Read_Pressure>:

float LPS25HB_Read_Pressure(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b086      	sub	sp, #24
 8001204:	af04      	add	r7, sp, #16
	int32_t pressure = 0;
 8001206:	2300      	movs	r3, #0
 8001208:	607b      	str	r3, [r7, #4]

	if (HAL_I2C_Mem_Read(&hi2c1, LPS25HB_ADDR, LPS25HB_PRESS_OUT_XL | 0x80, 1, (uint8_t*)&pressure, 3, TIMEOUT) != HAL_OK)
 800120a:	2364      	movs	r3, #100	@ 0x64
 800120c:	9302      	str	r3, [sp, #8]
 800120e:	2303      	movs	r3, #3
 8001210:	9301      	str	r3, [sp, #4]
 8001212:	1d3b      	adds	r3, r7, #4
 8001214:	9300      	str	r3, [sp, #0]
 8001216:	2301      	movs	r3, #1
 8001218:	22a8      	movs	r2, #168	@ 0xa8
 800121a:	21ba      	movs	r1, #186	@ 0xba
 800121c:	480b      	ldr	r0, [pc, #44]	@ (800124c <LPS25HB_Read_Pressure+0x4c>)
 800121e:	f000 ffd3 	bl	80021c8 <HAL_I2C_Mem_Read>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d001      	beq.n	800122c <LPS25HB_Read_Pressure+0x2c>
		Error_Handler();
 8001228:	f000 f8db 	bl	80013e2 <Error_Handler>

	return pressure / 4096.0f;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	4618      	mov	r0, r3
 8001230:	f7ff fd34 	bl	8000c9c <__aeabi_i2f>
 8001234:	4603      	mov	r3, r0
 8001236:	f04f 418b 	mov.w	r1, #1166016512	@ 0x45800000
 800123a:	4618      	mov	r0, r3
 800123c:	f7ff fe36 	bl	8000eac <__aeabi_fdiv>
 8001240:	4603      	mov	r3, r0
}
 8001242:	4618      	mov	r0, r3
 8001244:	3708      	adds	r7, #8
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	200001f0 	.word	0x200001f0

08001250 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b082      	sub	sp, #8
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
	if (ch == '\n')
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	2b0a      	cmp	r3, #10
 800125c:	d102      	bne.n	8001264 <__io_putchar+0x14>
		__io_putchar('\r');
 800125e:	200d      	movs	r0, #13
 8001260:	f7ff fff6 	bl	8001250 <__io_putchar>

	HAL_UART_Transmit(&huart2, (uint8_t*)&ch, sizeof(ch), HAL_MAX_DELAY);
 8001264:	1d39      	adds	r1, r7, #4
 8001266:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800126a:	2204      	movs	r2, #4
 800126c:	4803      	ldr	r0, [pc, #12]	@ (800127c <__io_putchar+0x2c>)
 800126e:	f002 fa33 	bl	80036d8 <HAL_UART_Transmit>
	return 1;
 8001272:	2301      	movs	r3, #1
}
 8001274:	4618      	mov	r0, r3
 8001276:	3708      	adds	r7, #8
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}
 800127c:	20000248 	.word	0x20000248

08001280 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001280:	b5b0      	push	{r4, r5, r7, lr}
 8001282:	b084      	sub	sp, #16
 8001284:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001286:	f000 fa73 	bl	8001770 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800128a:	f000 f86f 	bl	800136c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800128e:	f7ff fea9 	bl	8000fe4 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001292:	f7ff fec9 	bl	8001028 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8001296:	f000 f9d1 	bl	800163c <MX_USART2_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  printf("Searching...\n");
 800129a:	482f      	ldr	r0, [pc, #188]	@ (8001358 <main+0xd8>)
 800129c:	f003 f976 	bl	800458c <puts>
  if (LPS25HB_Init() == HAL_OK) {
 80012a0:	f7ff ff64 	bl	800116c <LPS25HB_Init>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d103      	bne.n	80012b2 <main+0x32>
	  printf("Found: LPS25HB\n");
 80012aa:	482c      	ldr	r0, [pc, #176]	@ (800135c <main+0xdc>)
 80012ac:	f003 f96e 	bl	800458c <puts>
 80012b0:	e004      	b.n	80012bc <main+0x3c>
  } else {
	  printf("Error, LPS25HB not found\n");
 80012b2:	482b      	ldr	r0, [pc, #172]	@ (8001360 <main+0xe0>)
 80012b4:	f003 f96a 	bl	800458c <puts>
	  Error_Handler();
 80012b8:	f000 f893 	bl	80013e2 <Error_Handler>
  }

  HAL_Delay(5000);
 80012bc:	f241 3088 	movw	r0, #5000	@ 0x1388
 80012c0:	f000 fab8 	bl	8001834 <HAL_Delay>

  float p0 = LPS25HB_Read_Pressure();
 80012c4:	f7ff ff9c 	bl	8001200 <LPS25HB_Read_Pressure>
 80012c8:	60f8      	str	r0, [r7, #12]

  while (1)
  {
	  float temp = LPS25HB_Read_Temp() + 273.15f;
 80012ca:	f7ff ff69 	bl	80011a0 <LPS25HB_Read_Temp>
 80012ce:	4603      	mov	r3, r0
 80012d0:	4924      	ldr	r1, [pc, #144]	@ (8001364 <main+0xe4>)
 80012d2:	4618      	mov	r0, r3
 80012d4:	f7ff fc2e 	bl	8000b34 <__addsf3>
 80012d8:	4603      	mov	r3, r0
 80012da:	60bb      	str	r3, [r7, #8]
	  float p = LPS25HB_Read_Pressure();
 80012dc:	f7ff ff90 	bl	8001200 <LPS25HB_Read_Pressure>
 80012e0:	6078      	str	r0, [r7, #4]
	  float h = -29.271769 * temp * log(p / p0);
 80012e2:	68b8      	ldr	r0, [r7, #8]
 80012e4:	f7ff f8a0 	bl	8000428 <__aeabi_f2d>
 80012e8:	a319      	add	r3, pc, #100	@ (adr r3, 8001350 <main+0xd0>)
 80012ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012ee:	f7ff f8f3 	bl	80004d8 <__aeabi_dmul>
 80012f2:	4602      	mov	r2, r0
 80012f4:	460b      	mov	r3, r1
 80012f6:	4614      	mov	r4, r2
 80012f8:	461d      	mov	r5, r3
 80012fa:	68f9      	ldr	r1, [r7, #12]
 80012fc:	6878      	ldr	r0, [r7, #4]
 80012fe:	f7ff fdd5 	bl	8000eac <__aeabi_fdiv>
 8001302:	4603      	mov	r3, r0
 8001304:	4618      	mov	r0, r3
 8001306:	f7ff f88f 	bl	8000428 <__aeabi_f2d>
 800130a:	4602      	mov	r2, r0
 800130c:	460b      	mov	r3, r1
 800130e:	4610      	mov	r0, r2
 8001310:	4619      	mov	r1, r3
 8001312:	f005 f8b1 	bl	8006478 <log>
 8001316:	4602      	mov	r2, r0
 8001318:	460b      	mov	r3, r1
 800131a:	4620      	mov	r0, r4
 800131c:	4629      	mov	r1, r5
 800131e:	f7ff f8db 	bl	80004d8 <__aeabi_dmul>
 8001322:	4602      	mov	r2, r0
 8001324:	460b      	mov	r3, r1
 8001326:	4610      	mov	r0, r2
 8001328:	4619      	mov	r1, r3
 800132a:	f7ff fbad 	bl	8000a88 <__aeabi_d2f>
 800132e:	4603      	mov	r3, r0
 8001330:	603b      	str	r3, [r7, #0]

	  printf("h = %.2f m\n", h);
 8001332:	6838      	ldr	r0, [r7, #0]
 8001334:	f7ff f878 	bl	8000428 <__aeabi_f2d>
 8001338:	4602      	mov	r2, r0
 800133a:	460b      	mov	r3, r1
 800133c:	480a      	ldr	r0, [pc, #40]	@ (8001368 <main+0xe8>)
 800133e:	f003 f8bd 	bl	80044bc <iprintf>
	  HAL_Delay(1000);
 8001342:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001346:	f000 fa75 	bl	8001834 <HAL_Delay>
  {
 800134a:	bf00      	nop
 800134c:	e7bd      	b.n	80012ca <main+0x4a>
 800134e:	bf00      	nop
 8001350:	a737110e 	.word	0xa737110e
 8001354:	c03d4592 	.word	0xc03d4592
 8001358:	08006868 	.word	0x08006868
 800135c:	08006878 	.word	0x08006878
 8001360:	08006888 	.word	0x08006888
 8001364:	43889333 	.word	0x43889333
 8001368:	080068a4 	.word	0x080068a4

0800136c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b090      	sub	sp, #64	@ 0x40
 8001370:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001372:	f107 0318 	add.w	r3, r7, #24
 8001376:	2228      	movs	r2, #40	@ 0x28
 8001378:	2100      	movs	r1, #0
 800137a:	4618      	mov	r0, r3
 800137c:	f003 f9e6 	bl	800474c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001380:	1d3b      	adds	r3, r7, #4
 8001382:	2200      	movs	r2, #0
 8001384:	601a      	str	r2, [r3, #0]
 8001386:	605a      	str	r2, [r3, #4]
 8001388:	609a      	str	r2, [r3, #8]
 800138a:	60da      	str	r2, [r3, #12]
 800138c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800138e:	2302      	movs	r3, #2
 8001390:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001392:	2301      	movs	r3, #1
 8001394:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001396:	2310      	movs	r3, #16
 8001398:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800139a:	2300      	movs	r3, #0
 800139c:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800139e:	f107 0318 	add.w	r3, r7, #24
 80013a2:	4618      	mov	r0, r3
 80013a4:	f001 fd38 	bl	8002e18 <HAL_RCC_OscConfig>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d001      	beq.n	80013b2 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80013ae:	f000 f818 	bl	80013e2 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013b2:	230f      	movs	r3, #15
 80013b4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80013b6:	2300      	movs	r3, #0
 80013b8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013ba:	2300      	movs	r3, #0
 80013bc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80013be:	2300      	movs	r3, #0
 80013c0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013c2:	2300      	movs	r3, #0
 80013c4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80013c6:	1d3b      	adds	r3, r7, #4
 80013c8:	2100      	movs	r1, #0
 80013ca:	4618      	mov	r0, r3
 80013cc:	f001 ffa6 	bl	800331c <HAL_RCC_ClockConfig>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d001      	beq.n	80013da <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80013d6:	f000 f804 	bl	80013e2 <Error_Handler>
  }
}
 80013da:	bf00      	nop
 80013dc:	3740      	adds	r7, #64	@ 0x40
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}

080013e2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013e2:	b480      	push	{r7}
 80013e4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013e6:	b672      	cpsid	i
}
 80013e8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013ea:	bf00      	nop
 80013ec:	e7fd      	b.n	80013ea <Error_Handler+0x8>
	...

080013f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	b085      	sub	sp, #20
 80013f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80013f6:	4b15      	ldr	r3, [pc, #84]	@ (800144c <HAL_MspInit+0x5c>)
 80013f8:	699b      	ldr	r3, [r3, #24]
 80013fa:	4a14      	ldr	r2, [pc, #80]	@ (800144c <HAL_MspInit+0x5c>)
 80013fc:	f043 0301 	orr.w	r3, r3, #1
 8001400:	6193      	str	r3, [r2, #24]
 8001402:	4b12      	ldr	r3, [pc, #72]	@ (800144c <HAL_MspInit+0x5c>)
 8001404:	699b      	ldr	r3, [r3, #24]
 8001406:	f003 0301 	and.w	r3, r3, #1
 800140a:	60bb      	str	r3, [r7, #8]
 800140c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800140e:	4b0f      	ldr	r3, [pc, #60]	@ (800144c <HAL_MspInit+0x5c>)
 8001410:	69db      	ldr	r3, [r3, #28]
 8001412:	4a0e      	ldr	r2, [pc, #56]	@ (800144c <HAL_MspInit+0x5c>)
 8001414:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001418:	61d3      	str	r3, [r2, #28]
 800141a:	4b0c      	ldr	r3, [pc, #48]	@ (800144c <HAL_MspInit+0x5c>)
 800141c:	69db      	ldr	r3, [r3, #28]
 800141e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001422:	607b      	str	r3, [r7, #4]
 8001424:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001426:	4b0a      	ldr	r3, [pc, #40]	@ (8001450 <HAL_MspInit+0x60>)
 8001428:	685b      	ldr	r3, [r3, #4]
 800142a:	60fb      	str	r3, [r7, #12]
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001432:	60fb      	str	r3, [r7, #12]
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800143a:	60fb      	str	r3, [r7, #12]
 800143c:	4a04      	ldr	r2, [pc, #16]	@ (8001450 <HAL_MspInit+0x60>)
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001442:	bf00      	nop
 8001444:	3714      	adds	r7, #20
 8001446:	46bd      	mov	sp, r7
 8001448:	bc80      	pop	{r7}
 800144a:	4770      	bx	lr
 800144c:	40021000 	.word	0x40021000
 8001450:	40010000 	.word	0x40010000

08001454 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001458:	bf00      	nop
 800145a:	e7fd      	b.n	8001458 <NMI_Handler+0x4>

0800145c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001460:	bf00      	nop
 8001462:	e7fd      	b.n	8001460 <HardFault_Handler+0x4>

08001464 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001464:	b480      	push	{r7}
 8001466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001468:	bf00      	nop
 800146a:	e7fd      	b.n	8001468 <MemManage_Handler+0x4>

0800146c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001470:	bf00      	nop
 8001472:	e7fd      	b.n	8001470 <BusFault_Handler+0x4>

08001474 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001474:	b480      	push	{r7}
 8001476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001478:	bf00      	nop
 800147a:	e7fd      	b.n	8001478 <UsageFault_Handler+0x4>

0800147c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001480:	bf00      	nop
 8001482:	46bd      	mov	sp, r7
 8001484:	bc80      	pop	{r7}
 8001486:	4770      	bx	lr

08001488 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001488:	b480      	push	{r7}
 800148a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800148c:	bf00      	nop
 800148e:	46bd      	mov	sp, r7
 8001490:	bc80      	pop	{r7}
 8001492:	4770      	bx	lr

08001494 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001494:	b480      	push	{r7}
 8001496:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001498:	bf00      	nop
 800149a:	46bd      	mov	sp, r7
 800149c:	bc80      	pop	{r7}
 800149e:	4770      	bx	lr

080014a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014a4:	f000 f9aa 	bl	80017fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014a8:	bf00      	nop
 80014aa:	bd80      	pop	{r7, pc}

080014ac <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0
  return 1;
 80014b0:	2301      	movs	r3, #1
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bc80      	pop	{r7}
 80014b8:	4770      	bx	lr

080014ba <_kill>:

int _kill(int pid, int sig)
{
 80014ba:	b580      	push	{r7, lr}
 80014bc:	b082      	sub	sp, #8
 80014be:	af00      	add	r7, sp, #0
 80014c0:	6078      	str	r0, [r7, #4]
 80014c2:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80014c4:	f003 f994 	bl	80047f0 <__errno>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2216      	movs	r2, #22
 80014cc:	601a      	str	r2, [r3, #0]
  return -1;
 80014ce:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80014d2:	4618      	mov	r0, r3
 80014d4:	3708      	adds	r7, #8
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}

080014da <_exit>:

void _exit (int status)
{
 80014da:	b580      	push	{r7, lr}
 80014dc:	b082      	sub	sp, #8
 80014de:	af00      	add	r7, sp, #0
 80014e0:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80014e2:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80014e6:	6878      	ldr	r0, [r7, #4]
 80014e8:	f7ff ffe7 	bl	80014ba <_kill>
  while (1) {}    /* Make sure we hang here */
 80014ec:	bf00      	nop
 80014ee:	e7fd      	b.n	80014ec <_exit+0x12>

080014f0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b086      	sub	sp, #24
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	60f8      	str	r0, [r7, #12]
 80014f8:	60b9      	str	r1, [r7, #8]
 80014fa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014fc:	2300      	movs	r3, #0
 80014fe:	617b      	str	r3, [r7, #20]
 8001500:	e00a      	b.n	8001518 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001502:	f3af 8000 	nop.w
 8001506:	4601      	mov	r1, r0
 8001508:	68bb      	ldr	r3, [r7, #8]
 800150a:	1c5a      	adds	r2, r3, #1
 800150c:	60ba      	str	r2, [r7, #8]
 800150e:	b2ca      	uxtb	r2, r1
 8001510:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001512:	697b      	ldr	r3, [r7, #20]
 8001514:	3301      	adds	r3, #1
 8001516:	617b      	str	r3, [r7, #20]
 8001518:	697a      	ldr	r2, [r7, #20]
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	429a      	cmp	r2, r3
 800151e:	dbf0      	blt.n	8001502 <_read+0x12>
  }

  return len;
 8001520:	687b      	ldr	r3, [r7, #4]
}
 8001522:	4618      	mov	r0, r3
 8001524:	3718      	adds	r7, #24
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}

0800152a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800152a:	b580      	push	{r7, lr}
 800152c:	b086      	sub	sp, #24
 800152e:	af00      	add	r7, sp, #0
 8001530:	60f8      	str	r0, [r7, #12]
 8001532:	60b9      	str	r1, [r7, #8]
 8001534:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001536:	2300      	movs	r3, #0
 8001538:	617b      	str	r3, [r7, #20]
 800153a:	e009      	b.n	8001550 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800153c:	68bb      	ldr	r3, [r7, #8]
 800153e:	1c5a      	adds	r2, r3, #1
 8001540:	60ba      	str	r2, [r7, #8]
 8001542:	781b      	ldrb	r3, [r3, #0]
 8001544:	4618      	mov	r0, r3
 8001546:	f7ff fe83 	bl	8001250 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800154a:	697b      	ldr	r3, [r7, #20]
 800154c:	3301      	adds	r3, #1
 800154e:	617b      	str	r3, [r7, #20]
 8001550:	697a      	ldr	r2, [r7, #20]
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	429a      	cmp	r2, r3
 8001556:	dbf1      	blt.n	800153c <_write+0x12>
  }
  return len;
 8001558:	687b      	ldr	r3, [r7, #4]
}
 800155a:	4618      	mov	r0, r3
 800155c:	3718      	adds	r7, #24
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}

08001562 <_close>:

int _close(int file)
{
 8001562:	b480      	push	{r7}
 8001564:	b083      	sub	sp, #12
 8001566:	af00      	add	r7, sp, #0
 8001568:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800156a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800156e:	4618      	mov	r0, r3
 8001570:	370c      	adds	r7, #12
 8001572:	46bd      	mov	sp, r7
 8001574:	bc80      	pop	{r7}
 8001576:	4770      	bx	lr

08001578 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001578:	b480      	push	{r7}
 800157a:	b083      	sub	sp, #12
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
 8001580:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001588:	605a      	str	r2, [r3, #4]
  return 0;
 800158a:	2300      	movs	r3, #0
}
 800158c:	4618      	mov	r0, r3
 800158e:	370c      	adds	r7, #12
 8001590:	46bd      	mov	sp, r7
 8001592:	bc80      	pop	{r7}
 8001594:	4770      	bx	lr

08001596 <_isatty>:

int _isatty(int file)
{
 8001596:	b480      	push	{r7}
 8001598:	b083      	sub	sp, #12
 800159a:	af00      	add	r7, sp, #0
 800159c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800159e:	2301      	movs	r3, #1
}
 80015a0:	4618      	mov	r0, r3
 80015a2:	370c      	adds	r7, #12
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bc80      	pop	{r7}
 80015a8:	4770      	bx	lr

080015aa <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80015aa:	b480      	push	{r7}
 80015ac:	b085      	sub	sp, #20
 80015ae:	af00      	add	r7, sp, #0
 80015b0:	60f8      	str	r0, [r7, #12]
 80015b2:	60b9      	str	r1, [r7, #8]
 80015b4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80015b6:	2300      	movs	r3, #0
}
 80015b8:	4618      	mov	r0, r3
 80015ba:	3714      	adds	r7, #20
 80015bc:	46bd      	mov	sp, r7
 80015be:	bc80      	pop	{r7}
 80015c0:	4770      	bx	lr
	...

080015c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b086      	sub	sp, #24
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015cc:	4a14      	ldr	r2, [pc, #80]	@ (8001620 <_sbrk+0x5c>)
 80015ce:	4b15      	ldr	r3, [pc, #84]	@ (8001624 <_sbrk+0x60>)
 80015d0:	1ad3      	subs	r3, r2, r3
 80015d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015d4:	697b      	ldr	r3, [r7, #20]
 80015d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015d8:	4b13      	ldr	r3, [pc, #76]	@ (8001628 <_sbrk+0x64>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d102      	bne.n	80015e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015e0:	4b11      	ldr	r3, [pc, #68]	@ (8001628 <_sbrk+0x64>)
 80015e2:	4a12      	ldr	r2, [pc, #72]	@ (800162c <_sbrk+0x68>)
 80015e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015e6:	4b10      	ldr	r3, [pc, #64]	@ (8001628 <_sbrk+0x64>)
 80015e8:	681a      	ldr	r2, [r3, #0]
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	4413      	add	r3, r2
 80015ee:	693a      	ldr	r2, [r7, #16]
 80015f0:	429a      	cmp	r2, r3
 80015f2:	d207      	bcs.n	8001604 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015f4:	f003 f8fc 	bl	80047f0 <__errno>
 80015f8:	4603      	mov	r3, r0
 80015fa:	220c      	movs	r2, #12
 80015fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015fe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001602:	e009      	b.n	8001618 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001604:	4b08      	ldr	r3, [pc, #32]	@ (8001628 <_sbrk+0x64>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800160a:	4b07      	ldr	r3, [pc, #28]	@ (8001628 <_sbrk+0x64>)
 800160c:	681a      	ldr	r2, [r3, #0]
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	4413      	add	r3, r2
 8001612:	4a05      	ldr	r2, [pc, #20]	@ (8001628 <_sbrk+0x64>)
 8001614:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001616:	68fb      	ldr	r3, [r7, #12]
}
 8001618:	4618      	mov	r0, r3
 800161a:	3718      	adds	r7, #24
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}
 8001620:	20005000 	.word	0x20005000
 8001624:	00000400 	.word	0x00000400
 8001628:	20000244 	.word	0x20000244
 800162c:	200003e0 	.word	0x200003e0

08001630 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001630:	b480      	push	{r7}
 8001632:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001634:	bf00      	nop
 8001636:	46bd      	mov	sp, r7
 8001638:	bc80      	pop	{r7}
 800163a:	4770      	bx	lr

0800163c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001640:	4b11      	ldr	r3, [pc, #68]	@ (8001688 <MX_USART2_UART_Init+0x4c>)
 8001642:	4a12      	ldr	r2, [pc, #72]	@ (800168c <MX_USART2_UART_Init+0x50>)
 8001644:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001646:	4b10      	ldr	r3, [pc, #64]	@ (8001688 <MX_USART2_UART_Init+0x4c>)
 8001648:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800164c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800164e:	4b0e      	ldr	r3, [pc, #56]	@ (8001688 <MX_USART2_UART_Init+0x4c>)
 8001650:	2200      	movs	r2, #0
 8001652:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001654:	4b0c      	ldr	r3, [pc, #48]	@ (8001688 <MX_USART2_UART_Init+0x4c>)
 8001656:	2200      	movs	r2, #0
 8001658:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800165a:	4b0b      	ldr	r3, [pc, #44]	@ (8001688 <MX_USART2_UART_Init+0x4c>)
 800165c:	2200      	movs	r2, #0
 800165e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001660:	4b09      	ldr	r3, [pc, #36]	@ (8001688 <MX_USART2_UART_Init+0x4c>)
 8001662:	220c      	movs	r2, #12
 8001664:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001666:	4b08      	ldr	r3, [pc, #32]	@ (8001688 <MX_USART2_UART_Init+0x4c>)
 8001668:	2200      	movs	r2, #0
 800166a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800166c:	4b06      	ldr	r3, [pc, #24]	@ (8001688 <MX_USART2_UART_Init+0x4c>)
 800166e:	2200      	movs	r2, #0
 8001670:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001672:	4805      	ldr	r0, [pc, #20]	@ (8001688 <MX_USART2_UART_Init+0x4c>)
 8001674:	f001 ffe0 	bl	8003638 <HAL_UART_Init>
 8001678:	4603      	mov	r3, r0
 800167a:	2b00      	cmp	r3, #0
 800167c:	d001      	beq.n	8001682 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800167e:	f7ff feb0 	bl	80013e2 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001682:	bf00      	nop
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	20000248 	.word	0x20000248
 800168c:	40004400 	.word	0x40004400

08001690 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b088      	sub	sp, #32
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001698:	f107 0310 	add.w	r3, r7, #16
 800169c:	2200      	movs	r2, #0
 800169e:	601a      	str	r2, [r3, #0]
 80016a0:	605a      	str	r2, [r3, #4]
 80016a2:	609a      	str	r2, [r3, #8]
 80016a4:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	4a1b      	ldr	r2, [pc, #108]	@ (8001718 <HAL_UART_MspInit+0x88>)
 80016ac:	4293      	cmp	r3, r2
 80016ae:	d12f      	bne.n	8001710 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80016b0:	4b1a      	ldr	r3, [pc, #104]	@ (800171c <HAL_UART_MspInit+0x8c>)
 80016b2:	69db      	ldr	r3, [r3, #28]
 80016b4:	4a19      	ldr	r2, [pc, #100]	@ (800171c <HAL_UART_MspInit+0x8c>)
 80016b6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80016ba:	61d3      	str	r3, [r2, #28]
 80016bc:	4b17      	ldr	r3, [pc, #92]	@ (800171c <HAL_UART_MspInit+0x8c>)
 80016be:	69db      	ldr	r3, [r3, #28]
 80016c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016c4:	60fb      	str	r3, [r7, #12]
 80016c6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016c8:	4b14      	ldr	r3, [pc, #80]	@ (800171c <HAL_UART_MspInit+0x8c>)
 80016ca:	699b      	ldr	r3, [r3, #24]
 80016cc:	4a13      	ldr	r2, [pc, #76]	@ (800171c <HAL_UART_MspInit+0x8c>)
 80016ce:	f043 0304 	orr.w	r3, r3, #4
 80016d2:	6193      	str	r3, [r2, #24]
 80016d4:	4b11      	ldr	r3, [pc, #68]	@ (800171c <HAL_UART_MspInit+0x8c>)
 80016d6:	699b      	ldr	r3, [r3, #24]
 80016d8:	f003 0304 	and.w	r3, r3, #4
 80016dc:	60bb      	str	r3, [r7, #8]
 80016de:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80016e0:	2304      	movs	r3, #4
 80016e2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016e4:	2302      	movs	r3, #2
 80016e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016e8:	2303      	movs	r3, #3
 80016ea:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016ec:	f107 0310 	add.w	r3, r7, #16
 80016f0:	4619      	mov	r1, r3
 80016f2:	480b      	ldr	r0, [pc, #44]	@ (8001720 <HAL_UART_MspInit+0x90>)
 80016f4:	f000 f9a6 	bl	8001a44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80016f8:	2308      	movs	r3, #8
 80016fa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016fc:	2300      	movs	r3, #0
 80016fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001700:	2300      	movs	r3, #0
 8001702:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001704:	f107 0310 	add.w	r3, r7, #16
 8001708:	4619      	mov	r1, r3
 800170a:	4805      	ldr	r0, [pc, #20]	@ (8001720 <HAL_UART_MspInit+0x90>)
 800170c:	f000 f99a 	bl	8001a44 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001710:	bf00      	nop
 8001712:	3720      	adds	r7, #32
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}
 8001718:	40004400 	.word	0x40004400
 800171c:	40021000 	.word	0x40021000
 8001720:	40010800 	.word	0x40010800

08001724 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001724:	f7ff ff84 	bl	8001630 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001728:	480b      	ldr	r0, [pc, #44]	@ (8001758 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800172a:	490c      	ldr	r1, [pc, #48]	@ (800175c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800172c:	4a0c      	ldr	r2, [pc, #48]	@ (8001760 <LoopFillZerobss+0x16>)
  movs r3, #0
 800172e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001730:	e002      	b.n	8001738 <LoopCopyDataInit>

08001732 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001732:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001734:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001736:	3304      	adds	r3, #4

08001738 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001738:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800173a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800173c:	d3f9      	bcc.n	8001732 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800173e:	4a09      	ldr	r2, [pc, #36]	@ (8001764 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001740:	4c09      	ldr	r4, [pc, #36]	@ (8001768 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001742:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001744:	e001      	b.n	800174a <LoopFillZerobss>

08001746 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001746:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001748:	3204      	adds	r2, #4

0800174a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800174a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800174c:	d3fb      	bcc.n	8001746 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800174e:	f003 f855 	bl	80047fc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001752:	f7ff fd95 	bl	8001280 <main>
  bx lr
 8001756:	4770      	bx	lr
  ldr r0, =_sdata
 8001758:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800175c:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001760:	08006c58 	.word	0x08006c58
  ldr r2, =_sbss
 8001764:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001768:	200003e0 	.word	0x200003e0

0800176c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800176c:	e7fe      	b.n	800176c <ADC1_2_IRQHandler>
	...

08001770 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001774:	4b08      	ldr	r3, [pc, #32]	@ (8001798 <HAL_Init+0x28>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a07      	ldr	r2, [pc, #28]	@ (8001798 <HAL_Init+0x28>)
 800177a:	f043 0310 	orr.w	r3, r3, #16
 800177e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001780:	2003      	movs	r0, #3
 8001782:	f000 f92b 	bl	80019dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001786:	200f      	movs	r0, #15
 8001788:	f000 f808 	bl	800179c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800178c:	f7ff fe30 	bl	80013f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001790:	2300      	movs	r3, #0
}
 8001792:	4618      	mov	r0, r3
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	40022000 	.word	0x40022000

0800179c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b082      	sub	sp, #8
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017a4:	4b12      	ldr	r3, [pc, #72]	@ (80017f0 <HAL_InitTick+0x54>)
 80017a6:	681a      	ldr	r2, [r3, #0]
 80017a8:	4b12      	ldr	r3, [pc, #72]	@ (80017f4 <HAL_InitTick+0x58>)
 80017aa:	781b      	ldrb	r3, [r3, #0]
 80017ac:	4619      	mov	r1, r3
 80017ae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80017b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80017b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80017ba:	4618      	mov	r0, r3
 80017bc:	f000 f935 	bl	8001a2a <HAL_SYSTICK_Config>
 80017c0:	4603      	mov	r3, r0
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d001      	beq.n	80017ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017c6:	2301      	movs	r3, #1
 80017c8:	e00e      	b.n	80017e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	2b0f      	cmp	r3, #15
 80017ce:	d80a      	bhi.n	80017e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017d0:	2200      	movs	r2, #0
 80017d2:	6879      	ldr	r1, [r7, #4]
 80017d4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80017d8:	f000 f90b 	bl	80019f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017dc:	4a06      	ldr	r2, [pc, #24]	@ (80017f8 <HAL_InitTick+0x5c>)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017e2:	2300      	movs	r3, #0
 80017e4:	e000      	b.n	80017e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80017e6:	2301      	movs	r3, #1
}
 80017e8:	4618      	mov	r0, r3
 80017ea:	3708      	adds	r7, #8
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}
 80017f0:	20000000 	.word	0x20000000
 80017f4:	20000008 	.word	0x20000008
 80017f8:	20000004 	.word	0x20000004

080017fc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017fc:	b480      	push	{r7}
 80017fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001800:	4b05      	ldr	r3, [pc, #20]	@ (8001818 <HAL_IncTick+0x1c>)
 8001802:	781b      	ldrb	r3, [r3, #0]
 8001804:	461a      	mov	r2, r3
 8001806:	4b05      	ldr	r3, [pc, #20]	@ (800181c <HAL_IncTick+0x20>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4413      	add	r3, r2
 800180c:	4a03      	ldr	r2, [pc, #12]	@ (800181c <HAL_IncTick+0x20>)
 800180e:	6013      	str	r3, [r2, #0]
}
 8001810:	bf00      	nop
 8001812:	46bd      	mov	sp, r7
 8001814:	bc80      	pop	{r7}
 8001816:	4770      	bx	lr
 8001818:	20000008 	.word	0x20000008
 800181c:	20000290 	.word	0x20000290

08001820 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001820:	b480      	push	{r7}
 8001822:	af00      	add	r7, sp, #0
  return uwTick;
 8001824:	4b02      	ldr	r3, [pc, #8]	@ (8001830 <HAL_GetTick+0x10>)
 8001826:	681b      	ldr	r3, [r3, #0]
}
 8001828:	4618      	mov	r0, r3
 800182a:	46bd      	mov	sp, r7
 800182c:	bc80      	pop	{r7}
 800182e:	4770      	bx	lr
 8001830:	20000290 	.word	0x20000290

08001834 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b084      	sub	sp, #16
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800183c:	f7ff fff0 	bl	8001820 <HAL_GetTick>
 8001840:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800184c:	d005      	beq.n	800185a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800184e:	4b0a      	ldr	r3, [pc, #40]	@ (8001878 <HAL_Delay+0x44>)
 8001850:	781b      	ldrb	r3, [r3, #0]
 8001852:	461a      	mov	r2, r3
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	4413      	add	r3, r2
 8001858:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800185a:	bf00      	nop
 800185c:	f7ff ffe0 	bl	8001820 <HAL_GetTick>
 8001860:	4602      	mov	r2, r0
 8001862:	68bb      	ldr	r3, [r7, #8]
 8001864:	1ad3      	subs	r3, r2, r3
 8001866:	68fa      	ldr	r2, [r7, #12]
 8001868:	429a      	cmp	r2, r3
 800186a:	d8f7      	bhi.n	800185c <HAL_Delay+0x28>
  {
  }
}
 800186c:	bf00      	nop
 800186e:	bf00      	nop
 8001870:	3710      	adds	r7, #16
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	20000008 	.word	0x20000008

0800187c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800187c:	b480      	push	{r7}
 800187e:	b085      	sub	sp, #20
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	f003 0307 	and.w	r3, r3, #7
 800188a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800188c:	4b0c      	ldr	r3, [pc, #48]	@ (80018c0 <__NVIC_SetPriorityGrouping+0x44>)
 800188e:	68db      	ldr	r3, [r3, #12]
 8001890:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001892:	68ba      	ldr	r2, [r7, #8]
 8001894:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001898:	4013      	ands	r3, r2
 800189a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018a0:	68bb      	ldr	r3, [r7, #8]
 80018a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018a4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80018a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80018ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018ae:	4a04      	ldr	r2, [pc, #16]	@ (80018c0 <__NVIC_SetPriorityGrouping+0x44>)
 80018b0:	68bb      	ldr	r3, [r7, #8]
 80018b2:	60d3      	str	r3, [r2, #12]
}
 80018b4:	bf00      	nop
 80018b6:	3714      	adds	r7, #20
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bc80      	pop	{r7}
 80018bc:	4770      	bx	lr
 80018be:	bf00      	nop
 80018c0:	e000ed00 	.word	0xe000ed00

080018c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018c4:	b480      	push	{r7}
 80018c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018c8:	4b04      	ldr	r3, [pc, #16]	@ (80018dc <__NVIC_GetPriorityGrouping+0x18>)
 80018ca:	68db      	ldr	r3, [r3, #12]
 80018cc:	0a1b      	lsrs	r3, r3, #8
 80018ce:	f003 0307 	and.w	r3, r3, #7
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bc80      	pop	{r7}
 80018d8:	4770      	bx	lr
 80018da:	bf00      	nop
 80018dc:	e000ed00 	.word	0xe000ed00

080018e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b083      	sub	sp, #12
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	4603      	mov	r3, r0
 80018e8:	6039      	str	r1, [r7, #0]
 80018ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	db0a      	blt.n	800190a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	b2da      	uxtb	r2, r3
 80018f8:	490c      	ldr	r1, [pc, #48]	@ (800192c <__NVIC_SetPriority+0x4c>)
 80018fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018fe:	0112      	lsls	r2, r2, #4
 8001900:	b2d2      	uxtb	r2, r2
 8001902:	440b      	add	r3, r1
 8001904:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001908:	e00a      	b.n	8001920 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	b2da      	uxtb	r2, r3
 800190e:	4908      	ldr	r1, [pc, #32]	@ (8001930 <__NVIC_SetPriority+0x50>)
 8001910:	79fb      	ldrb	r3, [r7, #7]
 8001912:	f003 030f 	and.w	r3, r3, #15
 8001916:	3b04      	subs	r3, #4
 8001918:	0112      	lsls	r2, r2, #4
 800191a:	b2d2      	uxtb	r2, r2
 800191c:	440b      	add	r3, r1
 800191e:	761a      	strb	r2, [r3, #24]
}
 8001920:	bf00      	nop
 8001922:	370c      	adds	r7, #12
 8001924:	46bd      	mov	sp, r7
 8001926:	bc80      	pop	{r7}
 8001928:	4770      	bx	lr
 800192a:	bf00      	nop
 800192c:	e000e100 	.word	0xe000e100
 8001930:	e000ed00 	.word	0xe000ed00

08001934 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001934:	b480      	push	{r7}
 8001936:	b089      	sub	sp, #36	@ 0x24
 8001938:	af00      	add	r7, sp, #0
 800193a:	60f8      	str	r0, [r7, #12]
 800193c:	60b9      	str	r1, [r7, #8]
 800193e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	f003 0307 	and.w	r3, r3, #7
 8001946:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001948:	69fb      	ldr	r3, [r7, #28]
 800194a:	f1c3 0307 	rsb	r3, r3, #7
 800194e:	2b04      	cmp	r3, #4
 8001950:	bf28      	it	cs
 8001952:	2304      	movcs	r3, #4
 8001954:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001956:	69fb      	ldr	r3, [r7, #28]
 8001958:	3304      	adds	r3, #4
 800195a:	2b06      	cmp	r3, #6
 800195c:	d902      	bls.n	8001964 <NVIC_EncodePriority+0x30>
 800195e:	69fb      	ldr	r3, [r7, #28]
 8001960:	3b03      	subs	r3, #3
 8001962:	e000      	b.n	8001966 <NVIC_EncodePriority+0x32>
 8001964:	2300      	movs	r3, #0
 8001966:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001968:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800196c:	69bb      	ldr	r3, [r7, #24]
 800196e:	fa02 f303 	lsl.w	r3, r2, r3
 8001972:	43da      	mvns	r2, r3
 8001974:	68bb      	ldr	r3, [r7, #8]
 8001976:	401a      	ands	r2, r3
 8001978:	697b      	ldr	r3, [r7, #20]
 800197a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800197c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001980:	697b      	ldr	r3, [r7, #20]
 8001982:	fa01 f303 	lsl.w	r3, r1, r3
 8001986:	43d9      	mvns	r1, r3
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800198c:	4313      	orrs	r3, r2
         );
}
 800198e:	4618      	mov	r0, r3
 8001990:	3724      	adds	r7, #36	@ 0x24
 8001992:	46bd      	mov	sp, r7
 8001994:	bc80      	pop	{r7}
 8001996:	4770      	bx	lr

08001998 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b082      	sub	sp, #8
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	3b01      	subs	r3, #1
 80019a4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80019a8:	d301      	bcc.n	80019ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019aa:	2301      	movs	r3, #1
 80019ac:	e00f      	b.n	80019ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019ae:	4a0a      	ldr	r2, [pc, #40]	@ (80019d8 <SysTick_Config+0x40>)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	3b01      	subs	r3, #1
 80019b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019b6:	210f      	movs	r1, #15
 80019b8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80019bc:	f7ff ff90 	bl	80018e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019c0:	4b05      	ldr	r3, [pc, #20]	@ (80019d8 <SysTick_Config+0x40>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019c6:	4b04      	ldr	r3, [pc, #16]	@ (80019d8 <SysTick_Config+0x40>)
 80019c8:	2207      	movs	r2, #7
 80019ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019cc:	2300      	movs	r3, #0
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	3708      	adds	r7, #8
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	e000e010 	.word	0xe000e010

080019dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b082      	sub	sp, #8
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019e4:	6878      	ldr	r0, [r7, #4]
 80019e6:	f7ff ff49 	bl	800187c <__NVIC_SetPriorityGrouping>
}
 80019ea:	bf00      	nop
 80019ec:	3708      	adds	r7, #8
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}

080019f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019f2:	b580      	push	{r7, lr}
 80019f4:	b086      	sub	sp, #24
 80019f6:	af00      	add	r7, sp, #0
 80019f8:	4603      	mov	r3, r0
 80019fa:	60b9      	str	r1, [r7, #8]
 80019fc:	607a      	str	r2, [r7, #4]
 80019fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a00:	2300      	movs	r3, #0
 8001a02:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a04:	f7ff ff5e 	bl	80018c4 <__NVIC_GetPriorityGrouping>
 8001a08:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a0a:	687a      	ldr	r2, [r7, #4]
 8001a0c:	68b9      	ldr	r1, [r7, #8]
 8001a0e:	6978      	ldr	r0, [r7, #20]
 8001a10:	f7ff ff90 	bl	8001934 <NVIC_EncodePriority>
 8001a14:	4602      	mov	r2, r0
 8001a16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a1a:	4611      	mov	r1, r2
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f7ff ff5f 	bl	80018e0 <__NVIC_SetPriority>
}
 8001a22:	bf00      	nop
 8001a24:	3718      	adds	r7, #24
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}

08001a2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a2a:	b580      	push	{r7, lr}
 8001a2c:	b082      	sub	sp, #8
 8001a2e:	af00      	add	r7, sp, #0
 8001a30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a32:	6878      	ldr	r0, [r7, #4]
 8001a34:	f7ff ffb0 	bl	8001998 <SysTick_Config>
 8001a38:	4603      	mov	r3, r0
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	3708      	adds	r7, #8
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
	...

08001a44 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b08b      	sub	sp, #44	@ 0x2c
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
 8001a4c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001a52:	2300      	movs	r3, #0
 8001a54:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a56:	e169      	b.n	8001d2c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001a58:	2201      	movs	r2, #1
 8001a5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a60:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	69fa      	ldr	r2, [r7, #28]
 8001a68:	4013      	ands	r3, r2
 8001a6a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001a6c:	69ba      	ldr	r2, [r7, #24]
 8001a6e:	69fb      	ldr	r3, [r7, #28]
 8001a70:	429a      	cmp	r2, r3
 8001a72:	f040 8158 	bne.w	8001d26 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	4a9a      	ldr	r2, [pc, #616]	@ (8001ce4 <HAL_GPIO_Init+0x2a0>)
 8001a7c:	4293      	cmp	r3, r2
 8001a7e:	d05e      	beq.n	8001b3e <HAL_GPIO_Init+0xfa>
 8001a80:	4a98      	ldr	r2, [pc, #608]	@ (8001ce4 <HAL_GPIO_Init+0x2a0>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d875      	bhi.n	8001b72 <HAL_GPIO_Init+0x12e>
 8001a86:	4a98      	ldr	r2, [pc, #608]	@ (8001ce8 <HAL_GPIO_Init+0x2a4>)
 8001a88:	4293      	cmp	r3, r2
 8001a8a:	d058      	beq.n	8001b3e <HAL_GPIO_Init+0xfa>
 8001a8c:	4a96      	ldr	r2, [pc, #600]	@ (8001ce8 <HAL_GPIO_Init+0x2a4>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d86f      	bhi.n	8001b72 <HAL_GPIO_Init+0x12e>
 8001a92:	4a96      	ldr	r2, [pc, #600]	@ (8001cec <HAL_GPIO_Init+0x2a8>)
 8001a94:	4293      	cmp	r3, r2
 8001a96:	d052      	beq.n	8001b3e <HAL_GPIO_Init+0xfa>
 8001a98:	4a94      	ldr	r2, [pc, #592]	@ (8001cec <HAL_GPIO_Init+0x2a8>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d869      	bhi.n	8001b72 <HAL_GPIO_Init+0x12e>
 8001a9e:	4a94      	ldr	r2, [pc, #592]	@ (8001cf0 <HAL_GPIO_Init+0x2ac>)
 8001aa0:	4293      	cmp	r3, r2
 8001aa2:	d04c      	beq.n	8001b3e <HAL_GPIO_Init+0xfa>
 8001aa4:	4a92      	ldr	r2, [pc, #584]	@ (8001cf0 <HAL_GPIO_Init+0x2ac>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d863      	bhi.n	8001b72 <HAL_GPIO_Init+0x12e>
 8001aaa:	4a92      	ldr	r2, [pc, #584]	@ (8001cf4 <HAL_GPIO_Init+0x2b0>)
 8001aac:	4293      	cmp	r3, r2
 8001aae:	d046      	beq.n	8001b3e <HAL_GPIO_Init+0xfa>
 8001ab0:	4a90      	ldr	r2, [pc, #576]	@ (8001cf4 <HAL_GPIO_Init+0x2b0>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d85d      	bhi.n	8001b72 <HAL_GPIO_Init+0x12e>
 8001ab6:	2b12      	cmp	r3, #18
 8001ab8:	d82a      	bhi.n	8001b10 <HAL_GPIO_Init+0xcc>
 8001aba:	2b12      	cmp	r3, #18
 8001abc:	d859      	bhi.n	8001b72 <HAL_GPIO_Init+0x12e>
 8001abe:	a201      	add	r2, pc, #4	@ (adr r2, 8001ac4 <HAL_GPIO_Init+0x80>)
 8001ac0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ac4:	08001b3f 	.word	0x08001b3f
 8001ac8:	08001b19 	.word	0x08001b19
 8001acc:	08001b2b 	.word	0x08001b2b
 8001ad0:	08001b6d 	.word	0x08001b6d
 8001ad4:	08001b73 	.word	0x08001b73
 8001ad8:	08001b73 	.word	0x08001b73
 8001adc:	08001b73 	.word	0x08001b73
 8001ae0:	08001b73 	.word	0x08001b73
 8001ae4:	08001b73 	.word	0x08001b73
 8001ae8:	08001b73 	.word	0x08001b73
 8001aec:	08001b73 	.word	0x08001b73
 8001af0:	08001b73 	.word	0x08001b73
 8001af4:	08001b73 	.word	0x08001b73
 8001af8:	08001b73 	.word	0x08001b73
 8001afc:	08001b73 	.word	0x08001b73
 8001b00:	08001b73 	.word	0x08001b73
 8001b04:	08001b73 	.word	0x08001b73
 8001b08:	08001b21 	.word	0x08001b21
 8001b0c:	08001b35 	.word	0x08001b35
 8001b10:	4a79      	ldr	r2, [pc, #484]	@ (8001cf8 <HAL_GPIO_Init+0x2b4>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d013      	beq.n	8001b3e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001b16:	e02c      	b.n	8001b72 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	68db      	ldr	r3, [r3, #12]
 8001b1c:	623b      	str	r3, [r7, #32]
          break;
 8001b1e:	e029      	b.n	8001b74 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	68db      	ldr	r3, [r3, #12]
 8001b24:	3304      	adds	r3, #4
 8001b26:	623b      	str	r3, [r7, #32]
          break;
 8001b28:	e024      	b.n	8001b74 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	68db      	ldr	r3, [r3, #12]
 8001b2e:	3308      	adds	r3, #8
 8001b30:	623b      	str	r3, [r7, #32]
          break;
 8001b32:	e01f      	b.n	8001b74 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	68db      	ldr	r3, [r3, #12]
 8001b38:	330c      	adds	r3, #12
 8001b3a:	623b      	str	r3, [r7, #32]
          break;
 8001b3c:	e01a      	b.n	8001b74 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	689b      	ldr	r3, [r3, #8]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d102      	bne.n	8001b4c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001b46:	2304      	movs	r3, #4
 8001b48:	623b      	str	r3, [r7, #32]
          break;
 8001b4a:	e013      	b.n	8001b74 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	689b      	ldr	r3, [r3, #8]
 8001b50:	2b01      	cmp	r3, #1
 8001b52:	d105      	bne.n	8001b60 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b54:	2308      	movs	r3, #8
 8001b56:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	69fa      	ldr	r2, [r7, #28]
 8001b5c:	611a      	str	r2, [r3, #16]
          break;
 8001b5e:	e009      	b.n	8001b74 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b60:	2308      	movs	r3, #8
 8001b62:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	69fa      	ldr	r2, [r7, #28]
 8001b68:	615a      	str	r2, [r3, #20]
          break;
 8001b6a:	e003      	b.n	8001b74 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	623b      	str	r3, [r7, #32]
          break;
 8001b70:	e000      	b.n	8001b74 <HAL_GPIO_Init+0x130>
          break;
 8001b72:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001b74:	69bb      	ldr	r3, [r7, #24]
 8001b76:	2bff      	cmp	r3, #255	@ 0xff
 8001b78:	d801      	bhi.n	8001b7e <HAL_GPIO_Init+0x13a>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	e001      	b.n	8001b82 <HAL_GPIO_Init+0x13e>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	3304      	adds	r3, #4
 8001b82:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001b84:	69bb      	ldr	r3, [r7, #24]
 8001b86:	2bff      	cmp	r3, #255	@ 0xff
 8001b88:	d802      	bhi.n	8001b90 <HAL_GPIO_Init+0x14c>
 8001b8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b8c:	009b      	lsls	r3, r3, #2
 8001b8e:	e002      	b.n	8001b96 <HAL_GPIO_Init+0x152>
 8001b90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b92:	3b08      	subs	r3, #8
 8001b94:	009b      	lsls	r3, r3, #2
 8001b96:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001b98:	697b      	ldr	r3, [r7, #20]
 8001b9a:	681a      	ldr	r2, [r3, #0]
 8001b9c:	210f      	movs	r1, #15
 8001b9e:	693b      	ldr	r3, [r7, #16]
 8001ba0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ba4:	43db      	mvns	r3, r3
 8001ba6:	401a      	ands	r2, r3
 8001ba8:	6a39      	ldr	r1, [r7, #32]
 8001baa:	693b      	ldr	r3, [r7, #16]
 8001bac:	fa01 f303 	lsl.w	r3, r1, r3
 8001bb0:	431a      	orrs	r2, r3
 8001bb2:	697b      	ldr	r3, [r7, #20]
 8001bb4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	f000 80b1 	beq.w	8001d26 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001bc4:	4b4d      	ldr	r3, [pc, #308]	@ (8001cfc <HAL_GPIO_Init+0x2b8>)
 8001bc6:	699b      	ldr	r3, [r3, #24]
 8001bc8:	4a4c      	ldr	r2, [pc, #304]	@ (8001cfc <HAL_GPIO_Init+0x2b8>)
 8001bca:	f043 0301 	orr.w	r3, r3, #1
 8001bce:	6193      	str	r3, [r2, #24]
 8001bd0:	4b4a      	ldr	r3, [pc, #296]	@ (8001cfc <HAL_GPIO_Init+0x2b8>)
 8001bd2:	699b      	ldr	r3, [r3, #24]
 8001bd4:	f003 0301 	and.w	r3, r3, #1
 8001bd8:	60bb      	str	r3, [r7, #8]
 8001bda:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001bdc:	4a48      	ldr	r2, [pc, #288]	@ (8001d00 <HAL_GPIO_Init+0x2bc>)
 8001bde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001be0:	089b      	lsrs	r3, r3, #2
 8001be2:	3302      	adds	r3, #2
 8001be4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001be8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001bea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bec:	f003 0303 	and.w	r3, r3, #3
 8001bf0:	009b      	lsls	r3, r3, #2
 8001bf2:	220f      	movs	r2, #15
 8001bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf8:	43db      	mvns	r3, r3
 8001bfa:	68fa      	ldr	r2, [r7, #12]
 8001bfc:	4013      	ands	r3, r2
 8001bfe:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	4a40      	ldr	r2, [pc, #256]	@ (8001d04 <HAL_GPIO_Init+0x2c0>)
 8001c04:	4293      	cmp	r3, r2
 8001c06:	d013      	beq.n	8001c30 <HAL_GPIO_Init+0x1ec>
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	4a3f      	ldr	r2, [pc, #252]	@ (8001d08 <HAL_GPIO_Init+0x2c4>)
 8001c0c:	4293      	cmp	r3, r2
 8001c0e:	d00d      	beq.n	8001c2c <HAL_GPIO_Init+0x1e8>
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	4a3e      	ldr	r2, [pc, #248]	@ (8001d0c <HAL_GPIO_Init+0x2c8>)
 8001c14:	4293      	cmp	r3, r2
 8001c16:	d007      	beq.n	8001c28 <HAL_GPIO_Init+0x1e4>
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	4a3d      	ldr	r2, [pc, #244]	@ (8001d10 <HAL_GPIO_Init+0x2cc>)
 8001c1c:	4293      	cmp	r3, r2
 8001c1e:	d101      	bne.n	8001c24 <HAL_GPIO_Init+0x1e0>
 8001c20:	2303      	movs	r3, #3
 8001c22:	e006      	b.n	8001c32 <HAL_GPIO_Init+0x1ee>
 8001c24:	2304      	movs	r3, #4
 8001c26:	e004      	b.n	8001c32 <HAL_GPIO_Init+0x1ee>
 8001c28:	2302      	movs	r3, #2
 8001c2a:	e002      	b.n	8001c32 <HAL_GPIO_Init+0x1ee>
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	e000      	b.n	8001c32 <HAL_GPIO_Init+0x1ee>
 8001c30:	2300      	movs	r3, #0
 8001c32:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c34:	f002 0203 	and.w	r2, r2, #3
 8001c38:	0092      	lsls	r2, r2, #2
 8001c3a:	4093      	lsls	r3, r2
 8001c3c:	68fa      	ldr	r2, [r7, #12]
 8001c3e:	4313      	orrs	r3, r2
 8001c40:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001c42:	492f      	ldr	r1, [pc, #188]	@ (8001d00 <HAL_GPIO_Init+0x2bc>)
 8001c44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c46:	089b      	lsrs	r3, r3, #2
 8001c48:	3302      	adds	r3, #2
 8001c4a:	68fa      	ldr	r2, [r7, #12]
 8001c4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d006      	beq.n	8001c6a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001c5c:	4b2d      	ldr	r3, [pc, #180]	@ (8001d14 <HAL_GPIO_Init+0x2d0>)
 8001c5e:	689a      	ldr	r2, [r3, #8]
 8001c60:	492c      	ldr	r1, [pc, #176]	@ (8001d14 <HAL_GPIO_Init+0x2d0>)
 8001c62:	69bb      	ldr	r3, [r7, #24]
 8001c64:	4313      	orrs	r3, r2
 8001c66:	608b      	str	r3, [r1, #8]
 8001c68:	e006      	b.n	8001c78 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001c6a:	4b2a      	ldr	r3, [pc, #168]	@ (8001d14 <HAL_GPIO_Init+0x2d0>)
 8001c6c:	689a      	ldr	r2, [r3, #8]
 8001c6e:	69bb      	ldr	r3, [r7, #24]
 8001c70:	43db      	mvns	r3, r3
 8001c72:	4928      	ldr	r1, [pc, #160]	@ (8001d14 <HAL_GPIO_Init+0x2d0>)
 8001c74:	4013      	ands	r3, r2
 8001c76:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d006      	beq.n	8001c92 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001c84:	4b23      	ldr	r3, [pc, #140]	@ (8001d14 <HAL_GPIO_Init+0x2d0>)
 8001c86:	68da      	ldr	r2, [r3, #12]
 8001c88:	4922      	ldr	r1, [pc, #136]	@ (8001d14 <HAL_GPIO_Init+0x2d0>)
 8001c8a:	69bb      	ldr	r3, [r7, #24]
 8001c8c:	4313      	orrs	r3, r2
 8001c8e:	60cb      	str	r3, [r1, #12]
 8001c90:	e006      	b.n	8001ca0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001c92:	4b20      	ldr	r3, [pc, #128]	@ (8001d14 <HAL_GPIO_Init+0x2d0>)
 8001c94:	68da      	ldr	r2, [r3, #12]
 8001c96:	69bb      	ldr	r3, [r7, #24]
 8001c98:	43db      	mvns	r3, r3
 8001c9a:	491e      	ldr	r1, [pc, #120]	@ (8001d14 <HAL_GPIO_Init+0x2d0>)
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d006      	beq.n	8001cba <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001cac:	4b19      	ldr	r3, [pc, #100]	@ (8001d14 <HAL_GPIO_Init+0x2d0>)
 8001cae:	685a      	ldr	r2, [r3, #4]
 8001cb0:	4918      	ldr	r1, [pc, #96]	@ (8001d14 <HAL_GPIO_Init+0x2d0>)
 8001cb2:	69bb      	ldr	r3, [r7, #24]
 8001cb4:	4313      	orrs	r3, r2
 8001cb6:	604b      	str	r3, [r1, #4]
 8001cb8:	e006      	b.n	8001cc8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001cba:	4b16      	ldr	r3, [pc, #88]	@ (8001d14 <HAL_GPIO_Init+0x2d0>)
 8001cbc:	685a      	ldr	r2, [r3, #4]
 8001cbe:	69bb      	ldr	r3, [r7, #24]
 8001cc0:	43db      	mvns	r3, r3
 8001cc2:	4914      	ldr	r1, [pc, #80]	@ (8001d14 <HAL_GPIO_Init+0x2d0>)
 8001cc4:	4013      	ands	r3, r2
 8001cc6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d021      	beq.n	8001d18 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001cd4:	4b0f      	ldr	r3, [pc, #60]	@ (8001d14 <HAL_GPIO_Init+0x2d0>)
 8001cd6:	681a      	ldr	r2, [r3, #0]
 8001cd8:	490e      	ldr	r1, [pc, #56]	@ (8001d14 <HAL_GPIO_Init+0x2d0>)
 8001cda:	69bb      	ldr	r3, [r7, #24]
 8001cdc:	4313      	orrs	r3, r2
 8001cde:	600b      	str	r3, [r1, #0]
 8001ce0:	e021      	b.n	8001d26 <HAL_GPIO_Init+0x2e2>
 8001ce2:	bf00      	nop
 8001ce4:	10320000 	.word	0x10320000
 8001ce8:	10310000 	.word	0x10310000
 8001cec:	10220000 	.word	0x10220000
 8001cf0:	10210000 	.word	0x10210000
 8001cf4:	10120000 	.word	0x10120000
 8001cf8:	10110000 	.word	0x10110000
 8001cfc:	40021000 	.word	0x40021000
 8001d00:	40010000 	.word	0x40010000
 8001d04:	40010800 	.word	0x40010800
 8001d08:	40010c00 	.word	0x40010c00
 8001d0c:	40011000 	.word	0x40011000
 8001d10:	40011400 	.word	0x40011400
 8001d14:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001d18:	4b0b      	ldr	r3, [pc, #44]	@ (8001d48 <HAL_GPIO_Init+0x304>)
 8001d1a:	681a      	ldr	r2, [r3, #0]
 8001d1c:	69bb      	ldr	r3, [r7, #24]
 8001d1e:	43db      	mvns	r3, r3
 8001d20:	4909      	ldr	r1, [pc, #36]	@ (8001d48 <HAL_GPIO_Init+0x304>)
 8001d22:	4013      	ands	r3, r2
 8001d24:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001d26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d28:	3301      	adds	r3, #1
 8001d2a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	681a      	ldr	r2, [r3, #0]
 8001d30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d32:	fa22 f303 	lsr.w	r3, r2, r3
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	f47f ae8e 	bne.w	8001a58 <HAL_GPIO_Init+0x14>
  }
}
 8001d3c:	bf00      	nop
 8001d3e:	bf00      	nop
 8001d40:	372c      	adds	r7, #44	@ 0x2c
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bc80      	pop	{r7}
 8001d46:	4770      	bx	lr
 8001d48:	40010400 	.word	0x40010400

08001d4c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b084      	sub	sp, #16
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d101      	bne.n	8001d5e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	e12b      	b.n	8001fb6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001d64:	b2db      	uxtb	r3, r3
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d106      	bne.n	8001d78 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001d72:	6878      	ldr	r0, [r7, #4]
 8001d74:	f7ff f986 	bl	8001084 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2224      	movs	r2, #36	@ 0x24
 8001d7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	681a      	ldr	r2, [r3, #0]
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f022 0201 	bic.w	r2, r2, #1
 8001d8e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	681a      	ldr	r2, [r3, #0]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001d9e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	681a      	ldr	r2, [r3, #0]
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001dae:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001db0:	f001 fbfc 	bl	80035ac <HAL_RCC_GetPCLK1Freq>
 8001db4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	4a81      	ldr	r2, [pc, #516]	@ (8001fc0 <HAL_I2C_Init+0x274>)
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d807      	bhi.n	8001dd0 <HAL_I2C_Init+0x84>
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	4a80      	ldr	r2, [pc, #512]	@ (8001fc4 <HAL_I2C_Init+0x278>)
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	bf94      	ite	ls
 8001dc8:	2301      	movls	r3, #1
 8001dca:	2300      	movhi	r3, #0
 8001dcc:	b2db      	uxtb	r3, r3
 8001dce:	e006      	b.n	8001dde <HAL_I2C_Init+0x92>
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	4a7d      	ldr	r2, [pc, #500]	@ (8001fc8 <HAL_I2C_Init+0x27c>)
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	bf94      	ite	ls
 8001dd8:	2301      	movls	r3, #1
 8001dda:	2300      	movhi	r3, #0
 8001ddc:	b2db      	uxtb	r3, r3
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d001      	beq.n	8001de6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001de2:	2301      	movs	r3, #1
 8001de4:	e0e7      	b.n	8001fb6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	4a78      	ldr	r2, [pc, #480]	@ (8001fcc <HAL_I2C_Init+0x280>)
 8001dea:	fba2 2303 	umull	r2, r3, r2, r3
 8001dee:	0c9b      	lsrs	r3, r3, #18
 8001df0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	68ba      	ldr	r2, [r7, #8]
 8001e02:	430a      	orrs	r2, r1
 8001e04:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	6a1b      	ldr	r3, [r3, #32]
 8001e0c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	4a6a      	ldr	r2, [pc, #424]	@ (8001fc0 <HAL_I2C_Init+0x274>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d802      	bhi.n	8001e20 <HAL_I2C_Init+0xd4>
 8001e1a:	68bb      	ldr	r3, [r7, #8]
 8001e1c:	3301      	adds	r3, #1
 8001e1e:	e009      	b.n	8001e34 <HAL_I2C_Init+0xe8>
 8001e20:	68bb      	ldr	r3, [r7, #8]
 8001e22:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001e26:	fb02 f303 	mul.w	r3, r2, r3
 8001e2a:	4a69      	ldr	r2, [pc, #420]	@ (8001fd0 <HAL_I2C_Init+0x284>)
 8001e2c:	fba2 2303 	umull	r2, r3, r2, r3
 8001e30:	099b      	lsrs	r3, r3, #6
 8001e32:	3301      	adds	r3, #1
 8001e34:	687a      	ldr	r2, [r7, #4]
 8001e36:	6812      	ldr	r2, [r2, #0]
 8001e38:	430b      	orrs	r3, r1
 8001e3a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	69db      	ldr	r3, [r3, #28]
 8001e42:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001e46:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	495c      	ldr	r1, [pc, #368]	@ (8001fc0 <HAL_I2C_Init+0x274>)
 8001e50:	428b      	cmp	r3, r1
 8001e52:	d819      	bhi.n	8001e88 <HAL_I2C_Init+0x13c>
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	1e59      	subs	r1, r3, #1
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	005b      	lsls	r3, r3, #1
 8001e5e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e62:	1c59      	adds	r1, r3, #1
 8001e64:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001e68:	400b      	ands	r3, r1
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d00a      	beq.n	8001e84 <HAL_I2C_Init+0x138>
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	1e59      	subs	r1, r3, #1
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	005b      	lsls	r3, r3, #1
 8001e78:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e7c:	3301      	adds	r3, #1
 8001e7e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e82:	e051      	b.n	8001f28 <HAL_I2C_Init+0x1dc>
 8001e84:	2304      	movs	r3, #4
 8001e86:	e04f      	b.n	8001f28 <HAL_I2C_Init+0x1dc>
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	689b      	ldr	r3, [r3, #8]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d111      	bne.n	8001eb4 <HAL_I2C_Init+0x168>
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	1e58      	subs	r0, r3, #1
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6859      	ldr	r1, [r3, #4]
 8001e98:	460b      	mov	r3, r1
 8001e9a:	005b      	lsls	r3, r3, #1
 8001e9c:	440b      	add	r3, r1
 8001e9e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ea2:	3301      	adds	r3, #1
 8001ea4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	bf0c      	ite	eq
 8001eac:	2301      	moveq	r3, #1
 8001eae:	2300      	movne	r3, #0
 8001eb0:	b2db      	uxtb	r3, r3
 8001eb2:	e012      	b.n	8001eda <HAL_I2C_Init+0x18e>
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	1e58      	subs	r0, r3, #1
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6859      	ldr	r1, [r3, #4]
 8001ebc:	460b      	mov	r3, r1
 8001ebe:	009b      	lsls	r3, r3, #2
 8001ec0:	440b      	add	r3, r1
 8001ec2:	0099      	lsls	r1, r3, #2
 8001ec4:	440b      	add	r3, r1
 8001ec6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001eca:	3301      	adds	r3, #1
 8001ecc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	bf0c      	ite	eq
 8001ed4:	2301      	moveq	r3, #1
 8001ed6:	2300      	movne	r3, #0
 8001ed8:	b2db      	uxtb	r3, r3
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d001      	beq.n	8001ee2 <HAL_I2C_Init+0x196>
 8001ede:	2301      	movs	r3, #1
 8001ee0:	e022      	b.n	8001f28 <HAL_I2C_Init+0x1dc>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	689b      	ldr	r3, [r3, #8]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d10e      	bne.n	8001f08 <HAL_I2C_Init+0x1bc>
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	1e58      	subs	r0, r3, #1
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6859      	ldr	r1, [r3, #4]
 8001ef2:	460b      	mov	r3, r1
 8001ef4:	005b      	lsls	r3, r3, #1
 8001ef6:	440b      	add	r3, r1
 8001ef8:	fbb0 f3f3 	udiv	r3, r0, r3
 8001efc:	3301      	adds	r3, #1
 8001efe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f02:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001f06:	e00f      	b.n	8001f28 <HAL_I2C_Init+0x1dc>
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	1e58      	subs	r0, r3, #1
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6859      	ldr	r1, [r3, #4]
 8001f10:	460b      	mov	r3, r1
 8001f12:	009b      	lsls	r3, r3, #2
 8001f14:	440b      	add	r3, r1
 8001f16:	0099      	lsls	r1, r3, #2
 8001f18:	440b      	add	r3, r1
 8001f1a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f1e:	3301      	adds	r3, #1
 8001f20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f24:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001f28:	6879      	ldr	r1, [r7, #4]
 8001f2a:	6809      	ldr	r1, [r1, #0]
 8001f2c:	4313      	orrs	r3, r2
 8001f2e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	69da      	ldr	r2, [r3, #28]
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6a1b      	ldr	r3, [r3, #32]
 8001f42:	431a      	orrs	r2, r3
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	430a      	orrs	r2, r1
 8001f4a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	689b      	ldr	r3, [r3, #8]
 8001f52:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001f56:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001f5a:	687a      	ldr	r2, [r7, #4]
 8001f5c:	6911      	ldr	r1, [r2, #16]
 8001f5e:	687a      	ldr	r2, [r7, #4]
 8001f60:	68d2      	ldr	r2, [r2, #12]
 8001f62:	4311      	orrs	r1, r2
 8001f64:	687a      	ldr	r2, [r7, #4]
 8001f66:	6812      	ldr	r2, [r2, #0]
 8001f68:	430b      	orrs	r3, r1
 8001f6a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	68db      	ldr	r3, [r3, #12]
 8001f72:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	695a      	ldr	r2, [r3, #20]
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	699b      	ldr	r3, [r3, #24]
 8001f7e:	431a      	orrs	r2, r3
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	430a      	orrs	r2, r1
 8001f86:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	681a      	ldr	r2, [r3, #0]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f042 0201 	orr.w	r2, r2, #1
 8001f96:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2220      	movs	r2, #32
 8001fa2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2200      	movs	r2, #0
 8001faa:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2200      	movs	r2, #0
 8001fb0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001fb4:	2300      	movs	r3, #0
}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	3710      	adds	r7, #16
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	000186a0 	.word	0x000186a0
 8001fc4:	001e847f 	.word	0x001e847f
 8001fc8:	003d08ff 	.word	0x003d08ff
 8001fcc:	431bde83 	.word	0x431bde83
 8001fd0:	10624dd3 	.word	0x10624dd3

08001fd4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b088      	sub	sp, #32
 8001fd8:	af02      	add	r7, sp, #8
 8001fda:	60f8      	str	r0, [r7, #12]
 8001fdc:	4608      	mov	r0, r1
 8001fde:	4611      	mov	r1, r2
 8001fe0:	461a      	mov	r2, r3
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	817b      	strh	r3, [r7, #10]
 8001fe6:	460b      	mov	r3, r1
 8001fe8:	813b      	strh	r3, [r7, #8]
 8001fea:	4613      	mov	r3, r2
 8001fec:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001fee:	f7ff fc17 	bl	8001820 <HAL_GetTick>
 8001ff2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001ffa:	b2db      	uxtb	r3, r3
 8001ffc:	2b20      	cmp	r3, #32
 8001ffe:	f040 80d9 	bne.w	80021b4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002002:	697b      	ldr	r3, [r7, #20]
 8002004:	9300      	str	r3, [sp, #0]
 8002006:	2319      	movs	r3, #25
 8002008:	2201      	movs	r2, #1
 800200a:	496d      	ldr	r1, [pc, #436]	@ (80021c0 <HAL_I2C_Mem_Write+0x1ec>)
 800200c:	68f8      	ldr	r0, [r7, #12]
 800200e:	f000 fccd 	bl	80029ac <I2C_WaitOnFlagUntilTimeout>
 8002012:	4603      	mov	r3, r0
 8002014:	2b00      	cmp	r3, #0
 8002016:	d001      	beq.n	800201c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002018:	2302      	movs	r3, #2
 800201a:	e0cc      	b.n	80021b6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002022:	2b01      	cmp	r3, #1
 8002024:	d101      	bne.n	800202a <HAL_I2C_Mem_Write+0x56>
 8002026:	2302      	movs	r3, #2
 8002028:	e0c5      	b.n	80021b6 <HAL_I2C_Mem_Write+0x1e2>
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	2201      	movs	r2, #1
 800202e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f003 0301 	and.w	r3, r3, #1
 800203c:	2b01      	cmp	r3, #1
 800203e:	d007      	beq.n	8002050 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	681a      	ldr	r2, [r3, #0]
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f042 0201 	orr.w	r2, r2, #1
 800204e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	681a      	ldr	r2, [r3, #0]
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800205e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	2221      	movs	r2, #33	@ 0x21
 8002064:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	2240      	movs	r2, #64	@ 0x40
 800206c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	2200      	movs	r2, #0
 8002074:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	6a3a      	ldr	r2, [r7, #32]
 800207a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002080:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002086:	b29a      	uxth	r2, r3
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	4a4d      	ldr	r2, [pc, #308]	@ (80021c4 <HAL_I2C_Mem_Write+0x1f0>)
 8002090:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002092:	88f8      	ldrh	r0, [r7, #6]
 8002094:	893a      	ldrh	r2, [r7, #8]
 8002096:	8979      	ldrh	r1, [r7, #10]
 8002098:	697b      	ldr	r3, [r7, #20]
 800209a:	9301      	str	r3, [sp, #4]
 800209c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800209e:	9300      	str	r3, [sp, #0]
 80020a0:	4603      	mov	r3, r0
 80020a2:	68f8      	ldr	r0, [r7, #12]
 80020a4:	f000 fb04 	bl	80026b0 <I2C_RequestMemoryWrite>
 80020a8:	4603      	mov	r3, r0
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d052      	beq.n	8002154 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80020ae:	2301      	movs	r3, #1
 80020b0:	e081      	b.n	80021b6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020b2:	697a      	ldr	r2, [r7, #20]
 80020b4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80020b6:	68f8      	ldr	r0, [r7, #12]
 80020b8:	f000 fd92 	bl	8002be0 <I2C_WaitOnTXEFlagUntilTimeout>
 80020bc:	4603      	mov	r3, r0
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d00d      	beq.n	80020de <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020c6:	2b04      	cmp	r3, #4
 80020c8:	d107      	bne.n	80020da <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	681a      	ldr	r2, [r3, #0]
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80020d8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80020da:	2301      	movs	r3, #1
 80020dc:	e06b      	b.n	80021b6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020e2:	781a      	ldrb	r2, [r3, #0]
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020ee:	1c5a      	adds	r2, r3, #1
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020f8:	3b01      	subs	r3, #1
 80020fa:	b29a      	uxth	r2, r3
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002104:	b29b      	uxth	r3, r3
 8002106:	3b01      	subs	r3, #1
 8002108:	b29a      	uxth	r2, r3
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	695b      	ldr	r3, [r3, #20]
 8002114:	f003 0304 	and.w	r3, r3, #4
 8002118:	2b04      	cmp	r3, #4
 800211a:	d11b      	bne.n	8002154 <HAL_I2C_Mem_Write+0x180>
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002120:	2b00      	cmp	r3, #0
 8002122:	d017      	beq.n	8002154 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002128:	781a      	ldrb	r2, [r3, #0]
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002134:	1c5a      	adds	r2, r3, #1
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800213e:	3b01      	subs	r3, #1
 8002140:	b29a      	uxth	r2, r3
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800214a:	b29b      	uxth	r3, r3
 800214c:	3b01      	subs	r3, #1
 800214e:	b29a      	uxth	r2, r3
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002158:	2b00      	cmp	r3, #0
 800215a:	d1aa      	bne.n	80020b2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800215c:	697a      	ldr	r2, [r7, #20]
 800215e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002160:	68f8      	ldr	r0, [r7, #12]
 8002162:	f000 fd85 	bl	8002c70 <I2C_WaitOnBTFFlagUntilTimeout>
 8002166:	4603      	mov	r3, r0
 8002168:	2b00      	cmp	r3, #0
 800216a:	d00d      	beq.n	8002188 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002170:	2b04      	cmp	r3, #4
 8002172:	d107      	bne.n	8002184 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	681a      	ldr	r2, [r3, #0]
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002182:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002184:	2301      	movs	r3, #1
 8002186:	e016      	b.n	80021b6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	681a      	ldr	r2, [r3, #0]
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002196:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	2220      	movs	r2, #32
 800219c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	2200      	movs	r2, #0
 80021a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	2200      	movs	r2, #0
 80021ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80021b0:	2300      	movs	r3, #0
 80021b2:	e000      	b.n	80021b6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80021b4:	2302      	movs	r3, #2
  }
}
 80021b6:	4618      	mov	r0, r3
 80021b8:	3718      	adds	r7, #24
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}
 80021be:	bf00      	nop
 80021c0:	00100002 	.word	0x00100002
 80021c4:	ffff0000 	.word	0xffff0000

080021c8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b08c      	sub	sp, #48	@ 0x30
 80021cc:	af02      	add	r7, sp, #8
 80021ce:	60f8      	str	r0, [r7, #12]
 80021d0:	4608      	mov	r0, r1
 80021d2:	4611      	mov	r1, r2
 80021d4:	461a      	mov	r2, r3
 80021d6:	4603      	mov	r3, r0
 80021d8:	817b      	strh	r3, [r7, #10]
 80021da:	460b      	mov	r3, r1
 80021dc:	813b      	strh	r3, [r7, #8]
 80021de:	4613      	mov	r3, r2
 80021e0:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80021e2:	2300      	movs	r3, #0
 80021e4:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80021e6:	f7ff fb1b 	bl	8001820 <HAL_GetTick>
 80021ea:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80021f2:	b2db      	uxtb	r3, r3
 80021f4:	2b20      	cmp	r3, #32
 80021f6:	f040 8250 	bne.w	800269a <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80021fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021fc:	9300      	str	r3, [sp, #0]
 80021fe:	2319      	movs	r3, #25
 8002200:	2201      	movs	r2, #1
 8002202:	4982      	ldr	r1, [pc, #520]	@ (800240c <HAL_I2C_Mem_Read+0x244>)
 8002204:	68f8      	ldr	r0, [r7, #12]
 8002206:	f000 fbd1 	bl	80029ac <I2C_WaitOnFlagUntilTimeout>
 800220a:	4603      	mov	r3, r0
 800220c:	2b00      	cmp	r3, #0
 800220e:	d001      	beq.n	8002214 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8002210:	2302      	movs	r3, #2
 8002212:	e243      	b.n	800269c <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800221a:	2b01      	cmp	r3, #1
 800221c:	d101      	bne.n	8002222 <HAL_I2C_Mem_Read+0x5a>
 800221e:	2302      	movs	r3, #2
 8002220:	e23c      	b.n	800269c <HAL_I2C_Mem_Read+0x4d4>
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	2201      	movs	r2, #1
 8002226:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f003 0301 	and.w	r3, r3, #1
 8002234:	2b01      	cmp	r3, #1
 8002236:	d007      	beq.n	8002248 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	681a      	ldr	r2, [r3, #0]
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f042 0201 	orr.w	r2, r2, #1
 8002246:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	681a      	ldr	r2, [r3, #0]
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002256:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	2222      	movs	r2, #34	@ 0x22
 800225c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	2240      	movs	r2, #64	@ 0x40
 8002264:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	2200      	movs	r2, #0
 800226c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002272:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8002278:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800227e:	b29a      	uxth	r2, r3
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	4a62      	ldr	r2, [pc, #392]	@ (8002410 <HAL_I2C_Mem_Read+0x248>)
 8002288:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800228a:	88f8      	ldrh	r0, [r7, #6]
 800228c:	893a      	ldrh	r2, [r7, #8]
 800228e:	8979      	ldrh	r1, [r7, #10]
 8002290:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002292:	9301      	str	r3, [sp, #4]
 8002294:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002296:	9300      	str	r3, [sp, #0]
 8002298:	4603      	mov	r3, r0
 800229a:	68f8      	ldr	r0, [r7, #12]
 800229c:	f000 fa9e 	bl	80027dc <I2C_RequestMemoryRead>
 80022a0:	4603      	mov	r3, r0
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d001      	beq.n	80022aa <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 80022a6:	2301      	movs	r3, #1
 80022a8:	e1f8      	b.n	800269c <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d113      	bne.n	80022da <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022b2:	2300      	movs	r3, #0
 80022b4:	61fb      	str	r3, [r7, #28]
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	695b      	ldr	r3, [r3, #20]
 80022bc:	61fb      	str	r3, [r7, #28]
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	699b      	ldr	r3, [r3, #24]
 80022c4:	61fb      	str	r3, [r7, #28]
 80022c6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	681a      	ldr	r2, [r3, #0]
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80022d6:	601a      	str	r2, [r3, #0]
 80022d8:	e1cc      	b.n	8002674 <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022de:	2b01      	cmp	r3, #1
 80022e0:	d11e      	bne.n	8002320 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	681a      	ldr	r2, [r3, #0]
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80022f0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80022f2:	b672      	cpsid	i
}
 80022f4:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022f6:	2300      	movs	r3, #0
 80022f8:	61bb      	str	r3, [r7, #24]
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	695b      	ldr	r3, [r3, #20]
 8002300:	61bb      	str	r3, [r7, #24]
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	699b      	ldr	r3, [r3, #24]
 8002308:	61bb      	str	r3, [r7, #24]
 800230a:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	681a      	ldr	r2, [r3, #0]
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800231a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800231c:	b662      	cpsie	i
}
 800231e:	e035      	b.n	800238c <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002324:	2b02      	cmp	r3, #2
 8002326:	d11e      	bne.n	8002366 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	681a      	ldr	r2, [r3, #0]
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002336:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002338:	b672      	cpsid	i
}
 800233a:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800233c:	2300      	movs	r3, #0
 800233e:	617b      	str	r3, [r7, #20]
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	695b      	ldr	r3, [r3, #20]
 8002346:	617b      	str	r3, [r7, #20]
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	699b      	ldr	r3, [r3, #24]
 800234e:	617b      	str	r3, [r7, #20]
 8002350:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	681a      	ldr	r2, [r3, #0]
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002360:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002362:	b662      	cpsie	i
}
 8002364:	e012      	b.n	800238c <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	681a      	ldr	r2, [r3, #0]
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002374:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002376:	2300      	movs	r3, #0
 8002378:	613b      	str	r3, [r7, #16]
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	695b      	ldr	r3, [r3, #20]
 8002380:	613b      	str	r3, [r7, #16]
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	699b      	ldr	r3, [r3, #24]
 8002388:	613b      	str	r3, [r7, #16]
 800238a:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 800238c:	e172      	b.n	8002674 <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002392:	2b03      	cmp	r3, #3
 8002394:	f200 811f 	bhi.w	80025d6 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800239c:	2b01      	cmp	r3, #1
 800239e:	d123      	bne.n	80023e8 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80023a2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80023a4:	68f8      	ldr	r0, [r7, #12]
 80023a6:	f000 fcab 	bl	8002d00 <I2C_WaitOnRXNEFlagUntilTimeout>
 80023aa:	4603      	mov	r3, r0
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d001      	beq.n	80023b4 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 80023b0:	2301      	movs	r3, #1
 80023b2:	e173      	b.n	800269c <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	691a      	ldr	r2, [r3, #16]
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023be:	b2d2      	uxtb	r2, r2
 80023c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023c6:	1c5a      	adds	r2, r3, #1
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023d0:	3b01      	subs	r3, #1
 80023d2:	b29a      	uxth	r2, r3
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023dc:	b29b      	uxth	r3, r3
 80023de:	3b01      	subs	r3, #1
 80023e0:	b29a      	uxth	r2, r3
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80023e6:	e145      	b.n	8002674 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023ec:	2b02      	cmp	r3, #2
 80023ee:	d152      	bne.n	8002496 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80023f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023f2:	9300      	str	r3, [sp, #0]
 80023f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80023f6:	2200      	movs	r2, #0
 80023f8:	4906      	ldr	r1, [pc, #24]	@ (8002414 <HAL_I2C_Mem_Read+0x24c>)
 80023fa:	68f8      	ldr	r0, [r7, #12]
 80023fc:	f000 fad6 	bl	80029ac <I2C_WaitOnFlagUntilTimeout>
 8002400:	4603      	mov	r3, r0
 8002402:	2b00      	cmp	r3, #0
 8002404:	d008      	beq.n	8002418 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8002406:	2301      	movs	r3, #1
 8002408:	e148      	b.n	800269c <HAL_I2C_Mem_Read+0x4d4>
 800240a:	bf00      	nop
 800240c:	00100002 	.word	0x00100002
 8002410:	ffff0000 	.word	0xffff0000
 8002414:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002418:	b672      	cpsid	i
}
 800241a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	681a      	ldr	r2, [r3, #0]
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800242a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	691a      	ldr	r2, [r3, #16]
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002436:	b2d2      	uxtb	r2, r2
 8002438:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800243e:	1c5a      	adds	r2, r3, #1
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002448:	3b01      	subs	r3, #1
 800244a:	b29a      	uxth	r2, r3
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002454:	b29b      	uxth	r3, r3
 8002456:	3b01      	subs	r3, #1
 8002458:	b29a      	uxth	r2, r3
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800245e:	b662      	cpsie	i
}
 8002460:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	691a      	ldr	r2, [r3, #16]
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800246c:	b2d2      	uxtb	r2, r2
 800246e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002474:	1c5a      	adds	r2, r3, #1
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800247e:	3b01      	subs	r3, #1
 8002480:	b29a      	uxth	r2, r3
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800248a:	b29b      	uxth	r3, r3
 800248c:	3b01      	subs	r3, #1
 800248e:	b29a      	uxth	r2, r3
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002494:	e0ee      	b.n	8002674 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002496:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002498:	9300      	str	r3, [sp, #0]
 800249a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800249c:	2200      	movs	r2, #0
 800249e:	4981      	ldr	r1, [pc, #516]	@ (80026a4 <HAL_I2C_Mem_Read+0x4dc>)
 80024a0:	68f8      	ldr	r0, [r7, #12]
 80024a2:	f000 fa83 	bl	80029ac <I2C_WaitOnFlagUntilTimeout>
 80024a6:	4603      	mov	r3, r0
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d001      	beq.n	80024b0 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 80024ac:	2301      	movs	r3, #1
 80024ae:	e0f5      	b.n	800269c <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	681a      	ldr	r2, [r3, #0]
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80024be:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80024c0:	b672      	cpsid	i
}
 80024c2:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	691a      	ldr	r2, [r3, #16]
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024ce:	b2d2      	uxtb	r2, r2
 80024d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024d6:	1c5a      	adds	r2, r3, #1
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024e0:	3b01      	subs	r3, #1
 80024e2:	b29a      	uxth	r2, r3
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024ec:	b29b      	uxth	r3, r3
 80024ee:	3b01      	subs	r3, #1
 80024f0:	b29a      	uxth	r2, r3
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80024f6:	4b6c      	ldr	r3, [pc, #432]	@ (80026a8 <HAL_I2C_Mem_Read+0x4e0>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	08db      	lsrs	r3, r3, #3
 80024fc:	4a6b      	ldr	r2, [pc, #428]	@ (80026ac <HAL_I2C_Mem_Read+0x4e4>)
 80024fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002502:	0a1a      	lsrs	r2, r3, #8
 8002504:	4613      	mov	r3, r2
 8002506:	009b      	lsls	r3, r3, #2
 8002508:	4413      	add	r3, r2
 800250a:	00da      	lsls	r2, r3, #3
 800250c:	1ad3      	subs	r3, r2, r3
 800250e:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8002510:	6a3b      	ldr	r3, [r7, #32]
 8002512:	3b01      	subs	r3, #1
 8002514:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8002516:	6a3b      	ldr	r3, [r7, #32]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d118      	bne.n	800254e <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	2200      	movs	r2, #0
 8002520:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	2220      	movs	r2, #32
 8002526:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	2200      	movs	r2, #0
 800252e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002536:	f043 0220 	orr.w	r2, r3, #32
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800253e:	b662      	cpsie	i
}
 8002540:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	2200      	movs	r2, #0
 8002546:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 800254a:	2301      	movs	r3, #1
 800254c:	e0a6      	b.n	800269c <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	695b      	ldr	r3, [r3, #20]
 8002554:	f003 0304 	and.w	r3, r3, #4
 8002558:	2b04      	cmp	r3, #4
 800255a:	d1d9      	bne.n	8002510 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	681a      	ldr	r2, [r3, #0]
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800256a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	691a      	ldr	r2, [r3, #16]
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002576:	b2d2      	uxtb	r2, r2
 8002578:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800257e:	1c5a      	adds	r2, r3, #1
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002588:	3b01      	subs	r3, #1
 800258a:	b29a      	uxth	r2, r3
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002594:	b29b      	uxth	r3, r3
 8002596:	3b01      	subs	r3, #1
 8002598:	b29a      	uxth	r2, r3
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800259e:	b662      	cpsie	i
}
 80025a0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	691a      	ldr	r2, [r3, #16]
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025ac:	b2d2      	uxtb	r2, r2
 80025ae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025b4:	1c5a      	adds	r2, r3, #1
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025be:	3b01      	subs	r3, #1
 80025c0:	b29a      	uxth	r2, r3
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025ca:	b29b      	uxth	r3, r3
 80025cc:	3b01      	subs	r3, #1
 80025ce:	b29a      	uxth	r2, r3
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80025d4:	e04e      	b.n	8002674 <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80025d8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80025da:	68f8      	ldr	r0, [r7, #12]
 80025dc:	f000 fb90 	bl	8002d00 <I2C_WaitOnRXNEFlagUntilTimeout>
 80025e0:	4603      	mov	r3, r0
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d001      	beq.n	80025ea <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 80025e6:	2301      	movs	r3, #1
 80025e8:	e058      	b.n	800269c <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	691a      	ldr	r2, [r3, #16]
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025f4:	b2d2      	uxtb	r2, r2
 80025f6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025fc:	1c5a      	adds	r2, r3, #1
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002606:	3b01      	subs	r3, #1
 8002608:	b29a      	uxth	r2, r3
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002612:	b29b      	uxth	r3, r3
 8002614:	3b01      	subs	r3, #1
 8002616:	b29a      	uxth	r2, r3
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	695b      	ldr	r3, [r3, #20]
 8002622:	f003 0304 	and.w	r3, r3, #4
 8002626:	2b04      	cmp	r3, #4
 8002628:	d124      	bne.n	8002674 <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800262e:	2b03      	cmp	r3, #3
 8002630:	d107      	bne.n	8002642 <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	681a      	ldr	r2, [r3, #0]
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002640:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	691a      	ldr	r2, [r3, #16]
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800264c:	b2d2      	uxtb	r2, r2
 800264e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002654:	1c5a      	adds	r2, r3, #1
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800265e:	3b01      	subs	r3, #1
 8002660:	b29a      	uxth	r2, r3
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800266a:	b29b      	uxth	r3, r3
 800266c:	3b01      	subs	r3, #1
 800266e:	b29a      	uxth	r2, r3
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002678:	2b00      	cmp	r3, #0
 800267a:	f47f ae88 	bne.w	800238e <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	2220      	movs	r2, #32
 8002682:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	2200      	movs	r2, #0
 800268a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	2200      	movs	r2, #0
 8002692:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002696:	2300      	movs	r3, #0
 8002698:	e000      	b.n	800269c <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 800269a:	2302      	movs	r3, #2
  }
}
 800269c:	4618      	mov	r0, r3
 800269e:	3728      	adds	r7, #40	@ 0x28
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bd80      	pop	{r7, pc}
 80026a4:	00010004 	.word	0x00010004
 80026a8:	20000000 	.word	0x20000000
 80026ac:	14f8b589 	.word	0x14f8b589

080026b0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b088      	sub	sp, #32
 80026b4:	af02      	add	r7, sp, #8
 80026b6:	60f8      	str	r0, [r7, #12]
 80026b8:	4608      	mov	r0, r1
 80026ba:	4611      	mov	r1, r2
 80026bc:	461a      	mov	r2, r3
 80026be:	4603      	mov	r3, r0
 80026c0:	817b      	strh	r3, [r7, #10]
 80026c2:	460b      	mov	r3, r1
 80026c4:	813b      	strh	r3, [r7, #8]
 80026c6:	4613      	mov	r3, r2
 80026c8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	681a      	ldr	r2, [r3, #0]
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80026d8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80026da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026dc:	9300      	str	r3, [sp, #0]
 80026de:	6a3b      	ldr	r3, [r7, #32]
 80026e0:	2200      	movs	r2, #0
 80026e2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80026e6:	68f8      	ldr	r0, [r7, #12]
 80026e8:	f000 f960 	bl	80029ac <I2C_WaitOnFlagUntilTimeout>
 80026ec:	4603      	mov	r3, r0
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d00d      	beq.n	800270e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026fc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002700:	d103      	bne.n	800270a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002708:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800270a:	2303      	movs	r3, #3
 800270c:	e05f      	b.n	80027ce <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800270e:	897b      	ldrh	r3, [r7, #10]
 8002710:	b2db      	uxtb	r3, r3
 8002712:	461a      	mov	r2, r3
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800271c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800271e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002720:	6a3a      	ldr	r2, [r7, #32]
 8002722:	492d      	ldr	r1, [pc, #180]	@ (80027d8 <I2C_RequestMemoryWrite+0x128>)
 8002724:	68f8      	ldr	r0, [r7, #12]
 8002726:	f000 f9bb 	bl	8002aa0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800272a:	4603      	mov	r3, r0
 800272c:	2b00      	cmp	r3, #0
 800272e:	d001      	beq.n	8002734 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002730:	2301      	movs	r3, #1
 8002732:	e04c      	b.n	80027ce <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002734:	2300      	movs	r3, #0
 8002736:	617b      	str	r3, [r7, #20]
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	695b      	ldr	r3, [r3, #20]
 800273e:	617b      	str	r3, [r7, #20]
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	699b      	ldr	r3, [r3, #24]
 8002746:	617b      	str	r3, [r7, #20]
 8002748:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800274a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800274c:	6a39      	ldr	r1, [r7, #32]
 800274e:	68f8      	ldr	r0, [r7, #12]
 8002750:	f000 fa46 	bl	8002be0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002754:	4603      	mov	r3, r0
 8002756:	2b00      	cmp	r3, #0
 8002758:	d00d      	beq.n	8002776 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800275e:	2b04      	cmp	r3, #4
 8002760:	d107      	bne.n	8002772 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	681a      	ldr	r2, [r3, #0]
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002770:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002772:	2301      	movs	r3, #1
 8002774:	e02b      	b.n	80027ce <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002776:	88fb      	ldrh	r3, [r7, #6]
 8002778:	2b01      	cmp	r3, #1
 800277a:	d105      	bne.n	8002788 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800277c:	893b      	ldrh	r3, [r7, #8]
 800277e:	b2da      	uxtb	r2, r3
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	611a      	str	r2, [r3, #16]
 8002786:	e021      	b.n	80027cc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002788:	893b      	ldrh	r3, [r7, #8]
 800278a:	0a1b      	lsrs	r3, r3, #8
 800278c:	b29b      	uxth	r3, r3
 800278e:	b2da      	uxtb	r2, r3
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002796:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002798:	6a39      	ldr	r1, [r7, #32]
 800279a:	68f8      	ldr	r0, [r7, #12]
 800279c:	f000 fa20 	bl	8002be0 <I2C_WaitOnTXEFlagUntilTimeout>
 80027a0:	4603      	mov	r3, r0
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d00d      	beq.n	80027c2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027aa:	2b04      	cmp	r3, #4
 80027ac:	d107      	bne.n	80027be <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	681a      	ldr	r2, [r3, #0]
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80027bc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80027be:	2301      	movs	r3, #1
 80027c0:	e005      	b.n	80027ce <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80027c2:	893b      	ldrh	r3, [r7, #8]
 80027c4:	b2da      	uxtb	r2, r3
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80027cc:	2300      	movs	r3, #0
}
 80027ce:	4618      	mov	r0, r3
 80027d0:	3718      	adds	r7, #24
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}
 80027d6:	bf00      	nop
 80027d8:	00010002 	.word	0x00010002

080027dc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b088      	sub	sp, #32
 80027e0:	af02      	add	r7, sp, #8
 80027e2:	60f8      	str	r0, [r7, #12]
 80027e4:	4608      	mov	r0, r1
 80027e6:	4611      	mov	r1, r2
 80027e8:	461a      	mov	r2, r3
 80027ea:	4603      	mov	r3, r0
 80027ec:	817b      	strh	r3, [r7, #10]
 80027ee:	460b      	mov	r3, r1
 80027f0:	813b      	strh	r3, [r7, #8]
 80027f2:	4613      	mov	r3, r2
 80027f4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	681a      	ldr	r2, [r3, #0]
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002804:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	681a      	ldr	r2, [r3, #0]
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002814:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002816:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002818:	9300      	str	r3, [sp, #0]
 800281a:	6a3b      	ldr	r3, [r7, #32]
 800281c:	2200      	movs	r2, #0
 800281e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002822:	68f8      	ldr	r0, [r7, #12]
 8002824:	f000 f8c2 	bl	80029ac <I2C_WaitOnFlagUntilTimeout>
 8002828:	4603      	mov	r3, r0
 800282a:	2b00      	cmp	r3, #0
 800282c:	d00d      	beq.n	800284a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002838:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800283c:	d103      	bne.n	8002846 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002844:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002846:	2303      	movs	r3, #3
 8002848:	e0aa      	b.n	80029a0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800284a:	897b      	ldrh	r3, [r7, #10]
 800284c:	b2db      	uxtb	r3, r3
 800284e:	461a      	mov	r2, r3
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002858:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800285a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800285c:	6a3a      	ldr	r2, [r7, #32]
 800285e:	4952      	ldr	r1, [pc, #328]	@ (80029a8 <I2C_RequestMemoryRead+0x1cc>)
 8002860:	68f8      	ldr	r0, [r7, #12]
 8002862:	f000 f91d 	bl	8002aa0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002866:	4603      	mov	r3, r0
 8002868:	2b00      	cmp	r3, #0
 800286a:	d001      	beq.n	8002870 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800286c:	2301      	movs	r3, #1
 800286e:	e097      	b.n	80029a0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002870:	2300      	movs	r3, #0
 8002872:	617b      	str	r3, [r7, #20]
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	695b      	ldr	r3, [r3, #20]
 800287a:	617b      	str	r3, [r7, #20]
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	699b      	ldr	r3, [r3, #24]
 8002882:	617b      	str	r3, [r7, #20]
 8002884:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002886:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002888:	6a39      	ldr	r1, [r7, #32]
 800288a:	68f8      	ldr	r0, [r7, #12]
 800288c:	f000 f9a8 	bl	8002be0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002890:	4603      	mov	r3, r0
 8002892:	2b00      	cmp	r3, #0
 8002894:	d00d      	beq.n	80028b2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800289a:	2b04      	cmp	r3, #4
 800289c:	d107      	bne.n	80028ae <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	681a      	ldr	r2, [r3, #0]
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80028ac:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80028ae:	2301      	movs	r3, #1
 80028b0:	e076      	b.n	80029a0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80028b2:	88fb      	ldrh	r3, [r7, #6]
 80028b4:	2b01      	cmp	r3, #1
 80028b6:	d105      	bne.n	80028c4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80028b8:	893b      	ldrh	r3, [r7, #8]
 80028ba:	b2da      	uxtb	r2, r3
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	611a      	str	r2, [r3, #16]
 80028c2:	e021      	b.n	8002908 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80028c4:	893b      	ldrh	r3, [r7, #8]
 80028c6:	0a1b      	lsrs	r3, r3, #8
 80028c8:	b29b      	uxth	r3, r3
 80028ca:	b2da      	uxtb	r2, r3
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80028d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80028d4:	6a39      	ldr	r1, [r7, #32]
 80028d6:	68f8      	ldr	r0, [r7, #12]
 80028d8:	f000 f982 	bl	8002be0 <I2C_WaitOnTXEFlagUntilTimeout>
 80028dc:	4603      	mov	r3, r0
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d00d      	beq.n	80028fe <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028e6:	2b04      	cmp	r3, #4
 80028e8:	d107      	bne.n	80028fa <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	681a      	ldr	r2, [r3, #0]
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80028f8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80028fa:	2301      	movs	r3, #1
 80028fc:	e050      	b.n	80029a0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80028fe:	893b      	ldrh	r3, [r7, #8]
 8002900:	b2da      	uxtb	r2, r3
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002908:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800290a:	6a39      	ldr	r1, [r7, #32]
 800290c:	68f8      	ldr	r0, [r7, #12]
 800290e:	f000 f967 	bl	8002be0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002912:	4603      	mov	r3, r0
 8002914:	2b00      	cmp	r3, #0
 8002916:	d00d      	beq.n	8002934 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800291c:	2b04      	cmp	r3, #4
 800291e:	d107      	bne.n	8002930 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	681a      	ldr	r2, [r3, #0]
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800292e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002930:	2301      	movs	r3, #1
 8002932:	e035      	b.n	80029a0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	681a      	ldr	r2, [r3, #0]
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002942:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002944:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002946:	9300      	str	r3, [sp, #0]
 8002948:	6a3b      	ldr	r3, [r7, #32]
 800294a:	2200      	movs	r2, #0
 800294c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002950:	68f8      	ldr	r0, [r7, #12]
 8002952:	f000 f82b 	bl	80029ac <I2C_WaitOnFlagUntilTimeout>
 8002956:	4603      	mov	r3, r0
 8002958:	2b00      	cmp	r3, #0
 800295a:	d00d      	beq.n	8002978 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002966:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800296a:	d103      	bne.n	8002974 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002972:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002974:	2303      	movs	r3, #3
 8002976:	e013      	b.n	80029a0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002978:	897b      	ldrh	r3, [r7, #10]
 800297a:	b2db      	uxtb	r3, r3
 800297c:	f043 0301 	orr.w	r3, r3, #1
 8002980:	b2da      	uxtb	r2, r3
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002988:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800298a:	6a3a      	ldr	r2, [r7, #32]
 800298c:	4906      	ldr	r1, [pc, #24]	@ (80029a8 <I2C_RequestMemoryRead+0x1cc>)
 800298e:	68f8      	ldr	r0, [r7, #12]
 8002990:	f000 f886 	bl	8002aa0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002994:	4603      	mov	r3, r0
 8002996:	2b00      	cmp	r3, #0
 8002998:	d001      	beq.n	800299e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800299a:	2301      	movs	r3, #1
 800299c:	e000      	b.n	80029a0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800299e:	2300      	movs	r3, #0
}
 80029a0:	4618      	mov	r0, r3
 80029a2:	3718      	adds	r7, #24
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bd80      	pop	{r7, pc}
 80029a8:	00010002 	.word	0x00010002

080029ac <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b084      	sub	sp, #16
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	60f8      	str	r0, [r7, #12]
 80029b4:	60b9      	str	r1, [r7, #8]
 80029b6:	603b      	str	r3, [r7, #0]
 80029b8:	4613      	mov	r3, r2
 80029ba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80029bc:	e048      	b.n	8002a50 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80029c4:	d044      	beq.n	8002a50 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029c6:	f7fe ff2b 	bl	8001820 <HAL_GetTick>
 80029ca:	4602      	mov	r2, r0
 80029cc:	69bb      	ldr	r3, [r7, #24]
 80029ce:	1ad3      	subs	r3, r2, r3
 80029d0:	683a      	ldr	r2, [r7, #0]
 80029d2:	429a      	cmp	r2, r3
 80029d4:	d302      	bcc.n	80029dc <I2C_WaitOnFlagUntilTimeout+0x30>
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d139      	bne.n	8002a50 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80029dc:	68bb      	ldr	r3, [r7, #8]
 80029de:	0c1b      	lsrs	r3, r3, #16
 80029e0:	b2db      	uxtb	r3, r3
 80029e2:	2b01      	cmp	r3, #1
 80029e4:	d10d      	bne.n	8002a02 <I2C_WaitOnFlagUntilTimeout+0x56>
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	695b      	ldr	r3, [r3, #20]
 80029ec:	43da      	mvns	r2, r3
 80029ee:	68bb      	ldr	r3, [r7, #8]
 80029f0:	4013      	ands	r3, r2
 80029f2:	b29b      	uxth	r3, r3
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	bf0c      	ite	eq
 80029f8:	2301      	moveq	r3, #1
 80029fa:	2300      	movne	r3, #0
 80029fc:	b2db      	uxtb	r3, r3
 80029fe:	461a      	mov	r2, r3
 8002a00:	e00c      	b.n	8002a1c <I2C_WaitOnFlagUntilTimeout+0x70>
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	699b      	ldr	r3, [r3, #24]
 8002a08:	43da      	mvns	r2, r3
 8002a0a:	68bb      	ldr	r3, [r7, #8]
 8002a0c:	4013      	ands	r3, r2
 8002a0e:	b29b      	uxth	r3, r3
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	bf0c      	ite	eq
 8002a14:	2301      	moveq	r3, #1
 8002a16:	2300      	movne	r3, #0
 8002a18:	b2db      	uxtb	r3, r3
 8002a1a:	461a      	mov	r2, r3
 8002a1c:	79fb      	ldrb	r3, [r7, #7]
 8002a1e:	429a      	cmp	r2, r3
 8002a20:	d116      	bne.n	8002a50 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	2200      	movs	r2, #0
 8002a26:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	2220      	movs	r2, #32
 8002a2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	2200      	movs	r2, #0
 8002a34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a3c:	f043 0220 	orr.w	r2, r3, #32
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	2200      	movs	r2, #0
 8002a48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	e023      	b.n	8002a98 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	0c1b      	lsrs	r3, r3, #16
 8002a54:	b2db      	uxtb	r3, r3
 8002a56:	2b01      	cmp	r3, #1
 8002a58:	d10d      	bne.n	8002a76 <I2C_WaitOnFlagUntilTimeout+0xca>
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	695b      	ldr	r3, [r3, #20]
 8002a60:	43da      	mvns	r2, r3
 8002a62:	68bb      	ldr	r3, [r7, #8]
 8002a64:	4013      	ands	r3, r2
 8002a66:	b29b      	uxth	r3, r3
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	bf0c      	ite	eq
 8002a6c:	2301      	moveq	r3, #1
 8002a6e:	2300      	movne	r3, #0
 8002a70:	b2db      	uxtb	r3, r3
 8002a72:	461a      	mov	r2, r3
 8002a74:	e00c      	b.n	8002a90 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	699b      	ldr	r3, [r3, #24]
 8002a7c:	43da      	mvns	r2, r3
 8002a7e:	68bb      	ldr	r3, [r7, #8]
 8002a80:	4013      	ands	r3, r2
 8002a82:	b29b      	uxth	r3, r3
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	bf0c      	ite	eq
 8002a88:	2301      	moveq	r3, #1
 8002a8a:	2300      	movne	r3, #0
 8002a8c:	b2db      	uxtb	r3, r3
 8002a8e:	461a      	mov	r2, r3
 8002a90:	79fb      	ldrb	r3, [r7, #7]
 8002a92:	429a      	cmp	r2, r3
 8002a94:	d093      	beq.n	80029be <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002a96:	2300      	movs	r3, #0
}
 8002a98:	4618      	mov	r0, r3
 8002a9a:	3710      	adds	r7, #16
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	bd80      	pop	{r7, pc}

08002aa0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b084      	sub	sp, #16
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	60f8      	str	r0, [r7, #12]
 8002aa8:	60b9      	str	r1, [r7, #8]
 8002aaa:	607a      	str	r2, [r7, #4]
 8002aac:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002aae:	e071      	b.n	8002b94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	695b      	ldr	r3, [r3, #20]
 8002ab6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002aba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002abe:	d123      	bne.n	8002b08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	681a      	ldr	r2, [r3, #0]
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ace:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002ad8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	2200      	movs	r2, #0
 8002ade:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	2220      	movs	r2, #32
 8002ae4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	2200      	movs	r2, #0
 8002aec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002af4:	f043 0204 	orr.w	r2, r3, #4
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	2200      	movs	r2, #0
 8002b00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002b04:	2301      	movs	r3, #1
 8002b06:	e067      	b.n	8002bd8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002b0e:	d041      	beq.n	8002b94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b10:	f7fe fe86 	bl	8001820 <HAL_GetTick>
 8002b14:	4602      	mov	r2, r0
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	1ad3      	subs	r3, r2, r3
 8002b1a:	687a      	ldr	r2, [r7, #4]
 8002b1c:	429a      	cmp	r2, r3
 8002b1e:	d302      	bcc.n	8002b26 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d136      	bne.n	8002b94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002b26:	68bb      	ldr	r3, [r7, #8]
 8002b28:	0c1b      	lsrs	r3, r3, #16
 8002b2a:	b2db      	uxtb	r3, r3
 8002b2c:	2b01      	cmp	r3, #1
 8002b2e:	d10c      	bne.n	8002b4a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	695b      	ldr	r3, [r3, #20]
 8002b36:	43da      	mvns	r2, r3
 8002b38:	68bb      	ldr	r3, [r7, #8]
 8002b3a:	4013      	ands	r3, r2
 8002b3c:	b29b      	uxth	r3, r3
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	bf14      	ite	ne
 8002b42:	2301      	movne	r3, #1
 8002b44:	2300      	moveq	r3, #0
 8002b46:	b2db      	uxtb	r3, r3
 8002b48:	e00b      	b.n	8002b62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	699b      	ldr	r3, [r3, #24]
 8002b50:	43da      	mvns	r2, r3
 8002b52:	68bb      	ldr	r3, [r7, #8]
 8002b54:	4013      	ands	r3, r2
 8002b56:	b29b      	uxth	r3, r3
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	bf14      	ite	ne
 8002b5c:	2301      	movne	r3, #1
 8002b5e:	2300      	moveq	r3, #0
 8002b60:	b2db      	uxtb	r3, r3
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d016      	beq.n	8002b94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	2220      	movs	r2, #32
 8002b70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	2200      	movs	r2, #0
 8002b78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b80:	f043 0220 	orr.w	r2, r3, #32
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002b90:	2301      	movs	r3, #1
 8002b92:	e021      	b.n	8002bd8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002b94:	68bb      	ldr	r3, [r7, #8]
 8002b96:	0c1b      	lsrs	r3, r3, #16
 8002b98:	b2db      	uxtb	r3, r3
 8002b9a:	2b01      	cmp	r3, #1
 8002b9c:	d10c      	bne.n	8002bb8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	695b      	ldr	r3, [r3, #20]
 8002ba4:	43da      	mvns	r2, r3
 8002ba6:	68bb      	ldr	r3, [r7, #8]
 8002ba8:	4013      	ands	r3, r2
 8002baa:	b29b      	uxth	r3, r3
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	bf14      	ite	ne
 8002bb0:	2301      	movne	r3, #1
 8002bb2:	2300      	moveq	r3, #0
 8002bb4:	b2db      	uxtb	r3, r3
 8002bb6:	e00b      	b.n	8002bd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	699b      	ldr	r3, [r3, #24]
 8002bbe:	43da      	mvns	r2, r3
 8002bc0:	68bb      	ldr	r3, [r7, #8]
 8002bc2:	4013      	ands	r3, r2
 8002bc4:	b29b      	uxth	r3, r3
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	bf14      	ite	ne
 8002bca:	2301      	movne	r3, #1
 8002bcc:	2300      	moveq	r3, #0
 8002bce:	b2db      	uxtb	r3, r3
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	f47f af6d 	bne.w	8002ab0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002bd6:	2300      	movs	r3, #0
}
 8002bd8:	4618      	mov	r0, r3
 8002bda:	3710      	adds	r7, #16
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bd80      	pop	{r7, pc}

08002be0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b084      	sub	sp, #16
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	60f8      	str	r0, [r7, #12]
 8002be8:	60b9      	str	r1, [r7, #8]
 8002bea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002bec:	e034      	b.n	8002c58 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002bee:	68f8      	ldr	r0, [r7, #12]
 8002bf0:	f000 f8e3 	bl	8002dba <I2C_IsAcknowledgeFailed>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d001      	beq.n	8002bfe <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	e034      	b.n	8002c68 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002bfe:	68bb      	ldr	r3, [r7, #8]
 8002c00:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002c04:	d028      	beq.n	8002c58 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c06:	f7fe fe0b 	bl	8001820 <HAL_GetTick>
 8002c0a:	4602      	mov	r2, r0
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	1ad3      	subs	r3, r2, r3
 8002c10:	68ba      	ldr	r2, [r7, #8]
 8002c12:	429a      	cmp	r2, r3
 8002c14:	d302      	bcc.n	8002c1c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002c16:	68bb      	ldr	r3, [r7, #8]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d11d      	bne.n	8002c58 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	695b      	ldr	r3, [r3, #20]
 8002c22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c26:	2b80      	cmp	r3, #128	@ 0x80
 8002c28:	d016      	beq.n	8002c58 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	2220      	movs	r2, #32
 8002c34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c44:	f043 0220 	orr.w	r2, r3, #32
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	2200      	movs	r2, #0
 8002c50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002c54:	2301      	movs	r3, #1
 8002c56:	e007      	b.n	8002c68 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	695b      	ldr	r3, [r3, #20]
 8002c5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c62:	2b80      	cmp	r3, #128	@ 0x80
 8002c64:	d1c3      	bne.n	8002bee <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002c66:	2300      	movs	r3, #0
}
 8002c68:	4618      	mov	r0, r3
 8002c6a:	3710      	adds	r7, #16
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bd80      	pop	{r7, pc}

08002c70 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b084      	sub	sp, #16
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	60f8      	str	r0, [r7, #12]
 8002c78:	60b9      	str	r1, [r7, #8]
 8002c7a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002c7c:	e034      	b.n	8002ce8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002c7e:	68f8      	ldr	r0, [r7, #12]
 8002c80:	f000 f89b 	bl	8002dba <I2C_IsAcknowledgeFailed>
 8002c84:	4603      	mov	r3, r0
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d001      	beq.n	8002c8e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	e034      	b.n	8002cf8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c8e:	68bb      	ldr	r3, [r7, #8]
 8002c90:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002c94:	d028      	beq.n	8002ce8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c96:	f7fe fdc3 	bl	8001820 <HAL_GetTick>
 8002c9a:	4602      	mov	r2, r0
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	1ad3      	subs	r3, r2, r3
 8002ca0:	68ba      	ldr	r2, [r7, #8]
 8002ca2:	429a      	cmp	r2, r3
 8002ca4:	d302      	bcc.n	8002cac <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002ca6:	68bb      	ldr	r3, [r7, #8]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d11d      	bne.n	8002ce8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	695b      	ldr	r3, [r3, #20]
 8002cb2:	f003 0304 	and.w	r3, r3, #4
 8002cb6:	2b04      	cmp	r3, #4
 8002cb8:	d016      	beq.n	8002ce8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	2220      	movs	r2, #32
 8002cc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	2200      	movs	r2, #0
 8002ccc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cd4:	f043 0220 	orr.w	r2, r3, #32
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	2200      	movs	r2, #0
 8002ce0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	e007      	b.n	8002cf8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	695b      	ldr	r3, [r3, #20]
 8002cee:	f003 0304 	and.w	r3, r3, #4
 8002cf2:	2b04      	cmp	r3, #4
 8002cf4:	d1c3      	bne.n	8002c7e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002cf6:	2300      	movs	r3, #0
}
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	3710      	adds	r7, #16
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bd80      	pop	{r7, pc}

08002d00 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b084      	sub	sp, #16
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	60f8      	str	r0, [r7, #12]
 8002d08:	60b9      	str	r1, [r7, #8]
 8002d0a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002d0c:	e049      	b.n	8002da2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	695b      	ldr	r3, [r3, #20]
 8002d14:	f003 0310 	and.w	r3, r3, #16
 8002d18:	2b10      	cmp	r3, #16
 8002d1a:	d119      	bne.n	8002d50 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f06f 0210 	mvn.w	r2, #16
 8002d24:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	2200      	movs	r2, #0
 8002d2a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	2220      	movs	r2, #32
 8002d30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	2200      	movs	r2, #0
 8002d38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	2200      	movs	r2, #0
 8002d48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	e030      	b.n	8002db2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d50:	f7fe fd66 	bl	8001820 <HAL_GetTick>
 8002d54:	4602      	mov	r2, r0
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	1ad3      	subs	r3, r2, r3
 8002d5a:	68ba      	ldr	r2, [r7, #8]
 8002d5c:	429a      	cmp	r2, r3
 8002d5e:	d302      	bcc.n	8002d66 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002d60:	68bb      	ldr	r3, [r7, #8]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d11d      	bne.n	8002da2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	695b      	ldr	r3, [r3, #20]
 8002d6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d70:	2b40      	cmp	r3, #64	@ 0x40
 8002d72:	d016      	beq.n	8002da2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	2200      	movs	r2, #0
 8002d78:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	2220      	movs	r2, #32
 8002d7e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	2200      	movs	r2, #0
 8002d86:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d8e:	f043 0220 	orr.w	r2, r3, #32
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	e007      	b.n	8002db2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	695b      	ldr	r3, [r3, #20]
 8002da8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002dac:	2b40      	cmp	r3, #64	@ 0x40
 8002dae:	d1ae      	bne.n	8002d0e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002db0:	2300      	movs	r3, #0
}
 8002db2:	4618      	mov	r0, r3
 8002db4:	3710      	adds	r7, #16
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bd80      	pop	{r7, pc}

08002dba <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002dba:	b480      	push	{r7}
 8002dbc:	b083      	sub	sp, #12
 8002dbe:	af00      	add	r7, sp, #0
 8002dc0:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	695b      	ldr	r3, [r3, #20]
 8002dc8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002dcc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002dd0:	d11b      	bne.n	8002e0a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002dda:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2200      	movs	r2, #0
 8002de0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2220      	movs	r2, #32
 8002de6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2200      	movs	r2, #0
 8002dee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002df6:	f043 0204 	orr.w	r2, r3, #4
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2200      	movs	r2, #0
 8002e02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002e06:	2301      	movs	r3, #1
 8002e08:	e000      	b.n	8002e0c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002e0a:	2300      	movs	r3, #0
}
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	370c      	adds	r7, #12
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bc80      	pop	{r7}
 8002e14:	4770      	bx	lr
	...

08002e18 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b086      	sub	sp, #24
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d101      	bne.n	8002e2a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e26:	2301      	movs	r3, #1
 8002e28:	e272      	b.n	8003310 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f003 0301 	and.w	r3, r3, #1
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	f000 8087 	beq.w	8002f46 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002e38:	4b92      	ldr	r3, [pc, #584]	@ (8003084 <HAL_RCC_OscConfig+0x26c>)
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	f003 030c 	and.w	r3, r3, #12
 8002e40:	2b04      	cmp	r3, #4
 8002e42:	d00c      	beq.n	8002e5e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002e44:	4b8f      	ldr	r3, [pc, #572]	@ (8003084 <HAL_RCC_OscConfig+0x26c>)
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	f003 030c 	and.w	r3, r3, #12
 8002e4c:	2b08      	cmp	r3, #8
 8002e4e:	d112      	bne.n	8002e76 <HAL_RCC_OscConfig+0x5e>
 8002e50:	4b8c      	ldr	r3, [pc, #560]	@ (8003084 <HAL_RCC_OscConfig+0x26c>)
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e58:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e5c:	d10b      	bne.n	8002e76 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e5e:	4b89      	ldr	r3, [pc, #548]	@ (8003084 <HAL_RCC_OscConfig+0x26c>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d06c      	beq.n	8002f44 <HAL_RCC_OscConfig+0x12c>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d168      	bne.n	8002f44 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002e72:	2301      	movs	r3, #1
 8002e74:	e24c      	b.n	8003310 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e7e:	d106      	bne.n	8002e8e <HAL_RCC_OscConfig+0x76>
 8002e80:	4b80      	ldr	r3, [pc, #512]	@ (8003084 <HAL_RCC_OscConfig+0x26c>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a7f      	ldr	r2, [pc, #508]	@ (8003084 <HAL_RCC_OscConfig+0x26c>)
 8002e86:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e8a:	6013      	str	r3, [r2, #0]
 8002e8c:	e02e      	b.n	8002eec <HAL_RCC_OscConfig+0xd4>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d10c      	bne.n	8002eb0 <HAL_RCC_OscConfig+0x98>
 8002e96:	4b7b      	ldr	r3, [pc, #492]	@ (8003084 <HAL_RCC_OscConfig+0x26c>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4a7a      	ldr	r2, [pc, #488]	@ (8003084 <HAL_RCC_OscConfig+0x26c>)
 8002e9c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ea0:	6013      	str	r3, [r2, #0]
 8002ea2:	4b78      	ldr	r3, [pc, #480]	@ (8003084 <HAL_RCC_OscConfig+0x26c>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4a77      	ldr	r2, [pc, #476]	@ (8003084 <HAL_RCC_OscConfig+0x26c>)
 8002ea8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002eac:	6013      	str	r3, [r2, #0]
 8002eae:	e01d      	b.n	8002eec <HAL_RCC_OscConfig+0xd4>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002eb8:	d10c      	bne.n	8002ed4 <HAL_RCC_OscConfig+0xbc>
 8002eba:	4b72      	ldr	r3, [pc, #456]	@ (8003084 <HAL_RCC_OscConfig+0x26c>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4a71      	ldr	r2, [pc, #452]	@ (8003084 <HAL_RCC_OscConfig+0x26c>)
 8002ec0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002ec4:	6013      	str	r3, [r2, #0]
 8002ec6:	4b6f      	ldr	r3, [pc, #444]	@ (8003084 <HAL_RCC_OscConfig+0x26c>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4a6e      	ldr	r2, [pc, #440]	@ (8003084 <HAL_RCC_OscConfig+0x26c>)
 8002ecc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ed0:	6013      	str	r3, [r2, #0]
 8002ed2:	e00b      	b.n	8002eec <HAL_RCC_OscConfig+0xd4>
 8002ed4:	4b6b      	ldr	r3, [pc, #428]	@ (8003084 <HAL_RCC_OscConfig+0x26c>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a6a      	ldr	r2, [pc, #424]	@ (8003084 <HAL_RCC_OscConfig+0x26c>)
 8002eda:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ede:	6013      	str	r3, [r2, #0]
 8002ee0:	4b68      	ldr	r3, [pc, #416]	@ (8003084 <HAL_RCC_OscConfig+0x26c>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a67      	ldr	r2, [pc, #412]	@ (8003084 <HAL_RCC_OscConfig+0x26c>)
 8002ee6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002eea:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d013      	beq.n	8002f1c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ef4:	f7fe fc94 	bl	8001820 <HAL_GetTick>
 8002ef8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002efa:	e008      	b.n	8002f0e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002efc:	f7fe fc90 	bl	8001820 <HAL_GetTick>
 8002f00:	4602      	mov	r2, r0
 8002f02:	693b      	ldr	r3, [r7, #16]
 8002f04:	1ad3      	subs	r3, r2, r3
 8002f06:	2b64      	cmp	r3, #100	@ 0x64
 8002f08:	d901      	bls.n	8002f0e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002f0a:	2303      	movs	r3, #3
 8002f0c:	e200      	b.n	8003310 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f0e:	4b5d      	ldr	r3, [pc, #372]	@ (8003084 <HAL_RCC_OscConfig+0x26c>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d0f0      	beq.n	8002efc <HAL_RCC_OscConfig+0xe4>
 8002f1a:	e014      	b.n	8002f46 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f1c:	f7fe fc80 	bl	8001820 <HAL_GetTick>
 8002f20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f22:	e008      	b.n	8002f36 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f24:	f7fe fc7c 	bl	8001820 <HAL_GetTick>
 8002f28:	4602      	mov	r2, r0
 8002f2a:	693b      	ldr	r3, [r7, #16]
 8002f2c:	1ad3      	subs	r3, r2, r3
 8002f2e:	2b64      	cmp	r3, #100	@ 0x64
 8002f30:	d901      	bls.n	8002f36 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002f32:	2303      	movs	r3, #3
 8002f34:	e1ec      	b.n	8003310 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f36:	4b53      	ldr	r3, [pc, #332]	@ (8003084 <HAL_RCC_OscConfig+0x26c>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d1f0      	bne.n	8002f24 <HAL_RCC_OscConfig+0x10c>
 8002f42:	e000      	b.n	8002f46 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f003 0302 	and.w	r3, r3, #2
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d063      	beq.n	800301a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002f52:	4b4c      	ldr	r3, [pc, #304]	@ (8003084 <HAL_RCC_OscConfig+0x26c>)
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	f003 030c 	and.w	r3, r3, #12
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d00b      	beq.n	8002f76 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002f5e:	4b49      	ldr	r3, [pc, #292]	@ (8003084 <HAL_RCC_OscConfig+0x26c>)
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	f003 030c 	and.w	r3, r3, #12
 8002f66:	2b08      	cmp	r3, #8
 8002f68:	d11c      	bne.n	8002fa4 <HAL_RCC_OscConfig+0x18c>
 8002f6a:	4b46      	ldr	r3, [pc, #280]	@ (8003084 <HAL_RCC_OscConfig+0x26c>)
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d116      	bne.n	8002fa4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f76:	4b43      	ldr	r3, [pc, #268]	@ (8003084 <HAL_RCC_OscConfig+0x26c>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f003 0302 	and.w	r3, r3, #2
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d005      	beq.n	8002f8e <HAL_RCC_OscConfig+0x176>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	691b      	ldr	r3, [r3, #16]
 8002f86:	2b01      	cmp	r3, #1
 8002f88:	d001      	beq.n	8002f8e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	e1c0      	b.n	8003310 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f8e:	4b3d      	ldr	r3, [pc, #244]	@ (8003084 <HAL_RCC_OscConfig+0x26c>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	695b      	ldr	r3, [r3, #20]
 8002f9a:	00db      	lsls	r3, r3, #3
 8002f9c:	4939      	ldr	r1, [pc, #228]	@ (8003084 <HAL_RCC_OscConfig+0x26c>)
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fa2:	e03a      	b.n	800301a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	691b      	ldr	r3, [r3, #16]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d020      	beq.n	8002fee <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002fac:	4b36      	ldr	r3, [pc, #216]	@ (8003088 <HAL_RCC_OscConfig+0x270>)
 8002fae:	2201      	movs	r2, #1
 8002fb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fb2:	f7fe fc35 	bl	8001820 <HAL_GetTick>
 8002fb6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fb8:	e008      	b.n	8002fcc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002fba:	f7fe fc31 	bl	8001820 <HAL_GetTick>
 8002fbe:	4602      	mov	r2, r0
 8002fc0:	693b      	ldr	r3, [r7, #16]
 8002fc2:	1ad3      	subs	r3, r2, r3
 8002fc4:	2b02      	cmp	r3, #2
 8002fc6:	d901      	bls.n	8002fcc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002fc8:	2303      	movs	r3, #3
 8002fca:	e1a1      	b.n	8003310 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fcc:	4b2d      	ldr	r3, [pc, #180]	@ (8003084 <HAL_RCC_OscConfig+0x26c>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f003 0302 	and.w	r3, r3, #2
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d0f0      	beq.n	8002fba <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fd8:	4b2a      	ldr	r3, [pc, #168]	@ (8003084 <HAL_RCC_OscConfig+0x26c>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	695b      	ldr	r3, [r3, #20]
 8002fe4:	00db      	lsls	r3, r3, #3
 8002fe6:	4927      	ldr	r1, [pc, #156]	@ (8003084 <HAL_RCC_OscConfig+0x26c>)
 8002fe8:	4313      	orrs	r3, r2
 8002fea:	600b      	str	r3, [r1, #0]
 8002fec:	e015      	b.n	800301a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002fee:	4b26      	ldr	r3, [pc, #152]	@ (8003088 <HAL_RCC_OscConfig+0x270>)
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ff4:	f7fe fc14 	bl	8001820 <HAL_GetTick>
 8002ff8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ffa:	e008      	b.n	800300e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ffc:	f7fe fc10 	bl	8001820 <HAL_GetTick>
 8003000:	4602      	mov	r2, r0
 8003002:	693b      	ldr	r3, [r7, #16]
 8003004:	1ad3      	subs	r3, r2, r3
 8003006:	2b02      	cmp	r3, #2
 8003008:	d901      	bls.n	800300e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800300a:	2303      	movs	r3, #3
 800300c:	e180      	b.n	8003310 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800300e:	4b1d      	ldr	r3, [pc, #116]	@ (8003084 <HAL_RCC_OscConfig+0x26c>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f003 0302 	and.w	r3, r3, #2
 8003016:	2b00      	cmp	r3, #0
 8003018:	d1f0      	bne.n	8002ffc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f003 0308 	and.w	r3, r3, #8
 8003022:	2b00      	cmp	r3, #0
 8003024:	d03a      	beq.n	800309c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	699b      	ldr	r3, [r3, #24]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d019      	beq.n	8003062 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800302e:	4b17      	ldr	r3, [pc, #92]	@ (800308c <HAL_RCC_OscConfig+0x274>)
 8003030:	2201      	movs	r2, #1
 8003032:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003034:	f7fe fbf4 	bl	8001820 <HAL_GetTick>
 8003038:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800303a:	e008      	b.n	800304e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800303c:	f7fe fbf0 	bl	8001820 <HAL_GetTick>
 8003040:	4602      	mov	r2, r0
 8003042:	693b      	ldr	r3, [r7, #16]
 8003044:	1ad3      	subs	r3, r2, r3
 8003046:	2b02      	cmp	r3, #2
 8003048:	d901      	bls.n	800304e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800304a:	2303      	movs	r3, #3
 800304c:	e160      	b.n	8003310 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800304e:	4b0d      	ldr	r3, [pc, #52]	@ (8003084 <HAL_RCC_OscConfig+0x26c>)
 8003050:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003052:	f003 0302 	and.w	r3, r3, #2
 8003056:	2b00      	cmp	r3, #0
 8003058:	d0f0      	beq.n	800303c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800305a:	2001      	movs	r0, #1
 800305c:	f000 face 	bl	80035fc <RCC_Delay>
 8003060:	e01c      	b.n	800309c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003062:	4b0a      	ldr	r3, [pc, #40]	@ (800308c <HAL_RCC_OscConfig+0x274>)
 8003064:	2200      	movs	r2, #0
 8003066:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003068:	f7fe fbda 	bl	8001820 <HAL_GetTick>
 800306c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800306e:	e00f      	b.n	8003090 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003070:	f7fe fbd6 	bl	8001820 <HAL_GetTick>
 8003074:	4602      	mov	r2, r0
 8003076:	693b      	ldr	r3, [r7, #16]
 8003078:	1ad3      	subs	r3, r2, r3
 800307a:	2b02      	cmp	r3, #2
 800307c:	d908      	bls.n	8003090 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800307e:	2303      	movs	r3, #3
 8003080:	e146      	b.n	8003310 <HAL_RCC_OscConfig+0x4f8>
 8003082:	bf00      	nop
 8003084:	40021000 	.word	0x40021000
 8003088:	42420000 	.word	0x42420000
 800308c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003090:	4b92      	ldr	r3, [pc, #584]	@ (80032dc <HAL_RCC_OscConfig+0x4c4>)
 8003092:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003094:	f003 0302 	and.w	r3, r3, #2
 8003098:	2b00      	cmp	r3, #0
 800309a:	d1e9      	bne.n	8003070 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f003 0304 	and.w	r3, r3, #4
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	f000 80a6 	beq.w	80031f6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030aa:	2300      	movs	r3, #0
 80030ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030ae:	4b8b      	ldr	r3, [pc, #556]	@ (80032dc <HAL_RCC_OscConfig+0x4c4>)
 80030b0:	69db      	ldr	r3, [r3, #28]
 80030b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d10d      	bne.n	80030d6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030ba:	4b88      	ldr	r3, [pc, #544]	@ (80032dc <HAL_RCC_OscConfig+0x4c4>)
 80030bc:	69db      	ldr	r3, [r3, #28]
 80030be:	4a87      	ldr	r2, [pc, #540]	@ (80032dc <HAL_RCC_OscConfig+0x4c4>)
 80030c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80030c4:	61d3      	str	r3, [r2, #28]
 80030c6:	4b85      	ldr	r3, [pc, #532]	@ (80032dc <HAL_RCC_OscConfig+0x4c4>)
 80030c8:	69db      	ldr	r3, [r3, #28]
 80030ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030ce:	60bb      	str	r3, [r7, #8]
 80030d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030d2:	2301      	movs	r3, #1
 80030d4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030d6:	4b82      	ldr	r3, [pc, #520]	@ (80032e0 <HAL_RCC_OscConfig+0x4c8>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d118      	bne.n	8003114 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80030e2:	4b7f      	ldr	r3, [pc, #508]	@ (80032e0 <HAL_RCC_OscConfig+0x4c8>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4a7e      	ldr	r2, [pc, #504]	@ (80032e0 <HAL_RCC_OscConfig+0x4c8>)
 80030e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80030ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030ee:	f7fe fb97 	bl	8001820 <HAL_GetTick>
 80030f2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030f4:	e008      	b.n	8003108 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030f6:	f7fe fb93 	bl	8001820 <HAL_GetTick>
 80030fa:	4602      	mov	r2, r0
 80030fc:	693b      	ldr	r3, [r7, #16]
 80030fe:	1ad3      	subs	r3, r2, r3
 8003100:	2b64      	cmp	r3, #100	@ 0x64
 8003102:	d901      	bls.n	8003108 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003104:	2303      	movs	r3, #3
 8003106:	e103      	b.n	8003310 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003108:	4b75      	ldr	r3, [pc, #468]	@ (80032e0 <HAL_RCC_OscConfig+0x4c8>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003110:	2b00      	cmp	r3, #0
 8003112:	d0f0      	beq.n	80030f6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	68db      	ldr	r3, [r3, #12]
 8003118:	2b01      	cmp	r3, #1
 800311a:	d106      	bne.n	800312a <HAL_RCC_OscConfig+0x312>
 800311c:	4b6f      	ldr	r3, [pc, #444]	@ (80032dc <HAL_RCC_OscConfig+0x4c4>)
 800311e:	6a1b      	ldr	r3, [r3, #32]
 8003120:	4a6e      	ldr	r2, [pc, #440]	@ (80032dc <HAL_RCC_OscConfig+0x4c4>)
 8003122:	f043 0301 	orr.w	r3, r3, #1
 8003126:	6213      	str	r3, [r2, #32]
 8003128:	e02d      	b.n	8003186 <HAL_RCC_OscConfig+0x36e>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	68db      	ldr	r3, [r3, #12]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d10c      	bne.n	800314c <HAL_RCC_OscConfig+0x334>
 8003132:	4b6a      	ldr	r3, [pc, #424]	@ (80032dc <HAL_RCC_OscConfig+0x4c4>)
 8003134:	6a1b      	ldr	r3, [r3, #32]
 8003136:	4a69      	ldr	r2, [pc, #420]	@ (80032dc <HAL_RCC_OscConfig+0x4c4>)
 8003138:	f023 0301 	bic.w	r3, r3, #1
 800313c:	6213      	str	r3, [r2, #32]
 800313e:	4b67      	ldr	r3, [pc, #412]	@ (80032dc <HAL_RCC_OscConfig+0x4c4>)
 8003140:	6a1b      	ldr	r3, [r3, #32]
 8003142:	4a66      	ldr	r2, [pc, #408]	@ (80032dc <HAL_RCC_OscConfig+0x4c4>)
 8003144:	f023 0304 	bic.w	r3, r3, #4
 8003148:	6213      	str	r3, [r2, #32]
 800314a:	e01c      	b.n	8003186 <HAL_RCC_OscConfig+0x36e>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	68db      	ldr	r3, [r3, #12]
 8003150:	2b05      	cmp	r3, #5
 8003152:	d10c      	bne.n	800316e <HAL_RCC_OscConfig+0x356>
 8003154:	4b61      	ldr	r3, [pc, #388]	@ (80032dc <HAL_RCC_OscConfig+0x4c4>)
 8003156:	6a1b      	ldr	r3, [r3, #32]
 8003158:	4a60      	ldr	r2, [pc, #384]	@ (80032dc <HAL_RCC_OscConfig+0x4c4>)
 800315a:	f043 0304 	orr.w	r3, r3, #4
 800315e:	6213      	str	r3, [r2, #32]
 8003160:	4b5e      	ldr	r3, [pc, #376]	@ (80032dc <HAL_RCC_OscConfig+0x4c4>)
 8003162:	6a1b      	ldr	r3, [r3, #32]
 8003164:	4a5d      	ldr	r2, [pc, #372]	@ (80032dc <HAL_RCC_OscConfig+0x4c4>)
 8003166:	f043 0301 	orr.w	r3, r3, #1
 800316a:	6213      	str	r3, [r2, #32]
 800316c:	e00b      	b.n	8003186 <HAL_RCC_OscConfig+0x36e>
 800316e:	4b5b      	ldr	r3, [pc, #364]	@ (80032dc <HAL_RCC_OscConfig+0x4c4>)
 8003170:	6a1b      	ldr	r3, [r3, #32]
 8003172:	4a5a      	ldr	r2, [pc, #360]	@ (80032dc <HAL_RCC_OscConfig+0x4c4>)
 8003174:	f023 0301 	bic.w	r3, r3, #1
 8003178:	6213      	str	r3, [r2, #32]
 800317a:	4b58      	ldr	r3, [pc, #352]	@ (80032dc <HAL_RCC_OscConfig+0x4c4>)
 800317c:	6a1b      	ldr	r3, [r3, #32]
 800317e:	4a57      	ldr	r2, [pc, #348]	@ (80032dc <HAL_RCC_OscConfig+0x4c4>)
 8003180:	f023 0304 	bic.w	r3, r3, #4
 8003184:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	68db      	ldr	r3, [r3, #12]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d015      	beq.n	80031ba <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800318e:	f7fe fb47 	bl	8001820 <HAL_GetTick>
 8003192:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003194:	e00a      	b.n	80031ac <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003196:	f7fe fb43 	bl	8001820 <HAL_GetTick>
 800319a:	4602      	mov	r2, r0
 800319c:	693b      	ldr	r3, [r7, #16]
 800319e:	1ad3      	subs	r3, r2, r3
 80031a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d901      	bls.n	80031ac <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80031a8:	2303      	movs	r3, #3
 80031aa:	e0b1      	b.n	8003310 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031ac:	4b4b      	ldr	r3, [pc, #300]	@ (80032dc <HAL_RCC_OscConfig+0x4c4>)
 80031ae:	6a1b      	ldr	r3, [r3, #32]
 80031b0:	f003 0302 	and.w	r3, r3, #2
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d0ee      	beq.n	8003196 <HAL_RCC_OscConfig+0x37e>
 80031b8:	e014      	b.n	80031e4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031ba:	f7fe fb31 	bl	8001820 <HAL_GetTick>
 80031be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031c0:	e00a      	b.n	80031d8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031c2:	f7fe fb2d 	bl	8001820 <HAL_GetTick>
 80031c6:	4602      	mov	r2, r0
 80031c8:	693b      	ldr	r3, [r7, #16]
 80031ca:	1ad3      	subs	r3, r2, r3
 80031cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d901      	bls.n	80031d8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80031d4:	2303      	movs	r3, #3
 80031d6:	e09b      	b.n	8003310 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031d8:	4b40      	ldr	r3, [pc, #256]	@ (80032dc <HAL_RCC_OscConfig+0x4c4>)
 80031da:	6a1b      	ldr	r3, [r3, #32]
 80031dc:	f003 0302 	and.w	r3, r3, #2
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d1ee      	bne.n	80031c2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80031e4:	7dfb      	ldrb	r3, [r7, #23]
 80031e6:	2b01      	cmp	r3, #1
 80031e8:	d105      	bne.n	80031f6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031ea:	4b3c      	ldr	r3, [pc, #240]	@ (80032dc <HAL_RCC_OscConfig+0x4c4>)
 80031ec:	69db      	ldr	r3, [r3, #28]
 80031ee:	4a3b      	ldr	r2, [pc, #236]	@ (80032dc <HAL_RCC_OscConfig+0x4c4>)
 80031f0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80031f4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	69db      	ldr	r3, [r3, #28]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	f000 8087 	beq.w	800330e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003200:	4b36      	ldr	r3, [pc, #216]	@ (80032dc <HAL_RCC_OscConfig+0x4c4>)
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	f003 030c 	and.w	r3, r3, #12
 8003208:	2b08      	cmp	r3, #8
 800320a:	d061      	beq.n	80032d0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	69db      	ldr	r3, [r3, #28]
 8003210:	2b02      	cmp	r3, #2
 8003212:	d146      	bne.n	80032a2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003214:	4b33      	ldr	r3, [pc, #204]	@ (80032e4 <HAL_RCC_OscConfig+0x4cc>)
 8003216:	2200      	movs	r2, #0
 8003218:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800321a:	f7fe fb01 	bl	8001820 <HAL_GetTick>
 800321e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003220:	e008      	b.n	8003234 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003222:	f7fe fafd 	bl	8001820 <HAL_GetTick>
 8003226:	4602      	mov	r2, r0
 8003228:	693b      	ldr	r3, [r7, #16]
 800322a:	1ad3      	subs	r3, r2, r3
 800322c:	2b02      	cmp	r3, #2
 800322e:	d901      	bls.n	8003234 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003230:	2303      	movs	r3, #3
 8003232:	e06d      	b.n	8003310 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003234:	4b29      	ldr	r3, [pc, #164]	@ (80032dc <HAL_RCC_OscConfig+0x4c4>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800323c:	2b00      	cmp	r3, #0
 800323e:	d1f0      	bne.n	8003222 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6a1b      	ldr	r3, [r3, #32]
 8003244:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003248:	d108      	bne.n	800325c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800324a:	4b24      	ldr	r3, [pc, #144]	@ (80032dc <HAL_RCC_OscConfig+0x4c4>)
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	689b      	ldr	r3, [r3, #8]
 8003256:	4921      	ldr	r1, [pc, #132]	@ (80032dc <HAL_RCC_OscConfig+0x4c4>)
 8003258:	4313      	orrs	r3, r2
 800325a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800325c:	4b1f      	ldr	r3, [pc, #124]	@ (80032dc <HAL_RCC_OscConfig+0x4c4>)
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6a19      	ldr	r1, [r3, #32]
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800326c:	430b      	orrs	r3, r1
 800326e:	491b      	ldr	r1, [pc, #108]	@ (80032dc <HAL_RCC_OscConfig+0x4c4>)
 8003270:	4313      	orrs	r3, r2
 8003272:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003274:	4b1b      	ldr	r3, [pc, #108]	@ (80032e4 <HAL_RCC_OscConfig+0x4cc>)
 8003276:	2201      	movs	r2, #1
 8003278:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800327a:	f7fe fad1 	bl	8001820 <HAL_GetTick>
 800327e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003280:	e008      	b.n	8003294 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003282:	f7fe facd 	bl	8001820 <HAL_GetTick>
 8003286:	4602      	mov	r2, r0
 8003288:	693b      	ldr	r3, [r7, #16]
 800328a:	1ad3      	subs	r3, r2, r3
 800328c:	2b02      	cmp	r3, #2
 800328e:	d901      	bls.n	8003294 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003290:	2303      	movs	r3, #3
 8003292:	e03d      	b.n	8003310 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003294:	4b11      	ldr	r3, [pc, #68]	@ (80032dc <HAL_RCC_OscConfig+0x4c4>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800329c:	2b00      	cmp	r3, #0
 800329e:	d0f0      	beq.n	8003282 <HAL_RCC_OscConfig+0x46a>
 80032a0:	e035      	b.n	800330e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032a2:	4b10      	ldr	r3, [pc, #64]	@ (80032e4 <HAL_RCC_OscConfig+0x4cc>)
 80032a4:	2200      	movs	r2, #0
 80032a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032a8:	f7fe faba 	bl	8001820 <HAL_GetTick>
 80032ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032ae:	e008      	b.n	80032c2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032b0:	f7fe fab6 	bl	8001820 <HAL_GetTick>
 80032b4:	4602      	mov	r2, r0
 80032b6:	693b      	ldr	r3, [r7, #16]
 80032b8:	1ad3      	subs	r3, r2, r3
 80032ba:	2b02      	cmp	r3, #2
 80032bc:	d901      	bls.n	80032c2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80032be:	2303      	movs	r3, #3
 80032c0:	e026      	b.n	8003310 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032c2:	4b06      	ldr	r3, [pc, #24]	@ (80032dc <HAL_RCC_OscConfig+0x4c4>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d1f0      	bne.n	80032b0 <HAL_RCC_OscConfig+0x498>
 80032ce:	e01e      	b.n	800330e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	69db      	ldr	r3, [r3, #28]
 80032d4:	2b01      	cmp	r3, #1
 80032d6:	d107      	bne.n	80032e8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80032d8:	2301      	movs	r3, #1
 80032da:	e019      	b.n	8003310 <HAL_RCC_OscConfig+0x4f8>
 80032dc:	40021000 	.word	0x40021000
 80032e0:	40007000 	.word	0x40007000
 80032e4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80032e8:	4b0b      	ldr	r3, [pc, #44]	@ (8003318 <HAL_RCC_OscConfig+0x500>)
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6a1b      	ldr	r3, [r3, #32]
 80032f8:	429a      	cmp	r2, r3
 80032fa:	d106      	bne.n	800330a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003306:	429a      	cmp	r2, r3
 8003308:	d001      	beq.n	800330e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800330a:	2301      	movs	r3, #1
 800330c:	e000      	b.n	8003310 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800330e:	2300      	movs	r3, #0
}
 8003310:	4618      	mov	r0, r3
 8003312:	3718      	adds	r7, #24
 8003314:	46bd      	mov	sp, r7
 8003316:	bd80      	pop	{r7, pc}
 8003318:	40021000 	.word	0x40021000

0800331c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b084      	sub	sp, #16
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
 8003324:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d101      	bne.n	8003330 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800332c:	2301      	movs	r3, #1
 800332e:	e0d0      	b.n	80034d2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003330:	4b6a      	ldr	r3, [pc, #424]	@ (80034dc <HAL_RCC_ClockConfig+0x1c0>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f003 0307 	and.w	r3, r3, #7
 8003338:	683a      	ldr	r2, [r7, #0]
 800333a:	429a      	cmp	r2, r3
 800333c:	d910      	bls.n	8003360 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800333e:	4b67      	ldr	r3, [pc, #412]	@ (80034dc <HAL_RCC_ClockConfig+0x1c0>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f023 0207 	bic.w	r2, r3, #7
 8003346:	4965      	ldr	r1, [pc, #404]	@ (80034dc <HAL_RCC_ClockConfig+0x1c0>)
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	4313      	orrs	r3, r2
 800334c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800334e:	4b63      	ldr	r3, [pc, #396]	@ (80034dc <HAL_RCC_ClockConfig+0x1c0>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f003 0307 	and.w	r3, r3, #7
 8003356:	683a      	ldr	r2, [r7, #0]
 8003358:	429a      	cmp	r2, r3
 800335a:	d001      	beq.n	8003360 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800335c:	2301      	movs	r3, #1
 800335e:	e0b8      	b.n	80034d2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f003 0302 	and.w	r3, r3, #2
 8003368:	2b00      	cmp	r3, #0
 800336a:	d020      	beq.n	80033ae <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f003 0304 	and.w	r3, r3, #4
 8003374:	2b00      	cmp	r3, #0
 8003376:	d005      	beq.n	8003384 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003378:	4b59      	ldr	r3, [pc, #356]	@ (80034e0 <HAL_RCC_ClockConfig+0x1c4>)
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	4a58      	ldr	r2, [pc, #352]	@ (80034e0 <HAL_RCC_ClockConfig+0x1c4>)
 800337e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003382:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f003 0308 	and.w	r3, r3, #8
 800338c:	2b00      	cmp	r3, #0
 800338e:	d005      	beq.n	800339c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003390:	4b53      	ldr	r3, [pc, #332]	@ (80034e0 <HAL_RCC_ClockConfig+0x1c4>)
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	4a52      	ldr	r2, [pc, #328]	@ (80034e0 <HAL_RCC_ClockConfig+0x1c4>)
 8003396:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800339a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800339c:	4b50      	ldr	r3, [pc, #320]	@ (80034e0 <HAL_RCC_ClockConfig+0x1c4>)
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	689b      	ldr	r3, [r3, #8]
 80033a8:	494d      	ldr	r1, [pc, #308]	@ (80034e0 <HAL_RCC_ClockConfig+0x1c4>)
 80033aa:	4313      	orrs	r3, r2
 80033ac:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f003 0301 	and.w	r3, r3, #1
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d040      	beq.n	800343c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	2b01      	cmp	r3, #1
 80033c0:	d107      	bne.n	80033d2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033c2:	4b47      	ldr	r3, [pc, #284]	@ (80034e0 <HAL_RCC_ClockConfig+0x1c4>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d115      	bne.n	80033fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033ce:	2301      	movs	r3, #1
 80033d0:	e07f      	b.n	80034d2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	2b02      	cmp	r3, #2
 80033d8:	d107      	bne.n	80033ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033da:	4b41      	ldr	r3, [pc, #260]	@ (80034e0 <HAL_RCC_ClockConfig+0x1c4>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d109      	bne.n	80033fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033e6:	2301      	movs	r3, #1
 80033e8:	e073      	b.n	80034d2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033ea:	4b3d      	ldr	r3, [pc, #244]	@ (80034e0 <HAL_RCC_ClockConfig+0x1c4>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f003 0302 	and.w	r3, r3, #2
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d101      	bne.n	80033fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033f6:	2301      	movs	r3, #1
 80033f8:	e06b      	b.n	80034d2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80033fa:	4b39      	ldr	r3, [pc, #228]	@ (80034e0 <HAL_RCC_ClockConfig+0x1c4>)
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	f023 0203 	bic.w	r2, r3, #3
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	4936      	ldr	r1, [pc, #216]	@ (80034e0 <HAL_RCC_ClockConfig+0x1c4>)
 8003408:	4313      	orrs	r3, r2
 800340a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800340c:	f7fe fa08 	bl	8001820 <HAL_GetTick>
 8003410:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003412:	e00a      	b.n	800342a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003414:	f7fe fa04 	bl	8001820 <HAL_GetTick>
 8003418:	4602      	mov	r2, r0
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	1ad3      	subs	r3, r2, r3
 800341e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003422:	4293      	cmp	r3, r2
 8003424:	d901      	bls.n	800342a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003426:	2303      	movs	r3, #3
 8003428:	e053      	b.n	80034d2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800342a:	4b2d      	ldr	r3, [pc, #180]	@ (80034e0 <HAL_RCC_ClockConfig+0x1c4>)
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	f003 020c 	and.w	r2, r3, #12
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	009b      	lsls	r3, r3, #2
 8003438:	429a      	cmp	r2, r3
 800343a:	d1eb      	bne.n	8003414 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800343c:	4b27      	ldr	r3, [pc, #156]	@ (80034dc <HAL_RCC_ClockConfig+0x1c0>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f003 0307 	and.w	r3, r3, #7
 8003444:	683a      	ldr	r2, [r7, #0]
 8003446:	429a      	cmp	r2, r3
 8003448:	d210      	bcs.n	800346c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800344a:	4b24      	ldr	r3, [pc, #144]	@ (80034dc <HAL_RCC_ClockConfig+0x1c0>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f023 0207 	bic.w	r2, r3, #7
 8003452:	4922      	ldr	r1, [pc, #136]	@ (80034dc <HAL_RCC_ClockConfig+0x1c0>)
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	4313      	orrs	r3, r2
 8003458:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800345a:	4b20      	ldr	r3, [pc, #128]	@ (80034dc <HAL_RCC_ClockConfig+0x1c0>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f003 0307 	and.w	r3, r3, #7
 8003462:	683a      	ldr	r2, [r7, #0]
 8003464:	429a      	cmp	r2, r3
 8003466:	d001      	beq.n	800346c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003468:	2301      	movs	r3, #1
 800346a:	e032      	b.n	80034d2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f003 0304 	and.w	r3, r3, #4
 8003474:	2b00      	cmp	r3, #0
 8003476:	d008      	beq.n	800348a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003478:	4b19      	ldr	r3, [pc, #100]	@ (80034e0 <HAL_RCC_ClockConfig+0x1c4>)
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	68db      	ldr	r3, [r3, #12]
 8003484:	4916      	ldr	r1, [pc, #88]	@ (80034e0 <HAL_RCC_ClockConfig+0x1c4>)
 8003486:	4313      	orrs	r3, r2
 8003488:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f003 0308 	and.w	r3, r3, #8
 8003492:	2b00      	cmp	r3, #0
 8003494:	d009      	beq.n	80034aa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003496:	4b12      	ldr	r3, [pc, #72]	@ (80034e0 <HAL_RCC_ClockConfig+0x1c4>)
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	691b      	ldr	r3, [r3, #16]
 80034a2:	00db      	lsls	r3, r3, #3
 80034a4:	490e      	ldr	r1, [pc, #56]	@ (80034e0 <HAL_RCC_ClockConfig+0x1c4>)
 80034a6:	4313      	orrs	r3, r2
 80034a8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80034aa:	f000 f821 	bl	80034f0 <HAL_RCC_GetSysClockFreq>
 80034ae:	4602      	mov	r2, r0
 80034b0:	4b0b      	ldr	r3, [pc, #44]	@ (80034e0 <HAL_RCC_ClockConfig+0x1c4>)
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	091b      	lsrs	r3, r3, #4
 80034b6:	f003 030f 	and.w	r3, r3, #15
 80034ba:	490a      	ldr	r1, [pc, #40]	@ (80034e4 <HAL_RCC_ClockConfig+0x1c8>)
 80034bc:	5ccb      	ldrb	r3, [r1, r3]
 80034be:	fa22 f303 	lsr.w	r3, r2, r3
 80034c2:	4a09      	ldr	r2, [pc, #36]	@ (80034e8 <HAL_RCC_ClockConfig+0x1cc>)
 80034c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80034c6:	4b09      	ldr	r3, [pc, #36]	@ (80034ec <HAL_RCC_ClockConfig+0x1d0>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4618      	mov	r0, r3
 80034cc:	f7fe f966 	bl	800179c <HAL_InitTick>

  return HAL_OK;
 80034d0:	2300      	movs	r3, #0
}
 80034d2:	4618      	mov	r0, r3
 80034d4:	3710      	adds	r7, #16
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bd80      	pop	{r7, pc}
 80034da:	bf00      	nop
 80034dc:	40022000 	.word	0x40022000
 80034e0:	40021000 	.word	0x40021000
 80034e4:	080068b0 	.word	0x080068b0
 80034e8:	20000000 	.word	0x20000000
 80034ec:	20000004 	.word	0x20000004

080034f0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034f0:	b480      	push	{r7}
 80034f2:	b087      	sub	sp, #28
 80034f4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80034f6:	2300      	movs	r3, #0
 80034f8:	60fb      	str	r3, [r7, #12]
 80034fa:	2300      	movs	r3, #0
 80034fc:	60bb      	str	r3, [r7, #8]
 80034fe:	2300      	movs	r3, #0
 8003500:	617b      	str	r3, [r7, #20]
 8003502:	2300      	movs	r3, #0
 8003504:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003506:	2300      	movs	r3, #0
 8003508:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800350a:	4b1e      	ldr	r3, [pc, #120]	@ (8003584 <HAL_RCC_GetSysClockFreq+0x94>)
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	f003 030c 	and.w	r3, r3, #12
 8003516:	2b04      	cmp	r3, #4
 8003518:	d002      	beq.n	8003520 <HAL_RCC_GetSysClockFreq+0x30>
 800351a:	2b08      	cmp	r3, #8
 800351c:	d003      	beq.n	8003526 <HAL_RCC_GetSysClockFreq+0x36>
 800351e:	e027      	b.n	8003570 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003520:	4b19      	ldr	r3, [pc, #100]	@ (8003588 <HAL_RCC_GetSysClockFreq+0x98>)
 8003522:	613b      	str	r3, [r7, #16]
      break;
 8003524:	e027      	b.n	8003576 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	0c9b      	lsrs	r3, r3, #18
 800352a:	f003 030f 	and.w	r3, r3, #15
 800352e:	4a17      	ldr	r2, [pc, #92]	@ (800358c <HAL_RCC_GetSysClockFreq+0x9c>)
 8003530:	5cd3      	ldrb	r3, [r2, r3]
 8003532:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800353a:	2b00      	cmp	r3, #0
 800353c:	d010      	beq.n	8003560 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800353e:	4b11      	ldr	r3, [pc, #68]	@ (8003584 <HAL_RCC_GetSysClockFreq+0x94>)
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	0c5b      	lsrs	r3, r3, #17
 8003544:	f003 0301 	and.w	r3, r3, #1
 8003548:	4a11      	ldr	r2, [pc, #68]	@ (8003590 <HAL_RCC_GetSysClockFreq+0xa0>)
 800354a:	5cd3      	ldrb	r3, [r2, r3]
 800354c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	4a0d      	ldr	r2, [pc, #52]	@ (8003588 <HAL_RCC_GetSysClockFreq+0x98>)
 8003552:	fb03 f202 	mul.w	r2, r3, r2
 8003556:	68bb      	ldr	r3, [r7, #8]
 8003558:	fbb2 f3f3 	udiv	r3, r2, r3
 800355c:	617b      	str	r3, [r7, #20]
 800355e:	e004      	b.n	800356a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	4a0c      	ldr	r2, [pc, #48]	@ (8003594 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003564:	fb02 f303 	mul.w	r3, r2, r3
 8003568:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800356a:	697b      	ldr	r3, [r7, #20]
 800356c:	613b      	str	r3, [r7, #16]
      break;
 800356e:	e002      	b.n	8003576 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003570:	4b05      	ldr	r3, [pc, #20]	@ (8003588 <HAL_RCC_GetSysClockFreq+0x98>)
 8003572:	613b      	str	r3, [r7, #16]
      break;
 8003574:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003576:	693b      	ldr	r3, [r7, #16]
}
 8003578:	4618      	mov	r0, r3
 800357a:	371c      	adds	r7, #28
 800357c:	46bd      	mov	sp, r7
 800357e:	bc80      	pop	{r7}
 8003580:	4770      	bx	lr
 8003582:	bf00      	nop
 8003584:	40021000 	.word	0x40021000
 8003588:	007a1200 	.word	0x007a1200
 800358c:	080068c8 	.word	0x080068c8
 8003590:	080068d8 	.word	0x080068d8
 8003594:	003d0900 	.word	0x003d0900

08003598 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003598:	b480      	push	{r7}
 800359a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800359c:	4b02      	ldr	r3, [pc, #8]	@ (80035a8 <HAL_RCC_GetHCLKFreq+0x10>)
 800359e:	681b      	ldr	r3, [r3, #0]
}
 80035a0:	4618      	mov	r0, r3
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bc80      	pop	{r7}
 80035a6:	4770      	bx	lr
 80035a8:	20000000 	.word	0x20000000

080035ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80035b0:	f7ff fff2 	bl	8003598 <HAL_RCC_GetHCLKFreq>
 80035b4:	4602      	mov	r2, r0
 80035b6:	4b05      	ldr	r3, [pc, #20]	@ (80035cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	0a1b      	lsrs	r3, r3, #8
 80035bc:	f003 0307 	and.w	r3, r3, #7
 80035c0:	4903      	ldr	r1, [pc, #12]	@ (80035d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80035c2:	5ccb      	ldrb	r3, [r1, r3]
 80035c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035c8:	4618      	mov	r0, r3
 80035ca:	bd80      	pop	{r7, pc}
 80035cc:	40021000 	.word	0x40021000
 80035d0:	080068c0 	.word	0x080068c0

080035d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80035d8:	f7ff ffde 	bl	8003598 <HAL_RCC_GetHCLKFreq>
 80035dc:	4602      	mov	r2, r0
 80035de:	4b05      	ldr	r3, [pc, #20]	@ (80035f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	0adb      	lsrs	r3, r3, #11
 80035e4:	f003 0307 	and.w	r3, r3, #7
 80035e8:	4903      	ldr	r1, [pc, #12]	@ (80035f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80035ea:	5ccb      	ldrb	r3, [r1, r3]
 80035ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035f0:	4618      	mov	r0, r3
 80035f2:	bd80      	pop	{r7, pc}
 80035f4:	40021000 	.word	0x40021000
 80035f8:	080068c0 	.word	0x080068c0

080035fc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80035fc:	b480      	push	{r7}
 80035fe:	b085      	sub	sp, #20
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003604:	4b0a      	ldr	r3, [pc, #40]	@ (8003630 <RCC_Delay+0x34>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4a0a      	ldr	r2, [pc, #40]	@ (8003634 <RCC_Delay+0x38>)
 800360a:	fba2 2303 	umull	r2, r3, r2, r3
 800360e:	0a5b      	lsrs	r3, r3, #9
 8003610:	687a      	ldr	r2, [r7, #4]
 8003612:	fb02 f303 	mul.w	r3, r2, r3
 8003616:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003618:	bf00      	nop
  }
  while (Delay --);
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	1e5a      	subs	r2, r3, #1
 800361e:	60fa      	str	r2, [r7, #12]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d1f9      	bne.n	8003618 <RCC_Delay+0x1c>
}
 8003624:	bf00      	nop
 8003626:	bf00      	nop
 8003628:	3714      	adds	r7, #20
 800362a:	46bd      	mov	sp, r7
 800362c:	bc80      	pop	{r7}
 800362e:	4770      	bx	lr
 8003630:	20000000 	.word	0x20000000
 8003634:	10624dd3 	.word	0x10624dd3

08003638 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b082      	sub	sp, #8
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d101      	bne.n	800364a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003646:	2301      	movs	r3, #1
 8003648:	e042      	b.n	80036d0 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003650:	b2db      	uxtb	r3, r3
 8003652:	2b00      	cmp	r3, #0
 8003654:	d106      	bne.n	8003664 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2200      	movs	r2, #0
 800365a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800365e:	6878      	ldr	r0, [r7, #4]
 8003660:	f7fe f816 	bl	8001690 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2224      	movs	r2, #36	@ 0x24
 8003668:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	68da      	ldr	r2, [r3, #12]
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800367a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800367c:	6878      	ldr	r0, [r7, #4]
 800367e:	f000 f971 	bl	8003964 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	691a      	ldr	r2, [r3, #16]
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003690:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	695a      	ldr	r2, [r3, #20]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80036a0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	68da      	ldr	r2, [r3, #12]
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80036b0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2200      	movs	r2, #0
 80036b6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2220      	movs	r2, #32
 80036bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2220      	movs	r2, #32
 80036c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2200      	movs	r2, #0
 80036cc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80036ce:	2300      	movs	r3, #0
}
 80036d0:	4618      	mov	r0, r3
 80036d2:	3708      	adds	r7, #8
 80036d4:	46bd      	mov	sp, r7
 80036d6:	bd80      	pop	{r7, pc}

080036d8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b08a      	sub	sp, #40	@ 0x28
 80036dc:	af02      	add	r7, sp, #8
 80036de:	60f8      	str	r0, [r7, #12]
 80036e0:	60b9      	str	r1, [r7, #8]
 80036e2:	603b      	str	r3, [r7, #0]
 80036e4:	4613      	mov	r3, r2
 80036e6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80036e8:	2300      	movs	r3, #0
 80036ea:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80036f2:	b2db      	uxtb	r3, r3
 80036f4:	2b20      	cmp	r3, #32
 80036f6:	d175      	bne.n	80037e4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80036f8:	68bb      	ldr	r3, [r7, #8]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d002      	beq.n	8003704 <HAL_UART_Transmit+0x2c>
 80036fe:	88fb      	ldrh	r3, [r7, #6]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d101      	bne.n	8003708 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003704:	2301      	movs	r3, #1
 8003706:	e06e      	b.n	80037e6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	2200      	movs	r2, #0
 800370c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	2221      	movs	r2, #33	@ 0x21
 8003712:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003716:	f7fe f883 	bl	8001820 <HAL_GetTick>
 800371a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	88fa      	ldrh	r2, [r7, #6]
 8003720:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	88fa      	ldrh	r2, [r7, #6]
 8003726:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	689b      	ldr	r3, [r3, #8]
 800372c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003730:	d108      	bne.n	8003744 <HAL_UART_Transmit+0x6c>
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	691b      	ldr	r3, [r3, #16]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d104      	bne.n	8003744 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800373a:	2300      	movs	r3, #0
 800373c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800373e:	68bb      	ldr	r3, [r7, #8]
 8003740:	61bb      	str	r3, [r7, #24]
 8003742:	e003      	b.n	800374c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003744:	68bb      	ldr	r3, [r7, #8]
 8003746:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003748:	2300      	movs	r3, #0
 800374a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800374c:	e02e      	b.n	80037ac <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	9300      	str	r3, [sp, #0]
 8003752:	697b      	ldr	r3, [r7, #20]
 8003754:	2200      	movs	r2, #0
 8003756:	2180      	movs	r1, #128	@ 0x80
 8003758:	68f8      	ldr	r0, [r7, #12]
 800375a:	f000 f848 	bl	80037ee <UART_WaitOnFlagUntilTimeout>
 800375e:	4603      	mov	r3, r0
 8003760:	2b00      	cmp	r3, #0
 8003762:	d005      	beq.n	8003770 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	2220      	movs	r2, #32
 8003768:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800376c:	2303      	movs	r3, #3
 800376e:	e03a      	b.n	80037e6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003770:	69fb      	ldr	r3, [r7, #28]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d10b      	bne.n	800378e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003776:	69bb      	ldr	r3, [r7, #24]
 8003778:	881b      	ldrh	r3, [r3, #0]
 800377a:	461a      	mov	r2, r3
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003784:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003786:	69bb      	ldr	r3, [r7, #24]
 8003788:	3302      	adds	r3, #2
 800378a:	61bb      	str	r3, [r7, #24]
 800378c:	e007      	b.n	800379e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800378e:	69fb      	ldr	r3, [r7, #28]
 8003790:	781a      	ldrb	r2, [r3, #0]
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003798:	69fb      	ldr	r3, [r7, #28]
 800379a:	3301      	adds	r3, #1
 800379c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80037a2:	b29b      	uxth	r3, r3
 80037a4:	3b01      	subs	r3, #1
 80037a6:	b29a      	uxth	r2, r3
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80037b0:	b29b      	uxth	r3, r3
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d1cb      	bne.n	800374e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	9300      	str	r3, [sp, #0]
 80037ba:	697b      	ldr	r3, [r7, #20]
 80037bc:	2200      	movs	r2, #0
 80037be:	2140      	movs	r1, #64	@ 0x40
 80037c0:	68f8      	ldr	r0, [r7, #12]
 80037c2:	f000 f814 	bl	80037ee <UART_WaitOnFlagUntilTimeout>
 80037c6:	4603      	mov	r3, r0
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d005      	beq.n	80037d8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	2220      	movs	r2, #32
 80037d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80037d4:	2303      	movs	r3, #3
 80037d6:	e006      	b.n	80037e6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	2220      	movs	r2, #32
 80037dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80037e0:	2300      	movs	r3, #0
 80037e2:	e000      	b.n	80037e6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80037e4:	2302      	movs	r3, #2
  }
}
 80037e6:	4618      	mov	r0, r3
 80037e8:	3720      	adds	r7, #32
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bd80      	pop	{r7, pc}

080037ee <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80037ee:	b580      	push	{r7, lr}
 80037f0:	b086      	sub	sp, #24
 80037f2:	af00      	add	r7, sp, #0
 80037f4:	60f8      	str	r0, [r7, #12]
 80037f6:	60b9      	str	r1, [r7, #8]
 80037f8:	603b      	str	r3, [r7, #0]
 80037fa:	4613      	mov	r3, r2
 80037fc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80037fe:	e03b      	b.n	8003878 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003800:	6a3b      	ldr	r3, [r7, #32]
 8003802:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003806:	d037      	beq.n	8003878 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003808:	f7fe f80a 	bl	8001820 <HAL_GetTick>
 800380c:	4602      	mov	r2, r0
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	1ad3      	subs	r3, r2, r3
 8003812:	6a3a      	ldr	r2, [r7, #32]
 8003814:	429a      	cmp	r2, r3
 8003816:	d302      	bcc.n	800381e <UART_WaitOnFlagUntilTimeout+0x30>
 8003818:	6a3b      	ldr	r3, [r7, #32]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d101      	bne.n	8003822 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800381e:	2303      	movs	r3, #3
 8003820:	e03a      	b.n	8003898 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	68db      	ldr	r3, [r3, #12]
 8003828:	f003 0304 	and.w	r3, r3, #4
 800382c:	2b00      	cmp	r3, #0
 800382e:	d023      	beq.n	8003878 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003830:	68bb      	ldr	r3, [r7, #8]
 8003832:	2b80      	cmp	r3, #128	@ 0x80
 8003834:	d020      	beq.n	8003878 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003836:	68bb      	ldr	r3, [r7, #8]
 8003838:	2b40      	cmp	r3, #64	@ 0x40
 800383a:	d01d      	beq.n	8003878 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f003 0308 	and.w	r3, r3, #8
 8003846:	2b08      	cmp	r3, #8
 8003848:	d116      	bne.n	8003878 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800384a:	2300      	movs	r3, #0
 800384c:	617b      	str	r3, [r7, #20]
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	617b      	str	r3, [r7, #20]
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	617b      	str	r3, [r7, #20]
 800385e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003860:	68f8      	ldr	r0, [r7, #12]
 8003862:	f000 f81d 	bl	80038a0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	2208      	movs	r2, #8
 800386a:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	2200      	movs	r2, #0
 8003870:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003874:	2301      	movs	r3, #1
 8003876:	e00f      	b.n	8003898 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	681a      	ldr	r2, [r3, #0]
 800387e:	68bb      	ldr	r3, [r7, #8]
 8003880:	4013      	ands	r3, r2
 8003882:	68ba      	ldr	r2, [r7, #8]
 8003884:	429a      	cmp	r2, r3
 8003886:	bf0c      	ite	eq
 8003888:	2301      	moveq	r3, #1
 800388a:	2300      	movne	r3, #0
 800388c:	b2db      	uxtb	r3, r3
 800388e:	461a      	mov	r2, r3
 8003890:	79fb      	ldrb	r3, [r7, #7]
 8003892:	429a      	cmp	r2, r3
 8003894:	d0b4      	beq.n	8003800 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003896:	2300      	movs	r3, #0
}
 8003898:	4618      	mov	r0, r3
 800389a:	3718      	adds	r7, #24
 800389c:	46bd      	mov	sp, r7
 800389e:	bd80      	pop	{r7, pc}

080038a0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80038a0:	b480      	push	{r7}
 80038a2:	b095      	sub	sp, #84	@ 0x54
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	330c      	adds	r3, #12
 80038ae:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80038b2:	e853 3f00 	ldrex	r3, [r3]
 80038b6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80038b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038ba:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80038be:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	330c      	adds	r3, #12
 80038c6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80038c8:	643a      	str	r2, [r7, #64]	@ 0x40
 80038ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038cc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80038ce:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80038d0:	e841 2300 	strex	r3, r2, [r1]
 80038d4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80038d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d1e5      	bne.n	80038a8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	3314      	adds	r3, #20
 80038e2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038e4:	6a3b      	ldr	r3, [r7, #32]
 80038e6:	e853 3f00 	ldrex	r3, [r3]
 80038ea:	61fb      	str	r3, [r7, #28]
   return(result);
 80038ec:	69fb      	ldr	r3, [r7, #28]
 80038ee:	f023 0301 	bic.w	r3, r3, #1
 80038f2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	3314      	adds	r3, #20
 80038fa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80038fc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80038fe:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003900:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003902:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003904:	e841 2300 	strex	r3, r2, [r1]
 8003908:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800390a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800390c:	2b00      	cmp	r3, #0
 800390e:	d1e5      	bne.n	80038dc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003914:	2b01      	cmp	r3, #1
 8003916:	d119      	bne.n	800394c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	330c      	adds	r3, #12
 800391e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	e853 3f00 	ldrex	r3, [r3]
 8003926:	60bb      	str	r3, [r7, #8]
   return(result);
 8003928:	68bb      	ldr	r3, [r7, #8]
 800392a:	f023 0310 	bic.w	r3, r3, #16
 800392e:	647b      	str	r3, [r7, #68]	@ 0x44
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	330c      	adds	r3, #12
 8003936:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003938:	61ba      	str	r2, [r7, #24]
 800393a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800393c:	6979      	ldr	r1, [r7, #20]
 800393e:	69ba      	ldr	r2, [r7, #24]
 8003940:	e841 2300 	strex	r3, r2, [r1]
 8003944:	613b      	str	r3, [r7, #16]
   return(result);
 8003946:	693b      	ldr	r3, [r7, #16]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d1e5      	bne.n	8003918 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2220      	movs	r2, #32
 8003950:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2200      	movs	r2, #0
 8003958:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800395a:	bf00      	nop
 800395c:	3754      	adds	r7, #84	@ 0x54
 800395e:	46bd      	mov	sp, r7
 8003960:	bc80      	pop	{r7}
 8003962:	4770      	bx	lr

08003964 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b084      	sub	sp, #16
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	691b      	ldr	r3, [r3, #16]
 8003972:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	68da      	ldr	r2, [r3, #12]
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	430a      	orrs	r2, r1
 8003980:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	689a      	ldr	r2, [r3, #8]
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	691b      	ldr	r3, [r3, #16]
 800398a:	431a      	orrs	r2, r3
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	695b      	ldr	r3, [r3, #20]
 8003990:	4313      	orrs	r3, r2
 8003992:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	68db      	ldr	r3, [r3, #12]
 800399a:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800399e:	f023 030c 	bic.w	r3, r3, #12
 80039a2:	687a      	ldr	r2, [r7, #4]
 80039a4:	6812      	ldr	r2, [r2, #0]
 80039a6:	68b9      	ldr	r1, [r7, #8]
 80039a8:	430b      	orrs	r3, r1
 80039aa:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	695b      	ldr	r3, [r3, #20]
 80039b2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	699a      	ldr	r2, [r3, #24]
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	430a      	orrs	r2, r1
 80039c0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4a2c      	ldr	r2, [pc, #176]	@ (8003a78 <UART_SetConfig+0x114>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d103      	bne.n	80039d4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80039cc:	f7ff fe02 	bl	80035d4 <HAL_RCC_GetPCLK2Freq>
 80039d0:	60f8      	str	r0, [r7, #12]
 80039d2:	e002      	b.n	80039da <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80039d4:	f7ff fdea 	bl	80035ac <HAL_RCC_GetPCLK1Freq>
 80039d8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80039da:	68fa      	ldr	r2, [r7, #12]
 80039dc:	4613      	mov	r3, r2
 80039de:	009b      	lsls	r3, r3, #2
 80039e0:	4413      	add	r3, r2
 80039e2:	009a      	lsls	r2, r3, #2
 80039e4:	441a      	add	r2, r3
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	009b      	lsls	r3, r3, #2
 80039ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80039f0:	4a22      	ldr	r2, [pc, #136]	@ (8003a7c <UART_SetConfig+0x118>)
 80039f2:	fba2 2303 	umull	r2, r3, r2, r3
 80039f6:	095b      	lsrs	r3, r3, #5
 80039f8:	0119      	lsls	r1, r3, #4
 80039fa:	68fa      	ldr	r2, [r7, #12]
 80039fc:	4613      	mov	r3, r2
 80039fe:	009b      	lsls	r3, r3, #2
 8003a00:	4413      	add	r3, r2
 8003a02:	009a      	lsls	r2, r3, #2
 8003a04:	441a      	add	r2, r3
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	009b      	lsls	r3, r3, #2
 8003a0c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a10:	4b1a      	ldr	r3, [pc, #104]	@ (8003a7c <UART_SetConfig+0x118>)
 8003a12:	fba3 0302 	umull	r0, r3, r3, r2
 8003a16:	095b      	lsrs	r3, r3, #5
 8003a18:	2064      	movs	r0, #100	@ 0x64
 8003a1a:	fb00 f303 	mul.w	r3, r0, r3
 8003a1e:	1ad3      	subs	r3, r2, r3
 8003a20:	011b      	lsls	r3, r3, #4
 8003a22:	3332      	adds	r3, #50	@ 0x32
 8003a24:	4a15      	ldr	r2, [pc, #84]	@ (8003a7c <UART_SetConfig+0x118>)
 8003a26:	fba2 2303 	umull	r2, r3, r2, r3
 8003a2a:	095b      	lsrs	r3, r3, #5
 8003a2c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003a30:	4419      	add	r1, r3
 8003a32:	68fa      	ldr	r2, [r7, #12]
 8003a34:	4613      	mov	r3, r2
 8003a36:	009b      	lsls	r3, r3, #2
 8003a38:	4413      	add	r3, r2
 8003a3a:	009a      	lsls	r2, r3, #2
 8003a3c:	441a      	add	r2, r3
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	009b      	lsls	r3, r3, #2
 8003a44:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a48:	4b0c      	ldr	r3, [pc, #48]	@ (8003a7c <UART_SetConfig+0x118>)
 8003a4a:	fba3 0302 	umull	r0, r3, r3, r2
 8003a4e:	095b      	lsrs	r3, r3, #5
 8003a50:	2064      	movs	r0, #100	@ 0x64
 8003a52:	fb00 f303 	mul.w	r3, r0, r3
 8003a56:	1ad3      	subs	r3, r2, r3
 8003a58:	011b      	lsls	r3, r3, #4
 8003a5a:	3332      	adds	r3, #50	@ 0x32
 8003a5c:	4a07      	ldr	r2, [pc, #28]	@ (8003a7c <UART_SetConfig+0x118>)
 8003a5e:	fba2 2303 	umull	r2, r3, r2, r3
 8003a62:	095b      	lsrs	r3, r3, #5
 8003a64:	f003 020f 	and.w	r2, r3, #15
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	440a      	add	r2, r1
 8003a6e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003a70:	bf00      	nop
 8003a72:	3710      	adds	r7, #16
 8003a74:	46bd      	mov	sp, r7
 8003a76:	bd80      	pop	{r7, pc}
 8003a78:	40013800 	.word	0x40013800
 8003a7c:	51eb851f 	.word	0x51eb851f

08003a80 <__cvt>:
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003a86:	461d      	mov	r5, r3
 8003a88:	bfbb      	ittet	lt
 8003a8a:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8003a8e:	461d      	movlt	r5, r3
 8003a90:	2300      	movge	r3, #0
 8003a92:	232d      	movlt	r3, #45	@ 0x2d
 8003a94:	b088      	sub	sp, #32
 8003a96:	4614      	mov	r4, r2
 8003a98:	bfb8      	it	lt
 8003a9a:	4614      	movlt	r4, r2
 8003a9c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8003a9e:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8003aa0:	7013      	strb	r3, [r2, #0]
 8003aa2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8003aa4:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8003aa8:	f023 0820 	bic.w	r8, r3, #32
 8003aac:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003ab0:	d005      	beq.n	8003abe <__cvt+0x3e>
 8003ab2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8003ab6:	d100      	bne.n	8003aba <__cvt+0x3a>
 8003ab8:	3601      	adds	r6, #1
 8003aba:	2302      	movs	r3, #2
 8003abc:	e000      	b.n	8003ac0 <__cvt+0x40>
 8003abe:	2303      	movs	r3, #3
 8003ac0:	aa07      	add	r2, sp, #28
 8003ac2:	9204      	str	r2, [sp, #16]
 8003ac4:	aa06      	add	r2, sp, #24
 8003ac6:	e9cd a202 	strd	sl, r2, [sp, #8]
 8003aca:	e9cd 3600 	strd	r3, r6, [sp]
 8003ace:	4622      	mov	r2, r4
 8003ad0:	462b      	mov	r3, r5
 8003ad2:	f000 ff51 	bl	8004978 <_dtoa_r>
 8003ad6:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8003ada:	4607      	mov	r7, r0
 8003adc:	d119      	bne.n	8003b12 <__cvt+0x92>
 8003ade:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8003ae0:	07db      	lsls	r3, r3, #31
 8003ae2:	d50e      	bpl.n	8003b02 <__cvt+0x82>
 8003ae4:	eb00 0906 	add.w	r9, r0, r6
 8003ae8:	2200      	movs	r2, #0
 8003aea:	2300      	movs	r3, #0
 8003aec:	4620      	mov	r0, r4
 8003aee:	4629      	mov	r1, r5
 8003af0:	f7fc ff5a 	bl	80009a8 <__aeabi_dcmpeq>
 8003af4:	b108      	cbz	r0, 8003afa <__cvt+0x7a>
 8003af6:	f8cd 901c 	str.w	r9, [sp, #28]
 8003afa:	2230      	movs	r2, #48	@ 0x30
 8003afc:	9b07      	ldr	r3, [sp, #28]
 8003afe:	454b      	cmp	r3, r9
 8003b00:	d31e      	bcc.n	8003b40 <__cvt+0xc0>
 8003b02:	4638      	mov	r0, r7
 8003b04:	9b07      	ldr	r3, [sp, #28]
 8003b06:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8003b08:	1bdb      	subs	r3, r3, r7
 8003b0a:	6013      	str	r3, [r2, #0]
 8003b0c:	b008      	add	sp, #32
 8003b0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b12:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003b16:	eb00 0906 	add.w	r9, r0, r6
 8003b1a:	d1e5      	bne.n	8003ae8 <__cvt+0x68>
 8003b1c:	7803      	ldrb	r3, [r0, #0]
 8003b1e:	2b30      	cmp	r3, #48	@ 0x30
 8003b20:	d10a      	bne.n	8003b38 <__cvt+0xb8>
 8003b22:	2200      	movs	r2, #0
 8003b24:	2300      	movs	r3, #0
 8003b26:	4620      	mov	r0, r4
 8003b28:	4629      	mov	r1, r5
 8003b2a:	f7fc ff3d 	bl	80009a8 <__aeabi_dcmpeq>
 8003b2e:	b918      	cbnz	r0, 8003b38 <__cvt+0xb8>
 8003b30:	f1c6 0601 	rsb	r6, r6, #1
 8003b34:	f8ca 6000 	str.w	r6, [sl]
 8003b38:	f8da 3000 	ldr.w	r3, [sl]
 8003b3c:	4499      	add	r9, r3
 8003b3e:	e7d3      	b.n	8003ae8 <__cvt+0x68>
 8003b40:	1c59      	adds	r1, r3, #1
 8003b42:	9107      	str	r1, [sp, #28]
 8003b44:	701a      	strb	r2, [r3, #0]
 8003b46:	e7d9      	b.n	8003afc <__cvt+0x7c>

08003b48 <__exponent>:
 8003b48:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003b4a:	2900      	cmp	r1, #0
 8003b4c:	bfb6      	itet	lt
 8003b4e:	232d      	movlt	r3, #45	@ 0x2d
 8003b50:	232b      	movge	r3, #43	@ 0x2b
 8003b52:	4249      	neglt	r1, r1
 8003b54:	2909      	cmp	r1, #9
 8003b56:	7002      	strb	r2, [r0, #0]
 8003b58:	7043      	strb	r3, [r0, #1]
 8003b5a:	dd29      	ble.n	8003bb0 <__exponent+0x68>
 8003b5c:	f10d 0307 	add.w	r3, sp, #7
 8003b60:	461d      	mov	r5, r3
 8003b62:	270a      	movs	r7, #10
 8003b64:	fbb1 f6f7 	udiv	r6, r1, r7
 8003b68:	461a      	mov	r2, r3
 8003b6a:	fb07 1416 	mls	r4, r7, r6, r1
 8003b6e:	3430      	adds	r4, #48	@ 0x30
 8003b70:	f802 4c01 	strb.w	r4, [r2, #-1]
 8003b74:	460c      	mov	r4, r1
 8003b76:	2c63      	cmp	r4, #99	@ 0x63
 8003b78:	4631      	mov	r1, r6
 8003b7a:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8003b7e:	dcf1      	bgt.n	8003b64 <__exponent+0x1c>
 8003b80:	3130      	adds	r1, #48	@ 0x30
 8003b82:	1e94      	subs	r4, r2, #2
 8003b84:	f803 1c01 	strb.w	r1, [r3, #-1]
 8003b88:	4623      	mov	r3, r4
 8003b8a:	1c41      	adds	r1, r0, #1
 8003b8c:	42ab      	cmp	r3, r5
 8003b8e:	d30a      	bcc.n	8003ba6 <__exponent+0x5e>
 8003b90:	f10d 0309 	add.w	r3, sp, #9
 8003b94:	1a9b      	subs	r3, r3, r2
 8003b96:	42ac      	cmp	r4, r5
 8003b98:	bf88      	it	hi
 8003b9a:	2300      	movhi	r3, #0
 8003b9c:	3302      	adds	r3, #2
 8003b9e:	4403      	add	r3, r0
 8003ba0:	1a18      	subs	r0, r3, r0
 8003ba2:	b003      	add	sp, #12
 8003ba4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ba6:	f813 6b01 	ldrb.w	r6, [r3], #1
 8003baa:	f801 6f01 	strb.w	r6, [r1, #1]!
 8003bae:	e7ed      	b.n	8003b8c <__exponent+0x44>
 8003bb0:	2330      	movs	r3, #48	@ 0x30
 8003bb2:	3130      	adds	r1, #48	@ 0x30
 8003bb4:	7083      	strb	r3, [r0, #2]
 8003bb6:	70c1      	strb	r1, [r0, #3]
 8003bb8:	1d03      	adds	r3, r0, #4
 8003bba:	e7f1      	b.n	8003ba0 <__exponent+0x58>

08003bbc <_printf_float>:
 8003bbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003bc0:	b091      	sub	sp, #68	@ 0x44
 8003bc2:	460c      	mov	r4, r1
 8003bc4:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8003bc8:	4616      	mov	r6, r2
 8003bca:	461f      	mov	r7, r3
 8003bcc:	4605      	mov	r5, r0
 8003bce:	f000 fdc5 	bl	800475c <_localeconv_r>
 8003bd2:	6803      	ldr	r3, [r0, #0]
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	9308      	str	r3, [sp, #32]
 8003bd8:	f7fc faba 	bl	8000150 <strlen>
 8003bdc:	2300      	movs	r3, #0
 8003bde:	930e      	str	r3, [sp, #56]	@ 0x38
 8003be0:	f8d8 3000 	ldr.w	r3, [r8]
 8003be4:	9009      	str	r0, [sp, #36]	@ 0x24
 8003be6:	3307      	adds	r3, #7
 8003be8:	f023 0307 	bic.w	r3, r3, #7
 8003bec:	f103 0208 	add.w	r2, r3, #8
 8003bf0:	f894 a018 	ldrb.w	sl, [r4, #24]
 8003bf4:	f8d4 b000 	ldr.w	fp, [r4]
 8003bf8:	f8c8 2000 	str.w	r2, [r8]
 8003bfc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003c00:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8003c04:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003c06:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8003c0a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003c0e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8003c12:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8003c16:	4b9c      	ldr	r3, [pc, #624]	@ (8003e88 <_printf_float+0x2cc>)
 8003c18:	f7fc fef8 	bl	8000a0c <__aeabi_dcmpun>
 8003c1c:	bb70      	cbnz	r0, 8003c7c <_printf_float+0xc0>
 8003c1e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8003c22:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003c26:	4b98      	ldr	r3, [pc, #608]	@ (8003e88 <_printf_float+0x2cc>)
 8003c28:	f7fc fed2 	bl	80009d0 <__aeabi_dcmple>
 8003c2c:	bb30      	cbnz	r0, 8003c7c <_printf_float+0xc0>
 8003c2e:	2200      	movs	r2, #0
 8003c30:	2300      	movs	r3, #0
 8003c32:	4640      	mov	r0, r8
 8003c34:	4649      	mov	r1, r9
 8003c36:	f7fc fec1 	bl	80009bc <__aeabi_dcmplt>
 8003c3a:	b110      	cbz	r0, 8003c42 <_printf_float+0x86>
 8003c3c:	232d      	movs	r3, #45	@ 0x2d
 8003c3e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003c42:	4a92      	ldr	r2, [pc, #584]	@ (8003e8c <_printf_float+0x2d0>)
 8003c44:	4b92      	ldr	r3, [pc, #584]	@ (8003e90 <_printf_float+0x2d4>)
 8003c46:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8003c4a:	bf94      	ite	ls
 8003c4c:	4690      	movls	r8, r2
 8003c4e:	4698      	movhi	r8, r3
 8003c50:	2303      	movs	r3, #3
 8003c52:	f04f 0900 	mov.w	r9, #0
 8003c56:	6123      	str	r3, [r4, #16]
 8003c58:	f02b 0304 	bic.w	r3, fp, #4
 8003c5c:	6023      	str	r3, [r4, #0]
 8003c5e:	4633      	mov	r3, r6
 8003c60:	4621      	mov	r1, r4
 8003c62:	4628      	mov	r0, r5
 8003c64:	9700      	str	r7, [sp, #0]
 8003c66:	aa0f      	add	r2, sp, #60	@ 0x3c
 8003c68:	f000 f9d4 	bl	8004014 <_printf_common>
 8003c6c:	3001      	adds	r0, #1
 8003c6e:	f040 8090 	bne.w	8003d92 <_printf_float+0x1d6>
 8003c72:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003c76:	b011      	add	sp, #68	@ 0x44
 8003c78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c7c:	4642      	mov	r2, r8
 8003c7e:	464b      	mov	r3, r9
 8003c80:	4640      	mov	r0, r8
 8003c82:	4649      	mov	r1, r9
 8003c84:	f7fc fec2 	bl	8000a0c <__aeabi_dcmpun>
 8003c88:	b148      	cbz	r0, 8003c9e <_printf_float+0xe2>
 8003c8a:	464b      	mov	r3, r9
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	bfb8      	it	lt
 8003c90:	232d      	movlt	r3, #45	@ 0x2d
 8003c92:	4a80      	ldr	r2, [pc, #512]	@ (8003e94 <_printf_float+0x2d8>)
 8003c94:	bfb8      	it	lt
 8003c96:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8003c9a:	4b7f      	ldr	r3, [pc, #508]	@ (8003e98 <_printf_float+0x2dc>)
 8003c9c:	e7d3      	b.n	8003c46 <_printf_float+0x8a>
 8003c9e:	6863      	ldr	r3, [r4, #4]
 8003ca0:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8003ca4:	1c5a      	adds	r2, r3, #1
 8003ca6:	d13f      	bne.n	8003d28 <_printf_float+0x16c>
 8003ca8:	2306      	movs	r3, #6
 8003caa:	6063      	str	r3, [r4, #4]
 8003cac:	2200      	movs	r2, #0
 8003cae:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8003cb2:	6023      	str	r3, [r4, #0]
 8003cb4:	9206      	str	r2, [sp, #24]
 8003cb6:	aa0e      	add	r2, sp, #56	@ 0x38
 8003cb8:	e9cd a204 	strd	sl, r2, [sp, #16]
 8003cbc:	aa0d      	add	r2, sp, #52	@ 0x34
 8003cbe:	9203      	str	r2, [sp, #12]
 8003cc0:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8003cc4:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8003cc8:	6863      	ldr	r3, [r4, #4]
 8003cca:	4642      	mov	r2, r8
 8003ccc:	9300      	str	r3, [sp, #0]
 8003cce:	4628      	mov	r0, r5
 8003cd0:	464b      	mov	r3, r9
 8003cd2:	910a      	str	r1, [sp, #40]	@ 0x28
 8003cd4:	f7ff fed4 	bl	8003a80 <__cvt>
 8003cd8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8003cda:	4680      	mov	r8, r0
 8003cdc:	2947      	cmp	r1, #71	@ 0x47
 8003cde:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8003ce0:	d128      	bne.n	8003d34 <_printf_float+0x178>
 8003ce2:	1cc8      	adds	r0, r1, #3
 8003ce4:	db02      	blt.n	8003cec <_printf_float+0x130>
 8003ce6:	6863      	ldr	r3, [r4, #4]
 8003ce8:	4299      	cmp	r1, r3
 8003cea:	dd40      	ble.n	8003d6e <_printf_float+0x1b2>
 8003cec:	f1aa 0a02 	sub.w	sl, sl, #2
 8003cf0:	fa5f fa8a 	uxtb.w	sl, sl
 8003cf4:	4652      	mov	r2, sl
 8003cf6:	3901      	subs	r1, #1
 8003cf8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8003cfc:	910d      	str	r1, [sp, #52]	@ 0x34
 8003cfe:	f7ff ff23 	bl	8003b48 <__exponent>
 8003d02:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8003d04:	4681      	mov	r9, r0
 8003d06:	1813      	adds	r3, r2, r0
 8003d08:	2a01      	cmp	r2, #1
 8003d0a:	6123      	str	r3, [r4, #16]
 8003d0c:	dc02      	bgt.n	8003d14 <_printf_float+0x158>
 8003d0e:	6822      	ldr	r2, [r4, #0]
 8003d10:	07d2      	lsls	r2, r2, #31
 8003d12:	d501      	bpl.n	8003d18 <_printf_float+0x15c>
 8003d14:	3301      	adds	r3, #1
 8003d16:	6123      	str	r3, [r4, #16]
 8003d18:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d09e      	beq.n	8003c5e <_printf_float+0xa2>
 8003d20:	232d      	movs	r3, #45	@ 0x2d
 8003d22:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003d26:	e79a      	b.n	8003c5e <_printf_float+0xa2>
 8003d28:	2947      	cmp	r1, #71	@ 0x47
 8003d2a:	d1bf      	bne.n	8003cac <_printf_float+0xf0>
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d1bd      	bne.n	8003cac <_printf_float+0xf0>
 8003d30:	2301      	movs	r3, #1
 8003d32:	e7ba      	b.n	8003caa <_printf_float+0xee>
 8003d34:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8003d38:	d9dc      	bls.n	8003cf4 <_printf_float+0x138>
 8003d3a:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8003d3e:	d118      	bne.n	8003d72 <_printf_float+0x1b6>
 8003d40:	2900      	cmp	r1, #0
 8003d42:	6863      	ldr	r3, [r4, #4]
 8003d44:	dd0b      	ble.n	8003d5e <_printf_float+0x1a2>
 8003d46:	6121      	str	r1, [r4, #16]
 8003d48:	b913      	cbnz	r3, 8003d50 <_printf_float+0x194>
 8003d4a:	6822      	ldr	r2, [r4, #0]
 8003d4c:	07d0      	lsls	r0, r2, #31
 8003d4e:	d502      	bpl.n	8003d56 <_printf_float+0x19a>
 8003d50:	3301      	adds	r3, #1
 8003d52:	440b      	add	r3, r1
 8003d54:	6123      	str	r3, [r4, #16]
 8003d56:	f04f 0900 	mov.w	r9, #0
 8003d5a:	65a1      	str	r1, [r4, #88]	@ 0x58
 8003d5c:	e7dc      	b.n	8003d18 <_printf_float+0x15c>
 8003d5e:	b913      	cbnz	r3, 8003d66 <_printf_float+0x1aa>
 8003d60:	6822      	ldr	r2, [r4, #0]
 8003d62:	07d2      	lsls	r2, r2, #31
 8003d64:	d501      	bpl.n	8003d6a <_printf_float+0x1ae>
 8003d66:	3302      	adds	r3, #2
 8003d68:	e7f4      	b.n	8003d54 <_printf_float+0x198>
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	e7f2      	b.n	8003d54 <_printf_float+0x198>
 8003d6e:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8003d72:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8003d74:	4299      	cmp	r1, r3
 8003d76:	db05      	blt.n	8003d84 <_printf_float+0x1c8>
 8003d78:	6823      	ldr	r3, [r4, #0]
 8003d7a:	6121      	str	r1, [r4, #16]
 8003d7c:	07d8      	lsls	r0, r3, #31
 8003d7e:	d5ea      	bpl.n	8003d56 <_printf_float+0x19a>
 8003d80:	1c4b      	adds	r3, r1, #1
 8003d82:	e7e7      	b.n	8003d54 <_printf_float+0x198>
 8003d84:	2900      	cmp	r1, #0
 8003d86:	bfcc      	ite	gt
 8003d88:	2201      	movgt	r2, #1
 8003d8a:	f1c1 0202 	rsble	r2, r1, #2
 8003d8e:	4413      	add	r3, r2
 8003d90:	e7e0      	b.n	8003d54 <_printf_float+0x198>
 8003d92:	6823      	ldr	r3, [r4, #0]
 8003d94:	055a      	lsls	r2, r3, #21
 8003d96:	d407      	bmi.n	8003da8 <_printf_float+0x1ec>
 8003d98:	6923      	ldr	r3, [r4, #16]
 8003d9a:	4642      	mov	r2, r8
 8003d9c:	4631      	mov	r1, r6
 8003d9e:	4628      	mov	r0, r5
 8003da0:	47b8      	blx	r7
 8003da2:	3001      	adds	r0, #1
 8003da4:	d12b      	bne.n	8003dfe <_printf_float+0x242>
 8003da6:	e764      	b.n	8003c72 <_printf_float+0xb6>
 8003da8:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8003dac:	f240 80dc 	bls.w	8003f68 <_printf_float+0x3ac>
 8003db0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8003db4:	2200      	movs	r2, #0
 8003db6:	2300      	movs	r3, #0
 8003db8:	f7fc fdf6 	bl	80009a8 <__aeabi_dcmpeq>
 8003dbc:	2800      	cmp	r0, #0
 8003dbe:	d033      	beq.n	8003e28 <_printf_float+0x26c>
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	4631      	mov	r1, r6
 8003dc4:	4628      	mov	r0, r5
 8003dc6:	4a35      	ldr	r2, [pc, #212]	@ (8003e9c <_printf_float+0x2e0>)
 8003dc8:	47b8      	blx	r7
 8003dca:	3001      	adds	r0, #1
 8003dcc:	f43f af51 	beq.w	8003c72 <_printf_float+0xb6>
 8003dd0:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8003dd4:	4543      	cmp	r3, r8
 8003dd6:	db02      	blt.n	8003dde <_printf_float+0x222>
 8003dd8:	6823      	ldr	r3, [r4, #0]
 8003dda:	07d8      	lsls	r0, r3, #31
 8003ddc:	d50f      	bpl.n	8003dfe <_printf_float+0x242>
 8003dde:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003de2:	4631      	mov	r1, r6
 8003de4:	4628      	mov	r0, r5
 8003de6:	47b8      	blx	r7
 8003de8:	3001      	adds	r0, #1
 8003dea:	f43f af42 	beq.w	8003c72 <_printf_float+0xb6>
 8003dee:	f04f 0900 	mov.w	r9, #0
 8003df2:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8003df6:	f104 0a1a 	add.w	sl, r4, #26
 8003dfa:	45c8      	cmp	r8, r9
 8003dfc:	dc09      	bgt.n	8003e12 <_printf_float+0x256>
 8003dfe:	6823      	ldr	r3, [r4, #0]
 8003e00:	079b      	lsls	r3, r3, #30
 8003e02:	f100 8102 	bmi.w	800400a <_printf_float+0x44e>
 8003e06:	68e0      	ldr	r0, [r4, #12]
 8003e08:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8003e0a:	4298      	cmp	r0, r3
 8003e0c:	bfb8      	it	lt
 8003e0e:	4618      	movlt	r0, r3
 8003e10:	e731      	b.n	8003c76 <_printf_float+0xba>
 8003e12:	2301      	movs	r3, #1
 8003e14:	4652      	mov	r2, sl
 8003e16:	4631      	mov	r1, r6
 8003e18:	4628      	mov	r0, r5
 8003e1a:	47b8      	blx	r7
 8003e1c:	3001      	adds	r0, #1
 8003e1e:	f43f af28 	beq.w	8003c72 <_printf_float+0xb6>
 8003e22:	f109 0901 	add.w	r9, r9, #1
 8003e26:	e7e8      	b.n	8003dfa <_printf_float+0x23e>
 8003e28:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	dc38      	bgt.n	8003ea0 <_printf_float+0x2e4>
 8003e2e:	2301      	movs	r3, #1
 8003e30:	4631      	mov	r1, r6
 8003e32:	4628      	mov	r0, r5
 8003e34:	4a19      	ldr	r2, [pc, #100]	@ (8003e9c <_printf_float+0x2e0>)
 8003e36:	47b8      	blx	r7
 8003e38:	3001      	adds	r0, #1
 8003e3a:	f43f af1a 	beq.w	8003c72 <_printf_float+0xb6>
 8003e3e:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8003e42:	ea59 0303 	orrs.w	r3, r9, r3
 8003e46:	d102      	bne.n	8003e4e <_printf_float+0x292>
 8003e48:	6823      	ldr	r3, [r4, #0]
 8003e4a:	07d9      	lsls	r1, r3, #31
 8003e4c:	d5d7      	bpl.n	8003dfe <_printf_float+0x242>
 8003e4e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003e52:	4631      	mov	r1, r6
 8003e54:	4628      	mov	r0, r5
 8003e56:	47b8      	blx	r7
 8003e58:	3001      	adds	r0, #1
 8003e5a:	f43f af0a 	beq.w	8003c72 <_printf_float+0xb6>
 8003e5e:	f04f 0a00 	mov.w	sl, #0
 8003e62:	f104 0b1a 	add.w	fp, r4, #26
 8003e66:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003e68:	425b      	negs	r3, r3
 8003e6a:	4553      	cmp	r3, sl
 8003e6c:	dc01      	bgt.n	8003e72 <_printf_float+0x2b6>
 8003e6e:	464b      	mov	r3, r9
 8003e70:	e793      	b.n	8003d9a <_printf_float+0x1de>
 8003e72:	2301      	movs	r3, #1
 8003e74:	465a      	mov	r2, fp
 8003e76:	4631      	mov	r1, r6
 8003e78:	4628      	mov	r0, r5
 8003e7a:	47b8      	blx	r7
 8003e7c:	3001      	adds	r0, #1
 8003e7e:	f43f aef8 	beq.w	8003c72 <_printf_float+0xb6>
 8003e82:	f10a 0a01 	add.w	sl, sl, #1
 8003e86:	e7ee      	b.n	8003e66 <_printf_float+0x2aa>
 8003e88:	7fefffff 	.word	0x7fefffff
 8003e8c:	080068da 	.word	0x080068da
 8003e90:	080068de 	.word	0x080068de
 8003e94:	080068e2 	.word	0x080068e2
 8003e98:	080068e6 	.word	0x080068e6
 8003e9c:	080068ea 	.word	0x080068ea
 8003ea0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003ea2:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8003ea6:	4553      	cmp	r3, sl
 8003ea8:	bfa8      	it	ge
 8003eaa:	4653      	movge	r3, sl
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	4699      	mov	r9, r3
 8003eb0:	dc36      	bgt.n	8003f20 <_printf_float+0x364>
 8003eb2:	f04f 0b00 	mov.w	fp, #0
 8003eb6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003eba:	f104 021a 	add.w	r2, r4, #26
 8003ebe:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003ec0:	930a      	str	r3, [sp, #40]	@ 0x28
 8003ec2:	eba3 0309 	sub.w	r3, r3, r9
 8003ec6:	455b      	cmp	r3, fp
 8003ec8:	dc31      	bgt.n	8003f2e <_printf_float+0x372>
 8003eca:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003ecc:	459a      	cmp	sl, r3
 8003ece:	dc3a      	bgt.n	8003f46 <_printf_float+0x38a>
 8003ed0:	6823      	ldr	r3, [r4, #0]
 8003ed2:	07da      	lsls	r2, r3, #31
 8003ed4:	d437      	bmi.n	8003f46 <_printf_float+0x38a>
 8003ed6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003ed8:	ebaa 0903 	sub.w	r9, sl, r3
 8003edc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003ede:	ebaa 0303 	sub.w	r3, sl, r3
 8003ee2:	4599      	cmp	r9, r3
 8003ee4:	bfa8      	it	ge
 8003ee6:	4699      	movge	r9, r3
 8003ee8:	f1b9 0f00 	cmp.w	r9, #0
 8003eec:	dc33      	bgt.n	8003f56 <_printf_float+0x39a>
 8003eee:	f04f 0800 	mov.w	r8, #0
 8003ef2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003ef6:	f104 0b1a 	add.w	fp, r4, #26
 8003efa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003efc:	ebaa 0303 	sub.w	r3, sl, r3
 8003f00:	eba3 0309 	sub.w	r3, r3, r9
 8003f04:	4543      	cmp	r3, r8
 8003f06:	f77f af7a 	ble.w	8003dfe <_printf_float+0x242>
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	465a      	mov	r2, fp
 8003f0e:	4631      	mov	r1, r6
 8003f10:	4628      	mov	r0, r5
 8003f12:	47b8      	blx	r7
 8003f14:	3001      	adds	r0, #1
 8003f16:	f43f aeac 	beq.w	8003c72 <_printf_float+0xb6>
 8003f1a:	f108 0801 	add.w	r8, r8, #1
 8003f1e:	e7ec      	b.n	8003efa <_printf_float+0x33e>
 8003f20:	4642      	mov	r2, r8
 8003f22:	4631      	mov	r1, r6
 8003f24:	4628      	mov	r0, r5
 8003f26:	47b8      	blx	r7
 8003f28:	3001      	adds	r0, #1
 8003f2a:	d1c2      	bne.n	8003eb2 <_printf_float+0x2f6>
 8003f2c:	e6a1      	b.n	8003c72 <_printf_float+0xb6>
 8003f2e:	2301      	movs	r3, #1
 8003f30:	4631      	mov	r1, r6
 8003f32:	4628      	mov	r0, r5
 8003f34:	920a      	str	r2, [sp, #40]	@ 0x28
 8003f36:	47b8      	blx	r7
 8003f38:	3001      	adds	r0, #1
 8003f3a:	f43f ae9a 	beq.w	8003c72 <_printf_float+0xb6>
 8003f3e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8003f40:	f10b 0b01 	add.w	fp, fp, #1
 8003f44:	e7bb      	b.n	8003ebe <_printf_float+0x302>
 8003f46:	4631      	mov	r1, r6
 8003f48:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003f4c:	4628      	mov	r0, r5
 8003f4e:	47b8      	blx	r7
 8003f50:	3001      	adds	r0, #1
 8003f52:	d1c0      	bne.n	8003ed6 <_printf_float+0x31a>
 8003f54:	e68d      	b.n	8003c72 <_printf_float+0xb6>
 8003f56:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8003f58:	464b      	mov	r3, r9
 8003f5a:	4631      	mov	r1, r6
 8003f5c:	4628      	mov	r0, r5
 8003f5e:	4442      	add	r2, r8
 8003f60:	47b8      	blx	r7
 8003f62:	3001      	adds	r0, #1
 8003f64:	d1c3      	bne.n	8003eee <_printf_float+0x332>
 8003f66:	e684      	b.n	8003c72 <_printf_float+0xb6>
 8003f68:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8003f6c:	f1ba 0f01 	cmp.w	sl, #1
 8003f70:	dc01      	bgt.n	8003f76 <_printf_float+0x3ba>
 8003f72:	07db      	lsls	r3, r3, #31
 8003f74:	d536      	bpl.n	8003fe4 <_printf_float+0x428>
 8003f76:	2301      	movs	r3, #1
 8003f78:	4642      	mov	r2, r8
 8003f7a:	4631      	mov	r1, r6
 8003f7c:	4628      	mov	r0, r5
 8003f7e:	47b8      	blx	r7
 8003f80:	3001      	adds	r0, #1
 8003f82:	f43f ae76 	beq.w	8003c72 <_printf_float+0xb6>
 8003f86:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003f8a:	4631      	mov	r1, r6
 8003f8c:	4628      	mov	r0, r5
 8003f8e:	47b8      	blx	r7
 8003f90:	3001      	adds	r0, #1
 8003f92:	f43f ae6e 	beq.w	8003c72 <_printf_float+0xb6>
 8003f96:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8003fa2:	f7fc fd01 	bl	80009a8 <__aeabi_dcmpeq>
 8003fa6:	b9c0      	cbnz	r0, 8003fda <_printf_float+0x41e>
 8003fa8:	4653      	mov	r3, sl
 8003faa:	f108 0201 	add.w	r2, r8, #1
 8003fae:	4631      	mov	r1, r6
 8003fb0:	4628      	mov	r0, r5
 8003fb2:	47b8      	blx	r7
 8003fb4:	3001      	adds	r0, #1
 8003fb6:	d10c      	bne.n	8003fd2 <_printf_float+0x416>
 8003fb8:	e65b      	b.n	8003c72 <_printf_float+0xb6>
 8003fba:	2301      	movs	r3, #1
 8003fbc:	465a      	mov	r2, fp
 8003fbe:	4631      	mov	r1, r6
 8003fc0:	4628      	mov	r0, r5
 8003fc2:	47b8      	blx	r7
 8003fc4:	3001      	adds	r0, #1
 8003fc6:	f43f ae54 	beq.w	8003c72 <_printf_float+0xb6>
 8003fca:	f108 0801 	add.w	r8, r8, #1
 8003fce:	45d0      	cmp	r8, sl
 8003fd0:	dbf3      	blt.n	8003fba <_printf_float+0x3fe>
 8003fd2:	464b      	mov	r3, r9
 8003fd4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8003fd8:	e6e0      	b.n	8003d9c <_printf_float+0x1e0>
 8003fda:	f04f 0800 	mov.w	r8, #0
 8003fde:	f104 0b1a 	add.w	fp, r4, #26
 8003fe2:	e7f4      	b.n	8003fce <_printf_float+0x412>
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	4642      	mov	r2, r8
 8003fe8:	e7e1      	b.n	8003fae <_printf_float+0x3f2>
 8003fea:	2301      	movs	r3, #1
 8003fec:	464a      	mov	r2, r9
 8003fee:	4631      	mov	r1, r6
 8003ff0:	4628      	mov	r0, r5
 8003ff2:	47b8      	blx	r7
 8003ff4:	3001      	adds	r0, #1
 8003ff6:	f43f ae3c 	beq.w	8003c72 <_printf_float+0xb6>
 8003ffa:	f108 0801 	add.w	r8, r8, #1
 8003ffe:	68e3      	ldr	r3, [r4, #12]
 8004000:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8004002:	1a5b      	subs	r3, r3, r1
 8004004:	4543      	cmp	r3, r8
 8004006:	dcf0      	bgt.n	8003fea <_printf_float+0x42e>
 8004008:	e6fd      	b.n	8003e06 <_printf_float+0x24a>
 800400a:	f04f 0800 	mov.w	r8, #0
 800400e:	f104 0919 	add.w	r9, r4, #25
 8004012:	e7f4      	b.n	8003ffe <_printf_float+0x442>

08004014 <_printf_common>:
 8004014:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004018:	4616      	mov	r6, r2
 800401a:	4698      	mov	r8, r3
 800401c:	688a      	ldr	r2, [r1, #8]
 800401e:	690b      	ldr	r3, [r1, #16]
 8004020:	4607      	mov	r7, r0
 8004022:	4293      	cmp	r3, r2
 8004024:	bfb8      	it	lt
 8004026:	4613      	movlt	r3, r2
 8004028:	6033      	str	r3, [r6, #0]
 800402a:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800402e:	460c      	mov	r4, r1
 8004030:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004034:	b10a      	cbz	r2, 800403a <_printf_common+0x26>
 8004036:	3301      	adds	r3, #1
 8004038:	6033      	str	r3, [r6, #0]
 800403a:	6823      	ldr	r3, [r4, #0]
 800403c:	0699      	lsls	r1, r3, #26
 800403e:	bf42      	ittt	mi
 8004040:	6833      	ldrmi	r3, [r6, #0]
 8004042:	3302      	addmi	r3, #2
 8004044:	6033      	strmi	r3, [r6, #0]
 8004046:	6825      	ldr	r5, [r4, #0]
 8004048:	f015 0506 	ands.w	r5, r5, #6
 800404c:	d106      	bne.n	800405c <_printf_common+0x48>
 800404e:	f104 0a19 	add.w	sl, r4, #25
 8004052:	68e3      	ldr	r3, [r4, #12]
 8004054:	6832      	ldr	r2, [r6, #0]
 8004056:	1a9b      	subs	r3, r3, r2
 8004058:	42ab      	cmp	r3, r5
 800405a:	dc2b      	bgt.n	80040b4 <_printf_common+0xa0>
 800405c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004060:	6822      	ldr	r2, [r4, #0]
 8004062:	3b00      	subs	r3, #0
 8004064:	bf18      	it	ne
 8004066:	2301      	movne	r3, #1
 8004068:	0692      	lsls	r2, r2, #26
 800406a:	d430      	bmi.n	80040ce <_printf_common+0xba>
 800406c:	4641      	mov	r1, r8
 800406e:	4638      	mov	r0, r7
 8004070:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004074:	47c8      	blx	r9
 8004076:	3001      	adds	r0, #1
 8004078:	d023      	beq.n	80040c2 <_printf_common+0xae>
 800407a:	6823      	ldr	r3, [r4, #0]
 800407c:	6922      	ldr	r2, [r4, #16]
 800407e:	f003 0306 	and.w	r3, r3, #6
 8004082:	2b04      	cmp	r3, #4
 8004084:	bf14      	ite	ne
 8004086:	2500      	movne	r5, #0
 8004088:	6833      	ldreq	r3, [r6, #0]
 800408a:	f04f 0600 	mov.w	r6, #0
 800408e:	bf08      	it	eq
 8004090:	68e5      	ldreq	r5, [r4, #12]
 8004092:	f104 041a 	add.w	r4, r4, #26
 8004096:	bf08      	it	eq
 8004098:	1aed      	subeq	r5, r5, r3
 800409a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800409e:	bf08      	it	eq
 80040a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80040a4:	4293      	cmp	r3, r2
 80040a6:	bfc4      	itt	gt
 80040a8:	1a9b      	subgt	r3, r3, r2
 80040aa:	18ed      	addgt	r5, r5, r3
 80040ac:	42b5      	cmp	r5, r6
 80040ae:	d11a      	bne.n	80040e6 <_printf_common+0xd2>
 80040b0:	2000      	movs	r0, #0
 80040b2:	e008      	b.n	80040c6 <_printf_common+0xb2>
 80040b4:	2301      	movs	r3, #1
 80040b6:	4652      	mov	r2, sl
 80040b8:	4641      	mov	r1, r8
 80040ba:	4638      	mov	r0, r7
 80040bc:	47c8      	blx	r9
 80040be:	3001      	adds	r0, #1
 80040c0:	d103      	bne.n	80040ca <_printf_common+0xb6>
 80040c2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80040c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80040ca:	3501      	adds	r5, #1
 80040cc:	e7c1      	b.n	8004052 <_printf_common+0x3e>
 80040ce:	2030      	movs	r0, #48	@ 0x30
 80040d0:	18e1      	adds	r1, r4, r3
 80040d2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80040d6:	1c5a      	adds	r2, r3, #1
 80040d8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80040dc:	4422      	add	r2, r4
 80040de:	3302      	adds	r3, #2
 80040e0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80040e4:	e7c2      	b.n	800406c <_printf_common+0x58>
 80040e6:	2301      	movs	r3, #1
 80040e8:	4622      	mov	r2, r4
 80040ea:	4641      	mov	r1, r8
 80040ec:	4638      	mov	r0, r7
 80040ee:	47c8      	blx	r9
 80040f0:	3001      	adds	r0, #1
 80040f2:	d0e6      	beq.n	80040c2 <_printf_common+0xae>
 80040f4:	3601      	adds	r6, #1
 80040f6:	e7d9      	b.n	80040ac <_printf_common+0x98>

080040f8 <_printf_i>:
 80040f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80040fc:	7e0f      	ldrb	r7, [r1, #24]
 80040fe:	4691      	mov	r9, r2
 8004100:	2f78      	cmp	r7, #120	@ 0x78
 8004102:	4680      	mov	r8, r0
 8004104:	460c      	mov	r4, r1
 8004106:	469a      	mov	sl, r3
 8004108:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800410a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800410e:	d807      	bhi.n	8004120 <_printf_i+0x28>
 8004110:	2f62      	cmp	r7, #98	@ 0x62
 8004112:	d80a      	bhi.n	800412a <_printf_i+0x32>
 8004114:	2f00      	cmp	r7, #0
 8004116:	f000 80d3 	beq.w	80042c0 <_printf_i+0x1c8>
 800411a:	2f58      	cmp	r7, #88	@ 0x58
 800411c:	f000 80ba 	beq.w	8004294 <_printf_i+0x19c>
 8004120:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004124:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004128:	e03a      	b.n	80041a0 <_printf_i+0xa8>
 800412a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800412e:	2b15      	cmp	r3, #21
 8004130:	d8f6      	bhi.n	8004120 <_printf_i+0x28>
 8004132:	a101      	add	r1, pc, #4	@ (adr r1, 8004138 <_printf_i+0x40>)
 8004134:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004138:	08004191 	.word	0x08004191
 800413c:	080041a5 	.word	0x080041a5
 8004140:	08004121 	.word	0x08004121
 8004144:	08004121 	.word	0x08004121
 8004148:	08004121 	.word	0x08004121
 800414c:	08004121 	.word	0x08004121
 8004150:	080041a5 	.word	0x080041a5
 8004154:	08004121 	.word	0x08004121
 8004158:	08004121 	.word	0x08004121
 800415c:	08004121 	.word	0x08004121
 8004160:	08004121 	.word	0x08004121
 8004164:	080042a7 	.word	0x080042a7
 8004168:	080041cf 	.word	0x080041cf
 800416c:	08004261 	.word	0x08004261
 8004170:	08004121 	.word	0x08004121
 8004174:	08004121 	.word	0x08004121
 8004178:	080042c9 	.word	0x080042c9
 800417c:	08004121 	.word	0x08004121
 8004180:	080041cf 	.word	0x080041cf
 8004184:	08004121 	.word	0x08004121
 8004188:	08004121 	.word	0x08004121
 800418c:	08004269 	.word	0x08004269
 8004190:	6833      	ldr	r3, [r6, #0]
 8004192:	1d1a      	adds	r2, r3, #4
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	6032      	str	r2, [r6, #0]
 8004198:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800419c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80041a0:	2301      	movs	r3, #1
 80041a2:	e09e      	b.n	80042e2 <_printf_i+0x1ea>
 80041a4:	6833      	ldr	r3, [r6, #0]
 80041a6:	6820      	ldr	r0, [r4, #0]
 80041a8:	1d19      	adds	r1, r3, #4
 80041aa:	6031      	str	r1, [r6, #0]
 80041ac:	0606      	lsls	r6, r0, #24
 80041ae:	d501      	bpl.n	80041b4 <_printf_i+0xbc>
 80041b0:	681d      	ldr	r5, [r3, #0]
 80041b2:	e003      	b.n	80041bc <_printf_i+0xc4>
 80041b4:	0645      	lsls	r5, r0, #25
 80041b6:	d5fb      	bpl.n	80041b0 <_printf_i+0xb8>
 80041b8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80041bc:	2d00      	cmp	r5, #0
 80041be:	da03      	bge.n	80041c8 <_printf_i+0xd0>
 80041c0:	232d      	movs	r3, #45	@ 0x2d
 80041c2:	426d      	negs	r5, r5
 80041c4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80041c8:	230a      	movs	r3, #10
 80041ca:	4859      	ldr	r0, [pc, #356]	@ (8004330 <_printf_i+0x238>)
 80041cc:	e011      	b.n	80041f2 <_printf_i+0xfa>
 80041ce:	6821      	ldr	r1, [r4, #0]
 80041d0:	6833      	ldr	r3, [r6, #0]
 80041d2:	0608      	lsls	r0, r1, #24
 80041d4:	f853 5b04 	ldr.w	r5, [r3], #4
 80041d8:	d402      	bmi.n	80041e0 <_printf_i+0xe8>
 80041da:	0649      	lsls	r1, r1, #25
 80041dc:	bf48      	it	mi
 80041de:	b2ad      	uxthmi	r5, r5
 80041e0:	2f6f      	cmp	r7, #111	@ 0x6f
 80041e2:	6033      	str	r3, [r6, #0]
 80041e4:	bf14      	ite	ne
 80041e6:	230a      	movne	r3, #10
 80041e8:	2308      	moveq	r3, #8
 80041ea:	4851      	ldr	r0, [pc, #324]	@ (8004330 <_printf_i+0x238>)
 80041ec:	2100      	movs	r1, #0
 80041ee:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80041f2:	6866      	ldr	r6, [r4, #4]
 80041f4:	2e00      	cmp	r6, #0
 80041f6:	bfa8      	it	ge
 80041f8:	6821      	ldrge	r1, [r4, #0]
 80041fa:	60a6      	str	r6, [r4, #8]
 80041fc:	bfa4      	itt	ge
 80041fe:	f021 0104 	bicge.w	r1, r1, #4
 8004202:	6021      	strge	r1, [r4, #0]
 8004204:	b90d      	cbnz	r5, 800420a <_printf_i+0x112>
 8004206:	2e00      	cmp	r6, #0
 8004208:	d04b      	beq.n	80042a2 <_printf_i+0x1aa>
 800420a:	4616      	mov	r6, r2
 800420c:	fbb5 f1f3 	udiv	r1, r5, r3
 8004210:	fb03 5711 	mls	r7, r3, r1, r5
 8004214:	5dc7      	ldrb	r7, [r0, r7]
 8004216:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800421a:	462f      	mov	r7, r5
 800421c:	42bb      	cmp	r3, r7
 800421e:	460d      	mov	r5, r1
 8004220:	d9f4      	bls.n	800420c <_printf_i+0x114>
 8004222:	2b08      	cmp	r3, #8
 8004224:	d10b      	bne.n	800423e <_printf_i+0x146>
 8004226:	6823      	ldr	r3, [r4, #0]
 8004228:	07df      	lsls	r7, r3, #31
 800422a:	d508      	bpl.n	800423e <_printf_i+0x146>
 800422c:	6923      	ldr	r3, [r4, #16]
 800422e:	6861      	ldr	r1, [r4, #4]
 8004230:	4299      	cmp	r1, r3
 8004232:	bfde      	ittt	le
 8004234:	2330      	movle	r3, #48	@ 0x30
 8004236:	f806 3c01 	strble.w	r3, [r6, #-1]
 800423a:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800423e:	1b92      	subs	r2, r2, r6
 8004240:	6122      	str	r2, [r4, #16]
 8004242:	464b      	mov	r3, r9
 8004244:	4621      	mov	r1, r4
 8004246:	4640      	mov	r0, r8
 8004248:	f8cd a000 	str.w	sl, [sp]
 800424c:	aa03      	add	r2, sp, #12
 800424e:	f7ff fee1 	bl	8004014 <_printf_common>
 8004252:	3001      	adds	r0, #1
 8004254:	d14a      	bne.n	80042ec <_printf_i+0x1f4>
 8004256:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800425a:	b004      	add	sp, #16
 800425c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004260:	6823      	ldr	r3, [r4, #0]
 8004262:	f043 0320 	orr.w	r3, r3, #32
 8004266:	6023      	str	r3, [r4, #0]
 8004268:	2778      	movs	r7, #120	@ 0x78
 800426a:	4832      	ldr	r0, [pc, #200]	@ (8004334 <_printf_i+0x23c>)
 800426c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004270:	6823      	ldr	r3, [r4, #0]
 8004272:	6831      	ldr	r1, [r6, #0]
 8004274:	061f      	lsls	r7, r3, #24
 8004276:	f851 5b04 	ldr.w	r5, [r1], #4
 800427a:	d402      	bmi.n	8004282 <_printf_i+0x18a>
 800427c:	065f      	lsls	r7, r3, #25
 800427e:	bf48      	it	mi
 8004280:	b2ad      	uxthmi	r5, r5
 8004282:	6031      	str	r1, [r6, #0]
 8004284:	07d9      	lsls	r1, r3, #31
 8004286:	bf44      	itt	mi
 8004288:	f043 0320 	orrmi.w	r3, r3, #32
 800428c:	6023      	strmi	r3, [r4, #0]
 800428e:	b11d      	cbz	r5, 8004298 <_printf_i+0x1a0>
 8004290:	2310      	movs	r3, #16
 8004292:	e7ab      	b.n	80041ec <_printf_i+0xf4>
 8004294:	4826      	ldr	r0, [pc, #152]	@ (8004330 <_printf_i+0x238>)
 8004296:	e7e9      	b.n	800426c <_printf_i+0x174>
 8004298:	6823      	ldr	r3, [r4, #0]
 800429a:	f023 0320 	bic.w	r3, r3, #32
 800429e:	6023      	str	r3, [r4, #0]
 80042a0:	e7f6      	b.n	8004290 <_printf_i+0x198>
 80042a2:	4616      	mov	r6, r2
 80042a4:	e7bd      	b.n	8004222 <_printf_i+0x12a>
 80042a6:	6833      	ldr	r3, [r6, #0]
 80042a8:	6825      	ldr	r5, [r4, #0]
 80042aa:	1d18      	adds	r0, r3, #4
 80042ac:	6961      	ldr	r1, [r4, #20]
 80042ae:	6030      	str	r0, [r6, #0]
 80042b0:	062e      	lsls	r6, r5, #24
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	d501      	bpl.n	80042ba <_printf_i+0x1c2>
 80042b6:	6019      	str	r1, [r3, #0]
 80042b8:	e002      	b.n	80042c0 <_printf_i+0x1c8>
 80042ba:	0668      	lsls	r0, r5, #25
 80042bc:	d5fb      	bpl.n	80042b6 <_printf_i+0x1be>
 80042be:	8019      	strh	r1, [r3, #0]
 80042c0:	2300      	movs	r3, #0
 80042c2:	4616      	mov	r6, r2
 80042c4:	6123      	str	r3, [r4, #16]
 80042c6:	e7bc      	b.n	8004242 <_printf_i+0x14a>
 80042c8:	6833      	ldr	r3, [r6, #0]
 80042ca:	2100      	movs	r1, #0
 80042cc:	1d1a      	adds	r2, r3, #4
 80042ce:	6032      	str	r2, [r6, #0]
 80042d0:	681e      	ldr	r6, [r3, #0]
 80042d2:	6862      	ldr	r2, [r4, #4]
 80042d4:	4630      	mov	r0, r6
 80042d6:	f000 fab8 	bl	800484a <memchr>
 80042da:	b108      	cbz	r0, 80042e0 <_printf_i+0x1e8>
 80042dc:	1b80      	subs	r0, r0, r6
 80042de:	6060      	str	r0, [r4, #4]
 80042e0:	6863      	ldr	r3, [r4, #4]
 80042e2:	6123      	str	r3, [r4, #16]
 80042e4:	2300      	movs	r3, #0
 80042e6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80042ea:	e7aa      	b.n	8004242 <_printf_i+0x14a>
 80042ec:	4632      	mov	r2, r6
 80042ee:	4649      	mov	r1, r9
 80042f0:	4640      	mov	r0, r8
 80042f2:	6923      	ldr	r3, [r4, #16]
 80042f4:	47d0      	blx	sl
 80042f6:	3001      	adds	r0, #1
 80042f8:	d0ad      	beq.n	8004256 <_printf_i+0x15e>
 80042fa:	6823      	ldr	r3, [r4, #0]
 80042fc:	079b      	lsls	r3, r3, #30
 80042fe:	d413      	bmi.n	8004328 <_printf_i+0x230>
 8004300:	68e0      	ldr	r0, [r4, #12]
 8004302:	9b03      	ldr	r3, [sp, #12]
 8004304:	4298      	cmp	r0, r3
 8004306:	bfb8      	it	lt
 8004308:	4618      	movlt	r0, r3
 800430a:	e7a6      	b.n	800425a <_printf_i+0x162>
 800430c:	2301      	movs	r3, #1
 800430e:	4632      	mov	r2, r6
 8004310:	4649      	mov	r1, r9
 8004312:	4640      	mov	r0, r8
 8004314:	47d0      	blx	sl
 8004316:	3001      	adds	r0, #1
 8004318:	d09d      	beq.n	8004256 <_printf_i+0x15e>
 800431a:	3501      	adds	r5, #1
 800431c:	68e3      	ldr	r3, [r4, #12]
 800431e:	9903      	ldr	r1, [sp, #12]
 8004320:	1a5b      	subs	r3, r3, r1
 8004322:	42ab      	cmp	r3, r5
 8004324:	dcf2      	bgt.n	800430c <_printf_i+0x214>
 8004326:	e7eb      	b.n	8004300 <_printf_i+0x208>
 8004328:	2500      	movs	r5, #0
 800432a:	f104 0619 	add.w	r6, r4, #25
 800432e:	e7f5      	b.n	800431c <_printf_i+0x224>
 8004330:	080068ec 	.word	0x080068ec
 8004334:	080068fd 	.word	0x080068fd

08004338 <std>:
 8004338:	2300      	movs	r3, #0
 800433a:	b510      	push	{r4, lr}
 800433c:	4604      	mov	r4, r0
 800433e:	e9c0 3300 	strd	r3, r3, [r0]
 8004342:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004346:	6083      	str	r3, [r0, #8]
 8004348:	8181      	strh	r1, [r0, #12]
 800434a:	6643      	str	r3, [r0, #100]	@ 0x64
 800434c:	81c2      	strh	r2, [r0, #14]
 800434e:	6183      	str	r3, [r0, #24]
 8004350:	4619      	mov	r1, r3
 8004352:	2208      	movs	r2, #8
 8004354:	305c      	adds	r0, #92	@ 0x5c
 8004356:	f000 f9f9 	bl	800474c <memset>
 800435a:	4b0d      	ldr	r3, [pc, #52]	@ (8004390 <std+0x58>)
 800435c:	6224      	str	r4, [r4, #32]
 800435e:	6263      	str	r3, [r4, #36]	@ 0x24
 8004360:	4b0c      	ldr	r3, [pc, #48]	@ (8004394 <std+0x5c>)
 8004362:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004364:	4b0c      	ldr	r3, [pc, #48]	@ (8004398 <std+0x60>)
 8004366:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004368:	4b0c      	ldr	r3, [pc, #48]	@ (800439c <std+0x64>)
 800436a:	6323      	str	r3, [r4, #48]	@ 0x30
 800436c:	4b0c      	ldr	r3, [pc, #48]	@ (80043a0 <std+0x68>)
 800436e:	429c      	cmp	r4, r3
 8004370:	d006      	beq.n	8004380 <std+0x48>
 8004372:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004376:	4294      	cmp	r4, r2
 8004378:	d002      	beq.n	8004380 <std+0x48>
 800437a:	33d0      	adds	r3, #208	@ 0xd0
 800437c:	429c      	cmp	r4, r3
 800437e:	d105      	bne.n	800438c <std+0x54>
 8004380:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004384:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004388:	f000 ba5c 	b.w	8004844 <__retarget_lock_init_recursive>
 800438c:	bd10      	pop	{r4, pc}
 800438e:	bf00      	nop
 8004390:	0800459d 	.word	0x0800459d
 8004394:	080045bf 	.word	0x080045bf
 8004398:	080045f7 	.word	0x080045f7
 800439c:	0800461b 	.word	0x0800461b
 80043a0:	20000294 	.word	0x20000294

080043a4 <stdio_exit_handler>:
 80043a4:	4a02      	ldr	r2, [pc, #8]	@ (80043b0 <stdio_exit_handler+0xc>)
 80043a6:	4903      	ldr	r1, [pc, #12]	@ (80043b4 <stdio_exit_handler+0x10>)
 80043a8:	4803      	ldr	r0, [pc, #12]	@ (80043b8 <stdio_exit_handler+0x14>)
 80043aa:	f000 b869 	b.w	8004480 <_fwalk_sglue>
 80043ae:	bf00      	nop
 80043b0:	2000000c 	.word	0x2000000c
 80043b4:	08006185 	.word	0x08006185
 80043b8:	2000001c 	.word	0x2000001c

080043bc <cleanup_stdio>:
 80043bc:	6841      	ldr	r1, [r0, #4]
 80043be:	4b0c      	ldr	r3, [pc, #48]	@ (80043f0 <cleanup_stdio+0x34>)
 80043c0:	b510      	push	{r4, lr}
 80043c2:	4299      	cmp	r1, r3
 80043c4:	4604      	mov	r4, r0
 80043c6:	d001      	beq.n	80043cc <cleanup_stdio+0x10>
 80043c8:	f001 fedc 	bl	8006184 <_fflush_r>
 80043cc:	68a1      	ldr	r1, [r4, #8]
 80043ce:	4b09      	ldr	r3, [pc, #36]	@ (80043f4 <cleanup_stdio+0x38>)
 80043d0:	4299      	cmp	r1, r3
 80043d2:	d002      	beq.n	80043da <cleanup_stdio+0x1e>
 80043d4:	4620      	mov	r0, r4
 80043d6:	f001 fed5 	bl	8006184 <_fflush_r>
 80043da:	68e1      	ldr	r1, [r4, #12]
 80043dc:	4b06      	ldr	r3, [pc, #24]	@ (80043f8 <cleanup_stdio+0x3c>)
 80043de:	4299      	cmp	r1, r3
 80043e0:	d004      	beq.n	80043ec <cleanup_stdio+0x30>
 80043e2:	4620      	mov	r0, r4
 80043e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80043e8:	f001 becc 	b.w	8006184 <_fflush_r>
 80043ec:	bd10      	pop	{r4, pc}
 80043ee:	bf00      	nop
 80043f0:	20000294 	.word	0x20000294
 80043f4:	200002fc 	.word	0x200002fc
 80043f8:	20000364 	.word	0x20000364

080043fc <global_stdio_init.part.0>:
 80043fc:	b510      	push	{r4, lr}
 80043fe:	4b0b      	ldr	r3, [pc, #44]	@ (800442c <global_stdio_init.part.0+0x30>)
 8004400:	4c0b      	ldr	r4, [pc, #44]	@ (8004430 <global_stdio_init.part.0+0x34>)
 8004402:	4a0c      	ldr	r2, [pc, #48]	@ (8004434 <global_stdio_init.part.0+0x38>)
 8004404:	4620      	mov	r0, r4
 8004406:	601a      	str	r2, [r3, #0]
 8004408:	2104      	movs	r1, #4
 800440a:	2200      	movs	r2, #0
 800440c:	f7ff ff94 	bl	8004338 <std>
 8004410:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004414:	2201      	movs	r2, #1
 8004416:	2109      	movs	r1, #9
 8004418:	f7ff ff8e 	bl	8004338 <std>
 800441c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004420:	2202      	movs	r2, #2
 8004422:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004426:	2112      	movs	r1, #18
 8004428:	f7ff bf86 	b.w	8004338 <std>
 800442c:	200003cc 	.word	0x200003cc
 8004430:	20000294 	.word	0x20000294
 8004434:	080043a5 	.word	0x080043a5

08004438 <__sfp_lock_acquire>:
 8004438:	4801      	ldr	r0, [pc, #4]	@ (8004440 <__sfp_lock_acquire+0x8>)
 800443a:	f000 ba04 	b.w	8004846 <__retarget_lock_acquire_recursive>
 800443e:	bf00      	nop
 8004440:	200003d5 	.word	0x200003d5

08004444 <__sfp_lock_release>:
 8004444:	4801      	ldr	r0, [pc, #4]	@ (800444c <__sfp_lock_release+0x8>)
 8004446:	f000 b9ff 	b.w	8004848 <__retarget_lock_release_recursive>
 800444a:	bf00      	nop
 800444c:	200003d5 	.word	0x200003d5

08004450 <__sinit>:
 8004450:	b510      	push	{r4, lr}
 8004452:	4604      	mov	r4, r0
 8004454:	f7ff fff0 	bl	8004438 <__sfp_lock_acquire>
 8004458:	6a23      	ldr	r3, [r4, #32]
 800445a:	b11b      	cbz	r3, 8004464 <__sinit+0x14>
 800445c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004460:	f7ff bff0 	b.w	8004444 <__sfp_lock_release>
 8004464:	4b04      	ldr	r3, [pc, #16]	@ (8004478 <__sinit+0x28>)
 8004466:	6223      	str	r3, [r4, #32]
 8004468:	4b04      	ldr	r3, [pc, #16]	@ (800447c <__sinit+0x2c>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d1f5      	bne.n	800445c <__sinit+0xc>
 8004470:	f7ff ffc4 	bl	80043fc <global_stdio_init.part.0>
 8004474:	e7f2      	b.n	800445c <__sinit+0xc>
 8004476:	bf00      	nop
 8004478:	080043bd 	.word	0x080043bd
 800447c:	200003cc 	.word	0x200003cc

08004480 <_fwalk_sglue>:
 8004480:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004484:	4607      	mov	r7, r0
 8004486:	4688      	mov	r8, r1
 8004488:	4614      	mov	r4, r2
 800448a:	2600      	movs	r6, #0
 800448c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004490:	f1b9 0901 	subs.w	r9, r9, #1
 8004494:	d505      	bpl.n	80044a2 <_fwalk_sglue+0x22>
 8004496:	6824      	ldr	r4, [r4, #0]
 8004498:	2c00      	cmp	r4, #0
 800449a:	d1f7      	bne.n	800448c <_fwalk_sglue+0xc>
 800449c:	4630      	mov	r0, r6
 800449e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80044a2:	89ab      	ldrh	r3, [r5, #12]
 80044a4:	2b01      	cmp	r3, #1
 80044a6:	d907      	bls.n	80044b8 <_fwalk_sglue+0x38>
 80044a8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80044ac:	3301      	adds	r3, #1
 80044ae:	d003      	beq.n	80044b8 <_fwalk_sglue+0x38>
 80044b0:	4629      	mov	r1, r5
 80044b2:	4638      	mov	r0, r7
 80044b4:	47c0      	blx	r8
 80044b6:	4306      	orrs	r6, r0
 80044b8:	3568      	adds	r5, #104	@ 0x68
 80044ba:	e7e9      	b.n	8004490 <_fwalk_sglue+0x10>

080044bc <iprintf>:
 80044bc:	b40f      	push	{r0, r1, r2, r3}
 80044be:	b507      	push	{r0, r1, r2, lr}
 80044c0:	4906      	ldr	r1, [pc, #24]	@ (80044dc <iprintf+0x20>)
 80044c2:	ab04      	add	r3, sp, #16
 80044c4:	6808      	ldr	r0, [r1, #0]
 80044c6:	f853 2b04 	ldr.w	r2, [r3], #4
 80044ca:	6881      	ldr	r1, [r0, #8]
 80044cc:	9301      	str	r3, [sp, #4]
 80044ce:	f001 fcc1 	bl	8005e54 <_vfiprintf_r>
 80044d2:	b003      	add	sp, #12
 80044d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80044d8:	b004      	add	sp, #16
 80044da:	4770      	bx	lr
 80044dc:	20000018 	.word	0x20000018

080044e0 <_puts_r>:
 80044e0:	6a03      	ldr	r3, [r0, #32]
 80044e2:	b570      	push	{r4, r5, r6, lr}
 80044e4:	4605      	mov	r5, r0
 80044e6:	460e      	mov	r6, r1
 80044e8:	6884      	ldr	r4, [r0, #8]
 80044ea:	b90b      	cbnz	r3, 80044f0 <_puts_r+0x10>
 80044ec:	f7ff ffb0 	bl	8004450 <__sinit>
 80044f0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80044f2:	07db      	lsls	r3, r3, #31
 80044f4:	d405      	bmi.n	8004502 <_puts_r+0x22>
 80044f6:	89a3      	ldrh	r3, [r4, #12]
 80044f8:	0598      	lsls	r0, r3, #22
 80044fa:	d402      	bmi.n	8004502 <_puts_r+0x22>
 80044fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80044fe:	f000 f9a2 	bl	8004846 <__retarget_lock_acquire_recursive>
 8004502:	89a3      	ldrh	r3, [r4, #12]
 8004504:	0719      	lsls	r1, r3, #28
 8004506:	d502      	bpl.n	800450e <_puts_r+0x2e>
 8004508:	6923      	ldr	r3, [r4, #16]
 800450a:	2b00      	cmp	r3, #0
 800450c:	d135      	bne.n	800457a <_puts_r+0x9a>
 800450e:	4621      	mov	r1, r4
 8004510:	4628      	mov	r0, r5
 8004512:	f000 f8c5 	bl	80046a0 <__swsetup_r>
 8004516:	b380      	cbz	r0, 800457a <_puts_r+0x9a>
 8004518:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800451c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800451e:	07da      	lsls	r2, r3, #31
 8004520:	d405      	bmi.n	800452e <_puts_r+0x4e>
 8004522:	89a3      	ldrh	r3, [r4, #12]
 8004524:	059b      	lsls	r3, r3, #22
 8004526:	d402      	bmi.n	800452e <_puts_r+0x4e>
 8004528:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800452a:	f000 f98d 	bl	8004848 <__retarget_lock_release_recursive>
 800452e:	4628      	mov	r0, r5
 8004530:	bd70      	pop	{r4, r5, r6, pc}
 8004532:	2b00      	cmp	r3, #0
 8004534:	da04      	bge.n	8004540 <_puts_r+0x60>
 8004536:	69a2      	ldr	r2, [r4, #24]
 8004538:	429a      	cmp	r2, r3
 800453a:	dc17      	bgt.n	800456c <_puts_r+0x8c>
 800453c:	290a      	cmp	r1, #10
 800453e:	d015      	beq.n	800456c <_puts_r+0x8c>
 8004540:	6823      	ldr	r3, [r4, #0]
 8004542:	1c5a      	adds	r2, r3, #1
 8004544:	6022      	str	r2, [r4, #0]
 8004546:	7019      	strb	r1, [r3, #0]
 8004548:	68a3      	ldr	r3, [r4, #8]
 800454a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800454e:	3b01      	subs	r3, #1
 8004550:	60a3      	str	r3, [r4, #8]
 8004552:	2900      	cmp	r1, #0
 8004554:	d1ed      	bne.n	8004532 <_puts_r+0x52>
 8004556:	2b00      	cmp	r3, #0
 8004558:	da11      	bge.n	800457e <_puts_r+0x9e>
 800455a:	4622      	mov	r2, r4
 800455c:	210a      	movs	r1, #10
 800455e:	4628      	mov	r0, r5
 8004560:	f000 f85f 	bl	8004622 <__swbuf_r>
 8004564:	3001      	adds	r0, #1
 8004566:	d0d7      	beq.n	8004518 <_puts_r+0x38>
 8004568:	250a      	movs	r5, #10
 800456a:	e7d7      	b.n	800451c <_puts_r+0x3c>
 800456c:	4622      	mov	r2, r4
 800456e:	4628      	mov	r0, r5
 8004570:	f000 f857 	bl	8004622 <__swbuf_r>
 8004574:	3001      	adds	r0, #1
 8004576:	d1e7      	bne.n	8004548 <_puts_r+0x68>
 8004578:	e7ce      	b.n	8004518 <_puts_r+0x38>
 800457a:	3e01      	subs	r6, #1
 800457c:	e7e4      	b.n	8004548 <_puts_r+0x68>
 800457e:	6823      	ldr	r3, [r4, #0]
 8004580:	1c5a      	adds	r2, r3, #1
 8004582:	6022      	str	r2, [r4, #0]
 8004584:	220a      	movs	r2, #10
 8004586:	701a      	strb	r2, [r3, #0]
 8004588:	e7ee      	b.n	8004568 <_puts_r+0x88>
	...

0800458c <puts>:
 800458c:	4b02      	ldr	r3, [pc, #8]	@ (8004598 <puts+0xc>)
 800458e:	4601      	mov	r1, r0
 8004590:	6818      	ldr	r0, [r3, #0]
 8004592:	f7ff bfa5 	b.w	80044e0 <_puts_r>
 8004596:	bf00      	nop
 8004598:	20000018 	.word	0x20000018

0800459c <__sread>:
 800459c:	b510      	push	{r4, lr}
 800459e:	460c      	mov	r4, r1
 80045a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80045a4:	f000 f900 	bl	80047a8 <_read_r>
 80045a8:	2800      	cmp	r0, #0
 80045aa:	bfab      	itete	ge
 80045ac:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80045ae:	89a3      	ldrhlt	r3, [r4, #12]
 80045b0:	181b      	addge	r3, r3, r0
 80045b2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80045b6:	bfac      	ite	ge
 80045b8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80045ba:	81a3      	strhlt	r3, [r4, #12]
 80045bc:	bd10      	pop	{r4, pc}

080045be <__swrite>:
 80045be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80045c2:	461f      	mov	r7, r3
 80045c4:	898b      	ldrh	r3, [r1, #12]
 80045c6:	4605      	mov	r5, r0
 80045c8:	05db      	lsls	r3, r3, #23
 80045ca:	460c      	mov	r4, r1
 80045cc:	4616      	mov	r6, r2
 80045ce:	d505      	bpl.n	80045dc <__swrite+0x1e>
 80045d0:	2302      	movs	r3, #2
 80045d2:	2200      	movs	r2, #0
 80045d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80045d8:	f000 f8d4 	bl	8004784 <_lseek_r>
 80045dc:	89a3      	ldrh	r3, [r4, #12]
 80045de:	4632      	mov	r2, r6
 80045e0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80045e4:	81a3      	strh	r3, [r4, #12]
 80045e6:	4628      	mov	r0, r5
 80045e8:	463b      	mov	r3, r7
 80045ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80045ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80045f2:	f000 b8eb 	b.w	80047cc <_write_r>

080045f6 <__sseek>:
 80045f6:	b510      	push	{r4, lr}
 80045f8:	460c      	mov	r4, r1
 80045fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80045fe:	f000 f8c1 	bl	8004784 <_lseek_r>
 8004602:	1c43      	adds	r3, r0, #1
 8004604:	89a3      	ldrh	r3, [r4, #12]
 8004606:	bf15      	itete	ne
 8004608:	6560      	strne	r0, [r4, #84]	@ 0x54
 800460a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800460e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004612:	81a3      	strheq	r3, [r4, #12]
 8004614:	bf18      	it	ne
 8004616:	81a3      	strhne	r3, [r4, #12]
 8004618:	bd10      	pop	{r4, pc}

0800461a <__sclose>:
 800461a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800461e:	f000 b8a1 	b.w	8004764 <_close_r>

08004622 <__swbuf_r>:
 8004622:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004624:	460e      	mov	r6, r1
 8004626:	4614      	mov	r4, r2
 8004628:	4605      	mov	r5, r0
 800462a:	b118      	cbz	r0, 8004634 <__swbuf_r+0x12>
 800462c:	6a03      	ldr	r3, [r0, #32]
 800462e:	b90b      	cbnz	r3, 8004634 <__swbuf_r+0x12>
 8004630:	f7ff ff0e 	bl	8004450 <__sinit>
 8004634:	69a3      	ldr	r3, [r4, #24]
 8004636:	60a3      	str	r3, [r4, #8]
 8004638:	89a3      	ldrh	r3, [r4, #12]
 800463a:	071a      	lsls	r2, r3, #28
 800463c:	d501      	bpl.n	8004642 <__swbuf_r+0x20>
 800463e:	6923      	ldr	r3, [r4, #16]
 8004640:	b943      	cbnz	r3, 8004654 <__swbuf_r+0x32>
 8004642:	4621      	mov	r1, r4
 8004644:	4628      	mov	r0, r5
 8004646:	f000 f82b 	bl	80046a0 <__swsetup_r>
 800464a:	b118      	cbz	r0, 8004654 <__swbuf_r+0x32>
 800464c:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8004650:	4638      	mov	r0, r7
 8004652:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004654:	6823      	ldr	r3, [r4, #0]
 8004656:	6922      	ldr	r2, [r4, #16]
 8004658:	b2f6      	uxtb	r6, r6
 800465a:	1a98      	subs	r0, r3, r2
 800465c:	6963      	ldr	r3, [r4, #20]
 800465e:	4637      	mov	r7, r6
 8004660:	4283      	cmp	r3, r0
 8004662:	dc05      	bgt.n	8004670 <__swbuf_r+0x4e>
 8004664:	4621      	mov	r1, r4
 8004666:	4628      	mov	r0, r5
 8004668:	f001 fd8c 	bl	8006184 <_fflush_r>
 800466c:	2800      	cmp	r0, #0
 800466e:	d1ed      	bne.n	800464c <__swbuf_r+0x2a>
 8004670:	68a3      	ldr	r3, [r4, #8]
 8004672:	3b01      	subs	r3, #1
 8004674:	60a3      	str	r3, [r4, #8]
 8004676:	6823      	ldr	r3, [r4, #0]
 8004678:	1c5a      	adds	r2, r3, #1
 800467a:	6022      	str	r2, [r4, #0]
 800467c:	701e      	strb	r6, [r3, #0]
 800467e:	6962      	ldr	r2, [r4, #20]
 8004680:	1c43      	adds	r3, r0, #1
 8004682:	429a      	cmp	r2, r3
 8004684:	d004      	beq.n	8004690 <__swbuf_r+0x6e>
 8004686:	89a3      	ldrh	r3, [r4, #12]
 8004688:	07db      	lsls	r3, r3, #31
 800468a:	d5e1      	bpl.n	8004650 <__swbuf_r+0x2e>
 800468c:	2e0a      	cmp	r6, #10
 800468e:	d1df      	bne.n	8004650 <__swbuf_r+0x2e>
 8004690:	4621      	mov	r1, r4
 8004692:	4628      	mov	r0, r5
 8004694:	f001 fd76 	bl	8006184 <_fflush_r>
 8004698:	2800      	cmp	r0, #0
 800469a:	d0d9      	beq.n	8004650 <__swbuf_r+0x2e>
 800469c:	e7d6      	b.n	800464c <__swbuf_r+0x2a>
	...

080046a0 <__swsetup_r>:
 80046a0:	b538      	push	{r3, r4, r5, lr}
 80046a2:	4b29      	ldr	r3, [pc, #164]	@ (8004748 <__swsetup_r+0xa8>)
 80046a4:	4605      	mov	r5, r0
 80046a6:	6818      	ldr	r0, [r3, #0]
 80046a8:	460c      	mov	r4, r1
 80046aa:	b118      	cbz	r0, 80046b4 <__swsetup_r+0x14>
 80046ac:	6a03      	ldr	r3, [r0, #32]
 80046ae:	b90b      	cbnz	r3, 80046b4 <__swsetup_r+0x14>
 80046b0:	f7ff fece 	bl	8004450 <__sinit>
 80046b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80046b8:	0719      	lsls	r1, r3, #28
 80046ba:	d422      	bmi.n	8004702 <__swsetup_r+0x62>
 80046bc:	06da      	lsls	r2, r3, #27
 80046be:	d407      	bmi.n	80046d0 <__swsetup_r+0x30>
 80046c0:	2209      	movs	r2, #9
 80046c2:	602a      	str	r2, [r5, #0]
 80046c4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80046c8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80046cc:	81a3      	strh	r3, [r4, #12]
 80046ce:	e033      	b.n	8004738 <__swsetup_r+0x98>
 80046d0:	0758      	lsls	r0, r3, #29
 80046d2:	d512      	bpl.n	80046fa <__swsetup_r+0x5a>
 80046d4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80046d6:	b141      	cbz	r1, 80046ea <__swsetup_r+0x4a>
 80046d8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80046dc:	4299      	cmp	r1, r3
 80046de:	d002      	beq.n	80046e6 <__swsetup_r+0x46>
 80046e0:	4628      	mov	r0, r5
 80046e2:	f000 ff11 	bl	8005508 <_free_r>
 80046e6:	2300      	movs	r3, #0
 80046e8:	6363      	str	r3, [r4, #52]	@ 0x34
 80046ea:	89a3      	ldrh	r3, [r4, #12]
 80046ec:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80046f0:	81a3      	strh	r3, [r4, #12]
 80046f2:	2300      	movs	r3, #0
 80046f4:	6063      	str	r3, [r4, #4]
 80046f6:	6923      	ldr	r3, [r4, #16]
 80046f8:	6023      	str	r3, [r4, #0]
 80046fa:	89a3      	ldrh	r3, [r4, #12]
 80046fc:	f043 0308 	orr.w	r3, r3, #8
 8004700:	81a3      	strh	r3, [r4, #12]
 8004702:	6923      	ldr	r3, [r4, #16]
 8004704:	b94b      	cbnz	r3, 800471a <__swsetup_r+0x7a>
 8004706:	89a3      	ldrh	r3, [r4, #12]
 8004708:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800470c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004710:	d003      	beq.n	800471a <__swsetup_r+0x7a>
 8004712:	4621      	mov	r1, r4
 8004714:	4628      	mov	r0, r5
 8004716:	f001 fd82 	bl	800621e <__smakebuf_r>
 800471a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800471e:	f013 0201 	ands.w	r2, r3, #1
 8004722:	d00a      	beq.n	800473a <__swsetup_r+0x9a>
 8004724:	2200      	movs	r2, #0
 8004726:	60a2      	str	r2, [r4, #8]
 8004728:	6962      	ldr	r2, [r4, #20]
 800472a:	4252      	negs	r2, r2
 800472c:	61a2      	str	r2, [r4, #24]
 800472e:	6922      	ldr	r2, [r4, #16]
 8004730:	b942      	cbnz	r2, 8004744 <__swsetup_r+0xa4>
 8004732:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004736:	d1c5      	bne.n	80046c4 <__swsetup_r+0x24>
 8004738:	bd38      	pop	{r3, r4, r5, pc}
 800473a:	0799      	lsls	r1, r3, #30
 800473c:	bf58      	it	pl
 800473e:	6962      	ldrpl	r2, [r4, #20]
 8004740:	60a2      	str	r2, [r4, #8]
 8004742:	e7f4      	b.n	800472e <__swsetup_r+0x8e>
 8004744:	2000      	movs	r0, #0
 8004746:	e7f7      	b.n	8004738 <__swsetup_r+0x98>
 8004748:	20000018 	.word	0x20000018

0800474c <memset>:
 800474c:	4603      	mov	r3, r0
 800474e:	4402      	add	r2, r0
 8004750:	4293      	cmp	r3, r2
 8004752:	d100      	bne.n	8004756 <memset+0xa>
 8004754:	4770      	bx	lr
 8004756:	f803 1b01 	strb.w	r1, [r3], #1
 800475a:	e7f9      	b.n	8004750 <memset+0x4>

0800475c <_localeconv_r>:
 800475c:	4800      	ldr	r0, [pc, #0]	@ (8004760 <_localeconv_r+0x4>)
 800475e:	4770      	bx	lr
 8004760:	20000158 	.word	0x20000158

08004764 <_close_r>:
 8004764:	b538      	push	{r3, r4, r5, lr}
 8004766:	2300      	movs	r3, #0
 8004768:	4d05      	ldr	r5, [pc, #20]	@ (8004780 <_close_r+0x1c>)
 800476a:	4604      	mov	r4, r0
 800476c:	4608      	mov	r0, r1
 800476e:	602b      	str	r3, [r5, #0]
 8004770:	f7fc fef7 	bl	8001562 <_close>
 8004774:	1c43      	adds	r3, r0, #1
 8004776:	d102      	bne.n	800477e <_close_r+0x1a>
 8004778:	682b      	ldr	r3, [r5, #0]
 800477a:	b103      	cbz	r3, 800477e <_close_r+0x1a>
 800477c:	6023      	str	r3, [r4, #0]
 800477e:	bd38      	pop	{r3, r4, r5, pc}
 8004780:	200003d0 	.word	0x200003d0

08004784 <_lseek_r>:
 8004784:	b538      	push	{r3, r4, r5, lr}
 8004786:	4604      	mov	r4, r0
 8004788:	4608      	mov	r0, r1
 800478a:	4611      	mov	r1, r2
 800478c:	2200      	movs	r2, #0
 800478e:	4d05      	ldr	r5, [pc, #20]	@ (80047a4 <_lseek_r+0x20>)
 8004790:	602a      	str	r2, [r5, #0]
 8004792:	461a      	mov	r2, r3
 8004794:	f7fc ff09 	bl	80015aa <_lseek>
 8004798:	1c43      	adds	r3, r0, #1
 800479a:	d102      	bne.n	80047a2 <_lseek_r+0x1e>
 800479c:	682b      	ldr	r3, [r5, #0]
 800479e:	b103      	cbz	r3, 80047a2 <_lseek_r+0x1e>
 80047a0:	6023      	str	r3, [r4, #0]
 80047a2:	bd38      	pop	{r3, r4, r5, pc}
 80047a4:	200003d0 	.word	0x200003d0

080047a8 <_read_r>:
 80047a8:	b538      	push	{r3, r4, r5, lr}
 80047aa:	4604      	mov	r4, r0
 80047ac:	4608      	mov	r0, r1
 80047ae:	4611      	mov	r1, r2
 80047b0:	2200      	movs	r2, #0
 80047b2:	4d05      	ldr	r5, [pc, #20]	@ (80047c8 <_read_r+0x20>)
 80047b4:	602a      	str	r2, [r5, #0]
 80047b6:	461a      	mov	r2, r3
 80047b8:	f7fc fe9a 	bl	80014f0 <_read>
 80047bc:	1c43      	adds	r3, r0, #1
 80047be:	d102      	bne.n	80047c6 <_read_r+0x1e>
 80047c0:	682b      	ldr	r3, [r5, #0]
 80047c2:	b103      	cbz	r3, 80047c6 <_read_r+0x1e>
 80047c4:	6023      	str	r3, [r4, #0]
 80047c6:	bd38      	pop	{r3, r4, r5, pc}
 80047c8:	200003d0 	.word	0x200003d0

080047cc <_write_r>:
 80047cc:	b538      	push	{r3, r4, r5, lr}
 80047ce:	4604      	mov	r4, r0
 80047d0:	4608      	mov	r0, r1
 80047d2:	4611      	mov	r1, r2
 80047d4:	2200      	movs	r2, #0
 80047d6:	4d05      	ldr	r5, [pc, #20]	@ (80047ec <_write_r+0x20>)
 80047d8:	602a      	str	r2, [r5, #0]
 80047da:	461a      	mov	r2, r3
 80047dc:	f7fc fea5 	bl	800152a <_write>
 80047e0:	1c43      	adds	r3, r0, #1
 80047e2:	d102      	bne.n	80047ea <_write_r+0x1e>
 80047e4:	682b      	ldr	r3, [r5, #0]
 80047e6:	b103      	cbz	r3, 80047ea <_write_r+0x1e>
 80047e8:	6023      	str	r3, [r4, #0]
 80047ea:	bd38      	pop	{r3, r4, r5, pc}
 80047ec:	200003d0 	.word	0x200003d0

080047f0 <__errno>:
 80047f0:	4b01      	ldr	r3, [pc, #4]	@ (80047f8 <__errno+0x8>)
 80047f2:	6818      	ldr	r0, [r3, #0]
 80047f4:	4770      	bx	lr
 80047f6:	bf00      	nop
 80047f8:	20000018 	.word	0x20000018

080047fc <__libc_init_array>:
 80047fc:	b570      	push	{r4, r5, r6, lr}
 80047fe:	2600      	movs	r6, #0
 8004800:	4d0c      	ldr	r5, [pc, #48]	@ (8004834 <__libc_init_array+0x38>)
 8004802:	4c0d      	ldr	r4, [pc, #52]	@ (8004838 <__libc_init_array+0x3c>)
 8004804:	1b64      	subs	r4, r4, r5
 8004806:	10a4      	asrs	r4, r4, #2
 8004808:	42a6      	cmp	r6, r4
 800480a:	d109      	bne.n	8004820 <__libc_init_array+0x24>
 800480c:	f002 f81e 	bl	800684c <_init>
 8004810:	2600      	movs	r6, #0
 8004812:	4d0a      	ldr	r5, [pc, #40]	@ (800483c <__libc_init_array+0x40>)
 8004814:	4c0a      	ldr	r4, [pc, #40]	@ (8004840 <__libc_init_array+0x44>)
 8004816:	1b64      	subs	r4, r4, r5
 8004818:	10a4      	asrs	r4, r4, #2
 800481a:	42a6      	cmp	r6, r4
 800481c:	d105      	bne.n	800482a <__libc_init_array+0x2e>
 800481e:	bd70      	pop	{r4, r5, r6, pc}
 8004820:	f855 3b04 	ldr.w	r3, [r5], #4
 8004824:	4798      	blx	r3
 8004826:	3601      	adds	r6, #1
 8004828:	e7ee      	b.n	8004808 <__libc_init_array+0xc>
 800482a:	f855 3b04 	ldr.w	r3, [r5], #4
 800482e:	4798      	blx	r3
 8004830:	3601      	adds	r6, #1
 8004832:	e7f2      	b.n	800481a <__libc_init_array+0x1e>
 8004834:	08006c50 	.word	0x08006c50
 8004838:	08006c50 	.word	0x08006c50
 800483c:	08006c50 	.word	0x08006c50
 8004840:	08006c54 	.word	0x08006c54

08004844 <__retarget_lock_init_recursive>:
 8004844:	4770      	bx	lr

08004846 <__retarget_lock_acquire_recursive>:
 8004846:	4770      	bx	lr

08004848 <__retarget_lock_release_recursive>:
 8004848:	4770      	bx	lr

0800484a <memchr>:
 800484a:	4603      	mov	r3, r0
 800484c:	b510      	push	{r4, lr}
 800484e:	b2c9      	uxtb	r1, r1
 8004850:	4402      	add	r2, r0
 8004852:	4293      	cmp	r3, r2
 8004854:	4618      	mov	r0, r3
 8004856:	d101      	bne.n	800485c <memchr+0x12>
 8004858:	2000      	movs	r0, #0
 800485a:	e003      	b.n	8004864 <memchr+0x1a>
 800485c:	7804      	ldrb	r4, [r0, #0]
 800485e:	3301      	adds	r3, #1
 8004860:	428c      	cmp	r4, r1
 8004862:	d1f6      	bne.n	8004852 <memchr+0x8>
 8004864:	bd10      	pop	{r4, pc}

08004866 <quorem>:
 8004866:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800486a:	6903      	ldr	r3, [r0, #16]
 800486c:	690c      	ldr	r4, [r1, #16]
 800486e:	4607      	mov	r7, r0
 8004870:	42a3      	cmp	r3, r4
 8004872:	db7e      	blt.n	8004972 <quorem+0x10c>
 8004874:	3c01      	subs	r4, #1
 8004876:	00a3      	lsls	r3, r4, #2
 8004878:	f100 0514 	add.w	r5, r0, #20
 800487c:	f101 0814 	add.w	r8, r1, #20
 8004880:	9300      	str	r3, [sp, #0]
 8004882:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004886:	9301      	str	r3, [sp, #4]
 8004888:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800488c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004890:	3301      	adds	r3, #1
 8004892:	429a      	cmp	r2, r3
 8004894:	fbb2 f6f3 	udiv	r6, r2, r3
 8004898:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800489c:	d32e      	bcc.n	80048fc <quorem+0x96>
 800489e:	f04f 0a00 	mov.w	sl, #0
 80048a2:	46c4      	mov	ip, r8
 80048a4:	46ae      	mov	lr, r5
 80048a6:	46d3      	mov	fp, sl
 80048a8:	f85c 3b04 	ldr.w	r3, [ip], #4
 80048ac:	b298      	uxth	r0, r3
 80048ae:	fb06 a000 	mla	r0, r6, r0, sl
 80048b2:	0c1b      	lsrs	r3, r3, #16
 80048b4:	0c02      	lsrs	r2, r0, #16
 80048b6:	fb06 2303 	mla	r3, r6, r3, r2
 80048ba:	f8de 2000 	ldr.w	r2, [lr]
 80048be:	b280      	uxth	r0, r0
 80048c0:	b292      	uxth	r2, r2
 80048c2:	1a12      	subs	r2, r2, r0
 80048c4:	445a      	add	r2, fp
 80048c6:	f8de 0000 	ldr.w	r0, [lr]
 80048ca:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80048ce:	b29b      	uxth	r3, r3
 80048d0:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80048d4:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80048d8:	b292      	uxth	r2, r2
 80048da:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80048de:	45e1      	cmp	r9, ip
 80048e0:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80048e4:	f84e 2b04 	str.w	r2, [lr], #4
 80048e8:	d2de      	bcs.n	80048a8 <quorem+0x42>
 80048ea:	9b00      	ldr	r3, [sp, #0]
 80048ec:	58eb      	ldr	r3, [r5, r3]
 80048ee:	b92b      	cbnz	r3, 80048fc <quorem+0x96>
 80048f0:	9b01      	ldr	r3, [sp, #4]
 80048f2:	3b04      	subs	r3, #4
 80048f4:	429d      	cmp	r5, r3
 80048f6:	461a      	mov	r2, r3
 80048f8:	d32f      	bcc.n	800495a <quorem+0xf4>
 80048fa:	613c      	str	r4, [r7, #16]
 80048fc:	4638      	mov	r0, r7
 80048fe:	f001 f979 	bl	8005bf4 <__mcmp>
 8004902:	2800      	cmp	r0, #0
 8004904:	db25      	blt.n	8004952 <quorem+0xec>
 8004906:	4629      	mov	r1, r5
 8004908:	2000      	movs	r0, #0
 800490a:	f858 2b04 	ldr.w	r2, [r8], #4
 800490e:	f8d1 c000 	ldr.w	ip, [r1]
 8004912:	fa1f fe82 	uxth.w	lr, r2
 8004916:	fa1f f38c 	uxth.w	r3, ip
 800491a:	eba3 030e 	sub.w	r3, r3, lr
 800491e:	4403      	add	r3, r0
 8004920:	0c12      	lsrs	r2, r2, #16
 8004922:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8004926:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800492a:	b29b      	uxth	r3, r3
 800492c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004930:	45c1      	cmp	r9, r8
 8004932:	ea4f 4022 	mov.w	r0, r2, asr #16
 8004936:	f841 3b04 	str.w	r3, [r1], #4
 800493a:	d2e6      	bcs.n	800490a <quorem+0xa4>
 800493c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004940:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004944:	b922      	cbnz	r2, 8004950 <quorem+0xea>
 8004946:	3b04      	subs	r3, #4
 8004948:	429d      	cmp	r5, r3
 800494a:	461a      	mov	r2, r3
 800494c:	d30b      	bcc.n	8004966 <quorem+0x100>
 800494e:	613c      	str	r4, [r7, #16]
 8004950:	3601      	adds	r6, #1
 8004952:	4630      	mov	r0, r6
 8004954:	b003      	add	sp, #12
 8004956:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800495a:	6812      	ldr	r2, [r2, #0]
 800495c:	3b04      	subs	r3, #4
 800495e:	2a00      	cmp	r2, #0
 8004960:	d1cb      	bne.n	80048fa <quorem+0x94>
 8004962:	3c01      	subs	r4, #1
 8004964:	e7c6      	b.n	80048f4 <quorem+0x8e>
 8004966:	6812      	ldr	r2, [r2, #0]
 8004968:	3b04      	subs	r3, #4
 800496a:	2a00      	cmp	r2, #0
 800496c:	d1ef      	bne.n	800494e <quorem+0xe8>
 800496e:	3c01      	subs	r4, #1
 8004970:	e7ea      	b.n	8004948 <quorem+0xe2>
 8004972:	2000      	movs	r0, #0
 8004974:	e7ee      	b.n	8004954 <quorem+0xee>
	...

08004978 <_dtoa_r>:
 8004978:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800497c:	4614      	mov	r4, r2
 800497e:	461d      	mov	r5, r3
 8004980:	69c7      	ldr	r7, [r0, #28]
 8004982:	b097      	sub	sp, #92	@ 0x5c
 8004984:	4683      	mov	fp, r0
 8004986:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800498a:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 800498c:	b97f      	cbnz	r7, 80049ae <_dtoa_r+0x36>
 800498e:	2010      	movs	r0, #16
 8004990:	f000 fe02 	bl	8005598 <malloc>
 8004994:	4602      	mov	r2, r0
 8004996:	f8cb 001c 	str.w	r0, [fp, #28]
 800499a:	b920      	cbnz	r0, 80049a6 <_dtoa_r+0x2e>
 800499c:	21ef      	movs	r1, #239	@ 0xef
 800499e:	4ba8      	ldr	r3, [pc, #672]	@ (8004c40 <_dtoa_r+0x2c8>)
 80049a0:	48a8      	ldr	r0, [pc, #672]	@ (8004c44 <_dtoa_r+0x2cc>)
 80049a2:	f001 fcb9 	bl	8006318 <__assert_func>
 80049a6:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80049aa:	6007      	str	r7, [r0, #0]
 80049ac:	60c7      	str	r7, [r0, #12]
 80049ae:	f8db 301c 	ldr.w	r3, [fp, #28]
 80049b2:	6819      	ldr	r1, [r3, #0]
 80049b4:	b159      	cbz	r1, 80049ce <_dtoa_r+0x56>
 80049b6:	685a      	ldr	r2, [r3, #4]
 80049b8:	2301      	movs	r3, #1
 80049ba:	4093      	lsls	r3, r2
 80049bc:	604a      	str	r2, [r1, #4]
 80049be:	608b      	str	r3, [r1, #8]
 80049c0:	4658      	mov	r0, fp
 80049c2:	f000 fedf 	bl	8005784 <_Bfree>
 80049c6:	2200      	movs	r2, #0
 80049c8:	f8db 301c 	ldr.w	r3, [fp, #28]
 80049cc:	601a      	str	r2, [r3, #0]
 80049ce:	1e2b      	subs	r3, r5, #0
 80049d0:	bfaf      	iteee	ge
 80049d2:	2300      	movge	r3, #0
 80049d4:	2201      	movlt	r2, #1
 80049d6:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80049da:	9303      	strlt	r3, [sp, #12]
 80049dc:	bfa8      	it	ge
 80049de:	6033      	strge	r3, [r6, #0]
 80049e0:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80049e4:	4b98      	ldr	r3, [pc, #608]	@ (8004c48 <_dtoa_r+0x2d0>)
 80049e6:	bfb8      	it	lt
 80049e8:	6032      	strlt	r2, [r6, #0]
 80049ea:	ea33 0308 	bics.w	r3, r3, r8
 80049ee:	d112      	bne.n	8004a16 <_dtoa_r+0x9e>
 80049f0:	f242 730f 	movw	r3, #9999	@ 0x270f
 80049f4:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80049f6:	6013      	str	r3, [r2, #0]
 80049f8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80049fc:	4323      	orrs	r3, r4
 80049fe:	f000 8550 	beq.w	80054a2 <_dtoa_r+0xb2a>
 8004a02:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8004a04:	f8df a244 	ldr.w	sl, [pc, #580]	@ 8004c4c <_dtoa_r+0x2d4>
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	f000 8552 	beq.w	80054b2 <_dtoa_r+0xb3a>
 8004a0e:	f10a 0303 	add.w	r3, sl, #3
 8004a12:	f000 bd4c 	b.w	80054ae <_dtoa_r+0xb36>
 8004a16:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004a1a:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8004a1e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004a22:	2200      	movs	r2, #0
 8004a24:	2300      	movs	r3, #0
 8004a26:	f7fb ffbf 	bl	80009a8 <__aeabi_dcmpeq>
 8004a2a:	4607      	mov	r7, r0
 8004a2c:	b158      	cbz	r0, 8004a46 <_dtoa_r+0xce>
 8004a2e:	2301      	movs	r3, #1
 8004a30:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8004a32:	6013      	str	r3, [r2, #0]
 8004a34:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8004a36:	b113      	cbz	r3, 8004a3e <_dtoa_r+0xc6>
 8004a38:	4b85      	ldr	r3, [pc, #532]	@ (8004c50 <_dtoa_r+0x2d8>)
 8004a3a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8004a3c:	6013      	str	r3, [r2, #0]
 8004a3e:	f8df a214 	ldr.w	sl, [pc, #532]	@ 8004c54 <_dtoa_r+0x2dc>
 8004a42:	f000 bd36 	b.w	80054b2 <_dtoa_r+0xb3a>
 8004a46:	ab14      	add	r3, sp, #80	@ 0x50
 8004a48:	9301      	str	r3, [sp, #4]
 8004a4a:	ab15      	add	r3, sp, #84	@ 0x54
 8004a4c:	9300      	str	r3, [sp, #0]
 8004a4e:	4658      	mov	r0, fp
 8004a50:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8004a54:	f001 f97e 	bl	8005d54 <__d2b>
 8004a58:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8004a5c:	4681      	mov	r9, r0
 8004a5e:	2e00      	cmp	r6, #0
 8004a60:	d077      	beq.n	8004b52 <_dtoa_r+0x1da>
 8004a62:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004a66:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004a68:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8004a6c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004a70:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8004a74:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8004a78:	9712      	str	r7, [sp, #72]	@ 0x48
 8004a7a:	4619      	mov	r1, r3
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	4b76      	ldr	r3, [pc, #472]	@ (8004c58 <_dtoa_r+0x2e0>)
 8004a80:	f7fb fb72 	bl	8000168 <__aeabi_dsub>
 8004a84:	a368      	add	r3, pc, #416	@ (adr r3, 8004c28 <_dtoa_r+0x2b0>)
 8004a86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a8a:	f7fb fd25 	bl	80004d8 <__aeabi_dmul>
 8004a8e:	a368      	add	r3, pc, #416	@ (adr r3, 8004c30 <_dtoa_r+0x2b8>)
 8004a90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a94:	f7fb fb6a 	bl	800016c <__adddf3>
 8004a98:	4604      	mov	r4, r0
 8004a9a:	4630      	mov	r0, r6
 8004a9c:	460d      	mov	r5, r1
 8004a9e:	f7fb fcb1 	bl	8000404 <__aeabi_i2d>
 8004aa2:	a365      	add	r3, pc, #404	@ (adr r3, 8004c38 <_dtoa_r+0x2c0>)
 8004aa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004aa8:	f7fb fd16 	bl	80004d8 <__aeabi_dmul>
 8004aac:	4602      	mov	r2, r0
 8004aae:	460b      	mov	r3, r1
 8004ab0:	4620      	mov	r0, r4
 8004ab2:	4629      	mov	r1, r5
 8004ab4:	f7fb fb5a 	bl	800016c <__adddf3>
 8004ab8:	4604      	mov	r4, r0
 8004aba:	460d      	mov	r5, r1
 8004abc:	f7fb ffbc 	bl	8000a38 <__aeabi_d2iz>
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	4607      	mov	r7, r0
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	4620      	mov	r0, r4
 8004ac8:	4629      	mov	r1, r5
 8004aca:	f7fb ff77 	bl	80009bc <__aeabi_dcmplt>
 8004ace:	b140      	cbz	r0, 8004ae2 <_dtoa_r+0x16a>
 8004ad0:	4638      	mov	r0, r7
 8004ad2:	f7fb fc97 	bl	8000404 <__aeabi_i2d>
 8004ad6:	4622      	mov	r2, r4
 8004ad8:	462b      	mov	r3, r5
 8004ada:	f7fb ff65 	bl	80009a8 <__aeabi_dcmpeq>
 8004ade:	b900      	cbnz	r0, 8004ae2 <_dtoa_r+0x16a>
 8004ae0:	3f01      	subs	r7, #1
 8004ae2:	2f16      	cmp	r7, #22
 8004ae4:	d853      	bhi.n	8004b8e <_dtoa_r+0x216>
 8004ae6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004aea:	4b5c      	ldr	r3, [pc, #368]	@ (8004c5c <_dtoa_r+0x2e4>)
 8004aec:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004af0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004af4:	f7fb ff62 	bl	80009bc <__aeabi_dcmplt>
 8004af8:	2800      	cmp	r0, #0
 8004afa:	d04a      	beq.n	8004b92 <_dtoa_r+0x21a>
 8004afc:	2300      	movs	r3, #0
 8004afe:	3f01      	subs	r7, #1
 8004b00:	930f      	str	r3, [sp, #60]	@ 0x3c
 8004b02:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8004b04:	1b9b      	subs	r3, r3, r6
 8004b06:	1e5a      	subs	r2, r3, #1
 8004b08:	bf46      	itte	mi
 8004b0a:	f1c3 0801 	rsbmi	r8, r3, #1
 8004b0e:	2300      	movmi	r3, #0
 8004b10:	f04f 0800 	movpl.w	r8, #0
 8004b14:	9209      	str	r2, [sp, #36]	@ 0x24
 8004b16:	bf48      	it	mi
 8004b18:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8004b1a:	2f00      	cmp	r7, #0
 8004b1c:	db3b      	blt.n	8004b96 <_dtoa_r+0x21e>
 8004b1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004b20:	970e      	str	r7, [sp, #56]	@ 0x38
 8004b22:	443b      	add	r3, r7
 8004b24:	9309      	str	r3, [sp, #36]	@ 0x24
 8004b26:	2300      	movs	r3, #0
 8004b28:	930a      	str	r3, [sp, #40]	@ 0x28
 8004b2a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004b2c:	2b09      	cmp	r3, #9
 8004b2e:	d866      	bhi.n	8004bfe <_dtoa_r+0x286>
 8004b30:	2b05      	cmp	r3, #5
 8004b32:	bfc4      	itt	gt
 8004b34:	3b04      	subgt	r3, #4
 8004b36:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8004b38:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004b3a:	bfc8      	it	gt
 8004b3c:	2400      	movgt	r4, #0
 8004b3e:	f1a3 0302 	sub.w	r3, r3, #2
 8004b42:	bfd8      	it	le
 8004b44:	2401      	movle	r4, #1
 8004b46:	2b03      	cmp	r3, #3
 8004b48:	d864      	bhi.n	8004c14 <_dtoa_r+0x29c>
 8004b4a:	e8df f003 	tbb	[pc, r3]
 8004b4e:	382b      	.short	0x382b
 8004b50:	5636      	.short	0x5636
 8004b52:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8004b56:	441e      	add	r6, r3
 8004b58:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8004b5c:	2b20      	cmp	r3, #32
 8004b5e:	bfc1      	itttt	gt
 8004b60:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8004b64:	fa08 f803 	lslgt.w	r8, r8, r3
 8004b68:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8004b6c:	fa24 f303 	lsrgt.w	r3, r4, r3
 8004b70:	bfd6      	itet	le
 8004b72:	f1c3 0320 	rsble	r3, r3, #32
 8004b76:	ea48 0003 	orrgt.w	r0, r8, r3
 8004b7a:	fa04 f003 	lslle.w	r0, r4, r3
 8004b7e:	f7fb fc31 	bl	80003e4 <__aeabi_ui2d>
 8004b82:	2201      	movs	r2, #1
 8004b84:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8004b88:	3e01      	subs	r6, #1
 8004b8a:	9212      	str	r2, [sp, #72]	@ 0x48
 8004b8c:	e775      	b.n	8004a7a <_dtoa_r+0x102>
 8004b8e:	2301      	movs	r3, #1
 8004b90:	e7b6      	b.n	8004b00 <_dtoa_r+0x188>
 8004b92:	900f      	str	r0, [sp, #60]	@ 0x3c
 8004b94:	e7b5      	b.n	8004b02 <_dtoa_r+0x18a>
 8004b96:	427b      	negs	r3, r7
 8004b98:	930a      	str	r3, [sp, #40]	@ 0x28
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	eba8 0807 	sub.w	r8, r8, r7
 8004ba0:	930e      	str	r3, [sp, #56]	@ 0x38
 8004ba2:	e7c2      	b.n	8004b2a <_dtoa_r+0x1b2>
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004ba8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	dc35      	bgt.n	8004c1a <_dtoa_r+0x2a2>
 8004bae:	2301      	movs	r3, #1
 8004bb0:	461a      	mov	r2, r3
 8004bb2:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8004bb6:	9221      	str	r2, [sp, #132]	@ 0x84
 8004bb8:	e00b      	b.n	8004bd2 <_dtoa_r+0x25a>
 8004bba:	2301      	movs	r3, #1
 8004bbc:	e7f3      	b.n	8004ba6 <_dtoa_r+0x22e>
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004bc2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004bc4:	18fb      	adds	r3, r7, r3
 8004bc6:	9308      	str	r3, [sp, #32]
 8004bc8:	3301      	adds	r3, #1
 8004bca:	2b01      	cmp	r3, #1
 8004bcc:	9307      	str	r3, [sp, #28]
 8004bce:	bfb8      	it	lt
 8004bd0:	2301      	movlt	r3, #1
 8004bd2:	2100      	movs	r1, #0
 8004bd4:	2204      	movs	r2, #4
 8004bd6:	f8db 001c 	ldr.w	r0, [fp, #28]
 8004bda:	f102 0514 	add.w	r5, r2, #20
 8004bde:	429d      	cmp	r5, r3
 8004be0:	d91f      	bls.n	8004c22 <_dtoa_r+0x2aa>
 8004be2:	6041      	str	r1, [r0, #4]
 8004be4:	4658      	mov	r0, fp
 8004be6:	f000 fd8d 	bl	8005704 <_Balloc>
 8004bea:	4682      	mov	sl, r0
 8004bec:	2800      	cmp	r0, #0
 8004bee:	d139      	bne.n	8004c64 <_dtoa_r+0x2ec>
 8004bf0:	4602      	mov	r2, r0
 8004bf2:	f240 11af 	movw	r1, #431	@ 0x1af
 8004bf6:	4b1a      	ldr	r3, [pc, #104]	@ (8004c60 <_dtoa_r+0x2e8>)
 8004bf8:	e6d2      	b.n	80049a0 <_dtoa_r+0x28>
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	e7e0      	b.n	8004bc0 <_dtoa_r+0x248>
 8004bfe:	2401      	movs	r4, #1
 8004c00:	2300      	movs	r3, #0
 8004c02:	940b      	str	r4, [sp, #44]	@ 0x2c
 8004c04:	9320      	str	r3, [sp, #128]	@ 0x80
 8004c06:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8004c10:	2312      	movs	r3, #18
 8004c12:	e7d0      	b.n	8004bb6 <_dtoa_r+0x23e>
 8004c14:	2301      	movs	r3, #1
 8004c16:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004c18:	e7f5      	b.n	8004c06 <_dtoa_r+0x28e>
 8004c1a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004c1c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8004c20:	e7d7      	b.n	8004bd2 <_dtoa_r+0x25a>
 8004c22:	3101      	adds	r1, #1
 8004c24:	0052      	lsls	r2, r2, #1
 8004c26:	e7d8      	b.n	8004bda <_dtoa_r+0x262>
 8004c28:	636f4361 	.word	0x636f4361
 8004c2c:	3fd287a7 	.word	0x3fd287a7
 8004c30:	8b60c8b3 	.word	0x8b60c8b3
 8004c34:	3fc68a28 	.word	0x3fc68a28
 8004c38:	509f79fb 	.word	0x509f79fb
 8004c3c:	3fd34413 	.word	0x3fd34413
 8004c40:	0800691b 	.word	0x0800691b
 8004c44:	08006932 	.word	0x08006932
 8004c48:	7ff00000 	.word	0x7ff00000
 8004c4c:	08006917 	.word	0x08006917
 8004c50:	080068eb 	.word	0x080068eb
 8004c54:	080068ea 	.word	0x080068ea
 8004c58:	3ff80000 	.word	0x3ff80000
 8004c5c:	08006a28 	.word	0x08006a28
 8004c60:	0800698a 	.word	0x0800698a
 8004c64:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004c68:	6018      	str	r0, [r3, #0]
 8004c6a:	9b07      	ldr	r3, [sp, #28]
 8004c6c:	2b0e      	cmp	r3, #14
 8004c6e:	f200 80a4 	bhi.w	8004dba <_dtoa_r+0x442>
 8004c72:	2c00      	cmp	r4, #0
 8004c74:	f000 80a1 	beq.w	8004dba <_dtoa_r+0x442>
 8004c78:	2f00      	cmp	r7, #0
 8004c7a:	dd33      	ble.n	8004ce4 <_dtoa_r+0x36c>
 8004c7c:	4b86      	ldr	r3, [pc, #536]	@ (8004e98 <_dtoa_r+0x520>)
 8004c7e:	f007 020f 	and.w	r2, r7, #15
 8004c82:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004c86:	05f8      	lsls	r0, r7, #23
 8004c88:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004c8c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8004c90:	ea4f 1427 	mov.w	r4, r7, asr #4
 8004c94:	d516      	bpl.n	8004cc4 <_dtoa_r+0x34c>
 8004c96:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004c9a:	4b80      	ldr	r3, [pc, #512]	@ (8004e9c <_dtoa_r+0x524>)
 8004c9c:	2603      	movs	r6, #3
 8004c9e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004ca2:	f7fb fd43 	bl	800072c <__aeabi_ddiv>
 8004ca6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004caa:	f004 040f 	and.w	r4, r4, #15
 8004cae:	4d7b      	ldr	r5, [pc, #492]	@ (8004e9c <_dtoa_r+0x524>)
 8004cb0:	b954      	cbnz	r4, 8004cc8 <_dtoa_r+0x350>
 8004cb2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004cb6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004cba:	f7fb fd37 	bl	800072c <__aeabi_ddiv>
 8004cbe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004cc2:	e028      	b.n	8004d16 <_dtoa_r+0x39e>
 8004cc4:	2602      	movs	r6, #2
 8004cc6:	e7f2      	b.n	8004cae <_dtoa_r+0x336>
 8004cc8:	07e1      	lsls	r1, r4, #31
 8004cca:	d508      	bpl.n	8004cde <_dtoa_r+0x366>
 8004ccc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004cd0:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004cd4:	f7fb fc00 	bl	80004d8 <__aeabi_dmul>
 8004cd8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004cdc:	3601      	adds	r6, #1
 8004cde:	1064      	asrs	r4, r4, #1
 8004ce0:	3508      	adds	r5, #8
 8004ce2:	e7e5      	b.n	8004cb0 <_dtoa_r+0x338>
 8004ce4:	f000 80d2 	beq.w	8004e8c <_dtoa_r+0x514>
 8004ce8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004cec:	427c      	negs	r4, r7
 8004cee:	4b6a      	ldr	r3, [pc, #424]	@ (8004e98 <_dtoa_r+0x520>)
 8004cf0:	f004 020f 	and.w	r2, r4, #15
 8004cf4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004cf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cfc:	f7fb fbec 	bl	80004d8 <__aeabi_dmul>
 8004d00:	2602      	movs	r6, #2
 8004d02:	2300      	movs	r3, #0
 8004d04:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004d08:	4d64      	ldr	r5, [pc, #400]	@ (8004e9c <_dtoa_r+0x524>)
 8004d0a:	1124      	asrs	r4, r4, #4
 8004d0c:	2c00      	cmp	r4, #0
 8004d0e:	f040 80b2 	bne.w	8004e76 <_dtoa_r+0x4fe>
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d1d3      	bne.n	8004cbe <_dtoa_r+0x346>
 8004d16:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8004d1a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	f000 80b7 	beq.w	8004e90 <_dtoa_r+0x518>
 8004d22:	2200      	movs	r2, #0
 8004d24:	4620      	mov	r0, r4
 8004d26:	4629      	mov	r1, r5
 8004d28:	4b5d      	ldr	r3, [pc, #372]	@ (8004ea0 <_dtoa_r+0x528>)
 8004d2a:	f7fb fe47 	bl	80009bc <__aeabi_dcmplt>
 8004d2e:	2800      	cmp	r0, #0
 8004d30:	f000 80ae 	beq.w	8004e90 <_dtoa_r+0x518>
 8004d34:	9b07      	ldr	r3, [sp, #28]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	f000 80aa 	beq.w	8004e90 <_dtoa_r+0x518>
 8004d3c:	9b08      	ldr	r3, [sp, #32]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	dd37      	ble.n	8004db2 <_dtoa_r+0x43a>
 8004d42:	1e7b      	subs	r3, r7, #1
 8004d44:	4620      	mov	r0, r4
 8004d46:	9304      	str	r3, [sp, #16]
 8004d48:	2200      	movs	r2, #0
 8004d4a:	4629      	mov	r1, r5
 8004d4c:	4b55      	ldr	r3, [pc, #340]	@ (8004ea4 <_dtoa_r+0x52c>)
 8004d4e:	f7fb fbc3 	bl	80004d8 <__aeabi_dmul>
 8004d52:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004d56:	9c08      	ldr	r4, [sp, #32]
 8004d58:	3601      	adds	r6, #1
 8004d5a:	4630      	mov	r0, r6
 8004d5c:	f7fb fb52 	bl	8000404 <__aeabi_i2d>
 8004d60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004d64:	f7fb fbb8 	bl	80004d8 <__aeabi_dmul>
 8004d68:	2200      	movs	r2, #0
 8004d6a:	4b4f      	ldr	r3, [pc, #316]	@ (8004ea8 <_dtoa_r+0x530>)
 8004d6c:	f7fb f9fe 	bl	800016c <__adddf3>
 8004d70:	4605      	mov	r5, r0
 8004d72:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8004d76:	2c00      	cmp	r4, #0
 8004d78:	f040 809a 	bne.w	8004eb0 <_dtoa_r+0x538>
 8004d7c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004d80:	2200      	movs	r2, #0
 8004d82:	4b4a      	ldr	r3, [pc, #296]	@ (8004eac <_dtoa_r+0x534>)
 8004d84:	f7fb f9f0 	bl	8000168 <__aeabi_dsub>
 8004d88:	4602      	mov	r2, r0
 8004d8a:	460b      	mov	r3, r1
 8004d8c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004d90:	462a      	mov	r2, r5
 8004d92:	4633      	mov	r3, r6
 8004d94:	f7fb fe30 	bl	80009f8 <__aeabi_dcmpgt>
 8004d98:	2800      	cmp	r0, #0
 8004d9a:	f040 828e 	bne.w	80052ba <_dtoa_r+0x942>
 8004d9e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004da2:	462a      	mov	r2, r5
 8004da4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8004da8:	f7fb fe08 	bl	80009bc <__aeabi_dcmplt>
 8004dac:	2800      	cmp	r0, #0
 8004dae:	f040 8127 	bne.w	8005000 <_dtoa_r+0x688>
 8004db2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8004db6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8004dba:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	f2c0 8163 	blt.w	8005088 <_dtoa_r+0x710>
 8004dc2:	2f0e      	cmp	r7, #14
 8004dc4:	f300 8160 	bgt.w	8005088 <_dtoa_r+0x710>
 8004dc8:	4b33      	ldr	r3, [pc, #204]	@ (8004e98 <_dtoa_r+0x520>)
 8004dca:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004dce:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004dd2:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8004dd6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	da03      	bge.n	8004de4 <_dtoa_r+0x46c>
 8004ddc:	9b07      	ldr	r3, [sp, #28]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	f340 8100 	ble.w	8004fe4 <_dtoa_r+0x66c>
 8004de4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8004de8:	4656      	mov	r6, sl
 8004dea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004dee:	4620      	mov	r0, r4
 8004df0:	4629      	mov	r1, r5
 8004df2:	f7fb fc9b 	bl	800072c <__aeabi_ddiv>
 8004df6:	f7fb fe1f 	bl	8000a38 <__aeabi_d2iz>
 8004dfa:	4680      	mov	r8, r0
 8004dfc:	f7fb fb02 	bl	8000404 <__aeabi_i2d>
 8004e00:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004e04:	f7fb fb68 	bl	80004d8 <__aeabi_dmul>
 8004e08:	4602      	mov	r2, r0
 8004e0a:	460b      	mov	r3, r1
 8004e0c:	4620      	mov	r0, r4
 8004e0e:	4629      	mov	r1, r5
 8004e10:	f7fb f9aa 	bl	8000168 <__aeabi_dsub>
 8004e14:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8004e18:	9d07      	ldr	r5, [sp, #28]
 8004e1a:	f806 4b01 	strb.w	r4, [r6], #1
 8004e1e:	eba6 040a 	sub.w	r4, r6, sl
 8004e22:	42a5      	cmp	r5, r4
 8004e24:	4602      	mov	r2, r0
 8004e26:	460b      	mov	r3, r1
 8004e28:	f040 8116 	bne.w	8005058 <_dtoa_r+0x6e0>
 8004e2c:	f7fb f99e 	bl	800016c <__adddf3>
 8004e30:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004e34:	4604      	mov	r4, r0
 8004e36:	460d      	mov	r5, r1
 8004e38:	f7fb fdde 	bl	80009f8 <__aeabi_dcmpgt>
 8004e3c:	2800      	cmp	r0, #0
 8004e3e:	f040 80f8 	bne.w	8005032 <_dtoa_r+0x6ba>
 8004e42:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004e46:	4620      	mov	r0, r4
 8004e48:	4629      	mov	r1, r5
 8004e4a:	f7fb fdad 	bl	80009a8 <__aeabi_dcmpeq>
 8004e4e:	b118      	cbz	r0, 8004e58 <_dtoa_r+0x4e0>
 8004e50:	f018 0f01 	tst.w	r8, #1
 8004e54:	f040 80ed 	bne.w	8005032 <_dtoa_r+0x6ba>
 8004e58:	4649      	mov	r1, r9
 8004e5a:	4658      	mov	r0, fp
 8004e5c:	f000 fc92 	bl	8005784 <_Bfree>
 8004e60:	2300      	movs	r3, #0
 8004e62:	7033      	strb	r3, [r6, #0]
 8004e64:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8004e66:	3701      	adds	r7, #1
 8004e68:	601f      	str	r7, [r3, #0]
 8004e6a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	f000 8320 	beq.w	80054b2 <_dtoa_r+0xb3a>
 8004e72:	601e      	str	r6, [r3, #0]
 8004e74:	e31d      	b.n	80054b2 <_dtoa_r+0xb3a>
 8004e76:	07e2      	lsls	r2, r4, #31
 8004e78:	d505      	bpl.n	8004e86 <_dtoa_r+0x50e>
 8004e7a:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004e7e:	f7fb fb2b 	bl	80004d8 <__aeabi_dmul>
 8004e82:	2301      	movs	r3, #1
 8004e84:	3601      	adds	r6, #1
 8004e86:	1064      	asrs	r4, r4, #1
 8004e88:	3508      	adds	r5, #8
 8004e8a:	e73f      	b.n	8004d0c <_dtoa_r+0x394>
 8004e8c:	2602      	movs	r6, #2
 8004e8e:	e742      	b.n	8004d16 <_dtoa_r+0x39e>
 8004e90:	9c07      	ldr	r4, [sp, #28]
 8004e92:	9704      	str	r7, [sp, #16]
 8004e94:	e761      	b.n	8004d5a <_dtoa_r+0x3e2>
 8004e96:	bf00      	nop
 8004e98:	08006a28 	.word	0x08006a28
 8004e9c:	08006a00 	.word	0x08006a00
 8004ea0:	3ff00000 	.word	0x3ff00000
 8004ea4:	40240000 	.word	0x40240000
 8004ea8:	401c0000 	.word	0x401c0000
 8004eac:	40140000 	.word	0x40140000
 8004eb0:	4b70      	ldr	r3, [pc, #448]	@ (8005074 <_dtoa_r+0x6fc>)
 8004eb2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8004eb4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004eb8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004ebc:	4454      	add	r4, sl
 8004ebe:	2900      	cmp	r1, #0
 8004ec0:	d045      	beq.n	8004f4e <_dtoa_r+0x5d6>
 8004ec2:	2000      	movs	r0, #0
 8004ec4:	496c      	ldr	r1, [pc, #432]	@ (8005078 <_dtoa_r+0x700>)
 8004ec6:	f7fb fc31 	bl	800072c <__aeabi_ddiv>
 8004eca:	4633      	mov	r3, r6
 8004ecc:	462a      	mov	r2, r5
 8004ece:	f7fb f94b 	bl	8000168 <__aeabi_dsub>
 8004ed2:	4656      	mov	r6, sl
 8004ed4:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004ed8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004edc:	f7fb fdac 	bl	8000a38 <__aeabi_d2iz>
 8004ee0:	4605      	mov	r5, r0
 8004ee2:	f7fb fa8f 	bl	8000404 <__aeabi_i2d>
 8004ee6:	4602      	mov	r2, r0
 8004ee8:	460b      	mov	r3, r1
 8004eea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004eee:	f7fb f93b 	bl	8000168 <__aeabi_dsub>
 8004ef2:	4602      	mov	r2, r0
 8004ef4:	460b      	mov	r3, r1
 8004ef6:	3530      	adds	r5, #48	@ 0x30
 8004ef8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004efc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004f00:	f806 5b01 	strb.w	r5, [r6], #1
 8004f04:	f7fb fd5a 	bl	80009bc <__aeabi_dcmplt>
 8004f08:	2800      	cmp	r0, #0
 8004f0a:	d163      	bne.n	8004fd4 <_dtoa_r+0x65c>
 8004f0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004f10:	2000      	movs	r0, #0
 8004f12:	495a      	ldr	r1, [pc, #360]	@ (800507c <_dtoa_r+0x704>)
 8004f14:	f7fb f928 	bl	8000168 <__aeabi_dsub>
 8004f18:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004f1c:	f7fb fd4e 	bl	80009bc <__aeabi_dcmplt>
 8004f20:	2800      	cmp	r0, #0
 8004f22:	f040 8087 	bne.w	8005034 <_dtoa_r+0x6bc>
 8004f26:	42a6      	cmp	r6, r4
 8004f28:	f43f af43 	beq.w	8004db2 <_dtoa_r+0x43a>
 8004f2c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8004f30:	2200      	movs	r2, #0
 8004f32:	4b53      	ldr	r3, [pc, #332]	@ (8005080 <_dtoa_r+0x708>)
 8004f34:	f7fb fad0 	bl	80004d8 <__aeabi_dmul>
 8004f38:	2200      	movs	r2, #0
 8004f3a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004f3e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004f42:	4b4f      	ldr	r3, [pc, #316]	@ (8005080 <_dtoa_r+0x708>)
 8004f44:	f7fb fac8 	bl	80004d8 <__aeabi_dmul>
 8004f48:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004f4c:	e7c4      	b.n	8004ed8 <_dtoa_r+0x560>
 8004f4e:	4631      	mov	r1, r6
 8004f50:	4628      	mov	r0, r5
 8004f52:	f7fb fac1 	bl	80004d8 <__aeabi_dmul>
 8004f56:	4656      	mov	r6, sl
 8004f58:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004f5c:	9413      	str	r4, [sp, #76]	@ 0x4c
 8004f5e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004f62:	f7fb fd69 	bl	8000a38 <__aeabi_d2iz>
 8004f66:	4605      	mov	r5, r0
 8004f68:	f7fb fa4c 	bl	8000404 <__aeabi_i2d>
 8004f6c:	4602      	mov	r2, r0
 8004f6e:	460b      	mov	r3, r1
 8004f70:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004f74:	f7fb f8f8 	bl	8000168 <__aeabi_dsub>
 8004f78:	4602      	mov	r2, r0
 8004f7a:	460b      	mov	r3, r1
 8004f7c:	3530      	adds	r5, #48	@ 0x30
 8004f7e:	f806 5b01 	strb.w	r5, [r6], #1
 8004f82:	42a6      	cmp	r6, r4
 8004f84:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004f88:	f04f 0200 	mov.w	r2, #0
 8004f8c:	d124      	bne.n	8004fd8 <_dtoa_r+0x660>
 8004f8e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8004f92:	4b39      	ldr	r3, [pc, #228]	@ (8005078 <_dtoa_r+0x700>)
 8004f94:	f7fb f8ea 	bl	800016c <__adddf3>
 8004f98:	4602      	mov	r2, r0
 8004f9a:	460b      	mov	r3, r1
 8004f9c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004fa0:	f7fb fd2a 	bl	80009f8 <__aeabi_dcmpgt>
 8004fa4:	2800      	cmp	r0, #0
 8004fa6:	d145      	bne.n	8005034 <_dtoa_r+0x6bc>
 8004fa8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004fac:	2000      	movs	r0, #0
 8004fae:	4932      	ldr	r1, [pc, #200]	@ (8005078 <_dtoa_r+0x700>)
 8004fb0:	f7fb f8da 	bl	8000168 <__aeabi_dsub>
 8004fb4:	4602      	mov	r2, r0
 8004fb6:	460b      	mov	r3, r1
 8004fb8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004fbc:	f7fb fcfe 	bl	80009bc <__aeabi_dcmplt>
 8004fc0:	2800      	cmp	r0, #0
 8004fc2:	f43f aef6 	beq.w	8004db2 <_dtoa_r+0x43a>
 8004fc6:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8004fc8:	1e73      	subs	r3, r6, #1
 8004fca:	9313      	str	r3, [sp, #76]	@ 0x4c
 8004fcc:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8004fd0:	2b30      	cmp	r3, #48	@ 0x30
 8004fd2:	d0f8      	beq.n	8004fc6 <_dtoa_r+0x64e>
 8004fd4:	9f04      	ldr	r7, [sp, #16]
 8004fd6:	e73f      	b.n	8004e58 <_dtoa_r+0x4e0>
 8004fd8:	4b29      	ldr	r3, [pc, #164]	@ (8005080 <_dtoa_r+0x708>)
 8004fda:	f7fb fa7d 	bl	80004d8 <__aeabi_dmul>
 8004fde:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004fe2:	e7bc      	b.n	8004f5e <_dtoa_r+0x5e6>
 8004fe4:	d10c      	bne.n	8005000 <_dtoa_r+0x688>
 8004fe6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004fea:	2200      	movs	r2, #0
 8004fec:	4b25      	ldr	r3, [pc, #148]	@ (8005084 <_dtoa_r+0x70c>)
 8004fee:	f7fb fa73 	bl	80004d8 <__aeabi_dmul>
 8004ff2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004ff6:	f7fb fcf5 	bl	80009e4 <__aeabi_dcmpge>
 8004ffa:	2800      	cmp	r0, #0
 8004ffc:	f000 815b 	beq.w	80052b6 <_dtoa_r+0x93e>
 8005000:	2400      	movs	r4, #0
 8005002:	4625      	mov	r5, r4
 8005004:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005006:	4656      	mov	r6, sl
 8005008:	43db      	mvns	r3, r3
 800500a:	9304      	str	r3, [sp, #16]
 800500c:	2700      	movs	r7, #0
 800500e:	4621      	mov	r1, r4
 8005010:	4658      	mov	r0, fp
 8005012:	f000 fbb7 	bl	8005784 <_Bfree>
 8005016:	2d00      	cmp	r5, #0
 8005018:	d0dc      	beq.n	8004fd4 <_dtoa_r+0x65c>
 800501a:	b12f      	cbz	r7, 8005028 <_dtoa_r+0x6b0>
 800501c:	42af      	cmp	r7, r5
 800501e:	d003      	beq.n	8005028 <_dtoa_r+0x6b0>
 8005020:	4639      	mov	r1, r7
 8005022:	4658      	mov	r0, fp
 8005024:	f000 fbae 	bl	8005784 <_Bfree>
 8005028:	4629      	mov	r1, r5
 800502a:	4658      	mov	r0, fp
 800502c:	f000 fbaa 	bl	8005784 <_Bfree>
 8005030:	e7d0      	b.n	8004fd4 <_dtoa_r+0x65c>
 8005032:	9704      	str	r7, [sp, #16]
 8005034:	4633      	mov	r3, r6
 8005036:	461e      	mov	r6, r3
 8005038:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800503c:	2a39      	cmp	r2, #57	@ 0x39
 800503e:	d107      	bne.n	8005050 <_dtoa_r+0x6d8>
 8005040:	459a      	cmp	sl, r3
 8005042:	d1f8      	bne.n	8005036 <_dtoa_r+0x6be>
 8005044:	9a04      	ldr	r2, [sp, #16]
 8005046:	3201      	adds	r2, #1
 8005048:	9204      	str	r2, [sp, #16]
 800504a:	2230      	movs	r2, #48	@ 0x30
 800504c:	f88a 2000 	strb.w	r2, [sl]
 8005050:	781a      	ldrb	r2, [r3, #0]
 8005052:	3201      	adds	r2, #1
 8005054:	701a      	strb	r2, [r3, #0]
 8005056:	e7bd      	b.n	8004fd4 <_dtoa_r+0x65c>
 8005058:	2200      	movs	r2, #0
 800505a:	4b09      	ldr	r3, [pc, #36]	@ (8005080 <_dtoa_r+0x708>)
 800505c:	f7fb fa3c 	bl	80004d8 <__aeabi_dmul>
 8005060:	2200      	movs	r2, #0
 8005062:	2300      	movs	r3, #0
 8005064:	4604      	mov	r4, r0
 8005066:	460d      	mov	r5, r1
 8005068:	f7fb fc9e 	bl	80009a8 <__aeabi_dcmpeq>
 800506c:	2800      	cmp	r0, #0
 800506e:	f43f aebc 	beq.w	8004dea <_dtoa_r+0x472>
 8005072:	e6f1      	b.n	8004e58 <_dtoa_r+0x4e0>
 8005074:	08006a28 	.word	0x08006a28
 8005078:	3fe00000 	.word	0x3fe00000
 800507c:	3ff00000 	.word	0x3ff00000
 8005080:	40240000 	.word	0x40240000
 8005084:	40140000 	.word	0x40140000
 8005088:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800508a:	2a00      	cmp	r2, #0
 800508c:	f000 80db 	beq.w	8005246 <_dtoa_r+0x8ce>
 8005090:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8005092:	2a01      	cmp	r2, #1
 8005094:	f300 80bf 	bgt.w	8005216 <_dtoa_r+0x89e>
 8005098:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800509a:	2a00      	cmp	r2, #0
 800509c:	f000 80b7 	beq.w	800520e <_dtoa_r+0x896>
 80050a0:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80050a4:	4646      	mov	r6, r8
 80050a6:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80050a8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80050aa:	2101      	movs	r1, #1
 80050ac:	441a      	add	r2, r3
 80050ae:	4658      	mov	r0, fp
 80050b0:	4498      	add	r8, r3
 80050b2:	9209      	str	r2, [sp, #36]	@ 0x24
 80050b4:	f000 fc1a 	bl	80058ec <__i2b>
 80050b8:	4605      	mov	r5, r0
 80050ba:	b15e      	cbz	r6, 80050d4 <_dtoa_r+0x75c>
 80050bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80050be:	2b00      	cmp	r3, #0
 80050c0:	dd08      	ble.n	80050d4 <_dtoa_r+0x75c>
 80050c2:	42b3      	cmp	r3, r6
 80050c4:	bfa8      	it	ge
 80050c6:	4633      	movge	r3, r6
 80050c8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80050ca:	eba8 0803 	sub.w	r8, r8, r3
 80050ce:	1af6      	subs	r6, r6, r3
 80050d0:	1ad3      	subs	r3, r2, r3
 80050d2:	9309      	str	r3, [sp, #36]	@ 0x24
 80050d4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80050d6:	b1f3      	cbz	r3, 8005116 <_dtoa_r+0x79e>
 80050d8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80050da:	2b00      	cmp	r3, #0
 80050dc:	f000 80b7 	beq.w	800524e <_dtoa_r+0x8d6>
 80050e0:	b18c      	cbz	r4, 8005106 <_dtoa_r+0x78e>
 80050e2:	4629      	mov	r1, r5
 80050e4:	4622      	mov	r2, r4
 80050e6:	4658      	mov	r0, fp
 80050e8:	f000 fcbe 	bl	8005a68 <__pow5mult>
 80050ec:	464a      	mov	r2, r9
 80050ee:	4601      	mov	r1, r0
 80050f0:	4605      	mov	r5, r0
 80050f2:	4658      	mov	r0, fp
 80050f4:	f000 fc10 	bl	8005918 <__multiply>
 80050f8:	4649      	mov	r1, r9
 80050fa:	9004      	str	r0, [sp, #16]
 80050fc:	4658      	mov	r0, fp
 80050fe:	f000 fb41 	bl	8005784 <_Bfree>
 8005102:	9b04      	ldr	r3, [sp, #16]
 8005104:	4699      	mov	r9, r3
 8005106:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005108:	1b1a      	subs	r2, r3, r4
 800510a:	d004      	beq.n	8005116 <_dtoa_r+0x79e>
 800510c:	4649      	mov	r1, r9
 800510e:	4658      	mov	r0, fp
 8005110:	f000 fcaa 	bl	8005a68 <__pow5mult>
 8005114:	4681      	mov	r9, r0
 8005116:	2101      	movs	r1, #1
 8005118:	4658      	mov	r0, fp
 800511a:	f000 fbe7 	bl	80058ec <__i2b>
 800511e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005120:	4604      	mov	r4, r0
 8005122:	2b00      	cmp	r3, #0
 8005124:	f000 81c9 	beq.w	80054ba <_dtoa_r+0xb42>
 8005128:	461a      	mov	r2, r3
 800512a:	4601      	mov	r1, r0
 800512c:	4658      	mov	r0, fp
 800512e:	f000 fc9b 	bl	8005a68 <__pow5mult>
 8005132:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005134:	4604      	mov	r4, r0
 8005136:	2b01      	cmp	r3, #1
 8005138:	f300 808f 	bgt.w	800525a <_dtoa_r+0x8e2>
 800513c:	9b02      	ldr	r3, [sp, #8]
 800513e:	2b00      	cmp	r3, #0
 8005140:	f040 8087 	bne.w	8005252 <_dtoa_r+0x8da>
 8005144:	9b03      	ldr	r3, [sp, #12]
 8005146:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800514a:	2b00      	cmp	r3, #0
 800514c:	f040 8083 	bne.w	8005256 <_dtoa_r+0x8de>
 8005150:	9b03      	ldr	r3, [sp, #12]
 8005152:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005156:	0d1b      	lsrs	r3, r3, #20
 8005158:	051b      	lsls	r3, r3, #20
 800515a:	b12b      	cbz	r3, 8005168 <_dtoa_r+0x7f0>
 800515c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800515e:	f108 0801 	add.w	r8, r8, #1
 8005162:	3301      	adds	r3, #1
 8005164:	9309      	str	r3, [sp, #36]	@ 0x24
 8005166:	2301      	movs	r3, #1
 8005168:	930a      	str	r3, [sp, #40]	@ 0x28
 800516a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800516c:	2b00      	cmp	r3, #0
 800516e:	f000 81aa 	beq.w	80054c6 <_dtoa_r+0xb4e>
 8005172:	6923      	ldr	r3, [r4, #16]
 8005174:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005178:	6918      	ldr	r0, [r3, #16]
 800517a:	f000 fb6b 	bl	8005854 <__hi0bits>
 800517e:	f1c0 0020 	rsb	r0, r0, #32
 8005182:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005184:	4418      	add	r0, r3
 8005186:	f010 001f 	ands.w	r0, r0, #31
 800518a:	d071      	beq.n	8005270 <_dtoa_r+0x8f8>
 800518c:	f1c0 0320 	rsb	r3, r0, #32
 8005190:	2b04      	cmp	r3, #4
 8005192:	dd65      	ble.n	8005260 <_dtoa_r+0x8e8>
 8005194:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005196:	f1c0 001c 	rsb	r0, r0, #28
 800519a:	4403      	add	r3, r0
 800519c:	4480      	add	r8, r0
 800519e:	4406      	add	r6, r0
 80051a0:	9309      	str	r3, [sp, #36]	@ 0x24
 80051a2:	f1b8 0f00 	cmp.w	r8, #0
 80051a6:	dd05      	ble.n	80051b4 <_dtoa_r+0x83c>
 80051a8:	4649      	mov	r1, r9
 80051aa:	4642      	mov	r2, r8
 80051ac:	4658      	mov	r0, fp
 80051ae:	f000 fcb5 	bl	8005b1c <__lshift>
 80051b2:	4681      	mov	r9, r0
 80051b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	dd05      	ble.n	80051c6 <_dtoa_r+0x84e>
 80051ba:	4621      	mov	r1, r4
 80051bc:	461a      	mov	r2, r3
 80051be:	4658      	mov	r0, fp
 80051c0:	f000 fcac 	bl	8005b1c <__lshift>
 80051c4:	4604      	mov	r4, r0
 80051c6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d053      	beq.n	8005274 <_dtoa_r+0x8fc>
 80051cc:	4621      	mov	r1, r4
 80051ce:	4648      	mov	r0, r9
 80051d0:	f000 fd10 	bl	8005bf4 <__mcmp>
 80051d4:	2800      	cmp	r0, #0
 80051d6:	da4d      	bge.n	8005274 <_dtoa_r+0x8fc>
 80051d8:	1e7b      	subs	r3, r7, #1
 80051da:	4649      	mov	r1, r9
 80051dc:	9304      	str	r3, [sp, #16]
 80051de:	220a      	movs	r2, #10
 80051e0:	2300      	movs	r3, #0
 80051e2:	4658      	mov	r0, fp
 80051e4:	f000 faf0 	bl	80057c8 <__multadd>
 80051e8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80051ea:	4681      	mov	r9, r0
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	f000 816c 	beq.w	80054ca <_dtoa_r+0xb52>
 80051f2:	2300      	movs	r3, #0
 80051f4:	4629      	mov	r1, r5
 80051f6:	220a      	movs	r2, #10
 80051f8:	4658      	mov	r0, fp
 80051fa:	f000 fae5 	bl	80057c8 <__multadd>
 80051fe:	9b08      	ldr	r3, [sp, #32]
 8005200:	4605      	mov	r5, r0
 8005202:	2b00      	cmp	r3, #0
 8005204:	dc61      	bgt.n	80052ca <_dtoa_r+0x952>
 8005206:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005208:	2b02      	cmp	r3, #2
 800520a:	dc3b      	bgt.n	8005284 <_dtoa_r+0x90c>
 800520c:	e05d      	b.n	80052ca <_dtoa_r+0x952>
 800520e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005210:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8005214:	e746      	b.n	80050a4 <_dtoa_r+0x72c>
 8005216:	9b07      	ldr	r3, [sp, #28]
 8005218:	1e5c      	subs	r4, r3, #1
 800521a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800521c:	42a3      	cmp	r3, r4
 800521e:	bfbf      	itttt	lt
 8005220:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8005222:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 8005224:	1ae3      	sublt	r3, r4, r3
 8005226:	18d2      	addlt	r2, r2, r3
 8005228:	bfa8      	it	ge
 800522a:	1b1c      	subge	r4, r3, r4
 800522c:	9b07      	ldr	r3, [sp, #28]
 800522e:	bfbe      	ittt	lt
 8005230:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8005232:	920e      	strlt	r2, [sp, #56]	@ 0x38
 8005234:	2400      	movlt	r4, #0
 8005236:	2b00      	cmp	r3, #0
 8005238:	bfb5      	itete	lt
 800523a:	eba8 0603 	sublt.w	r6, r8, r3
 800523e:	4646      	movge	r6, r8
 8005240:	2300      	movlt	r3, #0
 8005242:	9b07      	ldrge	r3, [sp, #28]
 8005244:	e730      	b.n	80050a8 <_dtoa_r+0x730>
 8005246:	4646      	mov	r6, r8
 8005248:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800524a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800524c:	e735      	b.n	80050ba <_dtoa_r+0x742>
 800524e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005250:	e75c      	b.n	800510c <_dtoa_r+0x794>
 8005252:	2300      	movs	r3, #0
 8005254:	e788      	b.n	8005168 <_dtoa_r+0x7f0>
 8005256:	9b02      	ldr	r3, [sp, #8]
 8005258:	e786      	b.n	8005168 <_dtoa_r+0x7f0>
 800525a:	2300      	movs	r3, #0
 800525c:	930a      	str	r3, [sp, #40]	@ 0x28
 800525e:	e788      	b.n	8005172 <_dtoa_r+0x7fa>
 8005260:	d09f      	beq.n	80051a2 <_dtoa_r+0x82a>
 8005262:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005264:	331c      	adds	r3, #28
 8005266:	441a      	add	r2, r3
 8005268:	4498      	add	r8, r3
 800526a:	441e      	add	r6, r3
 800526c:	9209      	str	r2, [sp, #36]	@ 0x24
 800526e:	e798      	b.n	80051a2 <_dtoa_r+0x82a>
 8005270:	4603      	mov	r3, r0
 8005272:	e7f6      	b.n	8005262 <_dtoa_r+0x8ea>
 8005274:	9b07      	ldr	r3, [sp, #28]
 8005276:	9704      	str	r7, [sp, #16]
 8005278:	2b00      	cmp	r3, #0
 800527a:	dc20      	bgt.n	80052be <_dtoa_r+0x946>
 800527c:	9308      	str	r3, [sp, #32]
 800527e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005280:	2b02      	cmp	r3, #2
 8005282:	dd1e      	ble.n	80052c2 <_dtoa_r+0x94a>
 8005284:	9b08      	ldr	r3, [sp, #32]
 8005286:	2b00      	cmp	r3, #0
 8005288:	f47f aebc 	bne.w	8005004 <_dtoa_r+0x68c>
 800528c:	4621      	mov	r1, r4
 800528e:	2205      	movs	r2, #5
 8005290:	4658      	mov	r0, fp
 8005292:	f000 fa99 	bl	80057c8 <__multadd>
 8005296:	4601      	mov	r1, r0
 8005298:	4604      	mov	r4, r0
 800529a:	4648      	mov	r0, r9
 800529c:	f000 fcaa 	bl	8005bf4 <__mcmp>
 80052a0:	2800      	cmp	r0, #0
 80052a2:	f77f aeaf 	ble.w	8005004 <_dtoa_r+0x68c>
 80052a6:	2331      	movs	r3, #49	@ 0x31
 80052a8:	4656      	mov	r6, sl
 80052aa:	f806 3b01 	strb.w	r3, [r6], #1
 80052ae:	9b04      	ldr	r3, [sp, #16]
 80052b0:	3301      	adds	r3, #1
 80052b2:	9304      	str	r3, [sp, #16]
 80052b4:	e6aa      	b.n	800500c <_dtoa_r+0x694>
 80052b6:	9c07      	ldr	r4, [sp, #28]
 80052b8:	9704      	str	r7, [sp, #16]
 80052ba:	4625      	mov	r5, r4
 80052bc:	e7f3      	b.n	80052a6 <_dtoa_r+0x92e>
 80052be:	9b07      	ldr	r3, [sp, #28]
 80052c0:	9308      	str	r3, [sp, #32]
 80052c2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	f000 8104 	beq.w	80054d2 <_dtoa_r+0xb5a>
 80052ca:	2e00      	cmp	r6, #0
 80052cc:	dd05      	ble.n	80052da <_dtoa_r+0x962>
 80052ce:	4629      	mov	r1, r5
 80052d0:	4632      	mov	r2, r6
 80052d2:	4658      	mov	r0, fp
 80052d4:	f000 fc22 	bl	8005b1c <__lshift>
 80052d8:	4605      	mov	r5, r0
 80052da:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d05a      	beq.n	8005396 <_dtoa_r+0xa1e>
 80052e0:	4658      	mov	r0, fp
 80052e2:	6869      	ldr	r1, [r5, #4]
 80052e4:	f000 fa0e 	bl	8005704 <_Balloc>
 80052e8:	4606      	mov	r6, r0
 80052ea:	b928      	cbnz	r0, 80052f8 <_dtoa_r+0x980>
 80052ec:	4602      	mov	r2, r0
 80052ee:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80052f2:	4b83      	ldr	r3, [pc, #524]	@ (8005500 <_dtoa_r+0xb88>)
 80052f4:	f7ff bb54 	b.w	80049a0 <_dtoa_r+0x28>
 80052f8:	692a      	ldr	r2, [r5, #16]
 80052fa:	f105 010c 	add.w	r1, r5, #12
 80052fe:	3202      	adds	r2, #2
 8005300:	0092      	lsls	r2, r2, #2
 8005302:	300c      	adds	r0, #12
 8005304:	f000 fffa 	bl	80062fc <memcpy>
 8005308:	2201      	movs	r2, #1
 800530a:	4631      	mov	r1, r6
 800530c:	4658      	mov	r0, fp
 800530e:	f000 fc05 	bl	8005b1c <__lshift>
 8005312:	462f      	mov	r7, r5
 8005314:	4605      	mov	r5, r0
 8005316:	f10a 0301 	add.w	r3, sl, #1
 800531a:	9307      	str	r3, [sp, #28]
 800531c:	9b08      	ldr	r3, [sp, #32]
 800531e:	4453      	add	r3, sl
 8005320:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005322:	9b02      	ldr	r3, [sp, #8]
 8005324:	f003 0301 	and.w	r3, r3, #1
 8005328:	930a      	str	r3, [sp, #40]	@ 0x28
 800532a:	9b07      	ldr	r3, [sp, #28]
 800532c:	4621      	mov	r1, r4
 800532e:	3b01      	subs	r3, #1
 8005330:	4648      	mov	r0, r9
 8005332:	9302      	str	r3, [sp, #8]
 8005334:	f7ff fa97 	bl	8004866 <quorem>
 8005338:	4639      	mov	r1, r7
 800533a:	9008      	str	r0, [sp, #32]
 800533c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8005340:	4648      	mov	r0, r9
 8005342:	f000 fc57 	bl	8005bf4 <__mcmp>
 8005346:	462a      	mov	r2, r5
 8005348:	9009      	str	r0, [sp, #36]	@ 0x24
 800534a:	4621      	mov	r1, r4
 800534c:	4658      	mov	r0, fp
 800534e:	f000 fc6d 	bl	8005c2c <__mdiff>
 8005352:	68c2      	ldr	r2, [r0, #12]
 8005354:	4606      	mov	r6, r0
 8005356:	bb02      	cbnz	r2, 800539a <_dtoa_r+0xa22>
 8005358:	4601      	mov	r1, r0
 800535a:	4648      	mov	r0, r9
 800535c:	f000 fc4a 	bl	8005bf4 <__mcmp>
 8005360:	4602      	mov	r2, r0
 8005362:	4631      	mov	r1, r6
 8005364:	4658      	mov	r0, fp
 8005366:	920c      	str	r2, [sp, #48]	@ 0x30
 8005368:	f000 fa0c 	bl	8005784 <_Bfree>
 800536c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800536e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8005370:	9e07      	ldr	r6, [sp, #28]
 8005372:	ea43 0102 	orr.w	r1, r3, r2
 8005376:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005378:	4319      	orrs	r1, r3
 800537a:	d110      	bne.n	800539e <_dtoa_r+0xa26>
 800537c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8005380:	d029      	beq.n	80053d6 <_dtoa_r+0xa5e>
 8005382:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005384:	2b00      	cmp	r3, #0
 8005386:	dd02      	ble.n	800538e <_dtoa_r+0xa16>
 8005388:	9b08      	ldr	r3, [sp, #32]
 800538a:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800538e:	9b02      	ldr	r3, [sp, #8]
 8005390:	f883 8000 	strb.w	r8, [r3]
 8005394:	e63b      	b.n	800500e <_dtoa_r+0x696>
 8005396:	4628      	mov	r0, r5
 8005398:	e7bb      	b.n	8005312 <_dtoa_r+0x99a>
 800539a:	2201      	movs	r2, #1
 800539c:	e7e1      	b.n	8005362 <_dtoa_r+0x9ea>
 800539e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	db04      	blt.n	80053ae <_dtoa_r+0xa36>
 80053a4:	9920      	ldr	r1, [sp, #128]	@ 0x80
 80053a6:	430b      	orrs	r3, r1
 80053a8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80053aa:	430b      	orrs	r3, r1
 80053ac:	d120      	bne.n	80053f0 <_dtoa_r+0xa78>
 80053ae:	2a00      	cmp	r2, #0
 80053b0:	dded      	ble.n	800538e <_dtoa_r+0xa16>
 80053b2:	4649      	mov	r1, r9
 80053b4:	2201      	movs	r2, #1
 80053b6:	4658      	mov	r0, fp
 80053b8:	f000 fbb0 	bl	8005b1c <__lshift>
 80053bc:	4621      	mov	r1, r4
 80053be:	4681      	mov	r9, r0
 80053c0:	f000 fc18 	bl	8005bf4 <__mcmp>
 80053c4:	2800      	cmp	r0, #0
 80053c6:	dc03      	bgt.n	80053d0 <_dtoa_r+0xa58>
 80053c8:	d1e1      	bne.n	800538e <_dtoa_r+0xa16>
 80053ca:	f018 0f01 	tst.w	r8, #1
 80053ce:	d0de      	beq.n	800538e <_dtoa_r+0xa16>
 80053d0:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80053d4:	d1d8      	bne.n	8005388 <_dtoa_r+0xa10>
 80053d6:	2339      	movs	r3, #57	@ 0x39
 80053d8:	9a02      	ldr	r2, [sp, #8]
 80053da:	7013      	strb	r3, [r2, #0]
 80053dc:	4633      	mov	r3, r6
 80053de:	461e      	mov	r6, r3
 80053e0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80053e4:	3b01      	subs	r3, #1
 80053e6:	2a39      	cmp	r2, #57	@ 0x39
 80053e8:	d052      	beq.n	8005490 <_dtoa_r+0xb18>
 80053ea:	3201      	adds	r2, #1
 80053ec:	701a      	strb	r2, [r3, #0]
 80053ee:	e60e      	b.n	800500e <_dtoa_r+0x696>
 80053f0:	2a00      	cmp	r2, #0
 80053f2:	dd07      	ble.n	8005404 <_dtoa_r+0xa8c>
 80053f4:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80053f8:	d0ed      	beq.n	80053d6 <_dtoa_r+0xa5e>
 80053fa:	9a02      	ldr	r2, [sp, #8]
 80053fc:	f108 0301 	add.w	r3, r8, #1
 8005400:	7013      	strb	r3, [r2, #0]
 8005402:	e604      	b.n	800500e <_dtoa_r+0x696>
 8005404:	9b07      	ldr	r3, [sp, #28]
 8005406:	9a07      	ldr	r2, [sp, #28]
 8005408:	f803 8c01 	strb.w	r8, [r3, #-1]
 800540c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800540e:	4293      	cmp	r3, r2
 8005410:	d028      	beq.n	8005464 <_dtoa_r+0xaec>
 8005412:	4649      	mov	r1, r9
 8005414:	2300      	movs	r3, #0
 8005416:	220a      	movs	r2, #10
 8005418:	4658      	mov	r0, fp
 800541a:	f000 f9d5 	bl	80057c8 <__multadd>
 800541e:	42af      	cmp	r7, r5
 8005420:	4681      	mov	r9, r0
 8005422:	f04f 0300 	mov.w	r3, #0
 8005426:	f04f 020a 	mov.w	r2, #10
 800542a:	4639      	mov	r1, r7
 800542c:	4658      	mov	r0, fp
 800542e:	d107      	bne.n	8005440 <_dtoa_r+0xac8>
 8005430:	f000 f9ca 	bl	80057c8 <__multadd>
 8005434:	4607      	mov	r7, r0
 8005436:	4605      	mov	r5, r0
 8005438:	9b07      	ldr	r3, [sp, #28]
 800543a:	3301      	adds	r3, #1
 800543c:	9307      	str	r3, [sp, #28]
 800543e:	e774      	b.n	800532a <_dtoa_r+0x9b2>
 8005440:	f000 f9c2 	bl	80057c8 <__multadd>
 8005444:	4629      	mov	r1, r5
 8005446:	4607      	mov	r7, r0
 8005448:	2300      	movs	r3, #0
 800544a:	220a      	movs	r2, #10
 800544c:	4658      	mov	r0, fp
 800544e:	f000 f9bb 	bl	80057c8 <__multadd>
 8005452:	4605      	mov	r5, r0
 8005454:	e7f0      	b.n	8005438 <_dtoa_r+0xac0>
 8005456:	9b08      	ldr	r3, [sp, #32]
 8005458:	2700      	movs	r7, #0
 800545a:	2b00      	cmp	r3, #0
 800545c:	bfcc      	ite	gt
 800545e:	461e      	movgt	r6, r3
 8005460:	2601      	movle	r6, #1
 8005462:	4456      	add	r6, sl
 8005464:	4649      	mov	r1, r9
 8005466:	2201      	movs	r2, #1
 8005468:	4658      	mov	r0, fp
 800546a:	f000 fb57 	bl	8005b1c <__lshift>
 800546e:	4621      	mov	r1, r4
 8005470:	4681      	mov	r9, r0
 8005472:	f000 fbbf 	bl	8005bf4 <__mcmp>
 8005476:	2800      	cmp	r0, #0
 8005478:	dcb0      	bgt.n	80053dc <_dtoa_r+0xa64>
 800547a:	d102      	bne.n	8005482 <_dtoa_r+0xb0a>
 800547c:	f018 0f01 	tst.w	r8, #1
 8005480:	d1ac      	bne.n	80053dc <_dtoa_r+0xa64>
 8005482:	4633      	mov	r3, r6
 8005484:	461e      	mov	r6, r3
 8005486:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800548a:	2a30      	cmp	r2, #48	@ 0x30
 800548c:	d0fa      	beq.n	8005484 <_dtoa_r+0xb0c>
 800548e:	e5be      	b.n	800500e <_dtoa_r+0x696>
 8005490:	459a      	cmp	sl, r3
 8005492:	d1a4      	bne.n	80053de <_dtoa_r+0xa66>
 8005494:	9b04      	ldr	r3, [sp, #16]
 8005496:	3301      	adds	r3, #1
 8005498:	9304      	str	r3, [sp, #16]
 800549a:	2331      	movs	r3, #49	@ 0x31
 800549c:	f88a 3000 	strb.w	r3, [sl]
 80054a0:	e5b5      	b.n	800500e <_dtoa_r+0x696>
 80054a2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80054a4:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8005504 <_dtoa_r+0xb8c>
 80054a8:	b11b      	cbz	r3, 80054b2 <_dtoa_r+0xb3a>
 80054aa:	f10a 0308 	add.w	r3, sl, #8
 80054ae:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80054b0:	6013      	str	r3, [r2, #0]
 80054b2:	4650      	mov	r0, sl
 80054b4:	b017      	add	sp, #92	@ 0x5c
 80054b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054ba:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80054bc:	2b01      	cmp	r3, #1
 80054be:	f77f ae3d 	ble.w	800513c <_dtoa_r+0x7c4>
 80054c2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80054c4:	930a      	str	r3, [sp, #40]	@ 0x28
 80054c6:	2001      	movs	r0, #1
 80054c8:	e65b      	b.n	8005182 <_dtoa_r+0x80a>
 80054ca:	9b08      	ldr	r3, [sp, #32]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	f77f aed6 	ble.w	800527e <_dtoa_r+0x906>
 80054d2:	4656      	mov	r6, sl
 80054d4:	4621      	mov	r1, r4
 80054d6:	4648      	mov	r0, r9
 80054d8:	f7ff f9c5 	bl	8004866 <quorem>
 80054dc:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80054e0:	9b08      	ldr	r3, [sp, #32]
 80054e2:	f806 8b01 	strb.w	r8, [r6], #1
 80054e6:	eba6 020a 	sub.w	r2, r6, sl
 80054ea:	4293      	cmp	r3, r2
 80054ec:	ddb3      	ble.n	8005456 <_dtoa_r+0xade>
 80054ee:	4649      	mov	r1, r9
 80054f0:	2300      	movs	r3, #0
 80054f2:	220a      	movs	r2, #10
 80054f4:	4658      	mov	r0, fp
 80054f6:	f000 f967 	bl	80057c8 <__multadd>
 80054fa:	4681      	mov	r9, r0
 80054fc:	e7ea      	b.n	80054d4 <_dtoa_r+0xb5c>
 80054fe:	bf00      	nop
 8005500:	0800698a 	.word	0x0800698a
 8005504:	0800690e 	.word	0x0800690e

08005508 <_free_r>:
 8005508:	b538      	push	{r3, r4, r5, lr}
 800550a:	4605      	mov	r5, r0
 800550c:	2900      	cmp	r1, #0
 800550e:	d040      	beq.n	8005592 <_free_r+0x8a>
 8005510:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005514:	1f0c      	subs	r4, r1, #4
 8005516:	2b00      	cmp	r3, #0
 8005518:	bfb8      	it	lt
 800551a:	18e4      	addlt	r4, r4, r3
 800551c:	f000 f8e6 	bl	80056ec <__malloc_lock>
 8005520:	4a1c      	ldr	r2, [pc, #112]	@ (8005594 <_free_r+0x8c>)
 8005522:	6813      	ldr	r3, [r2, #0]
 8005524:	b933      	cbnz	r3, 8005534 <_free_r+0x2c>
 8005526:	6063      	str	r3, [r4, #4]
 8005528:	6014      	str	r4, [r2, #0]
 800552a:	4628      	mov	r0, r5
 800552c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005530:	f000 b8e2 	b.w	80056f8 <__malloc_unlock>
 8005534:	42a3      	cmp	r3, r4
 8005536:	d908      	bls.n	800554a <_free_r+0x42>
 8005538:	6820      	ldr	r0, [r4, #0]
 800553a:	1821      	adds	r1, r4, r0
 800553c:	428b      	cmp	r3, r1
 800553e:	bf01      	itttt	eq
 8005540:	6819      	ldreq	r1, [r3, #0]
 8005542:	685b      	ldreq	r3, [r3, #4]
 8005544:	1809      	addeq	r1, r1, r0
 8005546:	6021      	streq	r1, [r4, #0]
 8005548:	e7ed      	b.n	8005526 <_free_r+0x1e>
 800554a:	461a      	mov	r2, r3
 800554c:	685b      	ldr	r3, [r3, #4]
 800554e:	b10b      	cbz	r3, 8005554 <_free_r+0x4c>
 8005550:	42a3      	cmp	r3, r4
 8005552:	d9fa      	bls.n	800554a <_free_r+0x42>
 8005554:	6811      	ldr	r1, [r2, #0]
 8005556:	1850      	adds	r0, r2, r1
 8005558:	42a0      	cmp	r0, r4
 800555a:	d10b      	bne.n	8005574 <_free_r+0x6c>
 800555c:	6820      	ldr	r0, [r4, #0]
 800555e:	4401      	add	r1, r0
 8005560:	1850      	adds	r0, r2, r1
 8005562:	4283      	cmp	r3, r0
 8005564:	6011      	str	r1, [r2, #0]
 8005566:	d1e0      	bne.n	800552a <_free_r+0x22>
 8005568:	6818      	ldr	r0, [r3, #0]
 800556a:	685b      	ldr	r3, [r3, #4]
 800556c:	4408      	add	r0, r1
 800556e:	6010      	str	r0, [r2, #0]
 8005570:	6053      	str	r3, [r2, #4]
 8005572:	e7da      	b.n	800552a <_free_r+0x22>
 8005574:	d902      	bls.n	800557c <_free_r+0x74>
 8005576:	230c      	movs	r3, #12
 8005578:	602b      	str	r3, [r5, #0]
 800557a:	e7d6      	b.n	800552a <_free_r+0x22>
 800557c:	6820      	ldr	r0, [r4, #0]
 800557e:	1821      	adds	r1, r4, r0
 8005580:	428b      	cmp	r3, r1
 8005582:	bf01      	itttt	eq
 8005584:	6819      	ldreq	r1, [r3, #0]
 8005586:	685b      	ldreq	r3, [r3, #4]
 8005588:	1809      	addeq	r1, r1, r0
 800558a:	6021      	streq	r1, [r4, #0]
 800558c:	6063      	str	r3, [r4, #4]
 800558e:	6054      	str	r4, [r2, #4]
 8005590:	e7cb      	b.n	800552a <_free_r+0x22>
 8005592:	bd38      	pop	{r3, r4, r5, pc}
 8005594:	200003dc 	.word	0x200003dc

08005598 <malloc>:
 8005598:	4b02      	ldr	r3, [pc, #8]	@ (80055a4 <malloc+0xc>)
 800559a:	4601      	mov	r1, r0
 800559c:	6818      	ldr	r0, [r3, #0]
 800559e:	f000 b825 	b.w	80055ec <_malloc_r>
 80055a2:	bf00      	nop
 80055a4:	20000018 	.word	0x20000018

080055a8 <sbrk_aligned>:
 80055a8:	b570      	push	{r4, r5, r6, lr}
 80055aa:	4e0f      	ldr	r6, [pc, #60]	@ (80055e8 <sbrk_aligned+0x40>)
 80055ac:	460c      	mov	r4, r1
 80055ae:	6831      	ldr	r1, [r6, #0]
 80055b0:	4605      	mov	r5, r0
 80055b2:	b911      	cbnz	r1, 80055ba <sbrk_aligned+0x12>
 80055b4:	f000 fe92 	bl	80062dc <_sbrk_r>
 80055b8:	6030      	str	r0, [r6, #0]
 80055ba:	4621      	mov	r1, r4
 80055bc:	4628      	mov	r0, r5
 80055be:	f000 fe8d 	bl	80062dc <_sbrk_r>
 80055c2:	1c43      	adds	r3, r0, #1
 80055c4:	d103      	bne.n	80055ce <sbrk_aligned+0x26>
 80055c6:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80055ca:	4620      	mov	r0, r4
 80055cc:	bd70      	pop	{r4, r5, r6, pc}
 80055ce:	1cc4      	adds	r4, r0, #3
 80055d0:	f024 0403 	bic.w	r4, r4, #3
 80055d4:	42a0      	cmp	r0, r4
 80055d6:	d0f8      	beq.n	80055ca <sbrk_aligned+0x22>
 80055d8:	1a21      	subs	r1, r4, r0
 80055da:	4628      	mov	r0, r5
 80055dc:	f000 fe7e 	bl	80062dc <_sbrk_r>
 80055e0:	3001      	adds	r0, #1
 80055e2:	d1f2      	bne.n	80055ca <sbrk_aligned+0x22>
 80055e4:	e7ef      	b.n	80055c6 <sbrk_aligned+0x1e>
 80055e6:	bf00      	nop
 80055e8:	200003d8 	.word	0x200003d8

080055ec <_malloc_r>:
 80055ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80055f0:	1ccd      	adds	r5, r1, #3
 80055f2:	f025 0503 	bic.w	r5, r5, #3
 80055f6:	3508      	adds	r5, #8
 80055f8:	2d0c      	cmp	r5, #12
 80055fa:	bf38      	it	cc
 80055fc:	250c      	movcc	r5, #12
 80055fe:	2d00      	cmp	r5, #0
 8005600:	4606      	mov	r6, r0
 8005602:	db01      	blt.n	8005608 <_malloc_r+0x1c>
 8005604:	42a9      	cmp	r1, r5
 8005606:	d904      	bls.n	8005612 <_malloc_r+0x26>
 8005608:	230c      	movs	r3, #12
 800560a:	6033      	str	r3, [r6, #0]
 800560c:	2000      	movs	r0, #0
 800560e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005612:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80056e8 <_malloc_r+0xfc>
 8005616:	f000 f869 	bl	80056ec <__malloc_lock>
 800561a:	f8d8 3000 	ldr.w	r3, [r8]
 800561e:	461c      	mov	r4, r3
 8005620:	bb44      	cbnz	r4, 8005674 <_malloc_r+0x88>
 8005622:	4629      	mov	r1, r5
 8005624:	4630      	mov	r0, r6
 8005626:	f7ff ffbf 	bl	80055a8 <sbrk_aligned>
 800562a:	1c43      	adds	r3, r0, #1
 800562c:	4604      	mov	r4, r0
 800562e:	d158      	bne.n	80056e2 <_malloc_r+0xf6>
 8005630:	f8d8 4000 	ldr.w	r4, [r8]
 8005634:	4627      	mov	r7, r4
 8005636:	2f00      	cmp	r7, #0
 8005638:	d143      	bne.n	80056c2 <_malloc_r+0xd6>
 800563a:	2c00      	cmp	r4, #0
 800563c:	d04b      	beq.n	80056d6 <_malloc_r+0xea>
 800563e:	6823      	ldr	r3, [r4, #0]
 8005640:	4639      	mov	r1, r7
 8005642:	4630      	mov	r0, r6
 8005644:	eb04 0903 	add.w	r9, r4, r3
 8005648:	f000 fe48 	bl	80062dc <_sbrk_r>
 800564c:	4581      	cmp	r9, r0
 800564e:	d142      	bne.n	80056d6 <_malloc_r+0xea>
 8005650:	6821      	ldr	r1, [r4, #0]
 8005652:	4630      	mov	r0, r6
 8005654:	1a6d      	subs	r5, r5, r1
 8005656:	4629      	mov	r1, r5
 8005658:	f7ff ffa6 	bl	80055a8 <sbrk_aligned>
 800565c:	3001      	adds	r0, #1
 800565e:	d03a      	beq.n	80056d6 <_malloc_r+0xea>
 8005660:	6823      	ldr	r3, [r4, #0]
 8005662:	442b      	add	r3, r5
 8005664:	6023      	str	r3, [r4, #0]
 8005666:	f8d8 3000 	ldr.w	r3, [r8]
 800566a:	685a      	ldr	r2, [r3, #4]
 800566c:	bb62      	cbnz	r2, 80056c8 <_malloc_r+0xdc>
 800566e:	f8c8 7000 	str.w	r7, [r8]
 8005672:	e00f      	b.n	8005694 <_malloc_r+0xa8>
 8005674:	6822      	ldr	r2, [r4, #0]
 8005676:	1b52      	subs	r2, r2, r5
 8005678:	d420      	bmi.n	80056bc <_malloc_r+0xd0>
 800567a:	2a0b      	cmp	r2, #11
 800567c:	d917      	bls.n	80056ae <_malloc_r+0xc2>
 800567e:	1961      	adds	r1, r4, r5
 8005680:	42a3      	cmp	r3, r4
 8005682:	6025      	str	r5, [r4, #0]
 8005684:	bf18      	it	ne
 8005686:	6059      	strne	r1, [r3, #4]
 8005688:	6863      	ldr	r3, [r4, #4]
 800568a:	bf08      	it	eq
 800568c:	f8c8 1000 	streq.w	r1, [r8]
 8005690:	5162      	str	r2, [r4, r5]
 8005692:	604b      	str	r3, [r1, #4]
 8005694:	4630      	mov	r0, r6
 8005696:	f000 f82f 	bl	80056f8 <__malloc_unlock>
 800569a:	f104 000b 	add.w	r0, r4, #11
 800569e:	1d23      	adds	r3, r4, #4
 80056a0:	f020 0007 	bic.w	r0, r0, #7
 80056a4:	1ac2      	subs	r2, r0, r3
 80056a6:	bf1c      	itt	ne
 80056a8:	1a1b      	subne	r3, r3, r0
 80056aa:	50a3      	strne	r3, [r4, r2]
 80056ac:	e7af      	b.n	800560e <_malloc_r+0x22>
 80056ae:	6862      	ldr	r2, [r4, #4]
 80056b0:	42a3      	cmp	r3, r4
 80056b2:	bf0c      	ite	eq
 80056b4:	f8c8 2000 	streq.w	r2, [r8]
 80056b8:	605a      	strne	r2, [r3, #4]
 80056ba:	e7eb      	b.n	8005694 <_malloc_r+0xa8>
 80056bc:	4623      	mov	r3, r4
 80056be:	6864      	ldr	r4, [r4, #4]
 80056c0:	e7ae      	b.n	8005620 <_malloc_r+0x34>
 80056c2:	463c      	mov	r4, r7
 80056c4:	687f      	ldr	r7, [r7, #4]
 80056c6:	e7b6      	b.n	8005636 <_malloc_r+0x4a>
 80056c8:	461a      	mov	r2, r3
 80056ca:	685b      	ldr	r3, [r3, #4]
 80056cc:	42a3      	cmp	r3, r4
 80056ce:	d1fb      	bne.n	80056c8 <_malloc_r+0xdc>
 80056d0:	2300      	movs	r3, #0
 80056d2:	6053      	str	r3, [r2, #4]
 80056d4:	e7de      	b.n	8005694 <_malloc_r+0xa8>
 80056d6:	230c      	movs	r3, #12
 80056d8:	4630      	mov	r0, r6
 80056da:	6033      	str	r3, [r6, #0]
 80056dc:	f000 f80c 	bl	80056f8 <__malloc_unlock>
 80056e0:	e794      	b.n	800560c <_malloc_r+0x20>
 80056e2:	6005      	str	r5, [r0, #0]
 80056e4:	e7d6      	b.n	8005694 <_malloc_r+0xa8>
 80056e6:	bf00      	nop
 80056e8:	200003dc 	.word	0x200003dc

080056ec <__malloc_lock>:
 80056ec:	4801      	ldr	r0, [pc, #4]	@ (80056f4 <__malloc_lock+0x8>)
 80056ee:	f7ff b8aa 	b.w	8004846 <__retarget_lock_acquire_recursive>
 80056f2:	bf00      	nop
 80056f4:	200003d4 	.word	0x200003d4

080056f8 <__malloc_unlock>:
 80056f8:	4801      	ldr	r0, [pc, #4]	@ (8005700 <__malloc_unlock+0x8>)
 80056fa:	f7ff b8a5 	b.w	8004848 <__retarget_lock_release_recursive>
 80056fe:	bf00      	nop
 8005700:	200003d4 	.word	0x200003d4

08005704 <_Balloc>:
 8005704:	b570      	push	{r4, r5, r6, lr}
 8005706:	69c6      	ldr	r6, [r0, #28]
 8005708:	4604      	mov	r4, r0
 800570a:	460d      	mov	r5, r1
 800570c:	b976      	cbnz	r6, 800572c <_Balloc+0x28>
 800570e:	2010      	movs	r0, #16
 8005710:	f7ff ff42 	bl	8005598 <malloc>
 8005714:	4602      	mov	r2, r0
 8005716:	61e0      	str	r0, [r4, #28]
 8005718:	b920      	cbnz	r0, 8005724 <_Balloc+0x20>
 800571a:	216b      	movs	r1, #107	@ 0x6b
 800571c:	4b17      	ldr	r3, [pc, #92]	@ (800577c <_Balloc+0x78>)
 800571e:	4818      	ldr	r0, [pc, #96]	@ (8005780 <_Balloc+0x7c>)
 8005720:	f000 fdfa 	bl	8006318 <__assert_func>
 8005724:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005728:	6006      	str	r6, [r0, #0]
 800572a:	60c6      	str	r6, [r0, #12]
 800572c:	69e6      	ldr	r6, [r4, #28]
 800572e:	68f3      	ldr	r3, [r6, #12]
 8005730:	b183      	cbz	r3, 8005754 <_Balloc+0x50>
 8005732:	69e3      	ldr	r3, [r4, #28]
 8005734:	68db      	ldr	r3, [r3, #12]
 8005736:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800573a:	b9b8      	cbnz	r0, 800576c <_Balloc+0x68>
 800573c:	2101      	movs	r1, #1
 800573e:	fa01 f605 	lsl.w	r6, r1, r5
 8005742:	1d72      	adds	r2, r6, #5
 8005744:	4620      	mov	r0, r4
 8005746:	0092      	lsls	r2, r2, #2
 8005748:	f000 fe04 	bl	8006354 <_calloc_r>
 800574c:	b160      	cbz	r0, 8005768 <_Balloc+0x64>
 800574e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005752:	e00e      	b.n	8005772 <_Balloc+0x6e>
 8005754:	2221      	movs	r2, #33	@ 0x21
 8005756:	2104      	movs	r1, #4
 8005758:	4620      	mov	r0, r4
 800575a:	f000 fdfb 	bl	8006354 <_calloc_r>
 800575e:	69e3      	ldr	r3, [r4, #28]
 8005760:	60f0      	str	r0, [r6, #12]
 8005762:	68db      	ldr	r3, [r3, #12]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d1e4      	bne.n	8005732 <_Balloc+0x2e>
 8005768:	2000      	movs	r0, #0
 800576a:	bd70      	pop	{r4, r5, r6, pc}
 800576c:	6802      	ldr	r2, [r0, #0]
 800576e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005772:	2300      	movs	r3, #0
 8005774:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005778:	e7f7      	b.n	800576a <_Balloc+0x66>
 800577a:	bf00      	nop
 800577c:	0800691b 	.word	0x0800691b
 8005780:	0800699b 	.word	0x0800699b

08005784 <_Bfree>:
 8005784:	b570      	push	{r4, r5, r6, lr}
 8005786:	69c6      	ldr	r6, [r0, #28]
 8005788:	4605      	mov	r5, r0
 800578a:	460c      	mov	r4, r1
 800578c:	b976      	cbnz	r6, 80057ac <_Bfree+0x28>
 800578e:	2010      	movs	r0, #16
 8005790:	f7ff ff02 	bl	8005598 <malloc>
 8005794:	4602      	mov	r2, r0
 8005796:	61e8      	str	r0, [r5, #28]
 8005798:	b920      	cbnz	r0, 80057a4 <_Bfree+0x20>
 800579a:	218f      	movs	r1, #143	@ 0x8f
 800579c:	4b08      	ldr	r3, [pc, #32]	@ (80057c0 <_Bfree+0x3c>)
 800579e:	4809      	ldr	r0, [pc, #36]	@ (80057c4 <_Bfree+0x40>)
 80057a0:	f000 fdba 	bl	8006318 <__assert_func>
 80057a4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80057a8:	6006      	str	r6, [r0, #0]
 80057aa:	60c6      	str	r6, [r0, #12]
 80057ac:	b13c      	cbz	r4, 80057be <_Bfree+0x3a>
 80057ae:	69eb      	ldr	r3, [r5, #28]
 80057b0:	6862      	ldr	r2, [r4, #4]
 80057b2:	68db      	ldr	r3, [r3, #12]
 80057b4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80057b8:	6021      	str	r1, [r4, #0]
 80057ba:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80057be:	bd70      	pop	{r4, r5, r6, pc}
 80057c0:	0800691b 	.word	0x0800691b
 80057c4:	0800699b 	.word	0x0800699b

080057c8 <__multadd>:
 80057c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80057cc:	4607      	mov	r7, r0
 80057ce:	460c      	mov	r4, r1
 80057d0:	461e      	mov	r6, r3
 80057d2:	2000      	movs	r0, #0
 80057d4:	690d      	ldr	r5, [r1, #16]
 80057d6:	f101 0c14 	add.w	ip, r1, #20
 80057da:	f8dc 3000 	ldr.w	r3, [ip]
 80057de:	3001      	adds	r0, #1
 80057e0:	b299      	uxth	r1, r3
 80057e2:	fb02 6101 	mla	r1, r2, r1, r6
 80057e6:	0c1e      	lsrs	r6, r3, #16
 80057e8:	0c0b      	lsrs	r3, r1, #16
 80057ea:	fb02 3306 	mla	r3, r2, r6, r3
 80057ee:	b289      	uxth	r1, r1
 80057f0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80057f4:	4285      	cmp	r5, r0
 80057f6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80057fa:	f84c 1b04 	str.w	r1, [ip], #4
 80057fe:	dcec      	bgt.n	80057da <__multadd+0x12>
 8005800:	b30e      	cbz	r6, 8005846 <__multadd+0x7e>
 8005802:	68a3      	ldr	r3, [r4, #8]
 8005804:	42ab      	cmp	r3, r5
 8005806:	dc19      	bgt.n	800583c <__multadd+0x74>
 8005808:	6861      	ldr	r1, [r4, #4]
 800580a:	4638      	mov	r0, r7
 800580c:	3101      	adds	r1, #1
 800580e:	f7ff ff79 	bl	8005704 <_Balloc>
 8005812:	4680      	mov	r8, r0
 8005814:	b928      	cbnz	r0, 8005822 <__multadd+0x5a>
 8005816:	4602      	mov	r2, r0
 8005818:	21ba      	movs	r1, #186	@ 0xba
 800581a:	4b0c      	ldr	r3, [pc, #48]	@ (800584c <__multadd+0x84>)
 800581c:	480c      	ldr	r0, [pc, #48]	@ (8005850 <__multadd+0x88>)
 800581e:	f000 fd7b 	bl	8006318 <__assert_func>
 8005822:	6922      	ldr	r2, [r4, #16]
 8005824:	f104 010c 	add.w	r1, r4, #12
 8005828:	3202      	adds	r2, #2
 800582a:	0092      	lsls	r2, r2, #2
 800582c:	300c      	adds	r0, #12
 800582e:	f000 fd65 	bl	80062fc <memcpy>
 8005832:	4621      	mov	r1, r4
 8005834:	4638      	mov	r0, r7
 8005836:	f7ff ffa5 	bl	8005784 <_Bfree>
 800583a:	4644      	mov	r4, r8
 800583c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005840:	3501      	adds	r5, #1
 8005842:	615e      	str	r6, [r3, #20]
 8005844:	6125      	str	r5, [r4, #16]
 8005846:	4620      	mov	r0, r4
 8005848:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800584c:	0800698a 	.word	0x0800698a
 8005850:	0800699b 	.word	0x0800699b

08005854 <__hi0bits>:
 8005854:	4603      	mov	r3, r0
 8005856:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800585a:	bf3a      	itte	cc
 800585c:	0403      	lslcc	r3, r0, #16
 800585e:	2010      	movcc	r0, #16
 8005860:	2000      	movcs	r0, #0
 8005862:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005866:	bf3c      	itt	cc
 8005868:	021b      	lslcc	r3, r3, #8
 800586a:	3008      	addcc	r0, #8
 800586c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005870:	bf3c      	itt	cc
 8005872:	011b      	lslcc	r3, r3, #4
 8005874:	3004      	addcc	r0, #4
 8005876:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800587a:	bf3c      	itt	cc
 800587c:	009b      	lslcc	r3, r3, #2
 800587e:	3002      	addcc	r0, #2
 8005880:	2b00      	cmp	r3, #0
 8005882:	db05      	blt.n	8005890 <__hi0bits+0x3c>
 8005884:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8005888:	f100 0001 	add.w	r0, r0, #1
 800588c:	bf08      	it	eq
 800588e:	2020      	moveq	r0, #32
 8005890:	4770      	bx	lr

08005892 <__lo0bits>:
 8005892:	6803      	ldr	r3, [r0, #0]
 8005894:	4602      	mov	r2, r0
 8005896:	f013 0007 	ands.w	r0, r3, #7
 800589a:	d00b      	beq.n	80058b4 <__lo0bits+0x22>
 800589c:	07d9      	lsls	r1, r3, #31
 800589e:	d421      	bmi.n	80058e4 <__lo0bits+0x52>
 80058a0:	0798      	lsls	r0, r3, #30
 80058a2:	bf49      	itett	mi
 80058a4:	085b      	lsrmi	r3, r3, #1
 80058a6:	089b      	lsrpl	r3, r3, #2
 80058a8:	2001      	movmi	r0, #1
 80058aa:	6013      	strmi	r3, [r2, #0]
 80058ac:	bf5c      	itt	pl
 80058ae:	2002      	movpl	r0, #2
 80058b0:	6013      	strpl	r3, [r2, #0]
 80058b2:	4770      	bx	lr
 80058b4:	b299      	uxth	r1, r3
 80058b6:	b909      	cbnz	r1, 80058bc <__lo0bits+0x2a>
 80058b8:	2010      	movs	r0, #16
 80058ba:	0c1b      	lsrs	r3, r3, #16
 80058bc:	b2d9      	uxtb	r1, r3
 80058be:	b909      	cbnz	r1, 80058c4 <__lo0bits+0x32>
 80058c0:	3008      	adds	r0, #8
 80058c2:	0a1b      	lsrs	r3, r3, #8
 80058c4:	0719      	lsls	r1, r3, #28
 80058c6:	bf04      	itt	eq
 80058c8:	091b      	lsreq	r3, r3, #4
 80058ca:	3004      	addeq	r0, #4
 80058cc:	0799      	lsls	r1, r3, #30
 80058ce:	bf04      	itt	eq
 80058d0:	089b      	lsreq	r3, r3, #2
 80058d2:	3002      	addeq	r0, #2
 80058d4:	07d9      	lsls	r1, r3, #31
 80058d6:	d403      	bmi.n	80058e0 <__lo0bits+0x4e>
 80058d8:	085b      	lsrs	r3, r3, #1
 80058da:	f100 0001 	add.w	r0, r0, #1
 80058de:	d003      	beq.n	80058e8 <__lo0bits+0x56>
 80058e0:	6013      	str	r3, [r2, #0]
 80058e2:	4770      	bx	lr
 80058e4:	2000      	movs	r0, #0
 80058e6:	4770      	bx	lr
 80058e8:	2020      	movs	r0, #32
 80058ea:	4770      	bx	lr

080058ec <__i2b>:
 80058ec:	b510      	push	{r4, lr}
 80058ee:	460c      	mov	r4, r1
 80058f0:	2101      	movs	r1, #1
 80058f2:	f7ff ff07 	bl	8005704 <_Balloc>
 80058f6:	4602      	mov	r2, r0
 80058f8:	b928      	cbnz	r0, 8005906 <__i2b+0x1a>
 80058fa:	f240 1145 	movw	r1, #325	@ 0x145
 80058fe:	4b04      	ldr	r3, [pc, #16]	@ (8005910 <__i2b+0x24>)
 8005900:	4804      	ldr	r0, [pc, #16]	@ (8005914 <__i2b+0x28>)
 8005902:	f000 fd09 	bl	8006318 <__assert_func>
 8005906:	2301      	movs	r3, #1
 8005908:	6144      	str	r4, [r0, #20]
 800590a:	6103      	str	r3, [r0, #16]
 800590c:	bd10      	pop	{r4, pc}
 800590e:	bf00      	nop
 8005910:	0800698a 	.word	0x0800698a
 8005914:	0800699b 	.word	0x0800699b

08005918 <__multiply>:
 8005918:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800591c:	4614      	mov	r4, r2
 800591e:	690a      	ldr	r2, [r1, #16]
 8005920:	6923      	ldr	r3, [r4, #16]
 8005922:	460f      	mov	r7, r1
 8005924:	429a      	cmp	r2, r3
 8005926:	bfa2      	ittt	ge
 8005928:	4623      	movge	r3, r4
 800592a:	460c      	movge	r4, r1
 800592c:	461f      	movge	r7, r3
 800592e:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8005932:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8005936:	68a3      	ldr	r3, [r4, #8]
 8005938:	6861      	ldr	r1, [r4, #4]
 800593a:	eb0a 0609 	add.w	r6, sl, r9
 800593e:	42b3      	cmp	r3, r6
 8005940:	b085      	sub	sp, #20
 8005942:	bfb8      	it	lt
 8005944:	3101      	addlt	r1, #1
 8005946:	f7ff fedd 	bl	8005704 <_Balloc>
 800594a:	b930      	cbnz	r0, 800595a <__multiply+0x42>
 800594c:	4602      	mov	r2, r0
 800594e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8005952:	4b43      	ldr	r3, [pc, #268]	@ (8005a60 <__multiply+0x148>)
 8005954:	4843      	ldr	r0, [pc, #268]	@ (8005a64 <__multiply+0x14c>)
 8005956:	f000 fcdf 	bl	8006318 <__assert_func>
 800595a:	f100 0514 	add.w	r5, r0, #20
 800595e:	462b      	mov	r3, r5
 8005960:	2200      	movs	r2, #0
 8005962:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005966:	4543      	cmp	r3, r8
 8005968:	d321      	bcc.n	80059ae <__multiply+0x96>
 800596a:	f107 0114 	add.w	r1, r7, #20
 800596e:	f104 0214 	add.w	r2, r4, #20
 8005972:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8005976:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800597a:	9302      	str	r3, [sp, #8]
 800597c:	1b13      	subs	r3, r2, r4
 800597e:	3b15      	subs	r3, #21
 8005980:	f023 0303 	bic.w	r3, r3, #3
 8005984:	3304      	adds	r3, #4
 8005986:	f104 0715 	add.w	r7, r4, #21
 800598a:	42ba      	cmp	r2, r7
 800598c:	bf38      	it	cc
 800598e:	2304      	movcc	r3, #4
 8005990:	9301      	str	r3, [sp, #4]
 8005992:	9b02      	ldr	r3, [sp, #8]
 8005994:	9103      	str	r1, [sp, #12]
 8005996:	428b      	cmp	r3, r1
 8005998:	d80c      	bhi.n	80059b4 <__multiply+0x9c>
 800599a:	2e00      	cmp	r6, #0
 800599c:	dd03      	ble.n	80059a6 <__multiply+0x8e>
 800599e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d05a      	beq.n	8005a5c <__multiply+0x144>
 80059a6:	6106      	str	r6, [r0, #16]
 80059a8:	b005      	add	sp, #20
 80059aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059ae:	f843 2b04 	str.w	r2, [r3], #4
 80059b2:	e7d8      	b.n	8005966 <__multiply+0x4e>
 80059b4:	f8b1 a000 	ldrh.w	sl, [r1]
 80059b8:	f1ba 0f00 	cmp.w	sl, #0
 80059bc:	d023      	beq.n	8005a06 <__multiply+0xee>
 80059be:	46a9      	mov	r9, r5
 80059c0:	f04f 0c00 	mov.w	ip, #0
 80059c4:	f104 0e14 	add.w	lr, r4, #20
 80059c8:	f85e 7b04 	ldr.w	r7, [lr], #4
 80059cc:	f8d9 3000 	ldr.w	r3, [r9]
 80059d0:	fa1f fb87 	uxth.w	fp, r7
 80059d4:	b29b      	uxth	r3, r3
 80059d6:	fb0a 330b 	mla	r3, sl, fp, r3
 80059da:	4463      	add	r3, ip
 80059dc:	f8d9 c000 	ldr.w	ip, [r9]
 80059e0:	0c3f      	lsrs	r7, r7, #16
 80059e2:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80059e6:	fb0a c707 	mla	r7, sl, r7, ip
 80059ea:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80059ee:	b29b      	uxth	r3, r3
 80059f0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80059f4:	4572      	cmp	r2, lr
 80059f6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80059fa:	f849 3b04 	str.w	r3, [r9], #4
 80059fe:	d8e3      	bhi.n	80059c8 <__multiply+0xb0>
 8005a00:	9b01      	ldr	r3, [sp, #4]
 8005a02:	f845 c003 	str.w	ip, [r5, r3]
 8005a06:	9b03      	ldr	r3, [sp, #12]
 8005a08:	3104      	adds	r1, #4
 8005a0a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8005a0e:	f1b9 0f00 	cmp.w	r9, #0
 8005a12:	d021      	beq.n	8005a58 <__multiply+0x140>
 8005a14:	46ae      	mov	lr, r5
 8005a16:	f04f 0a00 	mov.w	sl, #0
 8005a1a:	682b      	ldr	r3, [r5, #0]
 8005a1c:	f104 0c14 	add.w	ip, r4, #20
 8005a20:	f8bc b000 	ldrh.w	fp, [ip]
 8005a24:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8005a28:	b29b      	uxth	r3, r3
 8005a2a:	fb09 770b 	mla	r7, r9, fp, r7
 8005a2e:	4457      	add	r7, sl
 8005a30:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8005a34:	f84e 3b04 	str.w	r3, [lr], #4
 8005a38:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005a3c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005a40:	f8be 3000 	ldrh.w	r3, [lr]
 8005a44:	4562      	cmp	r2, ip
 8005a46:	fb09 330a 	mla	r3, r9, sl, r3
 8005a4a:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8005a4e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005a52:	d8e5      	bhi.n	8005a20 <__multiply+0x108>
 8005a54:	9f01      	ldr	r7, [sp, #4]
 8005a56:	51eb      	str	r3, [r5, r7]
 8005a58:	3504      	adds	r5, #4
 8005a5a:	e79a      	b.n	8005992 <__multiply+0x7a>
 8005a5c:	3e01      	subs	r6, #1
 8005a5e:	e79c      	b.n	800599a <__multiply+0x82>
 8005a60:	0800698a 	.word	0x0800698a
 8005a64:	0800699b 	.word	0x0800699b

08005a68 <__pow5mult>:
 8005a68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005a6c:	4615      	mov	r5, r2
 8005a6e:	f012 0203 	ands.w	r2, r2, #3
 8005a72:	4607      	mov	r7, r0
 8005a74:	460e      	mov	r6, r1
 8005a76:	d007      	beq.n	8005a88 <__pow5mult+0x20>
 8005a78:	4c25      	ldr	r4, [pc, #148]	@ (8005b10 <__pow5mult+0xa8>)
 8005a7a:	3a01      	subs	r2, #1
 8005a7c:	2300      	movs	r3, #0
 8005a7e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005a82:	f7ff fea1 	bl	80057c8 <__multadd>
 8005a86:	4606      	mov	r6, r0
 8005a88:	10ad      	asrs	r5, r5, #2
 8005a8a:	d03d      	beq.n	8005b08 <__pow5mult+0xa0>
 8005a8c:	69fc      	ldr	r4, [r7, #28]
 8005a8e:	b97c      	cbnz	r4, 8005ab0 <__pow5mult+0x48>
 8005a90:	2010      	movs	r0, #16
 8005a92:	f7ff fd81 	bl	8005598 <malloc>
 8005a96:	4602      	mov	r2, r0
 8005a98:	61f8      	str	r0, [r7, #28]
 8005a9a:	b928      	cbnz	r0, 8005aa8 <__pow5mult+0x40>
 8005a9c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8005aa0:	4b1c      	ldr	r3, [pc, #112]	@ (8005b14 <__pow5mult+0xac>)
 8005aa2:	481d      	ldr	r0, [pc, #116]	@ (8005b18 <__pow5mult+0xb0>)
 8005aa4:	f000 fc38 	bl	8006318 <__assert_func>
 8005aa8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005aac:	6004      	str	r4, [r0, #0]
 8005aae:	60c4      	str	r4, [r0, #12]
 8005ab0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8005ab4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005ab8:	b94c      	cbnz	r4, 8005ace <__pow5mult+0x66>
 8005aba:	f240 2171 	movw	r1, #625	@ 0x271
 8005abe:	4638      	mov	r0, r7
 8005ac0:	f7ff ff14 	bl	80058ec <__i2b>
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	4604      	mov	r4, r0
 8005ac8:	f8c8 0008 	str.w	r0, [r8, #8]
 8005acc:	6003      	str	r3, [r0, #0]
 8005ace:	f04f 0900 	mov.w	r9, #0
 8005ad2:	07eb      	lsls	r3, r5, #31
 8005ad4:	d50a      	bpl.n	8005aec <__pow5mult+0x84>
 8005ad6:	4631      	mov	r1, r6
 8005ad8:	4622      	mov	r2, r4
 8005ada:	4638      	mov	r0, r7
 8005adc:	f7ff ff1c 	bl	8005918 <__multiply>
 8005ae0:	4680      	mov	r8, r0
 8005ae2:	4631      	mov	r1, r6
 8005ae4:	4638      	mov	r0, r7
 8005ae6:	f7ff fe4d 	bl	8005784 <_Bfree>
 8005aea:	4646      	mov	r6, r8
 8005aec:	106d      	asrs	r5, r5, #1
 8005aee:	d00b      	beq.n	8005b08 <__pow5mult+0xa0>
 8005af0:	6820      	ldr	r0, [r4, #0]
 8005af2:	b938      	cbnz	r0, 8005b04 <__pow5mult+0x9c>
 8005af4:	4622      	mov	r2, r4
 8005af6:	4621      	mov	r1, r4
 8005af8:	4638      	mov	r0, r7
 8005afa:	f7ff ff0d 	bl	8005918 <__multiply>
 8005afe:	6020      	str	r0, [r4, #0]
 8005b00:	f8c0 9000 	str.w	r9, [r0]
 8005b04:	4604      	mov	r4, r0
 8005b06:	e7e4      	b.n	8005ad2 <__pow5mult+0x6a>
 8005b08:	4630      	mov	r0, r6
 8005b0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005b0e:	bf00      	nop
 8005b10:	080069f4 	.word	0x080069f4
 8005b14:	0800691b 	.word	0x0800691b
 8005b18:	0800699b 	.word	0x0800699b

08005b1c <__lshift>:
 8005b1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b20:	460c      	mov	r4, r1
 8005b22:	4607      	mov	r7, r0
 8005b24:	4691      	mov	r9, r2
 8005b26:	6923      	ldr	r3, [r4, #16]
 8005b28:	6849      	ldr	r1, [r1, #4]
 8005b2a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005b2e:	68a3      	ldr	r3, [r4, #8]
 8005b30:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005b34:	f108 0601 	add.w	r6, r8, #1
 8005b38:	42b3      	cmp	r3, r6
 8005b3a:	db0b      	blt.n	8005b54 <__lshift+0x38>
 8005b3c:	4638      	mov	r0, r7
 8005b3e:	f7ff fde1 	bl	8005704 <_Balloc>
 8005b42:	4605      	mov	r5, r0
 8005b44:	b948      	cbnz	r0, 8005b5a <__lshift+0x3e>
 8005b46:	4602      	mov	r2, r0
 8005b48:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8005b4c:	4b27      	ldr	r3, [pc, #156]	@ (8005bec <__lshift+0xd0>)
 8005b4e:	4828      	ldr	r0, [pc, #160]	@ (8005bf0 <__lshift+0xd4>)
 8005b50:	f000 fbe2 	bl	8006318 <__assert_func>
 8005b54:	3101      	adds	r1, #1
 8005b56:	005b      	lsls	r3, r3, #1
 8005b58:	e7ee      	b.n	8005b38 <__lshift+0x1c>
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	f100 0114 	add.w	r1, r0, #20
 8005b60:	f100 0210 	add.w	r2, r0, #16
 8005b64:	4618      	mov	r0, r3
 8005b66:	4553      	cmp	r3, sl
 8005b68:	db33      	blt.n	8005bd2 <__lshift+0xb6>
 8005b6a:	6920      	ldr	r0, [r4, #16]
 8005b6c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005b70:	f104 0314 	add.w	r3, r4, #20
 8005b74:	f019 091f 	ands.w	r9, r9, #31
 8005b78:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005b7c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005b80:	d02b      	beq.n	8005bda <__lshift+0xbe>
 8005b82:	468a      	mov	sl, r1
 8005b84:	2200      	movs	r2, #0
 8005b86:	f1c9 0e20 	rsb	lr, r9, #32
 8005b8a:	6818      	ldr	r0, [r3, #0]
 8005b8c:	fa00 f009 	lsl.w	r0, r0, r9
 8005b90:	4310      	orrs	r0, r2
 8005b92:	f84a 0b04 	str.w	r0, [sl], #4
 8005b96:	f853 2b04 	ldr.w	r2, [r3], #4
 8005b9a:	459c      	cmp	ip, r3
 8005b9c:	fa22 f20e 	lsr.w	r2, r2, lr
 8005ba0:	d8f3      	bhi.n	8005b8a <__lshift+0x6e>
 8005ba2:	ebac 0304 	sub.w	r3, ip, r4
 8005ba6:	3b15      	subs	r3, #21
 8005ba8:	f023 0303 	bic.w	r3, r3, #3
 8005bac:	3304      	adds	r3, #4
 8005bae:	f104 0015 	add.w	r0, r4, #21
 8005bb2:	4584      	cmp	ip, r0
 8005bb4:	bf38      	it	cc
 8005bb6:	2304      	movcc	r3, #4
 8005bb8:	50ca      	str	r2, [r1, r3]
 8005bba:	b10a      	cbz	r2, 8005bc0 <__lshift+0xa4>
 8005bbc:	f108 0602 	add.w	r6, r8, #2
 8005bc0:	3e01      	subs	r6, #1
 8005bc2:	4638      	mov	r0, r7
 8005bc4:	4621      	mov	r1, r4
 8005bc6:	612e      	str	r6, [r5, #16]
 8005bc8:	f7ff fddc 	bl	8005784 <_Bfree>
 8005bcc:	4628      	mov	r0, r5
 8005bce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005bd2:	f842 0f04 	str.w	r0, [r2, #4]!
 8005bd6:	3301      	adds	r3, #1
 8005bd8:	e7c5      	b.n	8005b66 <__lshift+0x4a>
 8005bda:	3904      	subs	r1, #4
 8005bdc:	f853 2b04 	ldr.w	r2, [r3], #4
 8005be0:	459c      	cmp	ip, r3
 8005be2:	f841 2f04 	str.w	r2, [r1, #4]!
 8005be6:	d8f9      	bhi.n	8005bdc <__lshift+0xc0>
 8005be8:	e7ea      	b.n	8005bc0 <__lshift+0xa4>
 8005bea:	bf00      	nop
 8005bec:	0800698a 	.word	0x0800698a
 8005bf0:	0800699b 	.word	0x0800699b

08005bf4 <__mcmp>:
 8005bf4:	4603      	mov	r3, r0
 8005bf6:	690a      	ldr	r2, [r1, #16]
 8005bf8:	6900      	ldr	r0, [r0, #16]
 8005bfa:	b530      	push	{r4, r5, lr}
 8005bfc:	1a80      	subs	r0, r0, r2
 8005bfe:	d10e      	bne.n	8005c1e <__mcmp+0x2a>
 8005c00:	3314      	adds	r3, #20
 8005c02:	3114      	adds	r1, #20
 8005c04:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8005c08:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8005c0c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005c10:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005c14:	4295      	cmp	r5, r2
 8005c16:	d003      	beq.n	8005c20 <__mcmp+0x2c>
 8005c18:	d205      	bcs.n	8005c26 <__mcmp+0x32>
 8005c1a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005c1e:	bd30      	pop	{r4, r5, pc}
 8005c20:	42a3      	cmp	r3, r4
 8005c22:	d3f3      	bcc.n	8005c0c <__mcmp+0x18>
 8005c24:	e7fb      	b.n	8005c1e <__mcmp+0x2a>
 8005c26:	2001      	movs	r0, #1
 8005c28:	e7f9      	b.n	8005c1e <__mcmp+0x2a>
	...

08005c2c <__mdiff>:
 8005c2c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c30:	4689      	mov	r9, r1
 8005c32:	4606      	mov	r6, r0
 8005c34:	4611      	mov	r1, r2
 8005c36:	4648      	mov	r0, r9
 8005c38:	4614      	mov	r4, r2
 8005c3a:	f7ff ffdb 	bl	8005bf4 <__mcmp>
 8005c3e:	1e05      	subs	r5, r0, #0
 8005c40:	d112      	bne.n	8005c68 <__mdiff+0x3c>
 8005c42:	4629      	mov	r1, r5
 8005c44:	4630      	mov	r0, r6
 8005c46:	f7ff fd5d 	bl	8005704 <_Balloc>
 8005c4a:	4602      	mov	r2, r0
 8005c4c:	b928      	cbnz	r0, 8005c5a <__mdiff+0x2e>
 8005c4e:	f240 2137 	movw	r1, #567	@ 0x237
 8005c52:	4b3e      	ldr	r3, [pc, #248]	@ (8005d4c <__mdiff+0x120>)
 8005c54:	483e      	ldr	r0, [pc, #248]	@ (8005d50 <__mdiff+0x124>)
 8005c56:	f000 fb5f 	bl	8006318 <__assert_func>
 8005c5a:	2301      	movs	r3, #1
 8005c5c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005c60:	4610      	mov	r0, r2
 8005c62:	b003      	add	sp, #12
 8005c64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c68:	bfbc      	itt	lt
 8005c6a:	464b      	movlt	r3, r9
 8005c6c:	46a1      	movlt	r9, r4
 8005c6e:	4630      	mov	r0, r6
 8005c70:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8005c74:	bfba      	itte	lt
 8005c76:	461c      	movlt	r4, r3
 8005c78:	2501      	movlt	r5, #1
 8005c7a:	2500      	movge	r5, #0
 8005c7c:	f7ff fd42 	bl	8005704 <_Balloc>
 8005c80:	4602      	mov	r2, r0
 8005c82:	b918      	cbnz	r0, 8005c8c <__mdiff+0x60>
 8005c84:	f240 2145 	movw	r1, #581	@ 0x245
 8005c88:	4b30      	ldr	r3, [pc, #192]	@ (8005d4c <__mdiff+0x120>)
 8005c8a:	e7e3      	b.n	8005c54 <__mdiff+0x28>
 8005c8c:	f100 0b14 	add.w	fp, r0, #20
 8005c90:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8005c94:	f109 0310 	add.w	r3, r9, #16
 8005c98:	60c5      	str	r5, [r0, #12]
 8005c9a:	f04f 0c00 	mov.w	ip, #0
 8005c9e:	f109 0514 	add.w	r5, r9, #20
 8005ca2:	46d9      	mov	r9, fp
 8005ca4:	6926      	ldr	r6, [r4, #16]
 8005ca6:	f104 0e14 	add.w	lr, r4, #20
 8005caa:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8005cae:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8005cb2:	9301      	str	r3, [sp, #4]
 8005cb4:	9b01      	ldr	r3, [sp, #4]
 8005cb6:	f85e 0b04 	ldr.w	r0, [lr], #4
 8005cba:	f853 af04 	ldr.w	sl, [r3, #4]!
 8005cbe:	b281      	uxth	r1, r0
 8005cc0:	9301      	str	r3, [sp, #4]
 8005cc2:	fa1f f38a 	uxth.w	r3, sl
 8005cc6:	1a5b      	subs	r3, r3, r1
 8005cc8:	0c00      	lsrs	r0, r0, #16
 8005cca:	4463      	add	r3, ip
 8005ccc:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8005cd0:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8005cd4:	b29b      	uxth	r3, r3
 8005cd6:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8005cda:	4576      	cmp	r6, lr
 8005cdc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005ce0:	f849 3b04 	str.w	r3, [r9], #4
 8005ce4:	d8e6      	bhi.n	8005cb4 <__mdiff+0x88>
 8005ce6:	1b33      	subs	r3, r6, r4
 8005ce8:	3b15      	subs	r3, #21
 8005cea:	f023 0303 	bic.w	r3, r3, #3
 8005cee:	3415      	adds	r4, #21
 8005cf0:	3304      	adds	r3, #4
 8005cf2:	42a6      	cmp	r6, r4
 8005cf4:	bf38      	it	cc
 8005cf6:	2304      	movcc	r3, #4
 8005cf8:	441d      	add	r5, r3
 8005cfa:	445b      	add	r3, fp
 8005cfc:	461e      	mov	r6, r3
 8005cfe:	462c      	mov	r4, r5
 8005d00:	4544      	cmp	r4, r8
 8005d02:	d30e      	bcc.n	8005d22 <__mdiff+0xf6>
 8005d04:	f108 0103 	add.w	r1, r8, #3
 8005d08:	1b49      	subs	r1, r1, r5
 8005d0a:	f021 0103 	bic.w	r1, r1, #3
 8005d0e:	3d03      	subs	r5, #3
 8005d10:	45a8      	cmp	r8, r5
 8005d12:	bf38      	it	cc
 8005d14:	2100      	movcc	r1, #0
 8005d16:	440b      	add	r3, r1
 8005d18:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8005d1c:	b199      	cbz	r1, 8005d46 <__mdiff+0x11a>
 8005d1e:	6117      	str	r7, [r2, #16]
 8005d20:	e79e      	b.n	8005c60 <__mdiff+0x34>
 8005d22:	46e6      	mov	lr, ip
 8005d24:	f854 1b04 	ldr.w	r1, [r4], #4
 8005d28:	fa1f fc81 	uxth.w	ip, r1
 8005d2c:	44f4      	add	ip, lr
 8005d2e:	0c08      	lsrs	r0, r1, #16
 8005d30:	4471      	add	r1, lr
 8005d32:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8005d36:	b289      	uxth	r1, r1
 8005d38:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8005d3c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005d40:	f846 1b04 	str.w	r1, [r6], #4
 8005d44:	e7dc      	b.n	8005d00 <__mdiff+0xd4>
 8005d46:	3f01      	subs	r7, #1
 8005d48:	e7e6      	b.n	8005d18 <__mdiff+0xec>
 8005d4a:	bf00      	nop
 8005d4c:	0800698a 	.word	0x0800698a
 8005d50:	0800699b 	.word	0x0800699b

08005d54 <__d2b>:
 8005d54:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8005d58:	2101      	movs	r1, #1
 8005d5a:	4690      	mov	r8, r2
 8005d5c:	4699      	mov	r9, r3
 8005d5e:	9e08      	ldr	r6, [sp, #32]
 8005d60:	f7ff fcd0 	bl	8005704 <_Balloc>
 8005d64:	4604      	mov	r4, r0
 8005d66:	b930      	cbnz	r0, 8005d76 <__d2b+0x22>
 8005d68:	4602      	mov	r2, r0
 8005d6a:	f240 310f 	movw	r1, #783	@ 0x30f
 8005d6e:	4b23      	ldr	r3, [pc, #140]	@ (8005dfc <__d2b+0xa8>)
 8005d70:	4823      	ldr	r0, [pc, #140]	@ (8005e00 <__d2b+0xac>)
 8005d72:	f000 fad1 	bl	8006318 <__assert_func>
 8005d76:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8005d7a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005d7e:	b10d      	cbz	r5, 8005d84 <__d2b+0x30>
 8005d80:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005d84:	9301      	str	r3, [sp, #4]
 8005d86:	f1b8 0300 	subs.w	r3, r8, #0
 8005d8a:	d024      	beq.n	8005dd6 <__d2b+0x82>
 8005d8c:	4668      	mov	r0, sp
 8005d8e:	9300      	str	r3, [sp, #0]
 8005d90:	f7ff fd7f 	bl	8005892 <__lo0bits>
 8005d94:	e9dd 1200 	ldrd	r1, r2, [sp]
 8005d98:	b1d8      	cbz	r0, 8005dd2 <__d2b+0x7e>
 8005d9a:	f1c0 0320 	rsb	r3, r0, #32
 8005d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8005da2:	430b      	orrs	r3, r1
 8005da4:	40c2      	lsrs	r2, r0
 8005da6:	6163      	str	r3, [r4, #20]
 8005da8:	9201      	str	r2, [sp, #4]
 8005daa:	9b01      	ldr	r3, [sp, #4]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	bf0c      	ite	eq
 8005db0:	2201      	moveq	r2, #1
 8005db2:	2202      	movne	r2, #2
 8005db4:	61a3      	str	r3, [r4, #24]
 8005db6:	6122      	str	r2, [r4, #16]
 8005db8:	b1ad      	cbz	r5, 8005de6 <__d2b+0x92>
 8005dba:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8005dbe:	4405      	add	r5, r0
 8005dc0:	6035      	str	r5, [r6, #0]
 8005dc2:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8005dc6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005dc8:	6018      	str	r0, [r3, #0]
 8005dca:	4620      	mov	r0, r4
 8005dcc:	b002      	add	sp, #8
 8005dce:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8005dd2:	6161      	str	r1, [r4, #20]
 8005dd4:	e7e9      	b.n	8005daa <__d2b+0x56>
 8005dd6:	a801      	add	r0, sp, #4
 8005dd8:	f7ff fd5b 	bl	8005892 <__lo0bits>
 8005ddc:	9b01      	ldr	r3, [sp, #4]
 8005dde:	2201      	movs	r2, #1
 8005de0:	6163      	str	r3, [r4, #20]
 8005de2:	3020      	adds	r0, #32
 8005de4:	e7e7      	b.n	8005db6 <__d2b+0x62>
 8005de6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8005dea:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005dee:	6030      	str	r0, [r6, #0]
 8005df0:	6918      	ldr	r0, [r3, #16]
 8005df2:	f7ff fd2f 	bl	8005854 <__hi0bits>
 8005df6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8005dfa:	e7e4      	b.n	8005dc6 <__d2b+0x72>
 8005dfc:	0800698a 	.word	0x0800698a
 8005e00:	0800699b 	.word	0x0800699b

08005e04 <__sfputc_r>:
 8005e04:	6893      	ldr	r3, [r2, #8]
 8005e06:	b410      	push	{r4}
 8005e08:	3b01      	subs	r3, #1
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	6093      	str	r3, [r2, #8]
 8005e0e:	da07      	bge.n	8005e20 <__sfputc_r+0x1c>
 8005e10:	6994      	ldr	r4, [r2, #24]
 8005e12:	42a3      	cmp	r3, r4
 8005e14:	db01      	blt.n	8005e1a <__sfputc_r+0x16>
 8005e16:	290a      	cmp	r1, #10
 8005e18:	d102      	bne.n	8005e20 <__sfputc_r+0x1c>
 8005e1a:	bc10      	pop	{r4}
 8005e1c:	f7fe bc01 	b.w	8004622 <__swbuf_r>
 8005e20:	6813      	ldr	r3, [r2, #0]
 8005e22:	1c58      	adds	r0, r3, #1
 8005e24:	6010      	str	r0, [r2, #0]
 8005e26:	7019      	strb	r1, [r3, #0]
 8005e28:	4608      	mov	r0, r1
 8005e2a:	bc10      	pop	{r4}
 8005e2c:	4770      	bx	lr

08005e2e <__sfputs_r>:
 8005e2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e30:	4606      	mov	r6, r0
 8005e32:	460f      	mov	r7, r1
 8005e34:	4614      	mov	r4, r2
 8005e36:	18d5      	adds	r5, r2, r3
 8005e38:	42ac      	cmp	r4, r5
 8005e3a:	d101      	bne.n	8005e40 <__sfputs_r+0x12>
 8005e3c:	2000      	movs	r0, #0
 8005e3e:	e007      	b.n	8005e50 <__sfputs_r+0x22>
 8005e40:	463a      	mov	r2, r7
 8005e42:	4630      	mov	r0, r6
 8005e44:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e48:	f7ff ffdc 	bl	8005e04 <__sfputc_r>
 8005e4c:	1c43      	adds	r3, r0, #1
 8005e4e:	d1f3      	bne.n	8005e38 <__sfputs_r+0xa>
 8005e50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005e54 <_vfiprintf_r>:
 8005e54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e58:	460d      	mov	r5, r1
 8005e5a:	4614      	mov	r4, r2
 8005e5c:	4698      	mov	r8, r3
 8005e5e:	4606      	mov	r6, r0
 8005e60:	b09d      	sub	sp, #116	@ 0x74
 8005e62:	b118      	cbz	r0, 8005e6c <_vfiprintf_r+0x18>
 8005e64:	6a03      	ldr	r3, [r0, #32]
 8005e66:	b90b      	cbnz	r3, 8005e6c <_vfiprintf_r+0x18>
 8005e68:	f7fe faf2 	bl	8004450 <__sinit>
 8005e6c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005e6e:	07d9      	lsls	r1, r3, #31
 8005e70:	d405      	bmi.n	8005e7e <_vfiprintf_r+0x2a>
 8005e72:	89ab      	ldrh	r3, [r5, #12]
 8005e74:	059a      	lsls	r2, r3, #22
 8005e76:	d402      	bmi.n	8005e7e <_vfiprintf_r+0x2a>
 8005e78:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005e7a:	f7fe fce4 	bl	8004846 <__retarget_lock_acquire_recursive>
 8005e7e:	89ab      	ldrh	r3, [r5, #12]
 8005e80:	071b      	lsls	r3, r3, #28
 8005e82:	d501      	bpl.n	8005e88 <_vfiprintf_r+0x34>
 8005e84:	692b      	ldr	r3, [r5, #16]
 8005e86:	b99b      	cbnz	r3, 8005eb0 <_vfiprintf_r+0x5c>
 8005e88:	4629      	mov	r1, r5
 8005e8a:	4630      	mov	r0, r6
 8005e8c:	f7fe fc08 	bl	80046a0 <__swsetup_r>
 8005e90:	b170      	cbz	r0, 8005eb0 <_vfiprintf_r+0x5c>
 8005e92:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005e94:	07dc      	lsls	r4, r3, #31
 8005e96:	d504      	bpl.n	8005ea2 <_vfiprintf_r+0x4e>
 8005e98:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005e9c:	b01d      	add	sp, #116	@ 0x74
 8005e9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ea2:	89ab      	ldrh	r3, [r5, #12]
 8005ea4:	0598      	lsls	r0, r3, #22
 8005ea6:	d4f7      	bmi.n	8005e98 <_vfiprintf_r+0x44>
 8005ea8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005eaa:	f7fe fccd 	bl	8004848 <__retarget_lock_release_recursive>
 8005eae:	e7f3      	b.n	8005e98 <_vfiprintf_r+0x44>
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	9309      	str	r3, [sp, #36]	@ 0x24
 8005eb4:	2320      	movs	r3, #32
 8005eb6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005eba:	2330      	movs	r3, #48	@ 0x30
 8005ebc:	f04f 0901 	mov.w	r9, #1
 8005ec0:	f8cd 800c 	str.w	r8, [sp, #12]
 8005ec4:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8006070 <_vfiprintf_r+0x21c>
 8005ec8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005ecc:	4623      	mov	r3, r4
 8005ece:	469a      	mov	sl, r3
 8005ed0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005ed4:	b10a      	cbz	r2, 8005eda <_vfiprintf_r+0x86>
 8005ed6:	2a25      	cmp	r2, #37	@ 0x25
 8005ed8:	d1f9      	bne.n	8005ece <_vfiprintf_r+0x7a>
 8005eda:	ebba 0b04 	subs.w	fp, sl, r4
 8005ede:	d00b      	beq.n	8005ef8 <_vfiprintf_r+0xa4>
 8005ee0:	465b      	mov	r3, fp
 8005ee2:	4622      	mov	r2, r4
 8005ee4:	4629      	mov	r1, r5
 8005ee6:	4630      	mov	r0, r6
 8005ee8:	f7ff ffa1 	bl	8005e2e <__sfputs_r>
 8005eec:	3001      	adds	r0, #1
 8005eee:	f000 80a7 	beq.w	8006040 <_vfiprintf_r+0x1ec>
 8005ef2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005ef4:	445a      	add	r2, fp
 8005ef6:	9209      	str	r2, [sp, #36]	@ 0x24
 8005ef8:	f89a 3000 	ldrb.w	r3, [sl]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	f000 809f 	beq.w	8006040 <_vfiprintf_r+0x1ec>
 8005f02:	2300      	movs	r3, #0
 8005f04:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005f08:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005f0c:	f10a 0a01 	add.w	sl, sl, #1
 8005f10:	9304      	str	r3, [sp, #16]
 8005f12:	9307      	str	r3, [sp, #28]
 8005f14:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005f18:	931a      	str	r3, [sp, #104]	@ 0x68
 8005f1a:	4654      	mov	r4, sl
 8005f1c:	2205      	movs	r2, #5
 8005f1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f22:	4853      	ldr	r0, [pc, #332]	@ (8006070 <_vfiprintf_r+0x21c>)
 8005f24:	f7fe fc91 	bl	800484a <memchr>
 8005f28:	9a04      	ldr	r2, [sp, #16]
 8005f2a:	b9d8      	cbnz	r0, 8005f64 <_vfiprintf_r+0x110>
 8005f2c:	06d1      	lsls	r1, r2, #27
 8005f2e:	bf44      	itt	mi
 8005f30:	2320      	movmi	r3, #32
 8005f32:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005f36:	0713      	lsls	r3, r2, #28
 8005f38:	bf44      	itt	mi
 8005f3a:	232b      	movmi	r3, #43	@ 0x2b
 8005f3c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005f40:	f89a 3000 	ldrb.w	r3, [sl]
 8005f44:	2b2a      	cmp	r3, #42	@ 0x2a
 8005f46:	d015      	beq.n	8005f74 <_vfiprintf_r+0x120>
 8005f48:	4654      	mov	r4, sl
 8005f4a:	2000      	movs	r0, #0
 8005f4c:	f04f 0c0a 	mov.w	ip, #10
 8005f50:	9a07      	ldr	r2, [sp, #28]
 8005f52:	4621      	mov	r1, r4
 8005f54:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005f58:	3b30      	subs	r3, #48	@ 0x30
 8005f5a:	2b09      	cmp	r3, #9
 8005f5c:	d94b      	bls.n	8005ff6 <_vfiprintf_r+0x1a2>
 8005f5e:	b1b0      	cbz	r0, 8005f8e <_vfiprintf_r+0x13a>
 8005f60:	9207      	str	r2, [sp, #28]
 8005f62:	e014      	b.n	8005f8e <_vfiprintf_r+0x13a>
 8005f64:	eba0 0308 	sub.w	r3, r0, r8
 8005f68:	fa09 f303 	lsl.w	r3, r9, r3
 8005f6c:	4313      	orrs	r3, r2
 8005f6e:	46a2      	mov	sl, r4
 8005f70:	9304      	str	r3, [sp, #16]
 8005f72:	e7d2      	b.n	8005f1a <_vfiprintf_r+0xc6>
 8005f74:	9b03      	ldr	r3, [sp, #12]
 8005f76:	1d19      	adds	r1, r3, #4
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	9103      	str	r1, [sp, #12]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	bfbb      	ittet	lt
 8005f80:	425b      	neglt	r3, r3
 8005f82:	f042 0202 	orrlt.w	r2, r2, #2
 8005f86:	9307      	strge	r3, [sp, #28]
 8005f88:	9307      	strlt	r3, [sp, #28]
 8005f8a:	bfb8      	it	lt
 8005f8c:	9204      	strlt	r2, [sp, #16]
 8005f8e:	7823      	ldrb	r3, [r4, #0]
 8005f90:	2b2e      	cmp	r3, #46	@ 0x2e
 8005f92:	d10a      	bne.n	8005faa <_vfiprintf_r+0x156>
 8005f94:	7863      	ldrb	r3, [r4, #1]
 8005f96:	2b2a      	cmp	r3, #42	@ 0x2a
 8005f98:	d132      	bne.n	8006000 <_vfiprintf_r+0x1ac>
 8005f9a:	9b03      	ldr	r3, [sp, #12]
 8005f9c:	3402      	adds	r4, #2
 8005f9e:	1d1a      	adds	r2, r3, #4
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	9203      	str	r2, [sp, #12]
 8005fa4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005fa8:	9305      	str	r3, [sp, #20]
 8005faa:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8006074 <_vfiprintf_r+0x220>
 8005fae:	2203      	movs	r2, #3
 8005fb0:	4650      	mov	r0, sl
 8005fb2:	7821      	ldrb	r1, [r4, #0]
 8005fb4:	f7fe fc49 	bl	800484a <memchr>
 8005fb8:	b138      	cbz	r0, 8005fca <_vfiprintf_r+0x176>
 8005fba:	2240      	movs	r2, #64	@ 0x40
 8005fbc:	9b04      	ldr	r3, [sp, #16]
 8005fbe:	eba0 000a 	sub.w	r0, r0, sl
 8005fc2:	4082      	lsls	r2, r0
 8005fc4:	4313      	orrs	r3, r2
 8005fc6:	3401      	adds	r4, #1
 8005fc8:	9304      	str	r3, [sp, #16]
 8005fca:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005fce:	2206      	movs	r2, #6
 8005fd0:	4829      	ldr	r0, [pc, #164]	@ (8006078 <_vfiprintf_r+0x224>)
 8005fd2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005fd6:	f7fe fc38 	bl	800484a <memchr>
 8005fda:	2800      	cmp	r0, #0
 8005fdc:	d03f      	beq.n	800605e <_vfiprintf_r+0x20a>
 8005fde:	4b27      	ldr	r3, [pc, #156]	@ (800607c <_vfiprintf_r+0x228>)
 8005fe0:	bb1b      	cbnz	r3, 800602a <_vfiprintf_r+0x1d6>
 8005fe2:	9b03      	ldr	r3, [sp, #12]
 8005fe4:	3307      	adds	r3, #7
 8005fe6:	f023 0307 	bic.w	r3, r3, #7
 8005fea:	3308      	adds	r3, #8
 8005fec:	9303      	str	r3, [sp, #12]
 8005fee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005ff0:	443b      	add	r3, r7
 8005ff2:	9309      	str	r3, [sp, #36]	@ 0x24
 8005ff4:	e76a      	b.n	8005ecc <_vfiprintf_r+0x78>
 8005ff6:	460c      	mov	r4, r1
 8005ff8:	2001      	movs	r0, #1
 8005ffa:	fb0c 3202 	mla	r2, ip, r2, r3
 8005ffe:	e7a8      	b.n	8005f52 <_vfiprintf_r+0xfe>
 8006000:	2300      	movs	r3, #0
 8006002:	f04f 0c0a 	mov.w	ip, #10
 8006006:	4619      	mov	r1, r3
 8006008:	3401      	adds	r4, #1
 800600a:	9305      	str	r3, [sp, #20]
 800600c:	4620      	mov	r0, r4
 800600e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006012:	3a30      	subs	r2, #48	@ 0x30
 8006014:	2a09      	cmp	r2, #9
 8006016:	d903      	bls.n	8006020 <_vfiprintf_r+0x1cc>
 8006018:	2b00      	cmp	r3, #0
 800601a:	d0c6      	beq.n	8005faa <_vfiprintf_r+0x156>
 800601c:	9105      	str	r1, [sp, #20]
 800601e:	e7c4      	b.n	8005faa <_vfiprintf_r+0x156>
 8006020:	4604      	mov	r4, r0
 8006022:	2301      	movs	r3, #1
 8006024:	fb0c 2101 	mla	r1, ip, r1, r2
 8006028:	e7f0      	b.n	800600c <_vfiprintf_r+0x1b8>
 800602a:	ab03      	add	r3, sp, #12
 800602c:	9300      	str	r3, [sp, #0]
 800602e:	462a      	mov	r2, r5
 8006030:	4630      	mov	r0, r6
 8006032:	4b13      	ldr	r3, [pc, #76]	@ (8006080 <_vfiprintf_r+0x22c>)
 8006034:	a904      	add	r1, sp, #16
 8006036:	f7fd fdc1 	bl	8003bbc <_printf_float>
 800603a:	4607      	mov	r7, r0
 800603c:	1c78      	adds	r0, r7, #1
 800603e:	d1d6      	bne.n	8005fee <_vfiprintf_r+0x19a>
 8006040:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006042:	07d9      	lsls	r1, r3, #31
 8006044:	d405      	bmi.n	8006052 <_vfiprintf_r+0x1fe>
 8006046:	89ab      	ldrh	r3, [r5, #12]
 8006048:	059a      	lsls	r2, r3, #22
 800604a:	d402      	bmi.n	8006052 <_vfiprintf_r+0x1fe>
 800604c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800604e:	f7fe fbfb 	bl	8004848 <__retarget_lock_release_recursive>
 8006052:	89ab      	ldrh	r3, [r5, #12]
 8006054:	065b      	lsls	r3, r3, #25
 8006056:	f53f af1f 	bmi.w	8005e98 <_vfiprintf_r+0x44>
 800605a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800605c:	e71e      	b.n	8005e9c <_vfiprintf_r+0x48>
 800605e:	ab03      	add	r3, sp, #12
 8006060:	9300      	str	r3, [sp, #0]
 8006062:	462a      	mov	r2, r5
 8006064:	4630      	mov	r0, r6
 8006066:	4b06      	ldr	r3, [pc, #24]	@ (8006080 <_vfiprintf_r+0x22c>)
 8006068:	a904      	add	r1, sp, #16
 800606a:	f7fe f845 	bl	80040f8 <_printf_i>
 800606e:	e7e4      	b.n	800603a <_vfiprintf_r+0x1e6>
 8006070:	08006af0 	.word	0x08006af0
 8006074:	08006af6 	.word	0x08006af6
 8006078:	08006afa 	.word	0x08006afa
 800607c:	08003bbd 	.word	0x08003bbd
 8006080:	08005e2f 	.word	0x08005e2f

08006084 <__sflush_r>:
 8006084:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800608a:	0716      	lsls	r6, r2, #28
 800608c:	4605      	mov	r5, r0
 800608e:	460c      	mov	r4, r1
 8006090:	d454      	bmi.n	800613c <__sflush_r+0xb8>
 8006092:	684b      	ldr	r3, [r1, #4]
 8006094:	2b00      	cmp	r3, #0
 8006096:	dc02      	bgt.n	800609e <__sflush_r+0x1a>
 8006098:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800609a:	2b00      	cmp	r3, #0
 800609c:	dd48      	ble.n	8006130 <__sflush_r+0xac>
 800609e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80060a0:	2e00      	cmp	r6, #0
 80060a2:	d045      	beq.n	8006130 <__sflush_r+0xac>
 80060a4:	2300      	movs	r3, #0
 80060a6:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80060aa:	682f      	ldr	r7, [r5, #0]
 80060ac:	6a21      	ldr	r1, [r4, #32]
 80060ae:	602b      	str	r3, [r5, #0]
 80060b0:	d030      	beq.n	8006114 <__sflush_r+0x90>
 80060b2:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80060b4:	89a3      	ldrh	r3, [r4, #12]
 80060b6:	0759      	lsls	r1, r3, #29
 80060b8:	d505      	bpl.n	80060c6 <__sflush_r+0x42>
 80060ba:	6863      	ldr	r3, [r4, #4]
 80060bc:	1ad2      	subs	r2, r2, r3
 80060be:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80060c0:	b10b      	cbz	r3, 80060c6 <__sflush_r+0x42>
 80060c2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80060c4:	1ad2      	subs	r2, r2, r3
 80060c6:	2300      	movs	r3, #0
 80060c8:	4628      	mov	r0, r5
 80060ca:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80060cc:	6a21      	ldr	r1, [r4, #32]
 80060ce:	47b0      	blx	r6
 80060d0:	1c43      	adds	r3, r0, #1
 80060d2:	89a3      	ldrh	r3, [r4, #12]
 80060d4:	d106      	bne.n	80060e4 <__sflush_r+0x60>
 80060d6:	6829      	ldr	r1, [r5, #0]
 80060d8:	291d      	cmp	r1, #29
 80060da:	d82b      	bhi.n	8006134 <__sflush_r+0xb0>
 80060dc:	4a28      	ldr	r2, [pc, #160]	@ (8006180 <__sflush_r+0xfc>)
 80060de:	410a      	asrs	r2, r1
 80060e0:	07d6      	lsls	r6, r2, #31
 80060e2:	d427      	bmi.n	8006134 <__sflush_r+0xb0>
 80060e4:	2200      	movs	r2, #0
 80060e6:	6062      	str	r2, [r4, #4]
 80060e8:	6922      	ldr	r2, [r4, #16]
 80060ea:	04d9      	lsls	r1, r3, #19
 80060ec:	6022      	str	r2, [r4, #0]
 80060ee:	d504      	bpl.n	80060fa <__sflush_r+0x76>
 80060f0:	1c42      	adds	r2, r0, #1
 80060f2:	d101      	bne.n	80060f8 <__sflush_r+0x74>
 80060f4:	682b      	ldr	r3, [r5, #0]
 80060f6:	b903      	cbnz	r3, 80060fa <__sflush_r+0x76>
 80060f8:	6560      	str	r0, [r4, #84]	@ 0x54
 80060fa:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80060fc:	602f      	str	r7, [r5, #0]
 80060fe:	b1b9      	cbz	r1, 8006130 <__sflush_r+0xac>
 8006100:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006104:	4299      	cmp	r1, r3
 8006106:	d002      	beq.n	800610e <__sflush_r+0x8a>
 8006108:	4628      	mov	r0, r5
 800610a:	f7ff f9fd 	bl	8005508 <_free_r>
 800610e:	2300      	movs	r3, #0
 8006110:	6363      	str	r3, [r4, #52]	@ 0x34
 8006112:	e00d      	b.n	8006130 <__sflush_r+0xac>
 8006114:	2301      	movs	r3, #1
 8006116:	4628      	mov	r0, r5
 8006118:	47b0      	blx	r6
 800611a:	4602      	mov	r2, r0
 800611c:	1c50      	adds	r0, r2, #1
 800611e:	d1c9      	bne.n	80060b4 <__sflush_r+0x30>
 8006120:	682b      	ldr	r3, [r5, #0]
 8006122:	2b00      	cmp	r3, #0
 8006124:	d0c6      	beq.n	80060b4 <__sflush_r+0x30>
 8006126:	2b1d      	cmp	r3, #29
 8006128:	d001      	beq.n	800612e <__sflush_r+0xaa>
 800612a:	2b16      	cmp	r3, #22
 800612c:	d11d      	bne.n	800616a <__sflush_r+0xe6>
 800612e:	602f      	str	r7, [r5, #0]
 8006130:	2000      	movs	r0, #0
 8006132:	e021      	b.n	8006178 <__sflush_r+0xf4>
 8006134:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006138:	b21b      	sxth	r3, r3
 800613a:	e01a      	b.n	8006172 <__sflush_r+0xee>
 800613c:	690f      	ldr	r7, [r1, #16]
 800613e:	2f00      	cmp	r7, #0
 8006140:	d0f6      	beq.n	8006130 <__sflush_r+0xac>
 8006142:	0793      	lsls	r3, r2, #30
 8006144:	bf18      	it	ne
 8006146:	2300      	movne	r3, #0
 8006148:	680e      	ldr	r6, [r1, #0]
 800614a:	bf08      	it	eq
 800614c:	694b      	ldreq	r3, [r1, #20]
 800614e:	1bf6      	subs	r6, r6, r7
 8006150:	600f      	str	r7, [r1, #0]
 8006152:	608b      	str	r3, [r1, #8]
 8006154:	2e00      	cmp	r6, #0
 8006156:	ddeb      	ble.n	8006130 <__sflush_r+0xac>
 8006158:	4633      	mov	r3, r6
 800615a:	463a      	mov	r2, r7
 800615c:	4628      	mov	r0, r5
 800615e:	6a21      	ldr	r1, [r4, #32]
 8006160:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8006164:	47e0      	blx	ip
 8006166:	2800      	cmp	r0, #0
 8006168:	dc07      	bgt.n	800617a <__sflush_r+0xf6>
 800616a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800616e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006172:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006176:	81a3      	strh	r3, [r4, #12]
 8006178:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800617a:	4407      	add	r7, r0
 800617c:	1a36      	subs	r6, r6, r0
 800617e:	e7e9      	b.n	8006154 <__sflush_r+0xd0>
 8006180:	dfbffffe 	.word	0xdfbffffe

08006184 <_fflush_r>:
 8006184:	b538      	push	{r3, r4, r5, lr}
 8006186:	690b      	ldr	r3, [r1, #16]
 8006188:	4605      	mov	r5, r0
 800618a:	460c      	mov	r4, r1
 800618c:	b913      	cbnz	r3, 8006194 <_fflush_r+0x10>
 800618e:	2500      	movs	r5, #0
 8006190:	4628      	mov	r0, r5
 8006192:	bd38      	pop	{r3, r4, r5, pc}
 8006194:	b118      	cbz	r0, 800619e <_fflush_r+0x1a>
 8006196:	6a03      	ldr	r3, [r0, #32]
 8006198:	b90b      	cbnz	r3, 800619e <_fflush_r+0x1a>
 800619a:	f7fe f959 	bl	8004450 <__sinit>
 800619e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d0f3      	beq.n	800618e <_fflush_r+0xa>
 80061a6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80061a8:	07d0      	lsls	r0, r2, #31
 80061aa:	d404      	bmi.n	80061b6 <_fflush_r+0x32>
 80061ac:	0599      	lsls	r1, r3, #22
 80061ae:	d402      	bmi.n	80061b6 <_fflush_r+0x32>
 80061b0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80061b2:	f7fe fb48 	bl	8004846 <__retarget_lock_acquire_recursive>
 80061b6:	4628      	mov	r0, r5
 80061b8:	4621      	mov	r1, r4
 80061ba:	f7ff ff63 	bl	8006084 <__sflush_r>
 80061be:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80061c0:	4605      	mov	r5, r0
 80061c2:	07da      	lsls	r2, r3, #31
 80061c4:	d4e4      	bmi.n	8006190 <_fflush_r+0xc>
 80061c6:	89a3      	ldrh	r3, [r4, #12]
 80061c8:	059b      	lsls	r3, r3, #22
 80061ca:	d4e1      	bmi.n	8006190 <_fflush_r+0xc>
 80061cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80061ce:	f7fe fb3b 	bl	8004848 <__retarget_lock_release_recursive>
 80061d2:	e7dd      	b.n	8006190 <_fflush_r+0xc>

080061d4 <__swhatbuf_r>:
 80061d4:	b570      	push	{r4, r5, r6, lr}
 80061d6:	460c      	mov	r4, r1
 80061d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80061dc:	4615      	mov	r5, r2
 80061de:	2900      	cmp	r1, #0
 80061e0:	461e      	mov	r6, r3
 80061e2:	b096      	sub	sp, #88	@ 0x58
 80061e4:	da0c      	bge.n	8006200 <__swhatbuf_r+0x2c>
 80061e6:	89a3      	ldrh	r3, [r4, #12]
 80061e8:	2100      	movs	r1, #0
 80061ea:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80061ee:	bf14      	ite	ne
 80061f0:	2340      	movne	r3, #64	@ 0x40
 80061f2:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80061f6:	2000      	movs	r0, #0
 80061f8:	6031      	str	r1, [r6, #0]
 80061fa:	602b      	str	r3, [r5, #0]
 80061fc:	b016      	add	sp, #88	@ 0x58
 80061fe:	bd70      	pop	{r4, r5, r6, pc}
 8006200:	466a      	mov	r2, sp
 8006202:	f000 f849 	bl	8006298 <_fstat_r>
 8006206:	2800      	cmp	r0, #0
 8006208:	dbed      	blt.n	80061e6 <__swhatbuf_r+0x12>
 800620a:	9901      	ldr	r1, [sp, #4]
 800620c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006210:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006214:	4259      	negs	r1, r3
 8006216:	4159      	adcs	r1, r3
 8006218:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800621c:	e7eb      	b.n	80061f6 <__swhatbuf_r+0x22>

0800621e <__smakebuf_r>:
 800621e:	898b      	ldrh	r3, [r1, #12]
 8006220:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006222:	079d      	lsls	r5, r3, #30
 8006224:	4606      	mov	r6, r0
 8006226:	460c      	mov	r4, r1
 8006228:	d507      	bpl.n	800623a <__smakebuf_r+0x1c>
 800622a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800622e:	6023      	str	r3, [r4, #0]
 8006230:	6123      	str	r3, [r4, #16]
 8006232:	2301      	movs	r3, #1
 8006234:	6163      	str	r3, [r4, #20]
 8006236:	b003      	add	sp, #12
 8006238:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800623a:	466a      	mov	r2, sp
 800623c:	ab01      	add	r3, sp, #4
 800623e:	f7ff ffc9 	bl	80061d4 <__swhatbuf_r>
 8006242:	9f00      	ldr	r7, [sp, #0]
 8006244:	4605      	mov	r5, r0
 8006246:	4639      	mov	r1, r7
 8006248:	4630      	mov	r0, r6
 800624a:	f7ff f9cf 	bl	80055ec <_malloc_r>
 800624e:	b948      	cbnz	r0, 8006264 <__smakebuf_r+0x46>
 8006250:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006254:	059a      	lsls	r2, r3, #22
 8006256:	d4ee      	bmi.n	8006236 <__smakebuf_r+0x18>
 8006258:	f023 0303 	bic.w	r3, r3, #3
 800625c:	f043 0302 	orr.w	r3, r3, #2
 8006260:	81a3      	strh	r3, [r4, #12]
 8006262:	e7e2      	b.n	800622a <__smakebuf_r+0xc>
 8006264:	89a3      	ldrh	r3, [r4, #12]
 8006266:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800626a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800626e:	81a3      	strh	r3, [r4, #12]
 8006270:	9b01      	ldr	r3, [sp, #4]
 8006272:	6020      	str	r0, [r4, #0]
 8006274:	b15b      	cbz	r3, 800628e <__smakebuf_r+0x70>
 8006276:	4630      	mov	r0, r6
 8006278:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800627c:	f000 f81e 	bl	80062bc <_isatty_r>
 8006280:	b128      	cbz	r0, 800628e <__smakebuf_r+0x70>
 8006282:	89a3      	ldrh	r3, [r4, #12]
 8006284:	f023 0303 	bic.w	r3, r3, #3
 8006288:	f043 0301 	orr.w	r3, r3, #1
 800628c:	81a3      	strh	r3, [r4, #12]
 800628e:	89a3      	ldrh	r3, [r4, #12]
 8006290:	431d      	orrs	r5, r3
 8006292:	81a5      	strh	r5, [r4, #12]
 8006294:	e7cf      	b.n	8006236 <__smakebuf_r+0x18>
	...

08006298 <_fstat_r>:
 8006298:	b538      	push	{r3, r4, r5, lr}
 800629a:	2300      	movs	r3, #0
 800629c:	4d06      	ldr	r5, [pc, #24]	@ (80062b8 <_fstat_r+0x20>)
 800629e:	4604      	mov	r4, r0
 80062a0:	4608      	mov	r0, r1
 80062a2:	4611      	mov	r1, r2
 80062a4:	602b      	str	r3, [r5, #0]
 80062a6:	f7fb f967 	bl	8001578 <_fstat>
 80062aa:	1c43      	adds	r3, r0, #1
 80062ac:	d102      	bne.n	80062b4 <_fstat_r+0x1c>
 80062ae:	682b      	ldr	r3, [r5, #0]
 80062b0:	b103      	cbz	r3, 80062b4 <_fstat_r+0x1c>
 80062b2:	6023      	str	r3, [r4, #0]
 80062b4:	bd38      	pop	{r3, r4, r5, pc}
 80062b6:	bf00      	nop
 80062b8:	200003d0 	.word	0x200003d0

080062bc <_isatty_r>:
 80062bc:	b538      	push	{r3, r4, r5, lr}
 80062be:	2300      	movs	r3, #0
 80062c0:	4d05      	ldr	r5, [pc, #20]	@ (80062d8 <_isatty_r+0x1c>)
 80062c2:	4604      	mov	r4, r0
 80062c4:	4608      	mov	r0, r1
 80062c6:	602b      	str	r3, [r5, #0]
 80062c8:	f7fb f965 	bl	8001596 <_isatty>
 80062cc:	1c43      	adds	r3, r0, #1
 80062ce:	d102      	bne.n	80062d6 <_isatty_r+0x1a>
 80062d0:	682b      	ldr	r3, [r5, #0]
 80062d2:	b103      	cbz	r3, 80062d6 <_isatty_r+0x1a>
 80062d4:	6023      	str	r3, [r4, #0]
 80062d6:	bd38      	pop	{r3, r4, r5, pc}
 80062d8:	200003d0 	.word	0x200003d0

080062dc <_sbrk_r>:
 80062dc:	b538      	push	{r3, r4, r5, lr}
 80062de:	2300      	movs	r3, #0
 80062e0:	4d05      	ldr	r5, [pc, #20]	@ (80062f8 <_sbrk_r+0x1c>)
 80062e2:	4604      	mov	r4, r0
 80062e4:	4608      	mov	r0, r1
 80062e6:	602b      	str	r3, [r5, #0]
 80062e8:	f7fb f96c 	bl	80015c4 <_sbrk>
 80062ec:	1c43      	adds	r3, r0, #1
 80062ee:	d102      	bne.n	80062f6 <_sbrk_r+0x1a>
 80062f0:	682b      	ldr	r3, [r5, #0]
 80062f2:	b103      	cbz	r3, 80062f6 <_sbrk_r+0x1a>
 80062f4:	6023      	str	r3, [r4, #0]
 80062f6:	bd38      	pop	{r3, r4, r5, pc}
 80062f8:	200003d0 	.word	0x200003d0

080062fc <memcpy>:
 80062fc:	440a      	add	r2, r1
 80062fe:	4291      	cmp	r1, r2
 8006300:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8006304:	d100      	bne.n	8006308 <memcpy+0xc>
 8006306:	4770      	bx	lr
 8006308:	b510      	push	{r4, lr}
 800630a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800630e:	4291      	cmp	r1, r2
 8006310:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006314:	d1f9      	bne.n	800630a <memcpy+0xe>
 8006316:	bd10      	pop	{r4, pc}

08006318 <__assert_func>:
 8006318:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800631a:	4614      	mov	r4, r2
 800631c:	461a      	mov	r2, r3
 800631e:	4b09      	ldr	r3, [pc, #36]	@ (8006344 <__assert_func+0x2c>)
 8006320:	4605      	mov	r5, r0
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	68d8      	ldr	r0, [r3, #12]
 8006326:	b954      	cbnz	r4, 800633e <__assert_func+0x26>
 8006328:	4b07      	ldr	r3, [pc, #28]	@ (8006348 <__assert_func+0x30>)
 800632a:	461c      	mov	r4, r3
 800632c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006330:	9100      	str	r1, [sp, #0]
 8006332:	462b      	mov	r3, r5
 8006334:	4905      	ldr	r1, [pc, #20]	@ (800634c <__assert_func+0x34>)
 8006336:	f000 f841 	bl	80063bc <fiprintf>
 800633a:	f000 f851 	bl	80063e0 <abort>
 800633e:	4b04      	ldr	r3, [pc, #16]	@ (8006350 <__assert_func+0x38>)
 8006340:	e7f4      	b.n	800632c <__assert_func+0x14>
 8006342:	bf00      	nop
 8006344:	20000018 	.word	0x20000018
 8006348:	08006b46 	.word	0x08006b46
 800634c:	08006b18 	.word	0x08006b18
 8006350:	08006b0b 	.word	0x08006b0b

08006354 <_calloc_r>:
 8006354:	b570      	push	{r4, r5, r6, lr}
 8006356:	fba1 5402 	umull	r5, r4, r1, r2
 800635a:	b93c      	cbnz	r4, 800636c <_calloc_r+0x18>
 800635c:	4629      	mov	r1, r5
 800635e:	f7ff f945 	bl	80055ec <_malloc_r>
 8006362:	4606      	mov	r6, r0
 8006364:	b928      	cbnz	r0, 8006372 <_calloc_r+0x1e>
 8006366:	2600      	movs	r6, #0
 8006368:	4630      	mov	r0, r6
 800636a:	bd70      	pop	{r4, r5, r6, pc}
 800636c:	220c      	movs	r2, #12
 800636e:	6002      	str	r2, [r0, #0]
 8006370:	e7f9      	b.n	8006366 <_calloc_r+0x12>
 8006372:	462a      	mov	r2, r5
 8006374:	4621      	mov	r1, r4
 8006376:	f7fe f9e9 	bl	800474c <memset>
 800637a:	e7f5      	b.n	8006368 <_calloc_r+0x14>

0800637c <__ascii_mbtowc>:
 800637c:	b082      	sub	sp, #8
 800637e:	b901      	cbnz	r1, 8006382 <__ascii_mbtowc+0x6>
 8006380:	a901      	add	r1, sp, #4
 8006382:	b142      	cbz	r2, 8006396 <__ascii_mbtowc+0x1a>
 8006384:	b14b      	cbz	r3, 800639a <__ascii_mbtowc+0x1e>
 8006386:	7813      	ldrb	r3, [r2, #0]
 8006388:	600b      	str	r3, [r1, #0]
 800638a:	7812      	ldrb	r2, [r2, #0]
 800638c:	1e10      	subs	r0, r2, #0
 800638e:	bf18      	it	ne
 8006390:	2001      	movne	r0, #1
 8006392:	b002      	add	sp, #8
 8006394:	4770      	bx	lr
 8006396:	4610      	mov	r0, r2
 8006398:	e7fb      	b.n	8006392 <__ascii_mbtowc+0x16>
 800639a:	f06f 0001 	mvn.w	r0, #1
 800639e:	e7f8      	b.n	8006392 <__ascii_mbtowc+0x16>

080063a0 <__ascii_wctomb>:
 80063a0:	4603      	mov	r3, r0
 80063a2:	4608      	mov	r0, r1
 80063a4:	b141      	cbz	r1, 80063b8 <__ascii_wctomb+0x18>
 80063a6:	2aff      	cmp	r2, #255	@ 0xff
 80063a8:	d904      	bls.n	80063b4 <__ascii_wctomb+0x14>
 80063aa:	228a      	movs	r2, #138	@ 0x8a
 80063ac:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80063b0:	601a      	str	r2, [r3, #0]
 80063b2:	4770      	bx	lr
 80063b4:	2001      	movs	r0, #1
 80063b6:	700a      	strb	r2, [r1, #0]
 80063b8:	4770      	bx	lr
	...

080063bc <fiprintf>:
 80063bc:	b40e      	push	{r1, r2, r3}
 80063be:	b503      	push	{r0, r1, lr}
 80063c0:	4601      	mov	r1, r0
 80063c2:	ab03      	add	r3, sp, #12
 80063c4:	4805      	ldr	r0, [pc, #20]	@ (80063dc <fiprintf+0x20>)
 80063c6:	f853 2b04 	ldr.w	r2, [r3], #4
 80063ca:	6800      	ldr	r0, [r0, #0]
 80063cc:	9301      	str	r3, [sp, #4]
 80063ce:	f7ff fd41 	bl	8005e54 <_vfiprintf_r>
 80063d2:	b002      	add	sp, #8
 80063d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80063d8:	b003      	add	sp, #12
 80063da:	4770      	bx	lr
 80063dc:	20000018 	.word	0x20000018

080063e0 <abort>:
 80063e0:	2006      	movs	r0, #6
 80063e2:	b508      	push	{r3, lr}
 80063e4:	f000 f82c 	bl	8006440 <raise>
 80063e8:	2001      	movs	r0, #1
 80063ea:	f7fb f876 	bl	80014da <_exit>

080063ee <_raise_r>:
 80063ee:	291f      	cmp	r1, #31
 80063f0:	b538      	push	{r3, r4, r5, lr}
 80063f2:	4605      	mov	r5, r0
 80063f4:	460c      	mov	r4, r1
 80063f6:	d904      	bls.n	8006402 <_raise_r+0x14>
 80063f8:	2316      	movs	r3, #22
 80063fa:	6003      	str	r3, [r0, #0]
 80063fc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006400:	bd38      	pop	{r3, r4, r5, pc}
 8006402:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8006404:	b112      	cbz	r2, 800640c <_raise_r+0x1e>
 8006406:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800640a:	b94b      	cbnz	r3, 8006420 <_raise_r+0x32>
 800640c:	4628      	mov	r0, r5
 800640e:	f000 f831 	bl	8006474 <_getpid_r>
 8006412:	4622      	mov	r2, r4
 8006414:	4601      	mov	r1, r0
 8006416:	4628      	mov	r0, r5
 8006418:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800641c:	f000 b818 	b.w	8006450 <_kill_r>
 8006420:	2b01      	cmp	r3, #1
 8006422:	d00a      	beq.n	800643a <_raise_r+0x4c>
 8006424:	1c59      	adds	r1, r3, #1
 8006426:	d103      	bne.n	8006430 <_raise_r+0x42>
 8006428:	2316      	movs	r3, #22
 800642a:	6003      	str	r3, [r0, #0]
 800642c:	2001      	movs	r0, #1
 800642e:	e7e7      	b.n	8006400 <_raise_r+0x12>
 8006430:	2100      	movs	r1, #0
 8006432:	4620      	mov	r0, r4
 8006434:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8006438:	4798      	blx	r3
 800643a:	2000      	movs	r0, #0
 800643c:	e7e0      	b.n	8006400 <_raise_r+0x12>
	...

08006440 <raise>:
 8006440:	4b02      	ldr	r3, [pc, #8]	@ (800644c <raise+0xc>)
 8006442:	4601      	mov	r1, r0
 8006444:	6818      	ldr	r0, [r3, #0]
 8006446:	f7ff bfd2 	b.w	80063ee <_raise_r>
 800644a:	bf00      	nop
 800644c:	20000018 	.word	0x20000018

08006450 <_kill_r>:
 8006450:	b538      	push	{r3, r4, r5, lr}
 8006452:	2300      	movs	r3, #0
 8006454:	4d06      	ldr	r5, [pc, #24]	@ (8006470 <_kill_r+0x20>)
 8006456:	4604      	mov	r4, r0
 8006458:	4608      	mov	r0, r1
 800645a:	4611      	mov	r1, r2
 800645c:	602b      	str	r3, [r5, #0]
 800645e:	f7fb f82c 	bl	80014ba <_kill>
 8006462:	1c43      	adds	r3, r0, #1
 8006464:	d102      	bne.n	800646c <_kill_r+0x1c>
 8006466:	682b      	ldr	r3, [r5, #0]
 8006468:	b103      	cbz	r3, 800646c <_kill_r+0x1c>
 800646a:	6023      	str	r3, [r4, #0]
 800646c:	bd38      	pop	{r3, r4, r5, pc}
 800646e:	bf00      	nop
 8006470:	200003d0 	.word	0x200003d0

08006474 <_getpid_r>:
 8006474:	f7fb b81a 	b.w	80014ac <_getpid>

08006478 <log>:
 8006478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800647a:	4604      	mov	r4, r0
 800647c:	460d      	mov	r5, r1
 800647e:	f000 f833 	bl	80064e8 <__ieee754_log>
 8006482:	4622      	mov	r2, r4
 8006484:	4606      	mov	r6, r0
 8006486:	460f      	mov	r7, r1
 8006488:	462b      	mov	r3, r5
 800648a:	4620      	mov	r0, r4
 800648c:	4629      	mov	r1, r5
 800648e:	f7fa fabd 	bl	8000a0c <__aeabi_dcmpun>
 8006492:	b998      	cbnz	r0, 80064bc <log+0x44>
 8006494:	2200      	movs	r2, #0
 8006496:	2300      	movs	r3, #0
 8006498:	4620      	mov	r0, r4
 800649a:	4629      	mov	r1, r5
 800649c:	f7fa faac 	bl	80009f8 <__aeabi_dcmpgt>
 80064a0:	b960      	cbnz	r0, 80064bc <log+0x44>
 80064a2:	2200      	movs	r2, #0
 80064a4:	2300      	movs	r3, #0
 80064a6:	4620      	mov	r0, r4
 80064a8:	4629      	mov	r1, r5
 80064aa:	f7fa fa7d 	bl	80009a8 <__aeabi_dcmpeq>
 80064ae:	b140      	cbz	r0, 80064c2 <log+0x4a>
 80064b0:	f7fe f99e 	bl	80047f0 <__errno>
 80064b4:	2322      	movs	r3, #34	@ 0x22
 80064b6:	2600      	movs	r6, #0
 80064b8:	4f06      	ldr	r7, [pc, #24]	@ (80064d4 <log+0x5c>)
 80064ba:	6003      	str	r3, [r0, #0]
 80064bc:	4630      	mov	r0, r6
 80064be:	4639      	mov	r1, r7
 80064c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80064c2:	f7fe f995 	bl	80047f0 <__errno>
 80064c6:	2321      	movs	r3, #33	@ 0x21
 80064c8:	6003      	str	r3, [r0, #0]
 80064ca:	4803      	ldr	r0, [pc, #12]	@ (80064d8 <log+0x60>)
 80064cc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80064d0:	f000 b804 	b.w	80064dc <nan>
 80064d4:	fff00000 	.word	0xfff00000
 80064d8:	08006b46 	.word	0x08006b46

080064dc <nan>:
 80064dc:	2000      	movs	r0, #0
 80064de:	4901      	ldr	r1, [pc, #4]	@ (80064e4 <nan+0x8>)
 80064e0:	4770      	bx	lr
 80064e2:	bf00      	nop
 80064e4:	7ff80000 	.word	0x7ff80000

080064e8 <__ieee754_log>:
 80064e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064ec:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80064f0:	4602      	mov	r2, r0
 80064f2:	460b      	mov	r3, r1
 80064f4:	460d      	mov	r5, r1
 80064f6:	b087      	sub	sp, #28
 80064f8:	da24      	bge.n	8006544 <__ieee754_log+0x5c>
 80064fa:	f021 4400 	bic.w	r4, r1, #2147483648	@ 0x80000000
 80064fe:	4304      	orrs	r4, r0
 8006500:	d108      	bne.n	8006514 <__ieee754_log+0x2c>
 8006502:	2200      	movs	r2, #0
 8006504:	2300      	movs	r3, #0
 8006506:	2000      	movs	r0, #0
 8006508:	49cb      	ldr	r1, [pc, #812]	@ (8006838 <__ieee754_log+0x350>)
 800650a:	f7fa f90f 	bl	800072c <__aeabi_ddiv>
 800650e:	b007      	add	sp, #28
 8006510:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006514:	2900      	cmp	r1, #0
 8006516:	da04      	bge.n	8006522 <__ieee754_log+0x3a>
 8006518:	f7f9 fe26 	bl	8000168 <__aeabi_dsub>
 800651c:	2200      	movs	r2, #0
 800651e:	2300      	movs	r3, #0
 8006520:	e7f3      	b.n	800650a <__ieee754_log+0x22>
 8006522:	2200      	movs	r2, #0
 8006524:	4bc5      	ldr	r3, [pc, #788]	@ (800683c <__ieee754_log+0x354>)
 8006526:	f7f9 ffd7 	bl	80004d8 <__aeabi_dmul>
 800652a:	460b      	mov	r3, r1
 800652c:	460d      	mov	r5, r1
 800652e:	4602      	mov	r2, r0
 8006530:	f06f 0135 	mvn.w	r1, #53	@ 0x35
 8006534:	48c2      	ldr	r0, [pc, #776]	@ (8006840 <__ieee754_log+0x358>)
 8006536:	4285      	cmp	r5, r0
 8006538:	dd06      	ble.n	8006548 <__ieee754_log+0x60>
 800653a:	4610      	mov	r0, r2
 800653c:	4619      	mov	r1, r3
 800653e:	f7f9 fe15 	bl	800016c <__adddf3>
 8006542:	e7e4      	b.n	800650e <__ieee754_log+0x26>
 8006544:	2100      	movs	r1, #0
 8006546:	e7f5      	b.n	8006534 <__ieee754_log+0x4c>
 8006548:	152c      	asrs	r4, r5, #20
 800654a:	f2a4 34ff 	subw	r4, r4, #1023	@ 0x3ff
 800654e:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8006552:	440c      	add	r4, r1
 8006554:	f505 2115 	add.w	r1, r5, #610304	@ 0x95000
 8006558:	f601 7164 	addw	r1, r1, #3940	@ 0xf64
 800655c:	f401 1680 	and.w	r6, r1, #1048576	@ 0x100000
 8006560:	f086 517f 	eor.w	r1, r6, #1069547520	@ 0x3fc00000
 8006564:	f481 1140 	eor.w	r1, r1, #3145728	@ 0x300000
 8006568:	ea41 0305 	orr.w	r3, r1, r5
 800656c:	4610      	mov	r0, r2
 800656e:	4619      	mov	r1, r3
 8006570:	2200      	movs	r2, #0
 8006572:	4bb4      	ldr	r3, [pc, #720]	@ (8006844 <__ieee754_log+0x35c>)
 8006574:	f7f9 fdf8 	bl	8000168 <__aeabi_dsub>
 8006578:	1cab      	adds	r3, r5, #2
 800657a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800657e:	2b02      	cmp	r3, #2
 8006580:	4682      	mov	sl, r0
 8006582:	468b      	mov	fp, r1
 8006584:	f04f 0200 	mov.w	r2, #0
 8006588:	eb04 5416 	add.w	r4, r4, r6, lsr #20
 800658c:	dc53      	bgt.n	8006636 <__ieee754_log+0x14e>
 800658e:	2300      	movs	r3, #0
 8006590:	f7fa fa0a 	bl	80009a8 <__aeabi_dcmpeq>
 8006594:	b1d0      	cbz	r0, 80065cc <__ieee754_log+0xe4>
 8006596:	2c00      	cmp	r4, #0
 8006598:	f000 8120 	beq.w	80067dc <__ieee754_log+0x2f4>
 800659c:	4620      	mov	r0, r4
 800659e:	f7f9 ff31 	bl	8000404 <__aeabi_i2d>
 80065a2:	a391      	add	r3, pc, #580	@ (adr r3, 80067e8 <__ieee754_log+0x300>)
 80065a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065a8:	4606      	mov	r6, r0
 80065aa:	460f      	mov	r7, r1
 80065ac:	f7f9 ff94 	bl	80004d8 <__aeabi_dmul>
 80065b0:	a38f      	add	r3, pc, #572	@ (adr r3, 80067f0 <__ieee754_log+0x308>)
 80065b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065b6:	4604      	mov	r4, r0
 80065b8:	460d      	mov	r5, r1
 80065ba:	4630      	mov	r0, r6
 80065bc:	4639      	mov	r1, r7
 80065be:	f7f9 ff8b 	bl	80004d8 <__aeabi_dmul>
 80065c2:	4602      	mov	r2, r0
 80065c4:	460b      	mov	r3, r1
 80065c6:	4620      	mov	r0, r4
 80065c8:	4629      	mov	r1, r5
 80065ca:	e7b8      	b.n	800653e <__ieee754_log+0x56>
 80065cc:	a38a      	add	r3, pc, #552	@ (adr r3, 80067f8 <__ieee754_log+0x310>)
 80065ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065d2:	4650      	mov	r0, sl
 80065d4:	4659      	mov	r1, fp
 80065d6:	f7f9 ff7f 	bl	80004d8 <__aeabi_dmul>
 80065da:	4602      	mov	r2, r0
 80065dc:	460b      	mov	r3, r1
 80065de:	2000      	movs	r0, #0
 80065e0:	4999      	ldr	r1, [pc, #612]	@ (8006848 <__ieee754_log+0x360>)
 80065e2:	f7f9 fdc1 	bl	8000168 <__aeabi_dsub>
 80065e6:	4652      	mov	r2, sl
 80065e8:	4606      	mov	r6, r0
 80065ea:	460f      	mov	r7, r1
 80065ec:	465b      	mov	r3, fp
 80065ee:	4650      	mov	r0, sl
 80065f0:	4659      	mov	r1, fp
 80065f2:	f7f9 ff71 	bl	80004d8 <__aeabi_dmul>
 80065f6:	4602      	mov	r2, r0
 80065f8:	460b      	mov	r3, r1
 80065fa:	4630      	mov	r0, r6
 80065fc:	4639      	mov	r1, r7
 80065fe:	f7f9 ff6b 	bl	80004d8 <__aeabi_dmul>
 8006602:	4606      	mov	r6, r0
 8006604:	460f      	mov	r7, r1
 8006606:	b914      	cbnz	r4, 800660e <__ieee754_log+0x126>
 8006608:	4632      	mov	r2, r6
 800660a:	463b      	mov	r3, r7
 800660c:	e0a0      	b.n	8006750 <__ieee754_log+0x268>
 800660e:	4620      	mov	r0, r4
 8006610:	f7f9 fef8 	bl	8000404 <__aeabi_i2d>
 8006614:	a374      	add	r3, pc, #464	@ (adr r3, 80067e8 <__ieee754_log+0x300>)
 8006616:	e9d3 2300 	ldrd	r2, r3, [r3]
 800661a:	4680      	mov	r8, r0
 800661c:	4689      	mov	r9, r1
 800661e:	f7f9 ff5b 	bl	80004d8 <__aeabi_dmul>
 8006622:	a373      	add	r3, pc, #460	@ (adr r3, 80067f0 <__ieee754_log+0x308>)
 8006624:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006628:	4604      	mov	r4, r0
 800662a:	460d      	mov	r5, r1
 800662c:	4640      	mov	r0, r8
 800662e:	4649      	mov	r1, r9
 8006630:	f7f9 ff52 	bl	80004d8 <__aeabi_dmul>
 8006634:	e0a5      	b.n	8006782 <__ieee754_log+0x29a>
 8006636:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800663a:	f7f9 fd97 	bl	800016c <__adddf3>
 800663e:	4602      	mov	r2, r0
 8006640:	460b      	mov	r3, r1
 8006642:	4650      	mov	r0, sl
 8006644:	4659      	mov	r1, fp
 8006646:	f7fa f871 	bl	800072c <__aeabi_ddiv>
 800664a:	e9cd 0100 	strd	r0, r1, [sp]
 800664e:	4620      	mov	r0, r4
 8006650:	f7f9 fed8 	bl	8000404 <__aeabi_i2d>
 8006654:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006658:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800665c:	4610      	mov	r0, r2
 800665e:	4619      	mov	r1, r3
 8006660:	f7f9 ff3a 	bl	80004d8 <__aeabi_dmul>
 8006664:	4602      	mov	r2, r0
 8006666:	460b      	mov	r3, r1
 8006668:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800666c:	f7f9 ff34 	bl	80004d8 <__aeabi_dmul>
 8006670:	a363      	add	r3, pc, #396	@ (adr r3, 8006800 <__ieee754_log+0x318>)
 8006672:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006676:	4680      	mov	r8, r0
 8006678:	4689      	mov	r9, r1
 800667a:	f7f9 ff2d 	bl	80004d8 <__aeabi_dmul>
 800667e:	a362      	add	r3, pc, #392	@ (adr r3, 8006808 <__ieee754_log+0x320>)
 8006680:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006684:	f7f9 fd72 	bl	800016c <__adddf3>
 8006688:	4642      	mov	r2, r8
 800668a:	464b      	mov	r3, r9
 800668c:	f7f9 ff24 	bl	80004d8 <__aeabi_dmul>
 8006690:	a35f      	add	r3, pc, #380	@ (adr r3, 8006810 <__ieee754_log+0x328>)
 8006692:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006696:	f7f9 fd69 	bl	800016c <__adddf3>
 800669a:	4642      	mov	r2, r8
 800669c:	464b      	mov	r3, r9
 800669e:	f7f9 ff1b 	bl	80004d8 <__aeabi_dmul>
 80066a2:	a35d      	add	r3, pc, #372	@ (adr r3, 8006818 <__ieee754_log+0x330>)
 80066a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066a8:	f7f9 fd60 	bl	800016c <__adddf3>
 80066ac:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80066b0:	f7f9 ff12 	bl	80004d8 <__aeabi_dmul>
 80066b4:	a35a      	add	r3, pc, #360	@ (adr r3, 8006820 <__ieee754_log+0x338>)
 80066b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066ba:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80066be:	4640      	mov	r0, r8
 80066c0:	4649      	mov	r1, r9
 80066c2:	f7f9 ff09 	bl	80004d8 <__aeabi_dmul>
 80066c6:	a358      	add	r3, pc, #352	@ (adr r3, 8006828 <__ieee754_log+0x340>)
 80066c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066cc:	f7f9 fd4e 	bl	800016c <__adddf3>
 80066d0:	4642      	mov	r2, r8
 80066d2:	464b      	mov	r3, r9
 80066d4:	f7f9 ff00 	bl	80004d8 <__aeabi_dmul>
 80066d8:	a355      	add	r3, pc, #340	@ (adr r3, 8006830 <__ieee754_log+0x348>)
 80066da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066de:	f7f9 fd45 	bl	800016c <__adddf3>
 80066e2:	4642      	mov	r2, r8
 80066e4:	464b      	mov	r3, r9
 80066e6:	f7f9 fef7 	bl	80004d8 <__aeabi_dmul>
 80066ea:	4602      	mov	r2, r0
 80066ec:	460b      	mov	r3, r1
 80066ee:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80066f2:	f7f9 fd3b 	bl	800016c <__adddf3>
 80066f6:	f5a5 26c2 	sub.w	r6, r5, #397312	@ 0x61000
 80066fa:	f5c5 25d7 	rsb	r5, r5, #440320	@ 0x6b800
 80066fe:	f2a6 467a 	subw	r6, r6, #1146	@ 0x47a
 8006702:	3551      	adds	r5, #81	@ 0x51
 8006704:	4335      	orrs	r5, r6
 8006706:	2d00      	cmp	r5, #0
 8006708:	4680      	mov	r8, r0
 800670a:	4689      	mov	r9, r1
 800670c:	dd48      	ble.n	80067a0 <__ieee754_log+0x2b8>
 800670e:	2200      	movs	r2, #0
 8006710:	4b4d      	ldr	r3, [pc, #308]	@ (8006848 <__ieee754_log+0x360>)
 8006712:	4650      	mov	r0, sl
 8006714:	4659      	mov	r1, fp
 8006716:	f7f9 fedf 	bl	80004d8 <__aeabi_dmul>
 800671a:	4652      	mov	r2, sl
 800671c:	465b      	mov	r3, fp
 800671e:	f7f9 fedb 	bl	80004d8 <__aeabi_dmul>
 8006722:	4602      	mov	r2, r0
 8006724:	460b      	mov	r3, r1
 8006726:	4606      	mov	r6, r0
 8006728:	460f      	mov	r7, r1
 800672a:	4640      	mov	r0, r8
 800672c:	4649      	mov	r1, r9
 800672e:	f7f9 fd1d 	bl	800016c <__adddf3>
 8006732:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006736:	f7f9 fecf 	bl	80004d8 <__aeabi_dmul>
 800673a:	4680      	mov	r8, r0
 800673c:	4689      	mov	r9, r1
 800673e:	b964      	cbnz	r4, 800675a <__ieee754_log+0x272>
 8006740:	4602      	mov	r2, r0
 8006742:	460b      	mov	r3, r1
 8006744:	4630      	mov	r0, r6
 8006746:	4639      	mov	r1, r7
 8006748:	f7f9 fd0e 	bl	8000168 <__aeabi_dsub>
 800674c:	4602      	mov	r2, r0
 800674e:	460b      	mov	r3, r1
 8006750:	4650      	mov	r0, sl
 8006752:	4659      	mov	r1, fp
 8006754:	f7f9 fd08 	bl	8000168 <__aeabi_dsub>
 8006758:	e6d9      	b.n	800650e <__ieee754_log+0x26>
 800675a:	a323      	add	r3, pc, #140	@ (adr r3, 80067e8 <__ieee754_log+0x300>)
 800675c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006760:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006764:	f7f9 feb8 	bl	80004d8 <__aeabi_dmul>
 8006768:	a321      	add	r3, pc, #132	@ (adr r3, 80067f0 <__ieee754_log+0x308>)
 800676a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800676e:	4604      	mov	r4, r0
 8006770:	460d      	mov	r5, r1
 8006772:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006776:	f7f9 feaf 	bl	80004d8 <__aeabi_dmul>
 800677a:	4642      	mov	r2, r8
 800677c:	464b      	mov	r3, r9
 800677e:	f7f9 fcf5 	bl	800016c <__adddf3>
 8006782:	4602      	mov	r2, r0
 8006784:	460b      	mov	r3, r1
 8006786:	4630      	mov	r0, r6
 8006788:	4639      	mov	r1, r7
 800678a:	f7f9 fced 	bl	8000168 <__aeabi_dsub>
 800678e:	4652      	mov	r2, sl
 8006790:	465b      	mov	r3, fp
 8006792:	f7f9 fce9 	bl	8000168 <__aeabi_dsub>
 8006796:	4602      	mov	r2, r0
 8006798:	460b      	mov	r3, r1
 800679a:	4620      	mov	r0, r4
 800679c:	4629      	mov	r1, r5
 800679e:	e7d9      	b.n	8006754 <__ieee754_log+0x26c>
 80067a0:	4602      	mov	r2, r0
 80067a2:	460b      	mov	r3, r1
 80067a4:	4650      	mov	r0, sl
 80067a6:	4659      	mov	r1, fp
 80067a8:	f7f9 fcde 	bl	8000168 <__aeabi_dsub>
 80067ac:	e9dd 2300 	ldrd	r2, r3, [sp]
 80067b0:	f7f9 fe92 	bl	80004d8 <__aeabi_dmul>
 80067b4:	4606      	mov	r6, r0
 80067b6:	460f      	mov	r7, r1
 80067b8:	2c00      	cmp	r4, #0
 80067ba:	f43f af25 	beq.w	8006608 <__ieee754_log+0x120>
 80067be:	a30a      	add	r3, pc, #40	@ (adr r3, 80067e8 <__ieee754_log+0x300>)
 80067c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067c4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80067c8:	f7f9 fe86 	bl	80004d8 <__aeabi_dmul>
 80067cc:	a308      	add	r3, pc, #32	@ (adr r3, 80067f0 <__ieee754_log+0x308>)
 80067ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067d2:	4604      	mov	r4, r0
 80067d4:	460d      	mov	r5, r1
 80067d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80067da:	e729      	b.n	8006630 <__ieee754_log+0x148>
 80067dc:	2000      	movs	r0, #0
 80067de:	2100      	movs	r1, #0
 80067e0:	e695      	b.n	800650e <__ieee754_log+0x26>
 80067e2:	bf00      	nop
 80067e4:	f3af 8000 	nop.w
 80067e8:	fee00000 	.word	0xfee00000
 80067ec:	3fe62e42 	.word	0x3fe62e42
 80067f0:	35793c76 	.word	0x35793c76
 80067f4:	3dea39ef 	.word	0x3dea39ef
 80067f8:	55555555 	.word	0x55555555
 80067fc:	3fd55555 	.word	0x3fd55555
 8006800:	df3e5244 	.word	0xdf3e5244
 8006804:	3fc2f112 	.word	0x3fc2f112
 8006808:	96cb03de 	.word	0x96cb03de
 800680c:	3fc74664 	.word	0x3fc74664
 8006810:	94229359 	.word	0x94229359
 8006814:	3fd24924 	.word	0x3fd24924
 8006818:	55555593 	.word	0x55555593
 800681c:	3fe55555 	.word	0x3fe55555
 8006820:	d078c69f 	.word	0xd078c69f
 8006824:	3fc39a09 	.word	0x3fc39a09
 8006828:	1d8e78af 	.word	0x1d8e78af
 800682c:	3fcc71c5 	.word	0x3fcc71c5
 8006830:	9997fa04 	.word	0x9997fa04
 8006834:	3fd99999 	.word	0x3fd99999
 8006838:	c3500000 	.word	0xc3500000
 800683c:	43500000 	.word	0x43500000
 8006840:	7fefffff 	.word	0x7fefffff
 8006844:	3ff00000 	.word	0x3ff00000
 8006848:	3fe00000 	.word	0x3fe00000

0800684c <_init>:
 800684c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800684e:	bf00      	nop
 8006850:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006852:	bc08      	pop	{r3}
 8006854:	469e      	mov	lr, r3
 8006856:	4770      	bx	lr

08006858 <_fini>:
 8006858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800685a:	bf00      	nop
 800685c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800685e:	bc08      	pop	{r3}
 8006860:	469e      	mov	lr, r3
 8006862:	4770      	bx	lr
